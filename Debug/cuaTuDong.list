
cuaTuDong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e64  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001ff8  08001ff8  00002ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002000  08002000  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002000  08002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002008  08002008  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002008  08002008  00003008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800200c  0800200c  0000300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002010  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  0800201c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  0800201c  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d5b  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd3  00000000  00000000  0000dd97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0000fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000618  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ca9  00000000  00000000  000109b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1d4  00000000  00000000  00026659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000855fa  00000000  00000000  0003182d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6e27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ea4  00000000  00000000  000b6e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b8d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001fe0 	.word	0x08001fe0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001fe0 	.word	0x08001fe0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <EXTI_ClearPendingBit>:

    NVIC_SetPriority(irq_number, priority);
    NVIC_EnableIRQ(irq_number);
}

void EXTI_ClearPendingBit(uint8_t exti_line) {
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
    if (exti_line > 15) return;
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b0f      	cmp	r3, #15
 80004d2:	d806      	bhi.n	80004e2 <EXTI_ClearPendingBit+0x1e>
    // Ghi 1 vào bit tương ứng trong Pending Register để xóa nó
    EXTI->PR = (1U << exti_line);
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <EXTI_ClearPendingBit+0x2c>)
 80004d8:	2101      	movs	r1, #1
 80004da:	fa01 f303 	lsl.w	r3, r1, r3
 80004de:	6153      	str	r3, [r2, #20]
 80004e0:	e000      	b.n	80004e4 <EXTI_ClearPendingBit+0x20>
    if (exti_line > 15) return;
 80004e2:	bf00      	nop
}
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40013c00 	.word	0x40013c00

080004f4 <EXTI_IRQHandler_Helper>:
// --- Trình xử lý ngắt (ISRs) ---
// Các hàm này cần được định nghĩa với tên chính xác như trong vector ngắt.
// Chúng sẽ kiểm tra cờ pending và gọi callback tương ứng.

// Helper function để xử lý logic chung trong ISR
static void EXTI_IRQHandler_Helper(uint8_t exti_line_start, uint8_t exti_line_end) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	73fb      	strb	r3, [r7, #15]
 8000508:	e01c      	b.n	8000544 <EXTI_IRQHandler_Helper+0x50>
        // Kiểm tra cờ Pending Bit cho từng line
        if ((EXTI->PR & (1U << line)) != 0) {
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <EXTI_IRQHandler_Helper+0x64>)
 800050c:	695a      	ldr	r2, [r3, #20]
 800050e:	7bfb      	ldrb	r3, [r7, #15]
 8000510:	2101      	movs	r1, #1
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	4013      	ands	r3, r2
 8000518:	2b00      	cmp	r3, #0
 800051a:	d010      	beq.n	800053e <EXTI_IRQHandler_Helper+0x4a>
            // Xóa Pending Bit trước khi gọi callback (quan trọng!)
            EXTI_ClearPendingBit(line);
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ffd0 	bl	80004c4 <EXTI_ClearPendingBit>

            // Gọi callback nếu có
            if (g_exti_callbacks[line] != NULL) {
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <EXTI_IRQHandler_Helper+0x68>)
 8000528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d006      	beq.n	800053e <EXTI_IRQHandler_Helper+0x4a>
                g_exti_callbacks[line](line);
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	4a0a      	ldr	r2, [pc, #40]	@ (800055c <EXTI_IRQHandler_Helper+0x68>)
 8000534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000538:	7bfa      	ldrb	r2, [r7, #15]
 800053a:	4610      	mov	r0, r2
 800053c:	4798      	blx	r3
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	3301      	adds	r3, #1
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	7bfa      	ldrb	r2, [r7, #15]
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	429a      	cmp	r2, r3
 800054a:	d9de      	bls.n	800050a <EXTI_IRQHandler_Helper+0x16>
            }
        }
    }
}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40013c00 	.word	0x40013c00
 800055c:	20000028 	.word	0x20000028

08000560 <EXTI0_IRQHandler>:

// ISR cho EXTI Line 0
void EXTI0_IRQHandler(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(0, 0);
 8000564:	2100      	movs	r1, #0
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ffc4 	bl	80004f4 <EXTI_IRQHandler_Helper>
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <EXTI1_IRQHandler>:

// ISR cho EXTI Line 1
void EXTI1_IRQHandler(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(1, 1);
 8000574:	2101      	movs	r1, #1
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ffbc 	bl	80004f4 <EXTI_IRQHandler_Helper>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <EXTI2_IRQHandler>:

// ISR cho EXTI Line 2
void EXTI2_IRQHandler(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(2, 2);
 8000584:	2102      	movs	r1, #2
 8000586:	2002      	movs	r0, #2
 8000588:	f7ff ffb4 	bl	80004f4 <EXTI_IRQHandler_Helper>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <EXTI3_IRQHandler>:

// ISR cho EXTI Line 3
void EXTI3_IRQHandler(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(3, 3);
 8000594:	2103      	movs	r1, #3
 8000596:	2003      	movs	r0, #3
 8000598:	f7ff ffac 	bl	80004f4 <EXTI_IRQHandler_Helper>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <EXTI4_IRQHandler>:

// ISR cho EXTI Line 4
void EXTI4_IRQHandler(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(4, 4);
 80005a4:	2104      	movs	r1, #4
 80005a6:	2004      	movs	r0, #4
 80005a8:	f7ff ffa4 	bl	80004f4 <EXTI_IRQHandler_Helper>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <EXTI9_5_IRQHandler>:

// ISR cho EXTI Lines 5 đến 9
void EXTI9_5_IRQHandler(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(5, 9);
 80005b4:	2109      	movs	r1, #9
 80005b6:	2005      	movs	r0, #5
 80005b8:	f7ff ff9c 	bl	80004f4 <EXTI_IRQHandler_Helper>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <EXTI15_10_IRQHandler>:

// ISR cho EXTI Lines 10 đến 15
void EXTI15_10_IRQHandler(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(10, 15);
 80005c4:	210f      	movs	r1, #15
 80005c6:	200a      	movs	r0, #10
 80005c8:	f7ff ff94 	bl	80004f4 <EXTI_IRQHandler_Helper>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <GPIO_ClockCmd>:
 */

#include "gpio_driver.h"

// Helper function to enable/disable clock for GPIO port
void GPIO_ClockCmd(GPIO_TypeDef* GPIOx, uint8_t NewState) {
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
    if (NewState == CLOCK_CMD_ENABLE) {
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d141      	bne.n	8000666 <GPIO_ClockCmd+0x96>
        if (GPIOx == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	@ (80006e0 <GPIO_ClockCmd+0x110>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d106      	bne.n	80005f8 <GPIO_ClockCmd+0x28>
 80005ea:	4b3e      	ldr	r3, [pc, #248]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a3d      	ldr	r2, [pc, #244]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
        // ...
    }
}
 80005f6:	e06c      	b.n	80006d2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a3b      	ldr	r2, [pc, #236]	@ (80006e8 <GPIO_ClockCmd+0x118>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d106      	bne.n	800060e <GPIO_ClockCmd+0x3e>
 8000600:	4b38      	ldr	r3, [pc, #224]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000604:	4a37      	ldr	r2, [pc, #220]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800060c:	e061      	b.n	80006d2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a36      	ldr	r2, [pc, #216]	@ (80006ec <GPIO_ClockCmd+0x11c>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d106      	bne.n	8000624 <GPIO_ClockCmd+0x54>
 8000616:	4b33      	ldr	r3, [pc, #204]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a32      	ldr	r2, [pc, #200]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000622:	e056      	b.n	80006d2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a32      	ldr	r2, [pc, #200]	@ (80006f0 <GPIO_ClockCmd+0x120>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d106      	bne.n	800063a <GPIO_ClockCmd+0x6a>
 800062c:	4b2d      	ldr	r3, [pc, #180]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000630:	4a2c      	ldr	r2, [pc, #176]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 8000632:	f043 0308 	orr.w	r3, r3, #8
 8000636:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000638:	e04b      	b.n	80006d2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a2d      	ldr	r2, [pc, #180]	@ (80006f4 <GPIO_ClockCmd+0x124>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d106      	bne.n	8000650 <GPIO_ClockCmd+0x80>
 8000642:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a27      	ldr	r2, [pc, #156]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 8000648:	f043 0310 	orr.w	r3, r3, #16
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800064e:	e040      	b.n	80006d2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a29      	ldr	r2, [pc, #164]	@ (80006f8 <GPIO_ClockCmd+0x128>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d13c      	bne.n	80006d2 <GPIO_ClockCmd+0x102>
 8000658:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065c:	4a21      	ldr	r2, [pc, #132]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 800065e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000662:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000664:	e035      	b.n	80006d2 <GPIO_ClockCmd+0x102>
        if (GPIOx == GPIOA) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a1d      	ldr	r2, [pc, #116]	@ (80006e0 <GPIO_ClockCmd+0x110>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d106      	bne.n	800067c <GPIO_ClockCmd+0xac>
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a1c      	ldr	r2, [pc, #112]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 8000674:	f023 0301 	bic.w	r3, r3, #1
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800067a:	e02a      	b.n	80006d2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOBEN;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a1a      	ldr	r2, [pc, #104]	@ (80006e8 <GPIO_ClockCmd+0x118>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d106      	bne.n	8000692 <GPIO_ClockCmd+0xc2>
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000688:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 800068a:	f023 0302 	bic.w	r3, r3, #2
 800068e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000690:	e01f      	b.n	80006d2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a15      	ldr	r2, [pc, #84]	@ (80006ec <GPIO_ClockCmd+0x11c>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d106      	bne.n	80006a8 <GPIO_ClockCmd+0xd8>
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a11      	ldr	r2, [pc, #68]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 80006a0:	f023 0304 	bic.w	r3, r3, #4
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006a6:	e014      	b.n	80006d2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a11      	ldr	r2, [pc, #68]	@ (80006f0 <GPIO_ClockCmd+0x120>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d106      	bne.n	80006be <GPIO_ClockCmd+0xee>
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b4:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 80006b6:	f023 0308 	bic.w	r3, r3, #8
 80006ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006bc:	e009      	b.n	80006d2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a0c      	ldr	r2, [pc, #48]	@ (80006f4 <GPIO_ClockCmd+0x124>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d105      	bne.n	80006d2 <GPIO_ClockCmd+0x102>
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a06      	ldr	r2, [pc, #24]	@ (80006e4 <GPIO_ClockCmd+0x114>)
 80006cc:	f023 0310 	bic.w	r3, r3, #16
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40020000 	.word	0x40020000
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020400 	.word	0x40020400
 80006ec:	40020800 	.word	0x40020800
 80006f0:	40020c00 	.word	0x40020c00
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40021c00 	.word	0x40021c00

080006fc <GPIO_InitPin>:


void GPIO_InitPin(GPIO_TypeDef* GPIOx, uint16_t pin, uint32_t mode, uint32_t pull,
                  uint32_t speed, uint32_t otype, uint32_t alt_func) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	460b      	mov	r3, r1
 800070a:	817b      	strh	r3, [r7, #10]
    uint32_t position;
    uint32_t iocurrent;
    uint32_t temp;

    // Enable clock for the GPIO port
    GPIO_ClockCmd(GPIOx, CLOCK_CMD_ENABLE);
 800070c:	2101      	movs	r1, #1
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f7ff ff5e 	bl	80005d0 <GPIO_ClockCmd>

    for (position = 0; position < 16; position++) {
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	e0a4      	b.n	8000864 <GPIO_InitPin+0x168>
        iocurrent = (0x1U << position); // Mask for current pin
 800071a:	2201      	movs	r2, #1
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	61bb      	str	r3, [r7, #24]
        if (pin & iocurrent) {          // If this pin is selected
 8000724:	897a      	ldrh	r2, [r7, #10]
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	4013      	ands	r3, r2
 800072a:	2b00      	cmp	r3, #0
 800072c:	f000 8097 	beq.w	800085e <GPIO_InitPin+0x162>
            // 1. Configure Mode (Input, Output, AF, Analog)
            temp = GPIOx->MODER;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2)); // Clear mode bits for this pin
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	2203      	movs	r2, #3
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	4013      	ands	r3, r2
 8000746:	617b      	str	r3, [r7, #20]
            temp |= (mode << (position * 2));
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	fa02 f303 	lsl.w	r3, r2, r3
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	4313      	orrs	r3, r2
 8000756:	617b      	str	r3, [r7, #20]
            GPIOx->MODER = temp;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	697a      	ldr	r2, [r7, #20]
 800075c:	601a      	str	r2, [r3, #0]

            if ((mode == GPIO_MODE_OUTPUT) || (mode == GPIO_MODE_AF)) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d002      	beq.n	800076a <GPIO_InitPin+0x6e>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d12b      	bne.n	80007c2 <GPIO_InitPin+0xc6>
                // 2. Configure Speed
                temp = GPIOx->OSPEEDR;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	617b      	str	r3, [r7, #20]
                temp &= ~(0x03U << (position * 2));
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	2203      	movs	r2, #3
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43db      	mvns	r3, r3
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	4013      	ands	r3, r2
 8000780:	617b      	str	r3, [r7, #20]
                temp |= (speed << (position * 2));
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000788:	fa02 f303 	lsl.w	r3, r2, r3
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	4313      	orrs	r3, r2
 8000790:	617b      	str	r3, [r7, #20]
                GPIOx->OSPEEDR = temp;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	609a      	str	r2, [r3, #8]

                // 3. Configure Output Type (Push-Pull or Open-Drain)
                temp = GPIOx->OTYPER;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	617b      	str	r3, [r7, #20]
                temp &= ~(0x01U << position);
 800079e:	2201      	movs	r2, #1
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	4013      	ands	r3, r2
 80007ac:	617b      	str	r3, [r7, #20]
                temp |= (otype << position);
 80007ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	617b      	str	r3, [r7, #20]
                GPIOx->OTYPER = temp;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	605a      	str	r2, [r3, #4]
            }

            // 4. Configure Pull-up/Pull-down
            temp = GPIOx->PUPDR;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2));
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	2203      	movs	r2, #3
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43db      	mvns	r3, r3
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	4013      	ands	r3, r2
 80007d8:	617b      	str	r3, [r7, #20]
            temp |= (pull << (position * 2));
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	617b      	str	r3, [r7, #20]
            GPIOx->PUPDR = temp;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	60da      	str	r2, [r3, #12]

            // 5. Configure Alternate Function (if AF mode)
            if (mode == GPIO_MODE_AF) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d133      	bne.n	800085e <GPIO_InitPin+0x162>
                if (position < 8) { // AFR[0] for pins 0-7
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	2b07      	cmp	r3, #7
 80007fa:	d817      	bhi.n	800082c <GPIO_InitPin+0x130>
                    temp = GPIOx->AFR[0];
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	6a1b      	ldr	r3, [r3, #32]
 8000800:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << (position * 4));
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	220f      	movs	r2, #15
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	43db      	mvns	r3, r3
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	4013      	ands	r3, r2
 8000812:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << (position * 4));
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	4313      	orrs	r3, r2
 8000822:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[0] = temp;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	621a      	str	r2, [r3, #32]
 800082a:	e018      	b.n	800085e <GPIO_InitPin+0x162>
                } else { // AFR[1] for pins 8-15
                    temp = GPIOx->AFR[1];
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000830:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << ((position - 8) * 4));
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3b08      	subs	r3, #8
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	220f      	movs	r2, #15
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	4013      	ands	r3, r2
 8000844:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << ((position - 8) * 4));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b08      	subs	r3, #8
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4313      	orrs	r3, r2
 8000856:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[1] = temp;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
    for (position = 0; position < 16; position++) {
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3301      	adds	r3, #1
 8000862:	61fb      	str	r3, [r7, #28]
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	2b0f      	cmp	r3, #15
 8000868:	f67f af57 	bls.w	800071a <GPIO_InitPin+0x1e>
                }
            }
        }
    }
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <get_timer_peripheral>:

#include "pwm_driver.h"
#include <stdio.h>

// Helper function để lấy con trỏ đến Timer dựa trên enum
static TIM_TypeDef* get_timer_peripheral(PWM_TimerInstance_e timer_instance) {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
    switch (timer_instance) {
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b03      	cmp	r3, #3
 8000886:	d814      	bhi.n	80008b2 <get_timer_peripheral+0x3a>
 8000888:	a201      	add	r2, pc, #4	@ (adr r2, 8000890 <get_timer_peripheral+0x18>)
 800088a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088e:	bf00      	nop
 8000890:	080008a1 	.word	0x080008a1
 8000894:	080008a7 	.word	0x080008a7
 8000898:	080008ab 	.word	0x080008ab
 800089c:	080008af 	.word	0x080008af
        case PWM_TIMER2: return TIM2;
 80008a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a4:	e006      	b.n	80008b4 <get_timer_peripheral+0x3c>
        case PWM_TIMER3: return TIM3;
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <get_timer_peripheral+0x48>)
 80008a8:	e004      	b.n	80008b4 <get_timer_peripheral+0x3c>
        case PWM_TIMER4: return TIM4;
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <get_timer_peripheral+0x4c>)
 80008ac:	e002      	b.n	80008b4 <get_timer_peripheral+0x3c>
        case PWM_TIMER5: return TIM5;
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <get_timer_peripheral+0x50>)
 80008b0:	e000      	b.n	80008b4 <get_timer_peripheral+0x3c>
        default: return NULL;
 80008b2:	2300      	movs	r3, #0
    }
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	40000400 	.word	0x40000400
 80008c4:	40000800 	.word	0x40000800
 80008c8:	40000c00 	.word	0x40000c00

080008cc <pwm_timer_clock_cmd>:

// Helper function để bật clock cho Timer
static void pwm_timer_clock_cmd(PWM_TimerInstance_e timer_instance, uint8_t enable_disable) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ffca 	bl	8000878 <get_timer_peripheral>
 80008e4:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL) return;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d01f      	beq.n	800092c <pwm_timer_clock_cmd+0x60>

    if (enable_disable == CLOCK_CMD_ENABLE) { // Giả sử CLOCK_CMD_ENABLE = 1
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d11d      	bne.n	800092e <pwm_timer_clock_cmd+0x62>
        if (TIMx == TIM2 || TIMx == TIM3 || TIMx == TIM4 || TIMx == TIM5) {
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008f8:	d00b      	beq.n	8000912 <pwm_timer_clock_cmd+0x46>
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <pwm_timer_clock_cmd+0x68>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d007      	beq.n	8000912 <pwm_timer_clock_cmd+0x46>
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <pwm_timer_clock_cmd+0x6c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d003      	beq.n	8000912 <pwm_timer_clock_cmd+0x46>
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	4a0b      	ldr	r2, [pc, #44]	@ (800093c <pwm_timer_clock_cmd+0x70>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d10d      	bne.n	800092e <pwm_timer_clock_cmd+0x62>
            RCC->APB1ENR |= (1U << ( ( (uint32_t)TIMx - APB1PERIPH_BASE ) / 0x400UL) );
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <pwm_timer_clock_cmd+0x74>)
 8000914:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800091c:	0a9b      	lsrs	r3, r3, #10
 800091e:	2101      	movs	r1, #1
 8000920:	fa01 f303 	lsl.w	r3, r1, r3
 8000924:	4906      	ldr	r1, [pc, #24]	@ (8000940 <pwm_timer_clock_cmd+0x74>)
 8000926:	4313      	orrs	r3, r2
 8000928:	640b      	str	r3, [r1, #64]	@ 0x40
 800092a:	e000      	b.n	800092e <pwm_timer_clock_cmd+0x62>
    if (TIMx == NULL) return;
 800092c:	bf00      	nop
        }
        // Thêm cho các timer trên APB2 nếu cần (TIM1, TIM8, TIM9, TIM10, TIM11)
    } else {
        // Logic để tắt clock (ít dùng hơn)
    }
}
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40000400 	.word	0x40000400
 8000938:	40000800 	.word	0x40000800
 800093c:	40000c00 	.word	0x40000c00
 8000940:	40023800 	.word	0x40023800

08000944 <PWM_InitChannel>:
// Cần khởi tạo các giá trị này trong PWM_InitChannel
static uint32_t g_timer_arr_values[4] = {0}; // TIM2, TIM3, TIM4, TIM5

int8_t PWM_InitChannel(PWM_TimerInstance_e timer_instance, PWM_TimerChannel_e channel,
                       uint32_t pwm_frequency_hz,
                       GPIO_TypeDef* gpio_port, uint8_t gpio_pin_number, uint8_t gpio_af_mode) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b090      	sub	sp, #64	@ 0x40
 8000948:	af04      	add	r7, sp, #16
 800094a:	60ba      	str	r2, [r7, #8]
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4603      	mov	r3, r0
 8000950:	73fb      	strb	r3, [r7, #15]
 8000952:	460b      	mov	r3, r1
 8000954:	73bb      	strb	r3, [r7, #14]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff8d 	bl	8000878 <get_timer_peripheral>
 800095e:	61b8      	str	r0, [r7, #24]
    if (TIMx == NULL || channel < PWM_CHANNEL_1 || channel > PWM_CHANNEL_4 || pwm_frequency_hz == 0) {
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d008      	beq.n	8000978 <PWM_InitChannel+0x34>
 8000966:	7bbb      	ldrb	r3, [r7, #14]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d005      	beq.n	8000978 <PWM_InitChannel+0x34>
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	2b04      	cmp	r3, #4
 8000970:	d802      	bhi.n	8000978 <PWM_InitChannel+0x34>
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <PWM_InitChannel+0x3a>
        return -1; // Tham số không hợp lệ
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	e117      	b.n	8000bae <PWM_InitChannel+0x26a>
    }

    // 1. Bật clock cho Timer và GPIO Port
    pwm_timer_clock_cmd(timer_instance, CLOCK_CMD_ENABLE);
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	2101      	movs	r1, #1
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ffa2 	bl	80008cc <pwm_timer_clock_cmd>
    GPIO_ClockCmd(gpio_port, CLOCK_CMD_ENABLE); // Giả sử hàm này tồn tại và hoạt động
 8000988:	2101      	movs	r1, #1
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fe20 	bl	80005d0 <GPIO_ClockCmd>

    // 2. Cấu hình chân GPIO ở chế độ Alternate Function
    GPIO_InitPin(gpio_port, (1U << gpio_pin_number), GPIO_MODE_AF, GPIO_PULL_NO,
 8000990:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000994:	2201      	movs	r2, #1
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	b299      	uxth	r1, r3
 800099c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	2300      	movs	r3, #0
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	2302      	movs	r3, #2
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2300      	movs	r3, #0
 80009ac:	2202      	movs	r2, #2
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fea4 	bl	80006fc <GPIO_InitPin>
    // 3. Tính toán Prescaler (PSC) và Auto-Reload Register (ARR)
    // Tần số clock của Timer (ví dụ PCLK1 cho TIM2/3/4/5)
    // Nếu Prescaler của APB1 khác 1, PCLK1_TIMER_CLOCK = PCLK1_FREQUENCY_HZ * 2
    // (Tham khảo mục "Timer clock" trong Reference Manual)
    uint32_t timer_clock_hz;
    if (TIMx == TIM2 || TIMx == TIM3 || TIMx == TIM4 || TIMx == TIM5) { // Thuộc APB1
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009ba:	d00b      	beq.n	80009d4 <PWM_InitChannel+0x90>
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	4a7e      	ldr	r2, [pc, #504]	@ (8000bb8 <PWM_InitChannel+0x274>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d007      	beq.n	80009d4 <PWM_InitChannel+0x90>
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	4a7d      	ldr	r2, [pc, #500]	@ (8000bbc <PWM_InitChannel+0x278>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d003      	beq.n	80009d4 <PWM_InitChannel+0x90>
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	4a7c      	ldr	r2, [pc, #496]	@ (8000bc0 <PWM_InitChannel+0x27c>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d10b      	bne.n	80009ec <PWM_InitChannel+0xa8>
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 80009d4:	4b7b      	ldr	r3, [pc, #492]	@ (8000bc4 <PWM_InitChannel+0x280>)
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <PWM_InitChannel+0xa2>
            timer_clock_hz = PCLK1_FREQUENCY_HZ;
 80009e0:	4b79      	ldr	r3, [pc, #484]	@ (8000bc8 <PWM_InitChannel+0x284>)
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 80009e4:	e005      	b.n	80009f2 <PWM_InitChannel+0xae>
        } else { // APB1 Prescaler > 1
            timer_clock_hz = PCLK1_FREQUENCY_HZ * 2;
 80009e6:	4b79      	ldr	r3, [pc, #484]	@ (8000bcc <PWM_InitChannel+0x288>)
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 80009ea:	e002      	b.n	80009f2 <PWM_InitChannel+0xae>
        }
    } else {
        // Thêm logic cho timer trên APB2 (ví dụ TIM1)
        // if ((RCC->CFGR & RCC_CFGR_PPRE2) == RCC_CFGR_PPRE2_DIV1) { ... }
        return -1; // Timer không được hỗ trợ
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	e0dd      	b.n	8000bae <PWM_InitChannel+0x26a>
    }

    // Tìm PSC và ARR. Ưu tiên ARR lớn để có độ phân giải duty cycle tốt hơn.
    // pwm_frequency = timer_clock_hz / ((PSC + 1) * (ARR + 1))
    // Giả sử ARR khoảng 1000-65535. PSC = (timer_clock_hz / (pwm_frequency * (ARR+1))) - 1
    uint32_t arr_val = (timer_clock_hz / pwm_frequency_hz) / 1000U; // Thử ARR ~1000
 80009f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4a75      	ldr	r2, [pc, #468]	@ (8000bd0 <PWM_InitChannel+0x28c>)
 80009fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000a00:	099b      	lsrs	r3, r3, #6
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val > 0xFFFFU) arr_val = 0xFFFFU; // Giới hạn ARR
 8000a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a0a:	d302      	bcc.n	8000a12 <PWM_InitChannel+0xce>
 8000a0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val < 100U && pwm_frequency_hz < 1000) arr_val = 999; // Tăng ARR nếu tần số PWM thấp
 8000a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a14:	2b63      	cmp	r3, #99	@ 0x63
 8000a16:	d806      	bhi.n	8000a26 <PWM_InitChannel+0xe2>
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a1e:	d202      	bcs.n	8000a26 <PWM_InitChannel+0xe2>
 8000a20:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val == 0) arr_val = 1; // Tránh chia cho 0
 8000a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d101      	bne.n	8000a30 <PWM_InitChannel+0xec>
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint32_t psc_val = (timer_clock_hz / (pwm_frequency_hz * (arr_val + 1))) -1;
 8000a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a32:	3301      	adds	r3, #1
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	fb02 f303 	mul.w	r3, r2, r3
 8000a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a40:	3b01      	subs	r3, #1
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
    if (psc_val > 0xFFFFU) psc_val = 0xFFFFU;
 8000a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a4a:	d302      	bcc.n	8000a52 <PWM_InitChannel+0x10e>
 8000a4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24


    g_timer_arr_values[timer_instance] = arr_val; // Lưu lại ARR
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	495f      	ldr	r1, [pc, #380]	@ (8000bd4 <PWM_InitChannel+0x290>)
 8000a56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // 4. Cấu hình Timer cơ bản
    TIMx->PSC = (uint16_t)psc_val;
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	461a      	mov	r2, r3
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->ARR = (uint16_t)arr_val;
 8000a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIMx->CNT = 0; // Reset bộ đếm
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
    // 5. Cấu hình kênh Output Compare cho PWM
    volatile uint16_t* ccmr_reg;
    volatile uint16_t* ccer_reg;
    volatile uint32_t* ccr_reg; // CCRx là 32-bit nhưng chỉ dùng 16-bit thấp

    if (channel == PWM_CHANNEL_1 || channel == PWM_CHANNEL_2) {
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d002      	beq.n	8000a82 <PWM_InitChannel+0x13e>
 8000a7c:	7bbb      	ldrb	r3, [r7, #14]
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d103      	bne.n	8000a8a <PWM_InitChannel+0x146>
        ccmr_reg = (volatile uint16_t*)&(TIMx->CCMR1);
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	3318      	adds	r3, #24
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	e002      	b.n	8000a90 <PWM_InitChannel+0x14c>
    } else { // Kênh 3 hoặc 4
        ccmr_reg = (volatile uint16_t*)&(TIMx->CCMR2);
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	331c      	adds	r3, #28
 8000a8e:	623b      	str	r3, [r7, #32]
    }
    ccer_reg = (volatile uint16_t*)&(TIMx->CCER);
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	3320      	adds	r3, #32
 8000a94:	617b      	str	r3, [r7, #20]

    switch (channel) {
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d81a      	bhi.n	8000ad4 <PWM_InitChannel+0x190>
 8000a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8000aa4 <PWM_InitChannel+0x160>)
 8000aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa4:	08000ab5 	.word	0x08000ab5
 8000aa8:	08000abd 	.word	0x08000abd
 8000aac:	08000ac5 	.word	0x08000ac5
 8000ab0:	08000acd 	.word	0x08000acd
        case PWM_CHANNEL_1: ccr_reg = &(TIMx->CCR1); break;
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	3334      	adds	r3, #52	@ 0x34
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	e00e      	b.n	8000ada <PWM_InitChannel+0x196>
        case PWM_CHANNEL_2: ccr_reg = &(TIMx->CCR2); break;
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	3338      	adds	r3, #56	@ 0x38
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	e00a      	b.n	8000ada <PWM_InitChannel+0x196>
        case PWM_CHANNEL_3: ccr_reg = &(TIMx->CCR3); break;
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	333c      	adds	r3, #60	@ 0x3c
 8000ac8:	61fb      	str	r3, [r7, #28]
 8000aca:	e006      	b.n	8000ada <PWM_InitChannel+0x196>
        case PWM_CHANNEL_4: ccr_reg = &(TIMx->CCR4); break;
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	3340      	adds	r3, #64	@ 0x40
 8000ad0:	61fb      	str	r3, [r7, #28]
 8000ad2:	e002      	b.n	8000ada <PWM_InitChannel+0x196>
        default: return -1; // Should not happen
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	e069      	b.n	8000bae <PWM_InitChannel+0x26a>
    }

    // Cấu hình PWM Mode 1 (OCxM = 110) và bật Preload Enable (OCxPE = 1)
    // Preload cho phép cập nhật CCRx một cách an toàn vào cuối mỗi chu kỳ PWM
    uint16_t oc_mode_bits = TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1PE;
 8000ada:	2368      	movs	r3, #104	@ 0x68
 8000adc:	827b      	strh	r3, [r7, #18]
    uint16_t ccer_enable_bit = TIM_CCER_CC1E << ((channel - 1) * 4);
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	823b      	strh	r3, [r7, #16]

    if (channel == PWM_CHANNEL_1 || channel == PWM_CHANNEL_3) { // Kênh 1 và 3 dùng 8 bit thấp của CCMRx
 8000aec:	7bbb      	ldrb	r3, [r7, #14]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d002      	beq.n	8000af8 <PWM_InitChannel+0x1b4>
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d121      	bne.n	8000b3c <PWM_InitChannel+0x1f8>
        *ccmr_reg &= ~(0xFFU << ((channel == PWM_CHANNEL_3) ? 8 : 0)); // Xóa bit cũ (OCxM, OCxPE, OCxFE, CCxS)
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	7bba      	ldrb	r2, [r7, #14]
 8000b00:	2a03      	cmp	r2, #3
 8000b02:	d101      	bne.n	8000b08 <PWM_InitChannel+0x1c4>
 8000b04:	22ff      	movs	r2, #255	@ 0xff
 8000b06:	e001      	b.n	8000b0c <PWM_InitChannel+0x1c8>
 8000b08:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	801a      	strh	r2, [r3, #0]
        *ccmr_reg |= (oc_mode_bits << ((channel == PWM_CHANNEL_3) ? 8 : 0));
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	8a79      	ldrh	r1, [r7, #18]
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d101      	bne.n	8000b28 <PWM_InitChannel+0x1e4>
 8000b24:	2308      	movs	r3, #8
 8000b26:	e000      	b.n	8000b2a <PWM_InitChannel+0x1e6>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	801a      	strh	r2, [r3, #0]
 8000b3a:	e020      	b.n	8000b7e <PWM_InitChannel+0x23a>
    } else { // Kênh 2 và 4 dùng 8 bit cao của CCMRx
        *ccmr_reg &= ~(0xFF00U >> ((channel == PWM_CHANNEL_4) ? 0 : 8)); // Xóa bit cũ
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	7bba      	ldrb	r2, [r7, #14]
 8000b44:	2a04      	cmp	r2, #4
 8000b46:	d101      	bne.n	8000b4c <PWM_InitChannel+0x208>
 8000b48:	22ff      	movs	r2, #255	@ 0xff
 8000b4a:	e001      	b.n	8000b50 <PWM_InitChannel+0x20c>
 8000b4c:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8000b50:	4013      	ands	r3, r2
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	801a      	strh	r2, [r3, #0]
        *ccmr_reg |= (oc_mode_bits << ((channel == PWM_CHANNEL_4) ? 8 : 0));
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	b21a      	sxth	r2, r3
 8000b60:	8a79      	ldrh	r1, [r7, #18]
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d101      	bne.n	8000b6c <PWM_InitChannel+0x228>
 8000b68:	2308      	movs	r3, #8
 8000b6a:	e000      	b.n	8000b6e <PWM_InitChannel+0x22a>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	b21b      	sxth	r3, r3
 8000b74:	4313      	orrs	r3, r2
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	6a3b      	ldr	r3, [r7, #32]
 8000b7c:	801a      	strh	r2, [r3, #0]
    }

    // Bật output cho kênh
    *ccer_reg |= ccer_enable_bit;
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	8a3b      	ldrh	r3, [r7, #16]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	801a      	strh	r2, [r3, #0]

    // Đặt duty cycle ban đầu là 0%
    *ccr_reg = 0;
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]

    // Bật bit ARPE (Auto-Reload Preload Enable) trong CR1 để ARR được buffer
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	601a      	str	r2, [r3, #0]

    // (Tùy chọn) Tạo một update event để nạp các giá trị preload vào shadow registers
    TIMx->EGR |= TIM_EGR_UG;
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	f043 0201 	orr.w	r2, r3, #1
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	615a      	str	r2, [r3, #20]

    // Timer chưa được start ở đây, sẽ start bằng PWM_Start()

    return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3730      	adds	r7, #48	@ 0x30
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40000400 	.word	0x40000400
 8000bbc:	40000800 	.word	0x40000800
 8000bc0:	40000c00 	.word	0x40000c00
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	0280de80 	.word	0x0280de80
 8000bcc:	0501bd00 	.word	0x0501bd00
 8000bd0:	10624dd3 	.word	0x10624dd3
 8000bd4:	20000068 	.word	0x20000068

08000bd8 <PWM_SetDutyCycle>:

int8_t PWM_SetDutyCycle(PWM_TimerInstance_e timer_instance, PWM_TimerChannel_e channel, float duty_cycle_percent) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	ed87 0a00 	vstr	s0, [r7]
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	71bb      	strb	r3, [r7, #6]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fe42 	bl	8000878 <get_timer_peripheral>
 8000bf4:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL || channel < PWM_CHANNEL_1 || channel > PWM_CHANNEL_4) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d005      	beq.n	8000c08 <PWM_SetDutyCycle+0x30>
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <PWM_SetDutyCycle+0x30>
 8000c02:	79bb      	ldrb	r3, [r7, #6]
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d902      	bls.n	8000c0e <PWM_SetDutyCycle+0x36>
        return -1;
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	e05f      	b.n	8000cce <PWM_SetDutyCycle+0xf6>
    }

    if (duty_cycle_percent < 0.0f) duty_cycle_percent = 0.0f;
 8000c0e:	edd7 7a00 	vldr	s15, [r7]
 8000c12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1a:	d502      	bpl.n	8000c22 <PWM_SetDutyCycle+0x4a>
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
    if (duty_cycle_percent > 100.0f) duty_cycle_percent = 100.0f;
 8000c22:	edd7 7a00 	vldr	s15, [r7]
 8000c26:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000cd8 <PWM_SetDutyCycle+0x100>
 8000c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c32:	dd01      	ble.n	8000c38 <PWM_SetDutyCycle+0x60>
 8000c34:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <PWM_SetDutyCycle+0x104>)
 8000c36:	603b      	str	r3, [r7, #0]

    uint32_t arr_val = g_timer_arr_values[timer_instance];
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	4a29      	ldr	r2, [pc, #164]	@ (8000ce0 <PWM_SetDutyCycle+0x108>)
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	60bb      	str	r3, [r7, #8]
    if (arr_val == 0) return -1; // Timer chưa được init đúng cách
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <PWM_SetDutyCycle+0x76>
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	e03f      	b.n	8000cce <PWM_SetDutyCycle+0xf6>

    uint32_t ccr_val = (uint32_t)((duty_cycle_percent / 100.0f) * (float)(arr_val +1));
 8000c4e:	edd7 7a00 	vldr	s15, [r7]
 8000c52:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000cd8 <PWM_SetDutyCycle+0x100>
 8000c56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c6e:	ee17 3a90 	vmov	r3, s15
 8000c72:	617b      	str	r3, [r7, #20]
    // arr_val+1 vì duty cycle 100% ứng với CCR = ARR+1 (hoặc ARR nếu dùng PWM mode khác)
    // Với PWM Mode 1 (đếm lên): 0% -> CCR=0; 100% -> CCR = ARR+1 (hoặc lớn hơn ARR)
    // Để đơn giản, nếu CCR > ARR, thì nó sẽ là 100% duty.

    if (ccr_val > arr_val) ccr_val = arr_val +1; // Đảm bảo 100% là CCR > ARR
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d902      	bls.n	8000c82 <PWM_SetDutyCycle+0xaa>
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]

    volatile uint32_t* ccr_reg;
    switch (channel) {
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d81a      	bhi.n	8000cc0 <PWM_SetDutyCycle+0xe8>
 8000c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c90 <PWM_SetDutyCycle+0xb8>)
 8000c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c90:	08000ca1 	.word	0x08000ca1
 8000c94:	08000ca9 	.word	0x08000ca9
 8000c98:	08000cb1 	.word	0x08000cb1
 8000c9c:	08000cb9 	.word	0x08000cb9
        case PWM_CHANNEL_1: ccr_reg = &(TIMx->CCR1); break;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3334      	adds	r3, #52	@ 0x34
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	e00e      	b.n	8000cc6 <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_2: ccr_reg = &(TIMx->CCR2); break;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3338      	adds	r3, #56	@ 0x38
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	e00a      	b.n	8000cc6 <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_3: ccr_reg = &(TIMx->CCR3); break;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	333c      	adds	r3, #60	@ 0x3c
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	e006      	b.n	8000cc6 <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_4: ccr_reg = &(TIMx->CCR4); break;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3340      	adds	r3, #64	@ 0x40
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	e002      	b.n	8000cc6 <PWM_SetDutyCycle+0xee>
        default: return -1;
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	e003      	b.n	8000cce <PWM_SetDutyCycle+0xf6>
    }

    *ccr_reg = ccr_val;
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	601a      	str	r2, [r3, #0]
    return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	42c80000 	.word	0x42c80000
 8000cdc:	42c80000 	.word	0x42c80000
 8000ce0:	20000068 	.word	0x20000068

08000ce4 <PWM_Start>:

int8_t PWM_Start(PWM_TimerInstance_e timer_instance) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fdc1 	bl	8000878 <get_timer_peripheral>
 8000cf6:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL) return -1;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d102      	bne.n	8000d04 <PWM_Start+0x20>
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e006      	b.n	8000d12 <PWM_Start+0x2e>

    // Bật bộ đếm
    TIMx->CR1 |= TIM_CR1_CEN;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f043 0201 	orr.w	r2, r3, #1
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	601a      	str	r2, [r3, #0]
    return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <SystemClock_Config>:
  #define PLL_P_REG_VAL 0x03U
#else
  #error "Invalid PLL_P_VAL. Must be 2, 4, 6, or 8."
#endif

void SystemClock_Config(void) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
    uint32_t temp_reg; // Biến tạm, tránh warning unused nếu không có MODIFY_REG

    // 1. Bật HSE và đợi nó ổn định (nếu dùng HSE là nguồn PLL)
    RCC->CR |= RCC_CR_HSEON;
 8000d22:	4b47      	ldr	r3, [pc, #284]	@ (8000e40 <SystemClock_Config+0x124>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a46      	ldr	r2, [pc, #280]	@ (8000e40 <SystemClock_Config+0x124>)
 8000d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d2c:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8000d2e:	bf00      	nop
 8000d30:	4b43      	ldr	r3, [pc, #268]	@ (8000e40 <SystemClock_Config+0x124>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f9      	beq.n	8000d30 <SystemClock_Config+0x14>

    // 2. Cấu hình Power Control Register
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d3c:	4b40      	ldr	r3, [pc, #256]	@ (8000e40 <SystemClock_Config+0x124>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d40:	4a3f      	ldr	r2, [pc, #252]	@ (8000e40 <SystemClock_Config+0x124>)
 8000d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	6413      	str	r3, [r2, #64]	@ 0x40
    temp_reg = PWR->CR;
 8000d48:	4b3e      	ldr	r3, [pc, #248]	@ (8000e44 <SystemClock_Config+0x128>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	607b      	str	r3, [r7, #4]
    temp_reg &= ~PWR_CR_VOS;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d54:	607b      	str	r3, [r7, #4]
    temp_reg |= PWR_CR_VOS_1; // Scale 2
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d5c:	607b      	str	r3, [r7, #4]
    PWR->CR = temp_reg;
 8000d5e:	4a39      	ldr	r2, [pc, #228]	@ (8000e44 <SystemClock_Config+0x128>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6013      	str	r3, [r2, #0]

    // 3. Cấu hình các hệ số chia cho HCLK, PCLK1, PCLK2
    temp_reg = RCC->CFGR;
 8000d64:	4b36      	ldr	r3, [pc, #216]	@ (8000e40 <SystemClock_Config+0x124>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_HPRE;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000d70:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_HPRE_DIV1;
    RCC->CFGR = temp_reg;
 8000d72:	4a33      	ldr	r2, [pc, #204]	@ (8000e40 <SystemClock_Config+0x124>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 8000d78:	4b31      	ldr	r3, [pc, #196]	@ (8000e40 <SystemClock_Config+0x124>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE1;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8000d84:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE1_DIV2;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d8c:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 8000d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8000e40 <SystemClock_Config+0x124>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 8000d94:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <SystemClock_Config+0x124>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE2;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000da0:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE2_DIV1;
    RCC->CFGR = temp_reg;
 8000da2:	4a27      	ldr	r2, [pc, #156]	@ (8000e40 <SystemClock_Config+0x124>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6093      	str	r3, [r2, #8]

    // 4. Cấu hình PLL
    RCC->CR &= ~RCC_CR_PLLON;
 8000da8:	4b25      	ldr	r3, [pc, #148]	@ (8000e40 <SystemClock_Config+0x124>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a24      	ldr	r2, [pc, #144]	@ (8000e40 <SystemClock_Config+0x124>)
 8000dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000db2:	6013      	str	r3, [r2, #0]
    while(RCC->CR & RCC_CR_PLLRDY);
 8000db4:	bf00      	nop
 8000db6:	4b22      	ldr	r3, [pc, #136]	@ (8000e40 <SystemClock_Config+0x124>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f9      	bne.n	8000db6 <SystemClock_Config+0x9a>

    RCC->PLLCFGR = (PLL_Q_VAL << RCC_PLLCFGR_PLLQ_Pos) |
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <SystemClock_Config+0x124>)
 8000dc4:	4a20      	ldr	r2, [pc, #128]	@ (8000e48 <SystemClock_Config+0x12c>)
 8000dc6:	605a      	str	r2, [r3, #4]
                   (PLL_P_REG_VAL << RCC_PLLCFGR_PLLP_Pos)|
                   (PLL_N_VAL << RCC_PLLCFGR_PLLN_Pos) |
                   (PLL_M_VAL << RCC_PLLCFGR_PLLM_Pos);

    // 5. Bật PLL và đợi nó ổn định
    RCC->CR |= RCC_CR_PLLON;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <SystemClock_Config+0x124>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e40 <SystemClock_Config+0x124>)
 8000dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000dd2:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8000dd4:	bf00      	nop
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <SystemClock_Config+0x124>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f9      	beq.n	8000dd6 <SystemClock_Config+0xba>

    // 6. Cấu hình Flash latency
    temp_reg = FLASH->ACR;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <SystemClock_Config+0x130>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	607b      	str	r3, [r7, #4]
    temp_reg &= ~FLASH_ACR_LATENCY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f023 0307 	bic.w	r3, r3, #7
 8000dee:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_LATENCY_2WS;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_PRFTEN;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfe:	607b      	str	r3, [r7, #4]
    FLASH->ACR = temp_reg;
 8000e00:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <SystemClock_Config+0x130>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]

    // 7. Chọn PLL làm nguồn SYSCLK
    temp_reg = RCC->CFGR;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <SystemClock_Config+0x124>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_SW;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f023 0303 	bic.w	r3, r3, #3
 8000e12:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_SW_PLL;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 8000e1c:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <SystemClock_Config+0x124>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000e22:	bf00      	nop
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <SystemClock_Config+0x124>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 030c 	and.w	r3, r3, #12
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d1f9      	bne.n	8000e24 <SystemClock_Config+0x108>
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000
 8000e48:	07415408 	.word	0x07415408
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <IncTick>:

uint32_t GetTick(void){
	return g_sysTickCounter;
}

void IncTick(void){
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
	g_sysTickCounter ++;
 8000e54:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <IncTick+0x18>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	4a03      	ldr	r2, [pc, #12]	@ (8000e68 <IncTick+0x18>)
 8000e5c:	6013      	str	r3, [r2, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	20000078 	.word	0x20000078

08000e6c <SysTick_Handler>:

void SysTick_Handler(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	IncTick();
 8000e70:	f7ff ffee 	bl	8000e50 <IncTick>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <USART2_IRQHandler>:
    __disable_irq();
    g_uart2_error_flags &= ~flags;
    __enable_irq();
}

void USART2_IRQHandler(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
    uint32_t sr_reg = USART2->SR; // Đọc thanh ghi SR một lần
 8000e7e:	4b6e      	ldr	r3, [pc, #440]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	60fb      	str	r3, [r7, #12]

    // --- Xử lý ngắt RXNE (Receive Data Register Not Empty) ---
    if ((sr_reg & USART_SR_RXNE) && (USART2->CR1 & USART_CR1_RXNEIE)) {
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0320 	and.w	r3, r3, #32
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d032      	beq.n	8000ef4 <USART2_IRQHandler+0x7c>
 8000e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d02c      	beq.n	8000ef4 <USART2_IRQHandler+0x7c>
        uint8_t received_byte = (uint8_t)(USART2->DR & 0xFFU);
 8000e9a:	4b67      	ldr	r3, [pc, #412]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	72fb      	strb	r3, [r7, #11]

        if (g_uart2_rx_buffer_count < UART2_RX_BUFFER_SIZE) {
 8000ea0:	4b66      	ldr	r3, [pc, #408]	@ (800103c <USART2_IRQHandler+0x1c4>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ea8:	d81c      	bhi.n	8000ee4 <USART2_IRQHandler+0x6c>
            g_uart2_rx_buffer[g_uart2_rx_buffer_tail] = received_byte;
 8000eaa:	4b65      	ldr	r3, [pc, #404]	@ (8001040 <USART2_IRQHandler+0x1c8>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4a64      	ldr	r2, [pc, #400]	@ (8001044 <USART2_IRQHandler+0x1cc>)
 8000eb4:	7afb      	ldrb	r3, [r7, #11]
 8000eb6:	5453      	strb	r3, [r2, r1]
            g_uart2_rx_buffer_tail = (g_uart2_rx_buffer_tail + 1) % UART2_RX_BUFFER_SIZE;
 8000eb8:	4b61      	ldr	r3, [pc, #388]	@ (8001040 <USART2_IRQHandler+0x1c8>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	425a      	negs	r2, r3
 8000ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ec6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000eca:	bf58      	it	pl
 8000ecc:	4253      	negpl	r3, r2
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b5b      	ldr	r3, [pc, #364]	@ (8001040 <USART2_IRQHandler+0x1c8>)
 8000ed2:	801a      	strh	r2, [r3, #0]
            g_uart2_rx_buffer_count++;
 8000ed4:	4b59      	ldr	r3, [pc, #356]	@ (800103c <USART2_IRQHandler+0x1c4>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	3301      	adds	r3, #1
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b57      	ldr	r3, [pc, #348]	@ (800103c <USART2_IRQHandler+0x1c4>)
 8000ee0:	801a      	strh	r2, [r3, #0]
 8000ee2:	e007      	b.n	8000ef4 <USART2_IRQHandler+0x7c>
        } else {
            // Buffer RX đầy, đánh dấu lỗi bằng cách thêm cờ
            g_uart2_error_flags |= UART_ERROR_BUFFER_FULL;
 8000ee4:	4b58      	ldr	r3, [pc, #352]	@ (8001048 <USART2_IRQHandler+0x1d0>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b55      	ldr	r3, [pc, #340]	@ (8001048 <USART2_IRQHandler+0x1d0>)
 8000ef2:	701a      	strb	r2, [r3, #0]
        }
        // Cờ RXNE tự xóa khi đọc DR.
    }

    // --- Xử lý ngắt TXE (Transmit Data Register Empty) ---
    if ((sr_reg & USART_SR_TXE) && (USART2->CR1 & USART_CR1_TXEIE)) {
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d039      	beq.n	8000f72 <USART2_IRQHandler+0xfa>
 8000efe:	4b4e      	ldr	r3, [pc, #312]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d033      	beq.n	8000f72 <USART2_IRQHandler+0xfa>
        if (g_uart2_tx_buffer_count > 0) {
 8000f0a:	4b50      	ldr	r3, [pc, #320]	@ (800104c <USART2_IRQHandler+0x1d4>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d02e      	beq.n	8000f72 <USART2_IRQHandler+0xfa>
            USART2->DR = g_uart2_tx_buffer[g_uart2_tx_buffer_head];
 8000f14:	4b4e      	ldr	r3, [pc, #312]	@ (8001050 <USART2_IRQHandler+0x1d8>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001054 <USART2_IRQHandler+0x1dc>)
 8000f1e:	5c9b      	ldrb	r3, [r3, r2]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b45      	ldr	r3, [pc, #276]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000f24:	605a      	str	r2, [r3, #4]
            g_uart2_tx_buffer_head = (g_uart2_tx_buffer_head + 1) % UART2_TX_BUFFER_SIZE;
 8000f26:	4b4a      	ldr	r3, [pc, #296]	@ (8001050 <USART2_IRQHandler+0x1d8>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	425a      	negs	r2, r3
 8000f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000f38:	bf58      	it	pl
 8000f3a:	4253      	negpl	r3, r2
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b44      	ldr	r3, [pc, #272]	@ (8001050 <USART2_IRQHandler+0x1d8>)
 8000f40:	801a      	strh	r2, [r3, #0]
            g_uart2_tx_buffer_count--;
 8000f42:	4b42      	ldr	r3, [pc, #264]	@ (800104c <USART2_IRQHandler+0x1d4>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800104c <USART2_IRQHandler+0x1d4>)
 8000f4e:	801a      	strh	r2, [r3, #0]

            if (g_uart2_tx_buffer_count == 0) {
 8000f50:	4b3e      	ldr	r3, [pc, #248]	@ (800104c <USART2_IRQHandler+0x1d4>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10b      	bne.n	8000f72 <USART2_IRQHandler+0xfa>
                // Đã gửi hết buffer, tắt ngắt TXE
                USART2->CR1 &= ~USART_CR1_TXEIE;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	4a36      	ldr	r2, [pc, #216]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000f60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f64:	60d3      	str	r3, [r2, #12]
                // Bật ngắt TC (Transmission Complete) để biết khi nào byte cuối cùng thực sự ra khỏi shift register
                USART2->CR1 |= USART_CR1_TCIE;
 8000f66:	4b34      	ldr	r3, [pc, #208]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	4a33      	ldr	r2, [pc, #204]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f70:	60d3      	str	r3, [r2, #12]
        }
        // Cờ TXE tự xóa khi ghi vào DR.
    }

    // --- Xử lý ngắt TC (Transmission Complete) ---
    if ((sr_reg & USART_SR_TC) && (USART2->CR1 & USART_CR1_TCIE)) {
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d01b      	beq.n	8000fb4 <USART2_IRQHandler+0x13c>
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d015      	beq.n	8000fb4 <USART2_IRQHandler+0x13c>
        // Byte cuối cùng đã được gửi hoàn toàn
        USART2->CR1 &= ~USART_CR1_TCIE; // Tắt ngắt TC
 8000f88:	4b2b      	ldr	r3, [pc, #172]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000f8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f92:	60d3      	str	r3, [r2, #12]
        g_uart2_tx_busy = false;      // Đánh dấu không còn bận gửi
 8000f94:	4b30      	ldr	r3, [pc, #192]	@ (8001058 <USART2_IRQHandler+0x1e0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]

        if (g_uart2_tx_complete_callback != NULL) {
 8000f9a:	4b30      	ldr	r3, [pc, #192]	@ (800105c <USART2_IRQHandler+0x1e4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <USART2_IRQHandler+0x130>
            g_uart2_tx_complete_callback();
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800105c <USART2_IRQHandler+0x1e4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4798      	blx	r3
        }
        // Cờ TC được xóa bằng cách ghi 0 vào nó (hoặc đọc SR rồi ghi vào DR - nhưng ở đây đã xong TX)
        USART2->SR &= ~USART_SR_TC; // Xóa cờ TC
 8000fa8:	4b23      	ldr	r3, [pc, #140]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a22      	ldr	r2, [pc, #136]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8000fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fb2:	6013      	str	r3, [r2, #0]
    }


    // --- Xử lý các cờ lỗi (Overrun, Noise, Framing, Parity) ---
    if (sr_reg & (USART_SR_ORE | USART_SR_NE | USART_SR_FE | USART_SR_PE)) {
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d037      	beq.n	800102e <USART2_IRQHandler+0x1b6>
        // Lưu lại lỗi để ứng dụng có thể kiểm tra
        if (sr_reg & USART_SR_ORE) g_uart2_error_flags |= UART_ERROR_OVERRUN;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d007      	beq.n	8000fd8 <USART2_IRQHandler+0x160>
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <USART2_IRQHandler+0x1d0>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <USART2_IRQHandler+0x1d0>)
 8000fd6:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_NE) g_uart2_error_flags |= UART_ERROR_NOISE;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <USART2_IRQHandler+0x17a>
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <USART2_IRQHandler+0x1d0>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <USART2_IRQHandler+0x1d0>)
 8000ff0:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_FE) g_uart2_error_flags |= UART_ERROR_FRAMING;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d007      	beq.n	800100c <USART2_IRQHandler+0x194>
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <USART2_IRQHandler+0x1d0>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <USART2_IRQHandler+0x1d0>)
 800100a:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_PE) g_uart2_error_flags |= UART_ERROR_PARITY;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <USART2_IRQHandler+0x1ae>
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <USART2_IRQHandler+0x1d0>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <USART2_IRQHandler+0x1d0>)
 8001024:	701a      	strb	r2, [r3, #0]
        
        // Đọc DR để xóa cờ lỗi
        volatile uint32_t temp_dr = USART2->DR;
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <USART2_IRQHandler+0x1c0>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	607b      	str	r3, [r7, #4]
        (void)temp_dr; // Tránh warning
 800102c:	687b      	ldr	r3, [r7, #4]
    }
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40004400 	.word	0x40004400
 800103c:	200000fe 	.word	0x200000fe
 8001040:	200000fc 	.word	0x200000fc
 8001044:	2000007c 	.word	0x2000007c
 8001048:	2000018c 	.word	0x2000018c
 800104c:	20000182 	.word	0x20000182
 8001050:	20000180 	.word	0x20000180
 8001054:	20000100 	.word	0x20000100
 8001058:	20000184 	.word	0x20000184
 800105c:	20000188 	.word	0x20000188

08001060 <Motor_Init>:
#define MOTOR_PWM_GPIO_PORT  GPIOA
#define MOTOR_PWM_GPIO_PIN   6
#define MOTOR_PWM_AF         2
#define MOTOR_PWM_FREQ_HZ    20000 // 20kHz

void Motor_Init(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af02      	add	r7, sp, #8
    PWM_InitChannel(MOTOR_PWM_TIMER, MOTOR_PWM_CHANNEL, MOTOR_PWM_FREQ_HZ,
 8001066:	2302      	movs	r3, #2
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2306      	movs	r3, #6
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b09      	ldr	r3, [pc, #36]	@ (8001094 <Motor_Init+0x34>)
 8001070:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001074:	2101      	movs	r1, #1
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff fc64 	bl	8000944 <PWM_InitChannel>
                    MOTOR_PWM_GPIO_PORT, MOTOR_PWM_GPIO_PIN, MOTOR_PWM_AF);
    PWM_SetDutyCycle(MOTOR_PWM_TIMER, MOTOR_PWM_CHANNEL, 0.0f);
 800107c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001098 <Motor_Init+0x38>
 8001080:	2101      	movs	r1, #1
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fda8 	bl	8000bd8 <PWM_SetDutyCycle>
    PWM_Start(MOTOR_PWM_TIMER);
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff fe2b 	bl	8000ce4 <PWM_Start>
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020000 	.word	0x40020000
 8001098:	00000000 	.word	0x00000000

0800109c <Motor_SetSpeed>:

void Motor_SetSpeed(float percent) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (percent < 0.0f) percent = 0.0f;
 80010a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d502      	bpl.n	80010ba <Motor_SetSpeed+0x1e>
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
    if (percent > 100.0f) percent = 100.0f;
 80010ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80010be:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80010e4 <Motor_SetSpeed+0x48>
 80010c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	dd01      	ble.n	80010d0 <Motor_SetSpeed+0x34>
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <Motor_SetSpeed+0x4c>)
 80010ce:	607b      	str	r3, [r7, #4]
    PWM_SetDutyCycle(MOTOR_PWM_TIMER, MOTOR_PWM_CHANNEL, percent);
 80010d0:	ed97 0a01 	vldr	s0, [r7, #4]
 80010d4:	2101      	movs	r1, #1
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff fd7e 	bl	8000bd8 <PWM_SetDutyCycle>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	42c80000 	.word	0x42c80000
 80010e8:	42c80000 	.word	0x42c80000

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f000 f984 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f7ff fe12 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f8:	f000 f836 	bl	8001168 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010fc:	f000 f80a 	bl	8001114 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Motor_Init();
 8001100:	f7ff ffae 	bl	8001060 <Motor_Init>
  Motor_SetSpeed(50.0f); // Chạy động cơ ở 50% duty cycle
 8001104:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8001110 <main+0x24>
 8001108:	f7ff ffc8 	bl	800109c <Motor_SetSpeed>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <main+0x20>
 8001110:	42480000 	.word	0x42480000

08001114 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <MX_USART2_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <MX_USART2_UART_Init+0x4c>)
 800114c:	f000 fc60 	bl	8001a10 <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f000 f875 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000190 	.word	0x20000190
 8001164:	40004400 	.word	0x40004400

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	@ 0x28
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b2d      	ldr	r3, [pc, #180]	@ (8001238 <MX_GPIO_Init+0xd0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a2c      	ldr	r2, [pc, #176]	@ (8001238 <MX_GPIO_Init+0xd0>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <MX_GPIO_Init+0xd0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <MX_GPIO_Init+0xd0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a25      	ldr	r2, [pc, #148]	@ (8001238 <MX_GPIO_Init+0xd0>)
 80011a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <MX_GPIO_Init+0xd0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <MX_GPIO_Init+0xd0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a1e      	ldr	r2, [pc, #120]	@ (8001238 <MX_GPIO_Init+0xd0>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <MX_GPIO_Init+0xd0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a17      	ldr	r2, [pc, #92]	@ (8001238 <MX_GPIO_Init+0xd0>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2120      	movs	r1, #32
 80011f2:	4812      	ldr	r0, [pc, #72]	@ (800123c <MX_GPIO_Init+0xd4>)
 80011f4:	f000 fbbe 	bl	8001974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	480c      	ldr	r0, [pc, #48]	@ (8001240 <MX_GPIO_Init+0xd8>)
 8001210:	f000 fa2c 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001214:	2320      	movs	r3, #32
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4804      	ldr	r0, [pc, #16]	@ (800123c <MX_GPIO_Init+0xd4>)
 800122c:	f000 fa1e 	bl	800166c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	@ 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020800 	.word	0x40020800

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
}
 800124a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <Error_Handler+0x8>

08001250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <HAL_MspInit+0x4c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	4a0f      	ldr	r2, [pc, #60]	@ (800129c <HAL_MspInit+0x4c>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001264:	6453      	str	r3, [r2, #68]	@ 0x44
 8001266:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <HAL_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <HAL_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	4a08      	ldr	r2, [pc, #32]	@ (800129c <HAL_MspInit+0x4c>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	@ 0x40
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a19      	ldr	r2, [pc, #100]	@ (8001324 <HAL_UART_MspInit+0x84>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d12b      	bne.n	800131a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <HAL_UART_MspInit+0x88>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	4a17      	ldr	r2, [pc, #92]	@ (8001328 <HAL_UART_MspInit+0x88>)
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <HAL_UART_MspInit+0x88>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <HAL_UART_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a10      	ldr	r2, [pc, #64]	@ (8001328 <HAL_UART_MspInit+0x88>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <HAL_UART_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012fa:	230c      	movs	r3, #12
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800130a:	2307      	movs	r3, #7
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	@ (800132c <HAL_UART_MspInit+0x8c>)
 8001316:	f000 f9a9 	bl	800166c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	@ 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40004400 	.word	0x40004400
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <NMI_Handler+0x4>

08001338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <MemManage_Handler+0x4>

08001348 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <UsageFault_Handler+0x4>

08001358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <SystemInit+0x20>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <SystemInit+0x20>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013ac:	f7ff ffea 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	@ (80013e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	@ (80013f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f000 fddf 	bl	8001f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff fe87 	bl	80010ec <main>
  bx  lr    
 80013de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013ec:	08002010 	.word	0x08002010
  ldr r2, =_sbss
 80013f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013f4:	200001d8 	.word	0x200001d8

080013f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC_IRQHandler>
	...

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001400:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	@ (800143c <HAL_Init+0x40>)
 8001406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800140a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <HAL_Init+0x40>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	@ (800143c <HAL_Init+0x40>)
 800141e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f8ed 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f808 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff ff0e 	bl	8001250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023c00 	.word	0x40023c00

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f8f7 	bl	8001652 <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f8cd 	bl	800161a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	@ (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000000 	.word	0x20000000
 8001498:	20000008 	.word	0x20000008
 800149c:	20000004 	.word	0x20000004

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	@ (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	@ (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	@ 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	@ 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff8e 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff47 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff5c 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff8e 	bl	8001558 <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5d 	bl	8001504 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffb0 	bl	80015c0 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	@ 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	e159      	b.n	800193c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001688:	2201      	movs	r2, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8148 	bne.w	8001936 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d005      	beq.n	80016be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d130      	bne.n	8001720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 0201 	and.w	r2, r3, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b03      	cmp	r3, #3
 800172a:	d017      	beq.n	800175c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d123      	bne.n	80017b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	69b9      	ldr	r1, [r7, #24]
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a2 	beq.w	8001936 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b57      	ldr	r3, [pc, #348]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	4a56      	ldr	r2, [pc, #344]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001800:	6453      	str	r3, [r2, #68]	@ 0x44
 8001802:	4b54      	ldr	r3, [pc, #336]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180e:	4a52      	ldr	r2, [pc, #328]	@ (8001958 <HAL_GPIO_Init+0x2ec>)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a49      	ldr	r2, [pc, #292]	@ (800195c <HAL_GPIO_Init+0x2f0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d019      	beq.n	800186e <HAL_GPIO_Init+0x202>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a48      	ldr	r2, [pc, #288]	@ (8001960 <HAL_GPIO_Init+0x2f4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d013      	beq.n	800186a <HAL_GPIO_Init+0x1fe>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a47      	ldr	r2, [pc, #284]	@ (8001964 <HAL_GPIO_Init+0x2f8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d00d      	beq.n	8001866 <HAL_GPIO_Init+0x1fa>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a46      	ldr	r2, [pc, #280]	@ (8001968 <HAL_GPIO_Init+0x2fc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d007      	beq.n	8001862 <HAL_GPIO_Init+0x1f6>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a45      	ldr	r2, [pc, #276]	@ (800196c <HAL_GPIO_Init+0x300>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <HAL_GPIO_Init+0x1f2>
 800185a:	2304      	movs	r3, #4
 800185c:	e008      	b.n	8001870 <HAL_GPIO_Init+0x204>
 800185e:	2307      	movs	r3, #7
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x204>
 8001862:	2303      	movs	r3, #3
 8001864:	e004      	b.n	8001870 <HAL_GPIO_Init+0x204>
 8001866:	2302      	movs	r3, #2
 8001868:	e002      	b.n	8001870 <HAL_GPIO_Init+0x204>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x204>
 800186e:	2300      	movs	r3, #0
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f002 0203 	and.w	r2, r2, #3
 8001876:	0092      	lsls	r2, r2, #2
 8001878:	4093      	lsls	r3, r2
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001880:	4935      	ldr	r1, [pc, #212]	@ (8001958 <HAL_GPIO_Init+0x2ec>)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800188e:	4b38      	ldr	r3, [pc, #224]	@ (8001970 <HAL_GPIO_Init+0x304>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001970 <HAL_GPIO_Init+0x304>)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <HAL_GPIO_Init+0x304>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018dc:	4a24      	ldr	r2, [pc, #144]	@ (8001970 <HAL_GPIO_Init+0x304>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018e2:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <HAL_GPIO_Init+0x304>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001906:	4a1a      	ldr	r2, [pc, #104]	@ (8001970 <HAL_GPIO_Init+0x304>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800190c:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <HAL_GPIO_Init+0x304>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001930:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <HAL_GPIO_Init+0x304>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3301      	adds	r3, #1
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	2b0f      	cmp	r3, #15
 8001940:	f67f aea2 	bls.w	8001688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3724      	adds	r7, #36	@ 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40013800 	.word	0x40013800
 800195c:	40020000 	.word	0x40020000
 8001960:	40020400 	.word	0x40020400
 8001964:	40020800 	.word	0x40020800
 8001968:	40020c00 	.word	0x40020c00
 800196c:	40021000 	.word	0x40021000
 8001970:	40013c00 	.word	0x40013c00

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ac:	4b03      	ldr	r3, [pc, #12]	@ (80019bc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000000 	.word	0x20000000

080019c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019c4:	f7ff fff0 	bl	80019a8 <HAL_RCC_GetHCLKFreq>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	0a9b      	lsrs	r3, r3, #10
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	4903      	ldr	r1, [pc, #12]	@ (80019e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019d6:	5ccb      	ldrb	r3, [r1, r3]
 80019d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	08001ff8 	.word	0x08001ff8

080019e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019ec:	f7ff ffdc 	bl	80019a8 <HAL_RCC_GetHCLKFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	0b5b      	lsrs	r3, r3, #13
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	4903      	ldr	r1, [pc, #12]	@ (8001a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	08001ff8 	.word	0x08001ff8

08001a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e042      	b.n	8001aa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fc32 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2224      	movs	r2, #36	@ 0x24
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f82b 	bl	8001ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695a      	ldr	r2, [r3, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2220      	movs	r2, #32
 8001a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab4:	b0c0      	sub	sp, #256	@ 0x100
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001acc:	68d9      	ldr	r1, [r3, #12]
 8001ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	ea40 0301 	orr.w	r3, r0, r1
 8001ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001b08:	f021 010c 	bic.w	r1, r1, #12
 8001b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001b16:	430b      	orrs	r3, r1
 8001b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b2a:	6999      	ldr	r1, [r3, #24]
 8001b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	ea40 0301 	orr.w	r3, r0, r1
 8001b36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b8f      	ldr	r3, [pc, #572]	@ (8001d7c <UART_SetConfig+0x2cc>)
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d005      	beq.n	8001b50 <UART_SetConfig+0xa0>
 8001b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4b8d      	ldr	r3, [pc, #564]	@ (8001d80 <UART_SetConfig+0x2d0>)
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d104      	bne.n	8001b5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b50:	f7ff ff4a 	bl	80019e8 <HAL_RCC_GetPCLK2Freq>
 8001b54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001b58:	e003      	b.n	8001b62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b5a:	f7ff ff31 	bl	80019c0 <HAL_RCC_GetPCLK1Freq>
 8001b5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b6c:	f040 810c 	bne.w	8001d88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b74:	2200      	movs	r2, #0
 8001b76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001b7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001b7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001b82:	4622      	mov	r2, r4
 8001b84:	462b      	mov	r3, r5
 8001b86:	1891      	adds	r1, r2, r2
 8001b88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001b8a:	415b      	adcs	r3, r3
 8001b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b92:	4621      	mov	r1, r4
 8001b94:	eb12 0801 	adds.w	r8, r2, r1
 8001b98:	4629      	mov	r1, r5
 8001b9a:	eb43 0901 	adc.w	r9, r3, r1
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb2:	4690      	mov	r8, r2
 8001bb4:	4699      	mov	r9, r3
 8001bb6:	4623      	mov	r3, r4
 8001bb8:	eb18 0303 	adds.w	r3, r8, r3
 8001bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001bc0:	462b      	mov	r3, r5
 8001bc2:	eb49 0303 	adc.w	r3, r9, r3
 8001bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001bd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001bda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001bde:	460b      	mov	r3, r1
 8001be0:	18db      	adds	r3, r3, r3
 8001be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8001be4:	4613      	mov	r3, r2
 8001be6:	eb42 0303 	adc.w	r3, r2, r3
 8001bea:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001bf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001bf4:	f7fe faee 	bl	80001d4 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4b61      	ldr	r3, [pc, #388]	@ (8001d84 <UART_SetConfig+0x2d4>)
 8001bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	011c      	lsls	r4, r3, #4
 8001c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001c10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001c14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001c18:	4642      	mov	r2, r8
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	1891      	adds	r1, r2, r2
 8001c1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001c20:	415b      	adcs	r3, r3
 8001c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c28:	4641      	mov	r1, r8
 8001c2a:	eb12 0a01 	adds.w	sl, r2, r1
 8001c2e:	4649      	mov	r1, r9
 8001c30:	eb43 0b01 	adc.w	fp, r3, r1
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c48:	4692      	mov	sl, r2
 8001c4a:	469b      	mov	fp, r3
 8001c4c:	4643      	mov	r3, r8
 8001c4e:	eb1a 0303 	adds.w	r3, sl, r3
 8001c52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001c56:	464b      	mov	r3, r9
 8001c58:	eb4b 0303 	adc.w	r3, fp, r3
 8001c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001c6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001c70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001c74:	460b      	mov	r3, r1
 8001c76:	18db      	adds	r3, r3, r3
 8001c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	eb42 0303 	adc.w	r3, r2, r3
 8001c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001c8a:	f7fe faa3 	bl	80001d4 <__aeabi_uldivmod>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4611      	mov	r1, r2
 8001c94:	4b3b      	ldr	r3, [pc, #236]	@ (8001d84 <UART_SetConfig+0x2d4>)
 8001c96:	fba3 2301 	umull	r2, r3, r3, r1
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2264      	movs	r2, #100	@ 0x64
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	1acb      	subs	r3, r1, r3
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001caa:	4b36      	ldr	r3, [pc, #216]	@ (8001d84 <UART_SetConfig+0x2d4>)
 8001cac:	fba3 2302 	umull	r2, r3, r3, r2
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001cb8:	441c      	add	r4, r3
 8001cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001cc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001cc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001ccc:	4642      	mov	r2, r8
 8001cce:	464b      	mov	r3, r9
 8001cd0:	1891      	adds	r1, r2, r2
 8001cd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001cd4:	415b      	adcs	r3, r3
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001cdc:	4641      	mov	r1, r8
 8001cde:	1851      	adds	r1, r2, r1
 8001ce0:	6339      	str	r1, [r7, #48]	@ 0x30
 8001ce2:	4649      	mov	r1, r9
 8001ce4:	414b      	adcs	r3, r1
 8001ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001cf4:	4659      	mov	r1, fp
 8001cf6:	00cb      	lsls	r3, r1, #3
 8001cf8:	4651      	mov	r1, sl
 8001cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cfe:	4651      	mov	r1, sl
 8001d00:	00ca      	lsls	r2, r1, #3
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	4642      	mov	r2, r8
 8001d0a:	189b      	adds	r3, r3, r2
 8001d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d10:	464b      	mov	r3, r9
 8001d12:	460a      	mov	r2, r1
 8001d14:	eb42 0303 	adc.w	r3, r2, r3
 8001d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001d28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001d2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001d30:	460b      	mov	r3, r1
 8001d32:	18db      	adds	r3, r3, r3
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d36:	4613      	mov	r3, r2
 8001d38:	eb42 0303 	adc.w	r3, r2, r3
 8001d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001d46:	f7fe fa45 	bl	80001d4 <__aeabi_uldivmod>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <UART_SetConfig+0x2d4>)
 8001d50:	fba3 1302 	umull	r1, r3, r3, r2
 8001d54:	095b      	lsrs	r3, r3, #5
 8001d56:	2164      	movs	r1, #100	@ 0x64
 8001d58:	fb01 f303 	mul.w	r3, r1, r3
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	3332      	adds	r3, #50	@ 0x32
 8001d62:	4a08      	ldr	r2, [pc, #32]	@ (8001d84 <UART_SetConfig+0x2d4>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	f003 0207 	and.w	r2, r3, #7
 8001d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4422      	add	r2, r4
 8001d76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001d78:	e106      	b.n	8001f88 <UART_SetConfig+0x4d8>
 8001d7a:	bf00      	nop
 8001d7c:	40011000 	.word	0x40011000
 8001d80:	40011400 	.word	0x40011400
 8001d84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001d92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001d96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001d9a:	4642      	mov	r2, r8
 8001d9c:	464b      	mov	r3, r9
 8001d9e:	1891      	adds	r1, r2, r2
 8001da0:	6239      	str	r1, [r7, #32]
 8001da2:	415b      	adcs	r3, r3
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001daa:	4641      	mov	r1, r8
 8001dac:	1854      	adds	r4, r2, r1
 8001dae:	4649      	mov	r1, r9
 8001db0:	eb43 0501 	adc.w	r5, r3, r1
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	00eb      	lsls	r3, r5, #3
 8001dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dc2:	00e2      	lsls	r2, r4, #3
 8001dc4:	4614      	mov	r4, r2
 8001dc6:	461d      	mov	r5, r3
 8001dc8:	4643      	mov	r3, r8
 8001dca:	18e3      	adds	r3, r4, r3
 8001dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001dd0:	464b      	mov	r3, r9
 8001dd2:	eb45 0303 	adc.w	r3, r5, r3
 8001dd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001de6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001df6:	4629      	mov	r1, r5
 8001df8:	008b      	lsls	r3, r1, #2
 8001dfa:	4621      	mov	r1, r4
 8001dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e00:	4621      	mov	r1, r4
 8001e02:	008a      	lsls	r2, r1, #2
 8001e04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001e08:	f7fe f9e4 	bl	80001d4 <__aeabi_uldivmod>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4b60      	ldr	r3, [pc, #384]	@ (8001f94 <UART_SetConfig+0x4e4>)
 8001e12:	fba3 2302 	umull	r2, r3, r3, r2
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	011c      	lsls	r4, r3, #4
 8001e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001e2c:	4642      	mov	r2, r8
 8001e2e:	464b      	mov	r3, r9
 8001e30:	1891      	adds	r1, r2, r2
 8001e32:	61b9      	str	r1, [r7, #24]
 8001e34:	415b      	adcs	r3, r3
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e3c:	4641      	mov	r1, r8
 8001e3e:	1851      	adds	r1, r2, r1
 8001e40:	6139      	str	r1, [r7, #16]
 8001e42:	4649      	mov	r1, r9
 8001e44:	414b      	adcs	r3, r1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e54:	4659      	mov	r1, fp
 8001e56:	00cb      	lsls	r3, r1, #3
 8001e58:	4651      	mov	r1, sl
 8001e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e5e:	4651      	mov	r1, sl
 8001e60:	00ca      	lsls	r2, r1, #3
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	4603      	mov	r3, r0
 8001e68:	4642      	mov	r2, r8
 8001e6a:	189b      	adds	r3, r3, r2
 8001e6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e70:	464b      	mov	r3, r9
 8001e72:	460a      	mov	r2, r1
 8001e74:	eb42 0303 	adc.w	r3, r2, r3
 8001e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001e94:	4649      	mov	r1, r9
 8001e96:	008b      	lsls	r3, r1, #2
 8001e98:	4641      	mov	r1, r8
 8001e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e9e:	4641      	mov	r1, r8
 8001ea0:	008a      	lsls	r2, r1, #2
 8001ea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ea6:	f7fe f995 	bl	80001d4 <__aeabi_uldivmod>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <UART_SetConfig+0x4e4>)
 8001eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2264      	movs	r2, #100	@ 0x64
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	1acb      	subs	r3, r1, r3
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	3332      	adds	r3, #50	@ 0x32
 8001ec4:	4a33      	ldr	r2, [pc, #204]	@ (8001f94 <UART_SetConfig+0x4e4>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ed0:	441c      	add	r4, r3
 8001ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	673b      	str	r3, [r7, #112]	@ 0x70
 8001eda:	677a      	str	r2, [r7, #116]	@ 0x74
 8001edc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001ee0:	4642      	mov	r2, r8
 8001ee2:	464b      	mov	r3, r9
 8001ee4:	1891      	adds	r1, r2, r2
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	415b      	adcs	r3, r3
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ef0:	4641      	mov	r1, r8
 8001ef2:	1851      	adds	r1, r2, r1
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	414b      	adcs	r3, r1
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f08:	4659      	mov	r1, fp
 8001f0a:	00cb      	lsls	r3, r1, #3
 8001f0c:	4651      	mov	r1, sl
 8001f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f12:	4651      	mov	r1, sl
 8001f14:	00ca      	lsls	r2, r1, #3
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4642      	mov	r2, r8
 8001f1e:	189b      	adds	r3, r3, r2
 8001f20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f22:	464b      	mov	r3, r9
 8001f24:	460a      	mov	r2, r1
 8001f26:	eb42 0303 	adc.w	r3, r2, r3
 8001f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f36:	667a      	str	r2, [r7, #100]	@ 0x64
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001f44:	4649      	mov	r1, r9
 8001f46:	008b      	lsls	r3, r1, #2
 8001f48:	4641      	mov	r1, r8
 8001f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f4e:	4641      	mov	r1, r8
 8001f50:	008a      	lsls	r2, r1, #2
 8001f52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001f56:	f7fe f93d 	bl	80001d4 <__aeabi_uldivmod>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f94 <UART_SetConfig+0x4e4>)
 8001f60:	fba3 1302 	umull	r1, r3, r3, r2
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	2164      	movs	r1, #100	@ 0x64
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	3332      	adds	r3, #50	@ 0x32
 8001f72:	4a08      	ldr	r2, [pc, #32]	@ (8001f94 <UART_SetConfig+0x4e4>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	f003 020f 	and.w	r2, r3, #15
 8001f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4422      	add	r2, r4
 8001f86:	609a      	str	r2, [r3, #8]
}
 8001f88:	bf00      	nop
 8001f8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f94:	51eb851f 	.word	0x51eb851f

08001f98 <__libc_init_array>:
 8001f98:	b570      	push	{r4, r5, r6, lr}
 8001f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8001fd0 <__libc_init_array+0x38>)
 8001f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8001fd4 <__libc_init_array+0x3c>)
 8001f9e:	1b64      	subs	r4, r4, r5
 8001fa0:	10a4      	asrs	r4, r4, #2
 8001fa2:	2600      	movs	r6, #0
 8001fa4:	42a6      	cmp	r6, r4
 8001fa6:	d109      	bne.n	8001fbc <__libc_init_array+0x24>
 8001fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8001fd8 <__libc_init_array+0x40>)
 8001faa:	4c0c      	ldr	r4, [pc, #48]	@ (8001fdc <__libc_init_array+0x44>)
 8001fac:	f000 f818 	bl	8001fe0 <_init>
 8001fb0:	1b64      	subs	r4, r4, r5
 8001fb2:	10a4      	asrs	r4, r4, #2
 8001fb4:	2600      	movs	r6, #0
 8001fb6:	42a6      	cmp	r6, r4
 8001fb8:	d105      	bne.n	8001fc6 <__libc_init_array+0x2e>
 8001fba:	bd70      	pop	{r4, r5, r6, pc}
 8001fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fc0:	4798      	blx	r3
 8001fc2:	3601      	adds	r6, #1
 8001fc4:	e7ee      	b.n	8001fa4 <__libc_init_array+0xc>
 8001fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fca:	4798      	blx	r3
 8001fcc:	3601      	adds	r6, #1
 8001fce:	e7f2      	b.n	8001fb6 <__libc_init_array+0x1e>
 8001fd0:	08002008 	.word	0x08002008
 8001fd4:	08002008 	.word	0x08002008
 8001fd8:	08002008 	.word	0x08002008
 8001fdc:	0800200c 	.word	0x0800200c

08001fe0 <_init>:
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	bf00      	nop
 8001fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe6:	bc08      	pop	{r3}
 8001fe8:	469e      	mov	lr, r3
 8001fea:	4770      	bx	lr

08001fec <_fini>:
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fee:	bf00      	nop
 8001ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ff2:	bc08      	pop	{r3}
 8001ff4:	469e      	mov	lr, r3
 8001ff6:	4770      	bx	lr
