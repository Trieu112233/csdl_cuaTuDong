
cuaTuDong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004acc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08004c70  08004c70  00005c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005050  08005050  000071c8  2**0
                  CONTENTS
  4 .ARM          00000008  08005050  08005050  00006050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005058  08005058  000071c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005058  08005058  00006058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800505c  0800505c  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c8  20000000  08005060  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  200001c8  08005228  000071c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08005228  000074b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c93  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010b3  00000000  00000000  0000ae8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  0000bf40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000275  00000000  00000000  0000c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001637d  00000000  00000000  0000c53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e7c  00000000  00000000  000228ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008618d  00000000  00000000  00028736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae8c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ca8  00000000  00000000  000ae908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b05b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c54 	.word	0x08004c54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	08004c54 	.word	0x08004c54

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <EXTI_ClearPendingBit>:

    NVIC_SetPriority(irq_number, priority);
    NVIC_EnableIRQ(irq_number);
}

void EXTI_ClearPendingBit(uint8_t exti_line) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
    if (exti_line > 15) return;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d806      	bhi.n	8000bd6 <EXTI_ClearPendingBit+0x1e>
    // Ghi 1 vào bit tương ứng trong Pending Register để xóa nó
    EXTI->PR = (1U << exti_line);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a06      	ldr	r2, [pc, #24]	@ (8000be4 <EXTI_ClearPendingBit+0x2c>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	6153      	str	r3, [r2, #20]
 8000bd4:	e000      	b.n	8000bd8 <EXTI_ClearPendingBit+0x20>
    if (exti_line > 15) return;
 8000bd6:	bf00      	nop
}
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40013c00 	.word	0x40013c00

08000be8 <EXTI_IRQHandler_Helper>:
// --- Trình xử lý ngắt (ISRs) ---
// Các hàm này cần được định nghĩa với tên chính xác như trong vector ngắt.
// Chúng sẽ kiểm tra cờ pending và gọi callback tương ứng.

// Helper function để xử lý logic chung trong ISR
static void EXTI_IRQHandler_Helper(uint8_t exti_line_start, uint8_t exti_line_end) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e01c      	b.n	8000c38 <EXTI_IRQHandler_Helper+0x50>
        // Kiểm tra cờ Pending Bit cho từng line
        if ((EXTI->PR & (1U << line)) != 0) {
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <EXTI_IRQHandler_Helper+0x64>)
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	2101      	movs	r1, #1
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d010      	beq.n	8000c32 <EXTI_IRQHandler_Helper+0x4a>
            // Xóa Pending Bit trước khi gọi callback (quan trọng!)
            EXTI_ClearPendingBit(line);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ffd0 	bl	8000bb8 <EXTI_ClearPendingBit>

            // Gọi callback nếu có
            if (g_exti_callbacks[line] != NULL) {
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <EXTI_IRQHandler_Helper+0x68>)
 8000c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <EXTI_IRQHandler_Helper+0x4a>
                g_exti_callbacks[line](line);
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <EXTI_IRQHandler_Helper+0x68>)
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4798      	blx	r3
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	3301      	adds	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d9de      	bls.n	8000bfe <EXTI_IRQHandler_Helper+0x16>
            }
        }
    }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40013c00 	.word	0x40013c00
 8000c50:	200001e4 	.word	0x200001e4

08000c54 <EXTI0_IRQHandler>:

// ISR cho EXTI Line 0
void EXTI0_IRQHandler(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(0, 0);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff ffc4 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <EXTI1_IRQHandler>:

// ISR cho EXTI Line 1
void EXTI1_IRQHandler(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(1, 1);
 8000c68:	2101      	movs	r1, #1
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff ffbc 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <EXTI2_IRQHandler>:

// ISR cho EXTI Line 2
void EXTI2_IRQHandler(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(2, 2);
 8000c78:	2102      	movs	r1, #2
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f7ff ffb4 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <EXTI3_IRQHandler>:

// ISR cho EXTI Line 3
void EXTI3_IRQHandler(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(3, 3);
 8000c88:	2103      	movs	r1, #3
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f7ff ffac 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <EXTI4_IRQHandler>:

// ISR cho EXTI Line 4
void EXTI4_IRQHandler(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(4, 4);
 8000c98:	2104      	movs	r1, #4
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f7ff ffa4 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <EXTI9_5_IRQHandler>:

// ISR cho EXTI Lines 5 đến 9
void EXTI9_5_IRQHandler(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(5, 9);
 8000ca8:	2109      	movs	r1, #9
 8000caa:	2005      	movs	r0, #5
 8000cac:	f7ff ff9c 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <EXTI15_10_IRQHandler>:

// ISR cho EXTI Lines 10 đến 15
void EXTI15_10_IRQHandler(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(10, 15);
 8000cb8:	210f      	movs	r1, #15
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f7ff ff94 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <GPIO_ClockCmd>:
 */

#include "gpio_driver.h"

// Helper function to enable/disable clock for GPIO port
void GPIO_ClockCmd(GPIO_TypeDef* GPIOx, uint8_t NewState) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
    if (NewState == CLOCK_CMD_ENABLE) {
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d141      	bne.n	8000d5a <GPIO_ClockCmd+0x96>
        if (GPIOx == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a3e      	ldr	r2, [pc, #248]	@ (8000dd4 <GPIO_ClockCmd+0x110>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d106      	bne.n	8000cec <GPIO_ClockCmd+0x28>
 8000cde:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
        // ...
    }
}
 8000cea:	e06c      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a3b      	ldr	r2, [pc, #236]	@ (8000ddc <GPIO_ClockCmd+0x118>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d106      	bne.n	8000d02 <GPIO_ClockCmd+0x3e>
 8000cf4:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf8:	4a37      	ldr	r2, [pc, #220]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d00:	e061      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a36      	ldr	r2, [pc, #216]	@ (8000de0 <GPIO_ClockCmd+0x11c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d106      	bne.n	8000d18 <GPIO_ClockCmd+0x54>
 8000d0a:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a32      	ldr	r2, [pc, #200]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d16:	e056      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a32      	ldr	r2, [pc, #200]	@ (8000de4 <GPIO_ClockCmd+0x120>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d106      	bne.n	8000d2e <GPIO_ClockCmd+0x6a>
 8000d20:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d24:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d2c:	e04b      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a2d      	ldr	r2, [pc, #180]	@ (8000de8 <GPIO_ClockCmd+0x124>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d106      	bne.n	8000d44 <GPIO_ClockCmd+0x80>
 8000d36:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a27      	ldr	r2, [pc, #156]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d42:	e040      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a29      	ldr	r2, [pc, #164]	@ (8000dec <GPIO_ClockCmd+0x128>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d13c      	bne.n	8000dc6 <GPIO_ClockCmd+0x102>
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d50:	4a21      	ldr	r2, [pc, #132]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d56:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d58:	e035      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        if (GPIOx == GPIOA) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd4 <GPIO_ClockCmd+0x110>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d106      	bne.n	8000d70 <GPIO_ClockCmd+0xac>
 8000d62:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d6e:	e02a      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOBEN;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a1a      	ldr	r2, [pc, #104]	@ (8000ddc <GPIO_ClockCmd+0x118>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d106      	bne.n	8000d86 <GPIO_ClockCmd+0xc2>
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d7e:	f023 0302 	bic.w	r3, r3, #2
 8000d82:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d84:	e01f      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a15      	ldr	r2, [pc, #84]	@ (8000de0 <GPIO_ClockCmd+0x11c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d106      	bne.n	8000d9c <GPIO_ClockCmd+0xd8>
 8000d8e:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a11      	ldr	r2, [pc, #68]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d94:	f023 0304 	bic.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d9a:	e014      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <GPIO_ClockCmd+0x120>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d106      	bne.n	8000db2 <GPIO_ClockCmd+0xee>
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000daa:	f023 0308 	bic.w	r3, r3, #8
 8000dae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000db0:	e009      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a0c      	ldr	r2, [pc, #48]	@ (8000de8 <GPIO_ClockCmd+0x124>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d105      	bne.n	8000dc6 <GPIO_ClockCmd+0x102>
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000dc0:	f023 0310 	bic.w	r3, r3, #16
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40021c00 	.word	0x40021c00

08000df0 <GPIO_InitPin>:


void GPIO_InitPin(GPIO_TypeDef* GPIOx, uint16_t pin, uint32_t mode, uint32_t pull,
                  uint32_t speed, uint32_t otype, uint32_t alt_func) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	817b      	strh	r3, [r7, #10]
    uint32_t position;
    uint32_t iocurrent;
    uint32_t temp;

    // Enable clock for the GPIO port
    GPIO_ClockCmd(GPIOx, CLOCK_CMD_ENABLE);
 8000e00:	2101      	movs	r1, #1
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f7ff ff5e 	bl	8000cc4 <GPIO_ClockCmd>

    for (position = 0; position < 16; position++) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	e0a4      	b.n	8000f58 <GPIO_InitPin+0x168>
        iocurrent = (0x1U << position); // Mask for current pin
 8000e0e:	2201      	movs	r2, #1
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	61bb      	str	r3, [r7, #24]
        if (pin & iocurrent) {          // If this pin is selected
 8000e18:	897a      	ldrh	r2, [r7, #10]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 8097 	beq.w	8000f52 <GPIO_InitPin+0x162>
            // 1. Configure Mode (Input, Output, AF, Analog)
            temp = GPIOx->MODER;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2)); // Clear mode bits for this pin
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
            temp |= (mode << (position * 2));
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]
            GPIOx->MODER = temp;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	601a      	str	r2, [r3, #0]

            if ((mode == GPIO_MODE_OUTPUT) || (mode == GPIO_MODE_AF)) {
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d002      	beq.n	8000e5e <GPIO_InitPin+0x6e>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d12b      	bne.n	8000eb6 <GPIO_InitPin+0xc6>
                // 2. Configure Speed
                temp = GPIOx->OSPEEDR;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	617b      	str	r3, [r7, #20]
                temp &= ~(0x03U << (position * 2));
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	4013      	ands	r3, r2
 8000e74:	617b      	str	r3, [r7, #20]
                temp |= (speed << (position * 2));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
                GPIOx->OSPEEDR = temp;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	609a      	str	r2, [r3, #8]

                // 3. Configure Output Type (Push-Pull or Open-Drain)
                temp = GPIOx->OTYPER;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	617b      	str	r3, [r7, #20]
                temp &= ~(0x01U << position);
 8000e92:	2201      	movs	r2, #1
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	617b      	str	r3, [r7, #20]
                temp |= (otype << position);
 8000ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
                GPIOx->OTYPER = temp;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	605a      	str	r2, [r3, #4]
            }

            // 4. Configure Pull-up/Pull-down
            temp = GPIOx->PUPDR;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
            temp |= (pull << (position * 2));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
            GPIOx->PUPDR = temp;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	60da      	str	r2, [r3, #12]

            // 5. Configure Alternate Function (if AF mode)
            if (mode == GPIO_MODE_AF) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d133      	bne.n	8000f52 <GPIO_InitPin+0x162>
                if (position < 8) { // AFR[0] for pins 0-7
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	d817      	bhi.n	8000f20 <GPIO_InitPin+0x130>
                    temp = GPIOx->AFR[0];
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << (position * 4));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << (position * 4));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[0] = temp;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	621a      	str	r2, [r3, #32]
 8000f1e:	e018      	b.n	8000f52 <GPIO_InitPin+0x162>
                } else { // AFR[1] for pins 8-15
                    temp = GPIOx->AFR[1];
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f24:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << ((position - 8) * 4));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4013      	ands	r3, r2
 8000f38:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << ((position - 8) * 4));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b08      	subs	r3, #8
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[1] = temp;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	625a      	str	r2, [r3, #36]	@ 0x24
    for (position = 0; position < 16; position++) {
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3301      	adds	r3, #1
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	f67f af57 	bls.w	8000e0e <GPIO_InitPin+0x1e>
                }
            }
        }
    }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <GPIO_WritePin>:
    } else {
        return GPIO_PIN_RESET;
    }
}

void GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t pin, uint8_t state) {
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	807b      	strh	r3, [r7, #2]
 8000f76:	4613      	mov	r3, r2
 8000f78:	707b      	strb	r3, [r7, #1]
    if (state == GPIO_PIN_SET) {
 8000f7a:	787b      	ldrb	r3, [r7, #1]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d103      	bne.n	8000f88 <GPIO_WritePin+0x1e>
        GPIOx->BSRR = (uint32_t)pin; // Set bit
 8000f80:	887a      	ldrh	r2, [r7, #2]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
    }
}
 8000f86:	e003      	b.n	8000f90 <GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	041a      	lsls	r2, r3, #16
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	619a      	str	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <GPIO_TogglePin>:

void GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t pin) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
    GPIOx->ODR ^= pin;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	405a      	eors	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	615a      	str	r2, [r3, #20]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SystemClock_Config>:
  #define PLL_P_REG_VAL 0x03U
#else
  #error "Invalid PLL_P_VAL. Must be 2, 4, 6, or 8."
#endif

void SystemClock_Config(void) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
    uint32_t temp_reg; // Biến tạm, tránh warning unused nếu không có MODIFY_REG

    // 1. Bật HSE và đợi nó ổn định (nếu dùng HSE là nguồn PLL)
    RCC->CR |= RCC_CR_HSEON;
 8000fc6:	4b47      	ldr	r3, [pc, #284]	@ (80010e4 <SystemClock_Config+0x124>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a46      	ldr	r2, [pc, #280]	@ (80010e4 <SystemClock_Config+0x124>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8000fd2:	bf00      	nop
 8000fd4:	4b43      	ldr	r3, [pc, #268]	@ (80010e4 <SystemClock_Config+0x124>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f9      	beq.n	8000fd4 <SystemClock_Config+0x14>

    // 2. Cấu hình Power Control Register
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000fe0:	4b40      	ldr	r3, [pc, #256]	@ (80010e4 <SystemClock_Config+0x124>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	4a3f      	ldr	r2, [pc, #252]	@ (80010e4 <SystemClock_Config+0x124>)
 8000fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fea:	6413      	str	r3, [r2, #64]	@ 0x40
    temp_reg = PWR->CR;
 8000fec:	4b3e      	ldr	r3, [pc, #248]	@ (80010e8 <SystemClock_Config+0x128>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	607b      	str	r3, [r7, #4]
    temp_reg &= ~PWR_CR_VOS;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ff8:	607b      	str	r3, [r7, #4]
    temp_reg |= PWR_CR_VOS_1; // Scale 2
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001000:	607b      	str	r3, [r7, #4]
    PWR->CR = temp_reg;
 8001002:	4a39      	ldr	r2, [pc, #228]	@ (80010e8 <SystemClock_Config+0x128>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6013      	str	r3, [r2, #0]

    // 3. Cấu hình các hệ số chia cho HCLK, PCLK1, PCLK2
    temp_reg = RCC->CFGR;
 8001008:	4b36      	ldr	r3, [pc, #216]	@ (80010e4 <SystemClock_Config+0x124>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_HPRE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001014:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_HPRE_DIV1;
    RCC->CFGR = temp_reg;
 8001016:	4a33      	ldr	r2, [pc, #204]	@ (80010e4 <SystemClock_Config+0x124>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 800101c:	4b31      	ldr	r3, [pc, #196]	@ (80010e4 <SystemClock_Config+0x124>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE1;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001028:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE1_DIV2;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001030:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 8001032:	4a2c      	ldr	r2, [pc, #176]	@ (80010e4 <SystemClock_Config+0x124>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 8001038:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <SystemClock_Config+0x124>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE2;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001044:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE2_DIV1;
    RCC->CFGR = temp_reg;
 8001046:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <SystemClock_Config+0x124>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6093      	str	r3, [r2, #8]

    // 4. Cấu hình PLL
    RCC->CR &= ~RCC_CR_PLLON;
 800104c:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <SystemClock_Config+0x124>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a24      	ldr	r2, [pc, #144]	@ (80010e4 <SystemClock_Config+0x124>)
 8001052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001056:	6013      	str	r3, [r2, #0]
    while(RCC->CR & RCC_CR_PLLRDY);
 8001058:	bf00      	nop
 800105a:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <SystemClock_Config+0x124>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f9      	bne.n	800105a <SystemClock_Config+0x9a>

    RCC->PLLCFGR = (PLL_Q_VAL << RCC_PLLCFGR_PLLQ_Pos) |
 8001066:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <SystemClock_Config+0x124>)
 8001068:	4a20      	ldr	r2, [pc, #128]	@ (80010ec <SystemClock_Config+0x12c>)
 800106a:	605a      	str	r2, [r3, #4]
                   (PLL_P_REG_VAL << RCC_PLLCFGR_PLLP_Pos)|
                   (PLL_N_VAL << RCC_PLLCFGR_PLLN_Pos) |
                   (PLL_M_VAL << RCC_PLLCFGR_PLLM_Pos);

    // 5. Bật PLL và đợi nó ổn định
    RCC->CR |= RCC_CR_PLLON;
 800106c:	4b1d      	ldr	r3, [pc, #116]	@ (80010e4 <SystemClock_Config+0x124>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1c      	ldr	r2, [pc, #112]	@ (80010e4 <SystemClock_Config+0x124>)
 8001072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001076:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8001078:	bf00      	nop
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <SystemClock_Config+0x124>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f9      	beq.n	800107a <SystemClock_Config+0xba>

    // 6. Cấu hình Flash latency
    temp_reg = FLASH->ACR;
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <SystemClock_Config+0x130>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	607b      	str	r3, [r7, #4]
    temp_reg &= ~FLASH_ACR_LATENCY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f023 0307 	bic.w	r3, r3, #7
 8001092:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_LATENCY_2WS;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_PRFTEN;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a2:	607b      	str	r3, [r7, #4]
    FLASH->ACR = temp_reg;
 80010a4:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <SystemClock_Config+0x130>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]

    // 7. Chọn PLL làm nguồn SYSCLK
    temp_reg = RCC->CFGR;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <SystemClock_Config+0x124>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_SW;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_SW_PLL;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 80010c0:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <SystemClock_Config+0x124>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80010c6:	bf00      	nop
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <SystemClock_Config+0x124>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d1f9      	bne.n	80010c8 <SystemClock_Config+0x108>
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000
 80010ec:	07415408 	.word	0x07415408
 80010f0:	40023c00 	.word	0x40023c00

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	@ (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	@ (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <SysTick_Init>:
#include "stm32f401xe.h"
#include "rcc_config.h"

static volatile uint32_t g_sysTickCounter = 0;

void SysTick_Init(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	// 1. Tính toán giá trị nạp cho SysTick để có tick mỗi 1ms
	// (HCLK / 1000) - 1 vì SysTick đếm từ LOAD_VAL về 0 (LOAD_VAL + 1 chu kỳ)
	uint32_t reload_value = (HCLK_FREQUENCY_HZ / 1000U) - 1U;
 800114e:	4b13      	ldr	r3, [pc, #76]	@ (800119c <SysTick_Init+0x54>)
 8001150:	607b      	str	r3, [r7, #4]

	// 2. Cấu hình SysTick
    // Vô hiệu hóa SysTick trước khi cấu hình
    SysTick->CTRL = 0;
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <SysTick_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

    // Nạp giá trị reload
    SysTick->LOAD = reload_value;
 8001158:	4a11      	ldr	r2, [pc, #68]	@ (80011a0 <SysTick_Init+0x58>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6053      	str	r3, [r2, #4]

    // Đặt ưu tiên ngắt SysTick cho Cortex-M4 (4 bit ưu tiên)
    NVIC_SetPriority(SysTick_IRQn, 15); // Mức ưu tiên 15 (thấp nhất nếu 4 bit prio)
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ffc6 	bl	80010f4 <__NVIC_SetPriority>

    // Reset bộ đếm SysTick hiện tại
    SysTick->VAL = 0;
 8001168:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <SysTick_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]

    // Kích hoạt SysTick với nguồn clock là HCLK và bật ngắt
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // CLKSOURCE = AHB clock
 800116e:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <SysTick_Init+0x58>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <SysTick_Init+0x58>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;   // Enable SysTick interrupt
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <SysTick_Init+0x58>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <SysTick_Init+0x58>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;    // Enable SysTick
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <SysTick_Init+0x58>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <SysTick_Init+0x58>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6013      	str	r3, [r2, #0]
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	0001481f 	.word	0x0001481f
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <GetTick>:
	while ((g_sysTickCounter - start_tick) < ms){

	}
}

uint32_t GetTick(void){
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	return g_sysTickCounter;
 80011a8:	4b03      	ldr	r3, [pc, #12]	@ (80011b8 <GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000224 	.word	0x20000224

080011bc <IncTick>:

void IncTick(void){
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
	g_sysTickCounter ++;
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <IncTick+0x18>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a03      	ldr	r2, [pc, #12]	@ (80011d4 <IncTick+0x18>)
 80011c8:	6013      	str	r3, [r2, #0]
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	20000224 	.word	0x20000224

080011d8 <SysTick_Handler>:

void SysTick_Handler(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	IncTick();
 80011dc:	f7ff ffee 	bl	80011bc <IncTick>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <__NVIC_EnableIRQ>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4907      	ldr	r1, [pc, #28]	@ (800121c <__NVIC_EnableIRQ+0x38>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_DisableIRQ>:
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db12      	blt.n	8001258 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 021f 	and.w	r2, r3, #31
 8001238:	490a      	ldr	r1, [pc, #40]	@ (8001264 <__NVIC_DisableIRQ+0x44>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	2001      	movs	r0, #1
 8001242:	fa00 f202 	lsl.w	r2, r0, r2
 8001246:	3320      	adds	r3, #32
 8001248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800124c:	f3bf 8f4f 	dsb	sy
}
 8001250:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001252:	f3bf 8f6f 	isb	sy
}
 8001256:	bf00      	nop
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100

08001268 <__NVIC_SetPriority>:
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db0a      	blt.n	8001292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <__NVIC_SetPriority+0x4c>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	0112      	lsls	r2, r2, #4
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	440b      	add	r3, r1
 800128c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001290:	e00a      	b.n	80012a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <__NVIC_SetPriority+0x50>)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	3b04      	subs	r3, #4
 80012a0:	0112      	lsls	r2, r2, #4
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	440b      	add	r3, r1
 80012a6:	761a      	strb	r2, [r3, #24]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <UART2_Init>:
static uart_tx_complete_callback_t g_uart2_tx_complete_callback = NULL;

// Thêm biến theo dõi lỗi UART
static volatile uint8_t g_uart2_error_flags = 0;

void UART2_Init(uint32_t baudrate, uint32_t word_length, uint32_t parity, uint32_t stop_bits) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08c      	sub	sp, #48	@ 0x30
 80012c0:	af04      	add	r7, sp, #16
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
    // 1. Bật clock cho USART2 và GPIOA
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80012ca:	4b51      	ldr	r3, [pc, #324]	@ (8001410 <UART2_Init+0x154>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	4a50      	ldr	r2, [pc, #320]	@ (8001410 <UART2_Init+0x154>)
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d4:	6413      	str	r3, [r2, #64]	@ 0x40
    GPIO_ClockCmd(GPIOA, CLOCK_CMD_ENABLE);
 80012d6:	2101      	movs	r1, #1
 80012d8:	484e      	ldr	r0, [pc, #312]	@ (8001414 <UART2_Init+0x158>)
 80012da:	f7ff fcf3 	bl	8000cc4 <GPIO_ClockCmd>

    // 2. Cấu hình chân GPIOA PA2 (TX) và PA3 (RX) cho AF7 (USART2)
    GPIO_InitPin(GPIOA, (1U << 2), GPIO_MODE_AF, GPIO_PULL_UP, GPIO_SPEED_HIGH, GPIO_OTYPE_PUSHPULL, 7); // PA2 TX
 80012de:	2307      	movs	r3, #7
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	2302      	movs	r3, #2
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	2202      	movs	r2, #2
 80012ee:	2104      	movs	r1, #4
 80012f0:	4848      	ldr	r0, [pc, #288]	@ (8001414 <UART2_Init+0x158>)
 80012f2:	f7ff fd7d 	bl	8000df0 <GPIO_InitPin>
    GPIO_InitPin(GPIOA, (1U << 3), GPIO_MODE_AF, GPIO_PULL_UP, GPIO_SPEED_HIGH, GPIO_OTYPE_PUSHPULL, 7); // PA3 RX
 80012f6:	2307      	movs	r3, #7
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	2302      	movs	r3, #2
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	2202      	movs	r2, #2
 8001306:	2108      	movs	r1, #8
 8001308:	4842      	ldr	r0, [pc, #264]	@ (8001414 <UART2_Init+0x158>)
 800130a:	f7ff fd71 	bl	8000df0 <GPIO_InitPin>

    // 3. Vô hiệu hóa UART trước khi cấu hình
    USART2->CR1 &= ~USART_CR1_UE;
 800130e:	4b42      	ldr	r3, [pc, #264]	@ (8001418 <UART2_Init+0x15c>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	4a41      	ldr	r2, [pc, #260]	@ (8001418 <UART2_Init+0x15c>)
 8001314:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001318:	60d3      	str	r3, [r2, #12]

    // 4. Cấu hình Word Length, Parity
    USART2->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS);
 800131a:	4b3f      	ldr	r3, [pc, #252]	@ (8001418 <UART2_Init+0x15c>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	4a3e      	ldr	r2, [pc, #248]	@ (8001418 <UART2_Init+0x15c>)
 8001320:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001324:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= word_length;
 8001326:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <UART2_Init+0x15c>)
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	493b      	ldr	r1, [pc, #236]	@ (8001418 <UART2_Init+0x15c>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
 8001330:	60cb      	str	r3, [r1, #12]
    USART2->CR1 |= parity;
 8001332:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <UART2_Init+0x15c>)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	4938      	ldr	r1, [pc, #224]	@ (8001418 <UART2_Init+0x15c>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4313      	orrs	r3, r2
 800133c:	60cb      	str	r3, [r1, #12]

    // 5. Cấu hình Stop Bits
    USART2->CR2 &= ~USART_CR2_STOP;
 800133e:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <UART2_Init+0x15c>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	4a35      	ldr	r2, [pc, #212]	@ (8001418 <UART2_Init+0x15c>)
 8001344:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001348:	6113      	str	r3, [r2, #16]
    USART2->CR2 |= stop_bits;
 800134a:	4b33      	ldr	r3, [pc, #204]	@ (8001418 <UART2_Init+0x15c>)
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	4932      	ldr	r1, [pc, #200]	@ (8001418 <UART2_Init+0x15c>)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	4313      	orrs	r3, r2
 8001354:	610b      	str	r3, [r1, #16]

    // 6. Cấu hình Baud Rate với độ chính xác cao hơn
    uint32_t pclk1_freq = PCLK1_FREQUENCY_HZ; // Lấy từ rcc_config.h
 8001356:	4b31      	ldr	r3, [pc, #196]	@ (800141c <UART2_Init+0x160>)
 8001358:	617b      	str	r3, [r7, #20]
    // Tính toán USARTDIV với độ chính xác cao hơn
    uint32_t integer_div = (25 * pclk1_freq) / (4 * baudrate);
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	009a      	lsls	r2, r3, #2
 8001364:	441a      	add	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	613b      	str	r3, [r7, #16]
    uint32_t mantissa = integer_div / 100;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4a2b      	ldr	r2, [pc, #172]	@ (8001420 <UART2_Init+0x164>)
 8001374:	fba2 2303 	umull	r2, r3, r2, r3
 8001378:	095b      	lsrs	r3, r3, #5
 800137a:	61fb      	str	r3, [r7, #28]
    uint32_t fraction = ((integer_div - (mantissa * 100)) * 16 + 50) / 100;
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2264      	movs	r2, #100	@ 0x64
 8001380:	fb02 f303 	mul.w	r3, r2, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	3332      	adds	r3, #50	@ 0x32
 800138c:	4a24      	ldr	r2, [pc, #144]	@ (8001420 <UART2_Init+0x164>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	61bb      	str	r3, [r7, #24]
        
    // Xử lý trường hợp fraction = 16
    if (fraction == 16) {
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b10      	cmp	r3, #16
 800139a:	d104      	bne.n	80013a6 <UART2_Init+0xea>
        mantissa++;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3301      	adds	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
        fraction = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
    }
        
    USART2->BRR = (mantissa << 4) | (fraction & 0xFU);
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	011a      	lsls	r2, r3, #4
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	4919      	ldr	r1, [pc, #100]	@ (8001418 <UART2_Init+0x15c>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]

    // 7. Cấu hình Control Register: Bật TX, RX và RXNE Interrupt
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 80013b6:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <UART2_Init+0x15c>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	4a17      	ldr	r2, [pc, #92]	@ (8001418 <UART2_Init+0x15c>)
 80013bc:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 80013c0:	60d3      	str	r3, [r2, #12]
    // USART2->CR3 &= ~USART_CR3_CTSE; // Tắt CTS flow control
    // USART2->CR3 &= ~USART_CR3_RTSE; // Tắt RTS flow control

    // 8. Reset trạng thái buffer
    g_uart2_rx_buffer_head = 0;
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <UART2_Init+0x168>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_tail = 0;
 80013c8:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <UART2_Init+0x16c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_count = 0;
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <UART2_Init+0x170>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_head = 0;
 80013d4:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <UART2_Init+0x174>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_tail = 0;
 80013da:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <UART2_Init+0x178>)
 80013dc:	2200      	movs	r2, #0
 80013de:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_count = 0;
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <UART2_Init+0x17c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_busy = false;
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <UART2_Init+0x180>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]

    // 9. Cấu hình ngắt trong NVIC
    NVIC_SetPriority(USART2_IRQn, 14); // Đặt mức ưu tiên
 80013ec:	210e      	movs	r1, #14
 80013ee:	2026      	movs	r0, #38	@ 0x26
 80013f0:	f7ff ff3a 	bl	8001268 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 80013f4:	2026      	movs	r0, #38	@ 0x26
 80013f6:	f7ff fef5 	bl	80011e4 <__NVIC_EnableIRQ>

    // 10. Bật UART
    USART2->CR1 |= USART_CR1_UE;
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <UART2_Init+0x15c>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	4a06      	ldr	r2, [pc, #24]	@ (8001418 <UART2_Init+0x15c>)
 8001400:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001404:	60d3      	str	r3, [r2, #12]
}
 8001406:	bf00      	nop
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40020000 	.word	0x40020000
 8001418:	40004400 	.word	0x40004400
 800141c:	0280de80 	.word	0x0280de80
 8001420:	51eb851f 	.word	0x51eb851f
 8001424:	200002a8 	.word	0x200002a8
 8001428:	200002aa 	.word	0x200002aa
 800142c:	200002ac 	.word	0x200002ac
 8001430:	20000330 	.word	0x20000330
 8001434:	20000332 	.word	0x20000332
 8001438:	20000334 	.word	0x20000334
 800143c:	20000336 	.word	0x20000336

08001440 <UART2_SendBuffer_IT>:

bool UART2_SendBuffer_IT(const uint8_t* buffer, uint16_t length) {
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
    if (length == 0) return true;
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <UART2_SendBuffer_IT+0x16>
 8001452:	2301      	movs	r3, #1
 8001454:	e04b      	b.n	80014ee <UART2_SendBuffer_IT+0xae>
    if (g_uart2_tx_busy || (UART2_TX_BUFFER_SIZE - g_uart2_tx_buffer_count) < length) {
 8001456:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <UART2_SendBuffer_IT+0xbc>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d107      	bne.n	8001470 <UART2_SendBuffer_IT+0x30>
 8001460:	4b27      	ldr	r3, [pc, #156]	@ (8001500 <UART2_SendBuffer_IT+0xc0>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	f1c3 0280 	rsb	r2, r3, #128	@ 0x80
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	429a      	cmp	r2, r3
 800146e:	da01      	bge.n	8001474 <UART2_SendBuffer_IT+0x34>
        return false;
 8001470:	2300      	movs	r3, #0
 8001472:	e03c      	b.n	80014ee <UART2_SendBuffer_IT+0xae>
    }

    // Tạm thời vô hiệu hóa ngắt TXE để cập nhật buffer an toàn
    USART2->CR1 &= ~USART_CR1_TXEIE;
 8001474:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <UART2_SendBuffer_IT+0xc4>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4a22      	ldr	r2, [pc, #136]	@ (8001504 <UART2_SendBuffer_IT+0xc4>)
 800147a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800147e:	60d3      	str	r3, [r2, #12]

    for (uint16_t i = 0; i < length; i++) {
 8001480:	2300      	movs	r3, #0
 8001482:	81fb      	strh	r3, [r7, #14]
 8001484:	e019      	b.n	80014ba <UART2_SendBuffer_IT+0x7a>
        g_uart2_tx_buffer[g_uart2_tx_buffer_tail] = buffer[i];
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	4a1e      	ldr	r2, [pc, #120]	@ (8001508 <UART2_SendBuffer_IT+0xc8>)
 800148e:	8812      	ldrh	r2, [r2, #0]
 8001490:	b292      	uxth	r2, r2
 8001492:	7819      	ldrb	r1, [r3, #0]
 8001494:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <UART2_SendBuffer_IT+0xcc>)
 8001496:	5499      	strb	r1, [r3, r2]
        g_uart2_tx_buffer_tail = (g_uart2_tx_buffer_tail + 1) % UART2_TX_BUFFER_SIZE;
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <UART2_SendBuffer_IT+0xc8>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	425a      	negs	r2, r3
 80014a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80014aa:	bf58      	it	pl
 80014ac:	4253      	negpl	r3, r2
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <UART2_SendBuffer_IT+0xc8>)
 80014b2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	3301      	adds	r3, #1
 80014b8:	81fb      	strh	r3, [r7, #14]
 80014ba:	89fa      	ldrh	r2, [r7, #14]
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3e1      	bcc.n	8001486 <UART2_SendBuffer_IT+0x46>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c2:	b672      	cpsid	i
}
 80014c4:	bf00      	nop
    }
    // đảm bảo critical section
    __disable_irq(); // Critical section
    g_uart2_tx_buffer_count += length;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001500 <UART2_SendBuffer_IT+0xc0>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	4413      	add	r3, r2
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <UART2_SendBuffer_IT+0xc0>)
 80014d4:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_busy = true;
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <UART2_SendBuffer_IT+0xbc>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014dc:	b662      	cpsie	i
}
 80014de:	bf00      	nop
    __enable_irq();  // End critical section

    // Kích hoạt ngắt TXE để bắt đầu gửi byte đầu tiên từ ISR
    USART2->CR1 |= USART_CR1_TXEIE;
 80014e0:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <UART2_SendBuffer_IT+0xc4>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <UART2_SendBuffer_IT+0xc4>)
 80014e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ea:	60d3      	str	r3, [r2, #12]

    return true;
 80014ec:	2301      	movs	r3, #1
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000336 	.word	0x20000336
 8001500:	20000334 	.word	0x20000334
 8001504:	40004400 	.word	0x40004400
 8001508:	20000332 	.word	0x20000332
 800150c:	200002b0 	.word	0x200002b0

08001510 <UART2_ReadByte_FromBuffer>:

bool UART2_IsTxBusy(void) {
    return g_uart2_tx_busy;
}

bool UART2_ReadByte_FromBuffer(uint8_t* data) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
    if (g_uart2_rx_buffer_count == 0) {
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <UART2_ReadByte_FromBuffer+0x68>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b29b      	uxth	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <UART2_ReadByte_FromBuffer+0x16>
        return false; // Buffer rỗng
 8001522:	2300      	movs	r3, #0
 8001524:	e024      	b.n	8001570 <UART2_ReadByte_FromBuffer+0x60>
    }

    // Vô hiệu hóa chỉ ngắt UART2 thay vì tất cả các ngắt
    NVIC_DisableIRQ(USART2_IRQn);
 8001526:	2026      	movs	r0, #38	@ 0x26
 8001528:	f7ff fe7a 	bl	8001220 <__NVIC_DisableIRQ>
    
    *data = g_uart2_rx_buffer[g_uart2_rx_buffer_head];
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <UART2_ReadByte_FromBuffer+0x6c>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	b29b      	uxth	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <UART2_ReadByte_FromBuffer+0x70>)
 8001536:	5c9b      	ldrb	r3, [r3, r2]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	701a      	strb	r2, [r3, #0]
    g_uart2_rx_buffer_head = (g_uart2_rx_buffer_head + 1) % UART2_RX_BUFFER_SIZE;
 800153e:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <UART2_ReadByte_FromBuffer+0x6c>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	3301      	adds	r3, #1
 8001546:	425a      	negs	r2, r3
 8001548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800154c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001550:	bf58      	it	pl
 8001552:	4253      	negpl	r3, r2
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <UART2_ReadByte_FromBuffer+0x6c>)
 8001558:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_count--;
 800155a:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <UART2_ReadByte_FromBuffer+0x68>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <UART2_ReadByte_FromBuffer+0x68>)
 8001566:	801a      	strh	r2, [r3, #0]
    
    // Kích hoạt lại ngắt UART2
    NVIC_EnableIRQ(USART2_IRQn);
 8001568:	2026      	movs	r0, #38	@ 0x26
 800156a:	f7ff fe3b 	bl	80011e4 <__NVIC_EnableIRQ>

    return true;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200002ac 	.word	0x200002ac
 800157c:	200002a8 	.word	0x200002a8
 8001580:	20000228 	.word	0x20000228

08001584 <UART2_GetErrorFlags>:

void UART2_RegisterTxCompleteCallback(uart_tx_complete_callback_t callback) {
    g_uart2_tx_complete_callback = callback;
}

uint8_t UART2_GetErrorFlags(void) {
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
    return g_uart2_error_flags;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <UART2_GetErrorFlags+0x14>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	2000033c 	.word	0x2000033c

0800159c <UART2_ClearErrorFlags>:

void UART2_ClearErrorFlags(uint8_t flags) {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80015a6:	b672      	cpsid	i
}
 80015a8:	bf00      	nop
    __disable_irq();
    g_uart2_error_flags &= ~flags;
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	b25a      	sxtb	r2, r3
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <UART2_ClearErrorFlags+0x38>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	4013      	ands	r3, r2
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <UART2_ClearErrorFlags+0x38>)
 80015c2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015c4:	b662      	cpsie	i
}
 80015c6:	bf00      	nop
    __enable_irq();
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	2000033c 	.word	0x2000033c

080015d8 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
    uint32_t sr_reg = USART2->SR; // Đọc thanh ghi SR một lần
 80015de:	4b6e      	ldr	r3, [pc, #440]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60fb      	str	r3, [r7, #12]

    // --- Xử lý ngắt RXNE (Receive Data Register Not Empty) ---
    if ((sr_reg & USART_SR_RXNE) && (USART2->CR1 & USART_CR1_RXNEIE)) {
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d032      	beq.n	8001654 <USART2_IRQHandler+0x7c>
 80015ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d02c      	beq.n	8001654 <USART2_IRQHandler+0x7c>
        uint8_t received_byte = (uint8_t)(USART2->DR & 0xFFU);
 80015fa:	4b67      	ldr	r3, [pc, #412]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	72fb      	strb	r3, [r7, #11]

        if (g_uart2_rx_buffer_count < UART2_RX_BUFFER_SIZE) {
 8001600:	4b66      	ldr	r3, [pc, #408]	@ (800179c <USART2_IRQHandler+0x1c4>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	2b7f      	cmp	r3, #127	@ 0x7f
 8001608:	d81c      	bhi.n	8001644 <USART2_IRQHandler+0x6c>
            g_uart2_rx_buffer[g_uart2_rx_buffer_tail] = received_byte;
 800160a:	4b65      	ldr	r3, [pc, #404]	@ (80017a0 <USART2_IRQHandler+0x1c8>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	4a64      	ldr	r2, [pc, #400]	@ (80017a4 <USART2_IRQHandler+0x1cc>)
 8001614:	7afb      	ldrb	r3, [r7, #11]
 8001616:	5453      	strb	r3, [r2, r1]
            g_uart2_rx_buffer_tail = (g_uart2_rx_buffer_tail + 1) % UART2_RX_BUFFER_SIZE;
 8001618:	4b61      	ldr	r3, [pc, #388]	@ (80017a0 <USART2_IRQHandler+0x1c8>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	3301      	adds	r3, #1
 8001620:	425a      	negs	r2, r3
 8001622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001626:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800162a:	bf58      	it	pl
 800162c:	4253      	negpl	r3, r2
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b5b      	ldr	r3, [pc, #364]	@ (80017a0 <USART2_IRQHandler+0x1c8>)
 8001632:	801a      	strh	r2, [r3, #0]
            g_uart2_rx_buffer_count++;
 8001634:	4b59      	ldr	r3, [pc, #356]	@ (800179c <USART2_IRQHandler+0x1c4>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	3301      	adds	r3, #1
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b57      	ldr	r3, [pc, #348]	@ (800179c <USART2_IRQHandler+0x1c4>)
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	e007      	b.n	8001654 <USART2_IRQHandler+0x7c>
        } else {
            // Buffer RX đầy, đánh dấu lỗi bằng cách thêm cờ
            g_uart2_error_flags |= UART_ERROR_BUFFER_FULL;
 8001644:	4b58      	ldr	r3, [pc, #352]	@ (80017a8 <USART2_IRQHandler+0x1d0>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b55      	ldr	r3, [pc, #340]	@ (80017a8 <USART2_IRQHandler+0x1d0>)
 8001652:	701a      	strb	r2, [r3, #0]
        }
        // Cờ RXNE tự xóa khi đọc DR.
    }

    // --- Xử lý ngắt TXE (Transmit Data Register Empty) ---
    if ((sr_reg & USART_SR_TXE) && (USART2->CR1 & USART_CR1_TXEIE)) {
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800165a:	2b00      	cmp	r3, #0
 800165c:	d039      	beq.n	80016d2 <USART2_IRQHandler+0xfa>
 800165e:	4b4e      	ldr	r3, [pc, #312]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001666:	2b00      	cmp	r3, #0
 8001668:	d033      	beq.n	80016d2 <USART2_IRQHandler+0xfa>
        if (g_uart2_tx_buffer_count > 0) {
 800166a:	4b50      	ldr	r3, [pc, #320]	@ (80017ac <USART2_IRQHandler+0x1d4>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d02e      	beq.n	80016d2 <USART2_IRQHandler+0xfa>
            USART2->DR = g_uart2_tx_buffer[g_uart2_tx_buffer_head];
 8001674:	4b4e      	ldr	r3, [pc, #312]	@ (80017b0 <USART2_IRQHandler+0x1d8>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	b29b      	uxth	r3, r3
 800167a:	461a      	mov	r2, r3
 800167c:	4b4d      	ldr	r3, [pc, #308]	@ (80017b4 <USART2_IRQHandler+0x1dc>)
 800167e:	5c9b      	ldrb	r3, [r3, r2]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b45      	ldr	r3, [pc, #276]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 8001684:	605a      	str	r2, [r3, #4]
            g_uart2_tx_buffer_head = (g_uart2_tx_buffer_head + 1) % UART2_TX_BUFFER_SIZE;
 8001686:	4b4a      	ldr	r3, [pc, #296]	@ (80017b0 <USART2_IRQHandler+0x1d8>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	3301      	adds	r3, #1
 800168e:	425a      	negs	r2, r3
 8001690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001694:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001698:	bf58      	it	pl
 800169a:	4253      	negpl	r3, r2
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b44      	ldr	r3, [pc, #272]	@ (80017b0 <USART2_IRQHandler+0x1d8>)
 80016a0:	801a      	strh	r2, [r3, #0]
            g_uart2_tx_buffer_count--;
 80016a2:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <USART2_IRQHandler+0x1d4>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b3f      	ldr	r3, [pc, #252]	@ (80017ac <USART2_IRQHandler+0x1d4>)
 80016ae:	801a      	strh	r2, [r3, #0]

            if (g_uart2_tx_buffer_count == 0) {
 80016b0:	4b3e      	ldr	r3, [pc, #248]	@ (80017ac <USART2_IRQHandler+0x1d4>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10b      	bne.n	80016d2 <USART2_IRQHandler+0xfa>
                // Đã gửi hết buffer, tắt ngắt TXE
                USART2->CR1 &= ~USART_CR1_TXEIE;
 80016ba:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	4a36      	ldr	r2, [pc, #216]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 80016c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016c4:	60d3      	str	r3, [r2, #12]
                // Bật ngắt TC (Transmission Complete) để biết khi nào byte cuối cùng thực sự ra khỏi shift register
                USART2->CR1 |= USART_CR1_TCIE;
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	4a33      	ldr	r2, [pc, #204]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 80016cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016d0:	60d3      	str	r3, [r2, #12]
        }
        // Cờ TXE tự xóa khi ghi vào DR.
    }

    // --- Xử lý ngắt TC (Transmission Complete) ---
    if ((sr_reg & USART_SR_TC) && (USART2->CR1 & USART_CR1_TCIE)) {
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01b      	beq.n	8001714 <USART2_IRQHandler+0x13c>
 80016dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d015      	beq.n	8001714 <USART2_IRQHandler+0x13c>
        // Byte cuối cùng đã được gửi hoàn toàn
        USART2->CR1 &= ~USART_CR1_TCIE; // Tắt ngắt TC
 80016e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 80016ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80016f2:	60d3      	str	r3, [r2, #12]
        g_uart2_tx_busy = false;      // Đánh dấu  không còn bận gửi
 80016f4:	4b30      	ldr	r3, [pc, #192]	@ (80017b8 <USART2_IRQHandler+0x1e0>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]

        if (g_uart2_tx_complete_callback != NULL) {
 80016fa:	4b30      	ldr	r3, [pc, #192]	@ (80017bc <USART2_IRQHandler+0x1e4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <USART2_IRQHandler+0x130>
            g_uart2_tx_complete_callback();
 8001702:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <USART2_IRQHandler+0x1e4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4798      	blx	r3
        }
        // Cờ TC được xóa bằng cách ghi 0 vào nó (hoặc đọc SR rồi ghi vào DR - nhưng ở đây đã xong TX)
        USART2->SR &= ~USART_SR_TC; // Xóa cờ TC
 8001708:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a22      	ldr	r2, [pc, #136]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 800170e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001712:	6013      	str	r3, [r2, #0]
    }


    // --- Xử lý các cờ lỗi (Overrun, Noise, Framing, Parity) ---
    if (sr_reg & (USART_SR_ORE | USART_SR_NE | USART_SR_FE | USART_SR_PE)) {
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	2b00      	cmp	r3, #0
 800171c:	d037      	beq.n	800178e <USART2_IRQHandler+0x1b6>
        // Lưu lại lỗi để ứng dụng có thể kiểm tra
        if (sr_reg & USART_SR_ORE) g_uart2_error_flags |= UART_ERROR_OVERRUN;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <USART2_IRQHandler+0x160>
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <USART2_IRQHandler+0x1d0>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <USART2_IRQHandler+0x1d0>)
 8001736:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_NE) g_uart2_error_flags |= UART_ERROR_NOISE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <USART2_IRQHandler+0x17a>
 8001742:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <USART2_IRQHandler+0x1d0>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <USART2_IRQHandler+0x1d0>)
 8001750:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_FE) g_uart2_error_flags |= UART_ERROR_FRAMING;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <USART2_IRQHandler+0x194>
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <USART2_IRQHandler+0x1d0>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <USART2_IRQHandler+0x1d0>)
 800176a:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_PE) g_uart2_error_flags |= UART_ERROR_PARITY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <USART2_IRQHandler+0x1ae>
 8001776:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <USART2_IRQHandler+0x1d0>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <USART2_IRQHandler+0x1d0>)
 8001784:	701a      	strb	r2, [r3, #0]
        
        // Đọc DR để xóa cờ lỗi
        volatile uint32_t temp_dr = USART2->DR;
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <USART2_IRQHandler+0x1c0>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	607b      	str	r3, [r7, #4]
        (void)temp_dr; // Tránh warning
 800178c:	687b      	ldr	r3, [r7, #4]
    }
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40004400 	.word	0x40004400
 800179c:	200002ac 	.word	0x200002ac
 80017a0:	200002aa 	.word	0x200002aa
 80017a4:	20000228 	.word	0x20000228
 80017a8:	2000033c 	.word	0x2000033c
 80017ac:	20000334 	.word	0x20000334
 80017b0:	20000330 	.word	0x20000330
 80017b4:	200002b0 	.word	0x200002b0
 80017b8:	20000336 	.word	0x20000336
 80017bc:	20000338 	.word	0x20000338

080017c0 <UARTProto_Init>:
// Forward declarations of static helper functions
static void reset_rx_parser(void);
static void process_received_frame_logic(void);
static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length);

void UARTProto_Init(uart_command_handler_callback_t command_callback) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    g_app_command_callback = command_callback;
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <UARTProto_Init+0x1c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
    reset_rx_parser();
 80017ce:	f000 f87d 	bl	80018cc <reset_rx_parser>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000354 	.word	0x20000354

080017e0 <actually_send_frame>:

static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	603a      	str	r2, [r7, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	460b      	mov	r3, r1
 80017f0:	71bb      	strb	r3, [r7, #6]
 80017f2:	4613      	mov	r3, r2
 80017f4:	717b      	strb	r3, [r7, #5]
    // This check is redundant if UARTProto_SendFrame also checks, but harmless.
    if (length > MAX_PAYLOAD_LENGTH) {
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d901      	bls.n	8001800 <actually_send_frame+0x20>
        return false;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e045      	b.n	800188c <actually_send_frame+0xac>
    }

    uint8_t frame_buffer[MAX_FRAME_LENGTH];
    uint8_t frame_idx = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	75fb      	strb	r3, [r7, #23]

    frame_buffer[frame_idx++] = FRAME_START_BYTE;
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	75fa      	strb	r2, [r7, #23]
 800180a:	3318      	adds	r3, #24
 800180c:	443b      	add	r3, r7
 800180e:	227e      	movs	r2, #126	@ 0x7e
 8001810:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = (uint8_t)type;
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	75fa      	strb	r2, [r7, #23]
 800181a:	3318      	adds	r3, #24
 800181c:	443b      	add	r3, r7
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = id;
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	75fa      	strb	r2, [r7, #23]
 800182a:	3318      	adds	r3, #24
 800182c:	443b      	add	r3, r7
 800182e:	79ba      	ldrb	r2, [r7, #6]
 8001830:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = length;
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	75fa      	strb	r2, [r7, #23]
 800183a:	3318      	adds	r3, #24
 800183c:	443b      	add	r3, r7
 800183e:	797a      	ldrb	r2, [r7, #5]
 8001840:	f803 2c0c 	strb.w	r2, [r3, #-12]

    if (length > 0 && payload != NULL) {
 8001844:	797b      	ldrb	r3, [r7, #5]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00f      	beq.n	800186a <actually_send_frame+0x8a>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00c      	beq.n	800186a <actually_send_frame+0x8a>
        memcpy(&frame_buffer[frame_idx], payload, length);
 8001850:	7dfb      	ldrb	r3, [r7, #23]
 8001852:	f107 020c 	add.w	r2, r7, #12
 8001856:	4413      	add	r3, r2
 8001858:	797a      	ldrb	r2, [r7, #5]
 800185a:	6839      	ldr	r1, [r7, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f001 f9ae 	bl	8002bbe <memcpy>
        frame_idx += length;
 8001862:	7dfa      	ldrb	r2, [r7, #23]
 8001864:	797b      	ldrb	r3, [r7, #5]
 8001866:	4413      	add	r3, r2
 8001868:	75fb      	strb	r3, [r7, #23]
    }
    frame_buffer[frame_idx++] = FRAME_END_BYTE;
 800186a:	7dfb      	ldrb	r3, [r7, #23]
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	75fa      	strb	r2, [r7, #23]
 8001870:	3318      	adds	r3, #24
 8001872:	443b      	add	r3, r7
 8001874:	227f      	movs	r2, #127	@ 0x7f
 8001876:	f803 2c0c 	strb.w	r2, [r3, #-12]

    return UART2_SendBuffer_IT(frame_buffer, frame_idx);
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	b29a      	uxth	r2, r3
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fddb 	bl	8001440 <UART2_SendBuffer_IT>
 800188a:	4603      	mov	r3, r0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <UARTProto_SendFrame>:

bool UARTProto_SendFrame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	603a      	str	r2, [r7, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
 80018a2:	460b      	mov	r3, r1
 80018a4:	71bb      	strb	r3, [r7, #6]
 80018a6:	4613      	mov	r3, r2
 80018a8:	717b      	strb	r3, [r7, #5]
    if (length > MAX_PAYLOAD_LENGTH) {
 80018aa:	797b      	ldrb	r3, [r7, #5]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d901      	bls.n	80018b4 <UARTProto_SendFrame+0x20>
        return false; // Payload too long
 80018b0:	2300      	movs	r3, #0
 80018b2:	e006      	b.n	80018c2 <UARTProto_SendFrame+0x2e>
    }
    return actually_send_frame(type, id, payload, length);
 80018b4:	797b      	ldrb	r3, [r7, #5]
 80018b6:	79b9      	ldrb	r1, [r7, #6]
 80018b8:	79f8      	ldrb	r0, [r7, #7]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	f7ff ff90 	bl	80017e0 <actually_send_frame>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <reset_rx_parser>:

static void reset_rx_parser(void) {
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
    g_rx_state = STATE_WAIT_START;
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <reset_rx_parser+0x20>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
    g_rx_buffer_idx = 0;
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <reset_rx_parser+0x24>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
    g_expected_payload_len = 0;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <reset_rx_parser+0x28>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	2000033d 	.word	0x2000033d
 80018f0:	20000349 	.word	0x20000349
 80018f4:	20000353 	.word	0x20000353

080018f8 <process_received_frame_logic>:

static void process_received_frame_logic(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
    // This function is called when a complete, structurally valid frame
    // of type FRAME_TYPE_LABVIEW_TO_STM has been received.
    // Frame data is in g_current_rx_frame.

    // Only expect to process commands from LabVIEW.
    if (g_current_rx_frame.type != FRAME_TYPE_LABVIEW_TO_STM) {
 80018fc:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <process_received_frame_logic+0x5c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d120      	bne.n	8001946 <process_received_frame_logic+0x4e>
        return; 
    }

    switch (g_current_rx_frame.id) {
 8001904:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <process_received_frame_logic+0x5c>)
 8001906:	785b      	ldrb	r3, [r3, #1]
 8001908:	2b10      	cmp	r3, #16
 800190a:	d002      	beq.n	8001912 <process_received_frame_logic+0x1a>
 800190c:	2b13      	cmp	r3, #19
 800190e:	d00d      	beq.n	800192c <process_received_frame_logic+0x34>
            }
            break;

        default:
            // Unknown command ID received from LabVIEW. Silently ignore or log.
            break;
 8001910:	e01e      	b.n	8001950 <process_received_frame_logic+0x58>
            if (g_current_rx_frame.length == 1) {
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <process_received_frame_logic+0x5c>)
 8001914:	799b      	ldrb	r3, [r3, #6]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d117      	bne.n	800194a <process_received_frame_logic+0x52>
                if (g_app_command_callback != NULL) {
 800191a:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <process_received_frame_logic+0x60>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d013      	beq.n	800194a <process_received_frame_logic+0x52>
                    g_app_command_callback(&g_current_rx_frame);
 8001922:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <process_received_frame_logic+0x60>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	480b      	ldr	r0, [pc, #44]	@ (8001954 <process_received_frame_logic+0x5c>)
 8001928:	4798      	blx	r3
            break;
 800192a:	e00e      	b.n	800194a <process_received_frame_logic+0x52>
            if (g_current_rx_frame.length == 0) {
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <process_received_frame_logic+0x5c>)
 800192e:	799b      	ldrb	r3, [r3, #6]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10c      	bne.n	800194e <process_received_frame_logic+0x56>
                if (g_app_command_callback != NULL) {
 8001934:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <process_received_frame_logic+0x60>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <process_received_frame_logic+0x56>
                    g_app_command_callback(&g_current_rx_frame);
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <process_received_frame_logic+0x60>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4804      	ldr	r0, [pc, #16]	@ (8001954 <process_received_frame_logic+0x5c>)
 8001942:	4798      	blx	r3
            break;
 8001944:	e003      	b.n	800194e <process_received_frame_logic+0x56>
        return; 
 8001946:	bf00      	nop
 8001948:	e002      	b.n	8001950 <process_received_frame_logic+0x58>
            break;
 800194a:	bf00      	nop
 800194c:	e000      	b.n	8001950 <process_received_frame_logic+0x58>
            break;
 800194e:	bf00      	nop
    }
    // No ACK or NACK is sent.
}
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000034c 	.word	0x2000034c
 8001958:	20000354 	.word	0x20000354

0800195c <UARTProto_Process>:

void UARTProto_Process(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
    uint8_t byte;
    while (UART2_ReadByte_FromBuffer(&byte)) {
 8001962:	e0b8      	b.n	8001ad6 <UARTProto_Process+0x17a>
        // Prevent buffer overflow if a malformed frame is too long
        if (g_rx_state != STATE_WAIT_START && g_rx_buffer_idx >= MAX_FRAME_LENGTH) {
 8001964:	4b62      	ldr	r3, [pc, #392]	@ (8001af0 <UARTProto_Process+0x194>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <UARTProto_Process+0x1c>
 800196c:	4b61      	ldr	r3, [pc, #388]	@ (8001af4 <UARTProto_Process+0x198>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b08      	cmp	r3, #8
 8001972:	d901      	bls.n	8001978 <UARTProto_Process+0x1c>
            reset_rx_parser();
 8001974:	f7ff ffaa 	bl	80018cc <reset_rx_parser>
            // After reset, the current 'byte' might be a START_BYTE
        }

        switch (g_rx_state) {
 8001978:	4b5d      	ldr	r3, [pc, #372]	@ (8001af0 <UARTProto_Process+0x194>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b05      	cmp	r3, #5
 800197e:	f200 80a4 	bhi.w	8001aca <UARTProto_Process+0x16e>
 8001982:	a201      	add	r2, pc, #4	@ (adr r2, 8001988 <UARTProto_Process+0x2c>)
 8001984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001988:	080019a1 	.word	0x080019a1
 800198c:	080019c5 	.word	0x080019c5
 8001990:	080019f5 	.word	0x080019f5
 8001994:	08001a17 	.word	0x08001a17
 8001998:	08001a5b 	.word	0x08001a5b
 800199c:	08001a9d 	.word	0x08001a9d
            case STATE_WAIT_START:
                if (byte == FRAME_START_BYTE) {
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	2b7e      	cmp	r3, #126	@ 0x7e
 80019a4:	f040 8094 	bne.w	8001ad0 <UARTProto_Process+0x174>
                    // g_rx_buffer_idx is 0 due to reset_rx_parser()
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 80019a8:	4b52      	ldr	r3, [pc, #328]	@ (8001af4 <UARTProto_Process+0x198>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	b2d1      	uxtb	r1, r2
 80019b0:	4a50      	ldr	r2, [pc, #320]	@ (8001af4 <UARTProto_Process+0x198>)
 80019b2:	7011      	strb	r1, [r2, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	79b9      	ldrb	r1, [r7, #6]
 80019b8:	4b4f      	ldr	r3, [pc, #316]	@ (8001af8 <UARTProto_Process+0x19c>)
 80019ba:	5499      	strb	r1, [r3, r2]
                    g_rx_state = STATE_WAIT_TYPE;
 80019bc:	4b4c      	ldr	r3, [pc, #304]	@ (8001af0 <UARTProto_Process+0x194>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
                }
                break;
 80019c2:	e085      	b.n	8001ad0 <UARTProto_Process+0x174>

            case STATE_WAIT_TYPE:
                g_current_rx_frame.type = (FrameType_t)byte;
 80019c4:	79ba      	ldrb	r2, [r7, #6]
 80019c6:	4b4d      	ldr	r3, [pc, #308]	@ (8001afc <UARTProto_Process+0x1a0>)
 80019c8:	701a      	strb	r2, [r3, #0]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 80019ca:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <UARTProto_Process+0x198>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	b2d1      	uxtb	r1, r2
 80019d2:	4a48      	ldr	r2, [pc, #288]	@ (8001af4 <UARTProto_Process+0x198>)
 80019d4:	7011      	strb	r1, [r2, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	79b9      	ldrb	r1, [r7, #6]
 80019da:	4b47      	ldr	r3, [pc, #284]	@ (8001af8 <UARTProto_Process+0x19c>)
 80019dc:	5499      	strb	r1, [r3, r2]
                if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 80019de:	4b47      	ldr	r3, [pc, #284]	@ (8001afc <UARTProto_Process+0x1a0>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d103      	bne.n	80019ee <UARTProto_Process+0x92>
                    g_rx_state = STATE_WAIT_ID;
 80019e6:	4b42      	ldr	r3, [pc, #264]	@ (8001af0 <UARTProto_Process+0x194>)
 80019e8:	2202      	movs	r2, #2
 80019ea:	701a      	strb	r2, [r3, #0]
                } else {
                    // Received an unexpected frame type (e.g., STM_TO_LABVIEW type, or invalid)
                    reset_rx_parser();
                }
                break;
 80019ec:	e073      	b.n	8001ad6 <UARTProto_Process+0x17a>
                    reset_rx_parser();
 80019ee:	f7ff ff6d 	bl	80018cc <reset_rx_parser>
                break;
 80019f2:	e070      	b.n	8001ad6 <UARTProto_Process+0x17a>

            case STATE_WAIT_ID:
                g_current_rx_frame.id = byte;
 80019f4:	79ba      	ldrb	r2, [r7, #6]
 80019f6:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <UARTProto_Process+0x1a0>)
 80019f8:	705a      	strb	r2, [r3, #1]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 80019fa:	4b3e      	ldr	r3, [pc, #248]	@ (8001af4 <UARTProto_Process+0x198>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	b2d1      	uxtb	r1, r2
 8001a02:	4a3c      	ldr	r2, [pc, #240]	@ (8001af4 <UARTProto_Process+0x198>)
 8001a04:	7011      	strb	r1, [r2, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	79b9      	ldrb	r1, [r7, #6]
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001af8 <UARTProto_Process+0x19c>)
 8001a0c:	5499      	strb	r1, [r3, r2]
                g_rx_state = STATE_WAIT_LENGTH;
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <UARTProto_Process+0x194>)
 8001a10:	2203      	movs	r2, #3
 8001a12:	701a      	strb	r2, [r3, #0]
                break;
 8001a14:	e05f      	b.n	8001ad6 <UARTProto_Process+0x17a>

            case STATE_WAIT_LENGTH:
                if (byte > MAX_PAYLOAD_LENGTH) {
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d902      	bls.n	8001a22 <UARTProto_Process+0xc6>
                    reset_rx_parser(); // Error: payload length field is too large
 8001a1c:	f7ff ff56 	bl	80018cc <reset_rx_parser>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
                    } else {
                        g_rx_state = STATE_WAIT_PAYLOAD;
                    }
                }
                break;
 8001a20:	e059      	b.n	8001ad6 <UARTProto_Process+0x17a>
                    g_current_rx_frame.length = byte;
 8001a22:	79ba      	ldrb	r2, [r7, #6]
 8001a24:	4b35      	ldr	r3, [pc, #212]	@ (8001afc <UARTProto_Process+0x1a0>)
 8001a26:	719a      	strb	r2, [r3, #6]
                    g_expected_payload_len = byte;
 8001a28:	79ba      	ldrb	r2, [r7, #6]
 8001a2a:	4b35      	ldr	r3, [pc, #212]	@ (8001b00 <UARTProto_Process+0x1a4>)
 8001a2c:	701a      	strb	r2, [r3, #0]
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 8001a2e:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <UARTProto_Process+0x198>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	b2d1      	uxtb	r1, r2
 8001a36:	4a2f      	ldr	r2, [pc, #188]	@ (8001af4 <UARTProto_Process+0x198>)
 8001a38:	7011      	strb	r1, [r2, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	79b9      	ldrb	r1, [r7, #6]
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <UARTProto_Process+0x19c>)
 8001a40:	5499      	strb	r1, [r3, r2]
                    if (g_expected_payload_len == 0) {
 8001a42:	4b2f      	ldr	r3, [pc, #188]	@ (8001b00 <UARTProto_Process+0x1a4>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d103      	bne.n	8001a52 <UARTProto_Process+0xf6>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
 8001a4a:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <UARTProto_Process+0x194>)
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	701a      	strb	r2, [r3, #0]
                break;
 8001a50:	e041      	b.n	8001ad6 <UARTProto_Process+0x17a>
                        g_rx_state = STATE_WAIT_PAYLOAD;
 8001a52:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <UARTProto_Process+0x194>)
 8001a54:	2204      	movs	r2, #4
 8001a56:	701a      	strb	r2, [r3, #0]
                break;
 8001a58:	e03d      	b.n	8001ad6 <UARTProto_Process+0x17a>

            case STATE_WAIT_PAYLOAD:
                // Current payload byte's 0-based index in the payload array.
                // Header (START,TYPE,ID,LENGTH) is 4 bytes.
                // g_rx_buffer_idx is count of bytes in g_rx_buffer *before* adding current 'byte'.
                uint8_t payload_byte_index = g_rx_buffer_idx - 4;
 8001a5a:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <UARTProto_Process+0x198>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	71fb      	strb	r3, [r7, #7]

                // Ensure we don't write past allocated payload buffer, though g_expected_payload_len should protect this.
                if (payload_byte_index < MAX_PAYLOAD_LENGTH) {
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d805      	bhi.n	8001a74 <UARTProto_Process+0x118>
                     g_current_rx_frame.payload[payload_byte_index] = byte;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	79b9      	ldrb	r1, [r7, #6]
 8001a6c:	4a23      	ldr	r2, [pc, #140]	@ (8001afc <UARTProto_Process+0x1a0>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	460a      	mov	r2, r1
 8001a72:	709a      	strb	r2, [r3, #2]
                }
                g_rx_buffer[g_rx_buffer_idx++] = byte; // Store current payload byte in raw buffer
 8001a74:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <UARTProto_Process+0x198>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	b2d1      	uxtb	r1, r2
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <UARTProto_Process+0x198>)
 8001a7e:	7011      	strb	r1, [r2, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	79b9      	ldrb	r1, [r7, #6]
 8001a84:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <UARTProto_Process+0x19c>)
 8001a86:	5499      	strb	r1, [r3, r2]

                if ((payload_byte_index + 1) >= g_expected_payload_len) {
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b00 <UARTProto_Process+0x1a4>)
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	db1f      	blt.n	8001ad4 <UARTProto_Process+0x178>
                    g_rx_state = STATE_WAIT_END; // All expected payload bytes received
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <UARTProto_Process+0x194>)
 8001a96:	2205      	movs	r2, #5
 8001a98:	701a      	strb	r2, [r3, #0]
                }
                break;
 8001a9a:	e01b      	b.n	8001ad4 <UARTProto_Process+0x178>

            case STATE_WAIT_END:
                if (byte == FRAME_END_BYTE) {
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001aa0:	d110      	bne.n	8001ac4 <UARTProto_Process+0x168>
                    // Frame is structurally complete.
                    // g_rx_buffer_idx is count of (START,TYPE,ID,LENGTH,PAYLOAD bytes).
                    // Expected count = 4 + g_current_rx_frame.length.
                    if (g_rx_buffer_idx == (4 + g_current_rx_frame.length)) {
 8001aa2:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <UARTProto_Process+0x198>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <UARTProto_Process+0x1a0>)
 8001aaa:	799b      	ldrb	r3, [r3, #6]
 8001aac:	3304      	adds	r3, #4
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d106      	bne.n	8001ac0 <UARTProto_Process+0x164>
                        // Only process if it's a command from LabVIEW (already checked at TYPE stage)
                        if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 8001ab2:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <UARTProto_Process+0x1a0>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d104      	bne.n	8001ac4 <UARTProto_Process+0x168>
                            process_received_frame_logic();
 8001aba:	f7ff ff1d 	bl	80018f8 <process_received_frame_logic>
 8001abe:	e001      	b.n	8001ac4 <UARTProto_Process+0x168>
                        }
                    } else {
                        // Error: Frame length mismatch. Reset parser.
                        reset_rx_parser();
 8001ac0:	f7ff ff04 	bl	80018cc <reset_rx_parser>
                    }
                } else {
                    // Error: Expected FRAME_END_BYTE but received something else.
                }
                reset_rx_parser(); // Always reset for the next frame, regardless of END byte correctness.
 8001ac4:	f7ff ff02 	bl	80018cc <reset_rx_parser>
                break;
 8001ac8:	e005      	b.n	8001ad6 <UARTProto_Process+0x17a>

            default: 
                reset_rx_parser();
 8001aca:	f7ff feff 	bl	80018cc <reset_rx_parser>
                break;
 8001ace:	e002      	b.n	8001ad6 <UARTProto_Process+0x17a>
                break;
 8001ad0:	bf00      	nop
 8001ad2:	e000      	b.n	8001ad6 <UARTProto_Process+0x17a>
                break;
 8001ad4:	bf00      	nop
    while (UART2_ReadByte_FromBuffer(&byte)) {
 8001ad6:	1dbb      	adds	r3, r7, #6
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fd19 	bl	8001510 <UART2_ReadByte_FromBuffer>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f47f af3f 	bne.w	8001964 <UARTProto_Process+0x8>
        }
    }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000033d 	.word	0x2000033d
 8001af4:	20000349 	.word	0x20000349
 8001af8:	20000340 	.word	0x20000340
 8001afc:	2000034c 	.word	0x2000034c
 8001b00:	20000353 	.word	0x20000353

08001b04 <UARTProto_CheckErrors>:

bool UARTProto_CheckErrors(void) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
    uint8_t errors = UART2_GetErrorFlags();
 8001b0a:	f7ff fd3b 	bl	8001584 <UART2_GetErrorFlags>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
    bool has_errors = (errors != 0);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf14      	ite	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	2300      	moveq	r3, #0
 8001b1c:	71bb      	strb	r3, [r7, #6]

    if (has_errors) {
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00a      	beq.n	8001b3a <UARTProto_CheckErrors+0x36>
        if (errors & UART_ERROR_BUFFER_FULL) {
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <UARTProto_CheckErrors+0x2e>
            reset_rx_parser();
 8001b2e:	f7ff fecd 	bl	80018cc <reset_rx_parser>
        }
        UART2_ClearErrorFlags(errors); // Clear the reported errors in the driver.
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fd31 	bl	800159c <UART2_ClearErrorFlags>
    }
    return has_errors;
 8001b3a:	79bb      	ldrb	r3, [r7, #6]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <handle_labview_frame>:
volatile bool g_command_received_flag = false;
ParsedFrame_t g_last_received_command;

// --- Hàm Callback cho UART Protocol Service ---
// Hàm này sẽ được gọi bởi UARTProto_Process khi nhận được frame từ LabVIEW
bool handle_labview_frame(const ParsedFrame_t* command_frame) {
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
    g_command_received_flag = true;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <handle_labview_frame+0x2c>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
    memcpy((void*)&g_last_received_command, command_frame, sizeof(ParsedFrame_t));
 8001b52:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <handle_labview_frame+0x30>)
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6810      	ldr	r0, [r2, #0]
 8001b58:	6018      	str	r0, [r3, #0]
 8001b5a:	8891      	ldrh	r1, [r2, #4]
 8001b5c:	7992      	ldrb	r2, [r2, #6]
 8001b5e:	8099      	strh	r1, [r3, #4]
 8001b60:	719a      	strb	r2, [r3, #6]
    //         // ProcessSetMode(mode);
    //     } else if (command_frame->id == FRAME_ID_LABVIEW_RESET_COUNT) {
    //         // ProcessResetCount();
    //     }
    // }
    return true; // Giả sử lệnh luôn được xử lý "thành công" về mặt logic của callback này
 8001b62:	2301      	movs	r3, #1
                 // vì service không gửi NACK dựa trên giá trị trả về này nữa.
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	20000358 	.word	0x20000358
 8001b74:	2000035c 	.word	0x2000035c

08001b78 <main>:


int main(void) {
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b0b2      	sub	sp, #200	@ 0xc8
 8001b7c:	af04      	add	r7, sp, #16
    // 1. Khởi tạo hệ thống cơ bản
    SystemClock_Config(); // Từ rcc_config.c
 8001b7e:	f7ff fa1f 	bl	8000fc0 <SystemClock_Config>
    SysTick_Init();       // Từ systick_driver.c
 8001b82:	f7ff fae1 	bl	8001148 <SysTick_Init>

    // Khởi tạo LED để test
    GPIO_InitPin(LED_PORT, LED_PIN, GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW, GPIO_OTYPE_PUSHPULL, 0);
 8001b86:	2300      	movs	r3, #0
 8001b88:	9302      	str	r3, [sp, #8]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	2201      	movs	r2, #1
 8001b96:	2120      	movs	r1, #32
 8001b98:	486c      	ldr	r0, [pc, #432]	@ (8001d4c <main+0x1d4>)
 8001b9a:	f7ff f929 	bl	8000df0 <GPIO_InitPin>
    GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET); // Tắt LED
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2120      	movs	r1, #32
 8001ba2:	486a      	ldr	r0, [pc, #424]	@ (8001d4c <main+0x1d4>)
 8001ba4:	f7ff f9e1 	bl	8000f6a <GPIO_WritePin>

    // 2. Khởi tạo UART Driver (USART2)
    // Giả định PCLK1_FREQUENCY_HZ đã được định nghĩa trong rcc_config.h
    UART2_Init(115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8001bb2:	f7ff fb83 	bl	80012bc <UART2_Init>

    // 3. Khởi tạo UART Protocol Service
    UARTProto_Init(handle_labview_frame);
 8001bb6:	4866      	ldr	r0, [pc, #408]	@ (8001d50 <main+0x1d8>)
 8001bb8:	f7ff fe02 	bl	80017c0 <UARTProto_Init>

    uint32_t last_blink_time = GetTick();
 8001bbc:	f7ff faf2 	bl	80011a4 <GetTick>
 8001bc0:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    uint32_t last_status_send_time = GetTick();
 8001bc4:	f7ff faee 	bl	80011a4 <GetTick>
 8001bc8:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
    uint8_t person_count_test = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab

    // Gửi thông báo khởi động
    char startup_msg[] = "STM32 UART Proto Test Ready!\r\n";
 8001bd2:	4b60      	ldr	r3, [pc, #384]	@ (8001d54 <main+0x1dc>)
 8001bd4:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001bd8:	461d      	mov	r5, r3
 8001bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001be2:	c407      	stmia	r4!, {r0, r1, r2}
 8001be4:	8023      	strh	r3, [r4, #0]
 8001be6:	3402      	adds	r4, #2
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	7023      	strb	r3, [r4, #0]
    // Gửi trực tiếp qua driver UART để không bị ảnh hưởng bởi logic frame của service
    UART2_SendBuffer_IT((uint8_t*)startup_msg, strlen(startup_msg));
 8001bec:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fb45 	bl	8000280 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fc1d 	bl	8001440 <UART2_SendBuffer_IT>


    while (1) {
        // 4. Gọi UARTProto_Process() định kỳ để xử lý dữ liệu nhận
        UARTProto_Process();
 8001c06:	f7ff fea9 	bl	800195c <UARTProto_Process>

        // 5. Kiểm tra lỗi UART (nếu có)
        if (UARTProto_CheckErrors()) {
 8001c0a:	f7ff ff7b 	bl	8001b04 <UARTProto_CheckErrors>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d016      	beq.n	8001c42 <main+0xca>
            // Có lỗi UART (ví dụ: Overrun). Bạn có thể log hoặc xử lý.
            // Ví dụ: Gửi một thông điệp debug đặc biệt qua UART driver
            char error_msg[] = "UART HW Error Detected!\r\n";
 8001c14:	4b50      	ldr	r3, [pc, #320]	@ (8001d58 <main+0x1e0>)
 8001c16:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8001c1a:	461d      	mov	r5, r3
 8001c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c24:	c403      	stmia	r4!, {r0, r1}
 8001c26:	8022      	strh	r2, [r4, #0]
            UART2_SendBuffer_IT((uint8_t*)error_msg, strlen(error_msg));
 8001c28:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fb27 	bl	8000280 <strlen>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fbff 	bl	8001440 <UART2_SendBuffer_IT>
        }

        // 6. Test nhận lệnh từ LabVIEW
        if (g_command_received_flag) {
 8001c42:	4b46      	ldr	r3, [pc, #280]	@ (8001d5c <main+0x1e4>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d055      	beq.n	8001cf8 <main+0x180>
            g_command_received_flag = false;
 8001c4c:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <main+0x1e4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
            GPIO_TogglePin(LED_PORT, LED_PIN); // Nháy LED khi nhận được lệnh
 8001c52:	2120      	movs	r1, #32
 8001c54:	483d      	ldr	r0, [pc, #244]	@ (8001d4c <main+0x1d4>)
 8001c56:	f7ff f9a1 	bl	8000f9c <GPIO_TogglePin>

            // In thông tin frame nhận được ra UART (dùng UART driver trực tiếp để debug)
            char debug_rx_msg[100];
            sprintf(debug_rx_msg, "RX Frame: T=0x%02X, ID=0x%02X, L=%d, P=",
                    g_last_received_command.type,
 8001c5a:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <main+0x1e8>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
            sprintf(debug_rx_msg, "RX Frame: T=0x%02X, ID=0x%02X, L=%d, P=",
 8001c5e:	461a      	mov	r2, r3
                    g_last_received_command.id,
 8001c60:	4b3f      	ldr	r3, [pc, #252]	@ (8001d60 <main+0x1e8>)
 8001c62:	785b      	ldrb	r3, [r3, #1]
            sprintf(debug_rx_msg, "RX Frame: T=0x%02X, ID=0x%02X, L=%d, P=",
 8001c64:	4619      	mov	r1, r3
                    g_last_received_command.length);
 8001c66:	4b3e      	ldr	r3, [pc, #248]	@ (8001d60 <main+0x1e8>)
 8001c68:	799b      	ldrb	r3, [r3, #6]
            sprintf(debug_rx_msg, "RX Frame: T=0x%02X, ID=0x%02X, L=%d, P=",
 8001c6a:	4638      	mov	r0, r7
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	493c      	ldr	r1, [pc, #240]	@ (8001d64 <main+0x1ec>)
 8001c72:	f000 fec1 	bl	80029f8 <siprintf>
            UART2_SendBuffer_IT((uint8_t*)debug_rx_msg, strlen(debug_rx_msg));
 8001c76:	463b      	mov	r3, r7
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fb01 	bl	8000280 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	463b      	mov	r3, r7
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fbda 	bl	8001440 <UART2_SendBuffer_IT>

            for (int i = 0; i < g_last_received_command.length; i++) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001c92:	e01b      	b.n	8001ccc <main+0x154>
                sprintf(debug_rx_msg, "0x%02X ", g_last_received_command.payload[i]);
 8001c94:	4a32      	ldr	r2, [pc, #200]	@ (8001d60 <main+0x1e8>)
 8001c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4930      	ldr	r1, [pc, #192]	@ (8001d68 <main+0x1f0>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fea6 	bl	80029f8 <siprintf>
                UART2_SendBuffer_IT((uint8_t*)debug_rx_msg, strlen(debug_rx_msg));
 8001cac:	463b      	mov	r3, r7
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fae6 	bl	8000280 <strlen>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	463b      	mov	r3, r7
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fbbf 	bl	8001440 <UART2_SendBuffer_IT>
            for (int i = 0; i < g_last_received_command.length; i++) {
 8001cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001ccc:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <main+0x1e8>)
 8001cce:	799b      	ldrb	r3, [r3, #6]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	dbdc      	blt.n	8001c94 <main+0x11c>
            }
            UART2_SendBuffer_IT((uint8_t*)"\r\n", 2);
 8001cda:	2102      	movs	r1, #2
 8001cdc:	4823      	ldr	r0, [pc, #140]	@ (8001d6c <main+0x1f4>)
 8001cde:	f7ff fbaf 	bl	8001440 <UART2_SendBuffer_IT>
            // Phản hồi một frame đơn giản (ví dụ, gửi lại person_count)
            // để kiểm tra LabVIEW có nhận được không
            // (Giả sử LabVIEW mong đợi một phản hồi sau khi gửi lệnh)
            // Đây không phải là ACK/NACK của protocol service mà là dữ liệu ứng dụng.
             uint8_t ack_payload[1];
             ack_payload[0] = g_last_received_command.id; // Gửi lại ID của lệnh vừa nhận
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <main+0x1e8>)
 8001ce4:	785b      	ldrb	r3, [r3, #1]
 8001ce6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
             UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_LOG_DEBUG, ack_payload, 1);
 8001cea:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001cee:	2301      	movs	r3, #1
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f7ff fdce 	bl	8001894 <UARTProto_SendFrame>

        }

        // 7. Test gửi trạng thái định kỳ lên LabVIEW
        if ((GetTick() - last_status_send_time) >= 2000) { // Gửi mỗi 2 giây
 8001cf8:	f7ff fa54 	bl	80011a4 <GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d08:	d310      	bcc.n	8001d2c <main+0x1b4>
            last_status_send_time = GetTick();
 8001d0a:	f7ff fa4b 	bl	80011a4 <GetTick>
 8001d0e:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
//                UART2_SendBuffer_IT((uint8_t*)send_fail_msg, strlen(send_fail_msg));
//            }

            // Ví dụ gửi trạng thái cửa (giả lập)
            uint8_t payload_door[1];
            payload_door[0] = PAYLOAD_DOOR_OPENING; // Trạng thái cửa đang mở
 8001d12:	2301      	movs	r3, #1
 8001d14:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            bool sent_door = UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW,
 8001d18:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	2101      	movs	r1, #1
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff fdb7 	bl	8001894 <UARTProto_SendFrame>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
                                               payload_door,
                                               1);
        }

        // Nháy LED để biết chương trình đang chạy (không liên quan UART)
        if ((GetTick() - last_blink_time) >= 500) {
 8001d2c:	f7ff fa3a 	bl	80011a4 <GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d3c:	f4ff af63 	bcc.w	8001c06 <main+0x8e>
            last_blink_time = GetTick();
 8001d40:	f7ff fa30 	bl	80011a4 <GetTick>
 8001d44:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
        UARTProto_Process();
 8001d48:	e75d      	b.n	8001c06 <main+0x8e>
 8001d4a:	bf00      	nop
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	08001b45 	.word	0x08001b45
 8001d54:	08004ca4 	.word	0x08004ca4
 8001d58:	08004cc4 	.word	0x08004cc4
 8001d5c:	20000358 	.word	0x20000358
 8001d60:	2000035c 	.word	0x2000035c
 8001d64:	08004c70 	.word	0x08004c70
 8001d68:	08004c98 	.word	0x08004c98
 8001d6c:	08004ca0 	.word	0x08004ca0

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <NMI_Handler+0x4>

08001d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <MemManage_Handler+0x4>

08001d88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  return 1;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_kill>:

int _kill(int pid, int sig)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ddc:	f000 fec2 	bl	8002b64 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2216      	movs	r2, #22
 8001de4:	601a      	str	r2, [r3, #0]
  return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_exit>:

void _exit (int status)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffe7 	bl	8001dd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <_exit+0x12>

08001e08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e00a      	b.n	8001e30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e1a:	f3af 8000 	nop.w
 8001e1e:	4601      	mov	r1, r0
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbf0      	blt.n	8001e1a <_read+0x12>
  }

  return len;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e009      	b.n	8001e68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	60ba      	str	r2, [r7, #8]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dbf1      	blt.n	8001e54 <_write+0x12>
  }
  return len;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <_close>:

int _close(int file)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ea2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <_isatty>:

int _isatty(int file)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eec:	4a14      	ldr	r2, [pc, #80]	@ (8001f40 <_sbrk+0x5c>)
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <_sbrk+0x60>)
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f00:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <_sbrk+0x64>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <_sbrk+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d207      	bcs.n	8001f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f14:	f000 fe26 	bl	8002b64 <__errno>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e009      	b.n	8001f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f24:	4b08      	ldr	r3, [pc, #32]	@ (8001f48 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	@ (8001f48 <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <_sbrk+0x64>)
 8001f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20018000 	.word	0x20018000
 8001f44:	00000400 	.word	0x00000400
 8001f48:	20000364 	.word	0x20000364
 8001f4c:	200004b8 	.word	0x200004b8

08001f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f54:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <SystemInit+0x20>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5a:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <SystemInit+0x20>)
 8001f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f78:	f7ff ffea 	bl	8001f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f7c:	480c      	ldr	r0, [pc, #48]	@ (8001fb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f7e:	490d      	ldr	r1, [pc, #52]	@ (8001fb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f84:	e002      	b.n	8001f8c <LoopCopyDataInit>

08001f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8a:	3304      	adds	r3, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f90:	d3f9      	bcc.n	8001f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f94:	4c0a      	ldr	r4, [pc, #40]	@ (8001fc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f98:	e001      	b.n	8001f9e <LoopFillZerobss>

08001f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f9c:	3204      	adds	r2, #4

08001f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa0:	d3fb      	bcc.n	8001f9a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f000 fde5 	bl	8002b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7ff fde7 	bl	8001b78 <main>
  bx  lr    
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8001fb8:	08005060 	.word	0x08005060
  ldr r2, =_sbss
 8001fbc:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001fc0:	200004b4 	.word	0x200004b4

08001fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC_IRQHandler>

08001fc6 <__cvt>:
 8001fc6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fca:	ec57 6b10 	vmov	r6, r7, d0
 8001fce:	2f00      	cmp	r7, #0
 8001fd0:	460c      	mov	r4, r1
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	bfbb      	ittet	lt
 8001fd8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001fdc:	461f      	movlt	r7, r3
 8001fde:	2300      	movge	r3, #0
 8001fe0:	232d      	movlt	r3, #45	@ 0x2d
 8001fe2:	700b      	strb	r3, [r1, #0]
 8001fe4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001fe6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8001fea:	4691      	mov	r9, r2
 8001fec:	f023 0820 	bic.w	r8, r3, #32
 8001ff0:	bfbc      	itt	lt
 8001ff2:	4632      	movlt	r2, r6
 8001ff4:	4616      	movlt	r6, r2
 8001ff6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001ffa:	d005      	beq.n	8002008 <__cvt+0x42>
 8001ffc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002000:	d100      	bne.n	8002004 <__cvt+0x3e>
 8002002:	3401      	adds	r4, #1
 8002004:	2102      	movs	r1, #2
 8002006:	e000      	b.n	800200a <__cvt+0x44>
 8002008:	2103      	movs	r1, #3
 800200a:	ab03      	add	r3, sp, #12
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	ab02      	add	r3, sp, #8
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	ec47 6b10 	vmov	d0, r6, r7
 8002016:	4653      	mov	r3, sl
 8002018:	4622      	mov	r2, r4
 800201a:	f000 fe69 	bl	8002cf0 <_dtoa_r>
 800201e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002022:	4605      	mov	r5, r0
 8002024:	d119      	bne.n	800205a <__cvt+0x94>
 8002026:	f019 0f01 	tst.w	r9, #1
 800202a:	d00e      	beq.n	800204a <__cvt+0x84>
 800202c:	eb00 0904 	add.w	r9, r0, r4
 8002030:	2200      	movs	r2, #0
 8002032:	2300      	movs	r3, #0
 8002034:	4630      	mov	r0, r6
 8002036:	4639      	mov	r1, r7
 8002038:	f7fe fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800203c:	b108      	cbz	r0, 8002042 <__cvt+0x7c>
 800203e:	f8cd 900c 	str.w	r9, [sp, #12]
 8002042:	2230      	movs	r2, #48	@ 0x30
 8002044:	9b03      	ldr	r3, [sp, #12]
 8002046:	454b      	cmp	r3, r9
 8002048:	d31e      	bcc.n	8002088 <__cvt+0xc2>
 800204a:	9b03      	ldr	r3, [sp, #12]
 800204c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800204e:	1b5b      	subs	r3, r3, r5
 8002050:	4628      	mov	r0, r5
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	b004      	add	sp, #16
 8002056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800205a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800205e:	eb00 0904 	add.w	r9, r0, r4
 8002062:	d1e5      	bne.n	8002030 <__cvt+0x6a>
 8002064:	7803      	ldrb	r3, [r0, #0]
 8002066:	2b30      	cmp	r3, #48	@ 0x30
 8002068:	d10a      	bne.n	8002080 <__cvt+0xba>
 800206a:	2200      	movs	r2, #0
 800206c:	2300      	movs	r3, #0
 800206e:	4630      	mov	r0, r6
 8002070:	4639      	mov	r1, r7
 8002072:	f7fe fd31 	bl	8000ad8 <__aeabi_dcmpeq>
 8002076:	b918      	cbnz	r0, 8002080 <__cvt+0xba>
 8002078:	f1c4 0401 	rsb	r4, r4, #1
 800207c:	f8ca 4000 	str.w	r4, [sl]
 8002080:	f8da 3000 	ldr.w	r3, [sl]
 8002084:	4499      	add	r9, r3
 8002086:	e7d3      	b.n	8002030 <__cvt+0x6a>
 8002088:	1c59      	adds	r1, r3, #1
 800208a:	9103      	str	r1, [sp, #12]
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e7d9      	b.n	8002044 <__cvt+0x7e>

08002090 <__exponent>:
 8002090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002092:	2900      	cmp	r1, #0
 8002094:	bfba      	itte	lt
 8002096:	4249      	neglt	r1, r1
 8002098:	232d      	movlt	r3, #45	@ 0x2d
 800209a:	232b      	movge	r3, #43	@ 0x2b
 800209c:	2909      	cmp	r1, #9
 800209e:	7002      	strb	r2, [r0, #0]
 80020a0:	7043      	strb	r3, [r0, #1]
 80020a2:	dd29      	ble.n	80020f8 <__exponent+0x68>
 80020a4:	f10d 0307 	add.w	r3, sp, #7
 80020a8:	461d      	mov	r5, r3
 80020aa:	270a      	movs	r7, #10
 80020ac:	461a      	mov	r2, r3
 80020ae:	fbb1 f6f7 	udiv	r6, r1, r7
 80020b2:	fb07 1416 	mls	r4, r7, r6, r1
 80020b6:	3430      	adds	r4, #48	@ 0x30
 80020b8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80020bc:	460c      	mov	r4, r1
 80020be:	2c63      	cmp	r4, #99	@ 0x63
 80020c0:	f103 33ff 	add.w	r3, r3, #4294967295
 80020c4:	4631      	mov	r1, r6
 80020c6:	dcf1      	bgt.n	80020ac <__exponent+0x1c>
 80020c8:	3130      	adds	r1, #48	@ 0x30
 80020ca:	1e94      	subs	r4, r2, #2
 80020cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80020d0:	1c41      	adds	r1, r0, #1
 80020d2:	4623      	mov	r3, r4
 80020d4:	42ab      	cmp	r3, r5
 80020d6:	d30a      	bcc.n	80020ee <__exponent+0x5e>
 80020d8:	f10d 0309 	add.w	r3, sp, #9
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	42ac      	cmp	r4, r5
 80020e0:	bf88      	it	hi
 80020e2:	2300      	movhi	r3, #0
 80020e4:	3302      	adds	r3, #2
 80020e6:	4403      	add	r3, r0
 80020e8:	1a18      	subs	r0, r3, r0
 80020ea:	b003      	add	sp, #12
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	f813 6b01 	ldrb.w	r6, [r3], #1
 80020f2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80020f6:	e7ed      	b.n	80020d4 <__exponent+0x44>
 80020f8:	2330      	movs	r3, #48	@ 0x30
 80020fa:	3130      	adds	r1, #48	@ 0x30
 80020fc:	7083      	strb	r3, [r0, #2]
 80020fe:	70c1      	strb	r1, [r0, #3]
 8002100:	1d03      	adds	r3, r0, #4
 8002102:	e7f1      	b.n	80020e8 <__exponent+0x58>

08002104 <_printf_float>:
 8002104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002108:	b08d      	sub	sp, #52	@ 0x34
 800210a:	460c      	mov	r4, r1
 800210c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002110:	4616      	mov	r6, r2
 8002112:	461f      	mov	r7, r3
 8002114:	4605      	mov	r5, r0
 8002116:	f000 fcdb 	bl	8002ad0 <_localeconv_r>
 800211a:	6803      	ldr	r3, [r0, #0]
 800211c:	9304      	str	r3, [sp, #16]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f8ae 	bl	8000280 <strlen>
 8002124:	2300      	movs	r3, #0
 8002126:	930a      	str	r3, [sp, #40]	@ 0x28
 8002128:	f8d8 3000 	ldr.w	r3, [r8]
 800212c:	9005      	str	r0, [sp, #20]
 800212e:	3307      	adds	r3, #7
 8002130:	f023 0307 	bic.w	r3, r3, #7
 8002134:	f103 0208 	add.w	r2, r3, #8
 8002138:	f894 a018 	ldrb.w	sl, [r4, #24]
 800213c:	f8d4 b000 	ldr.w	fp, [r4]
 8002140:	f8c8 2000 	str.w	r2, [r8]
 8002144:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002148:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800214c:	9307      	str	r3, [sp, #28]
 800214e:	f8cd 8018 	str.w	r8, [sp, #24]
 8002152:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800215a:	4b9c      	ldr	r3, [pc, #624]	@ (80023cc <_printf_float+0x2c8>)
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	f7fe fcec 	bl	8000b3c <__aeabi_dcmpun>
 8002164:	bb70      	cbnz	r0, 80021c4 <_printf_float+0xc0>
 8002166:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800216a:	4b98      	ldr	r3, [pc, #608]	@ (80023cc <_printf_float+0x2c8>)
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	f7fe fcc6 	bl	8000b00 <__aeabi_dcmple>
 8002174:	bb30      	cbnz	r0, 80021c4 <_printf_float+0xc0>
 8002176:	2200      	movs	r2, #0
 8002178:	2300      	movs	r3, #0
 800217a:	4640      	mov	r0, r8
 800217c:	4649      	mov	r1, r9
 800217e:	f7fe fcb5 	bl	8000aec <__aeabi_dcmplt>
 8002182:	b110      	cbz	r0, 800218a <_printf_float+0x86>
 8002184:	232d      	movs	r3, #45	@ 0x2d
 8002186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800218a:	4a91      	ldr	r2, [pc, #580]	@ (80023d0 <_printf_float+0x2cc>)
 800218c:	4b91      	ldr	r3, [pc, #580]	@ (80023d4 <_printf_float+0x2d0>)
 800218e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002192:	bf94      	ite	ls
 8002194:	4690      	movls	r8, r2
 8002196:	4698      	movhi	r8, r3
 8002198:	2303      	movs	r3, #3
 800219a:	6123      	str	r3, [r4, #16]
 800219c:	f02b 0304 	bic.w	r3, fp, #4
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	f04f 0900 	mov.w	r9, #0
 80021a6:	9700      	str	r7, [sp, #0]
 80021a8:	4633      	mov	r3, r6
 80021aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80021ac:	4621      	mov	r1, r4
 80021ae:	4628      	mov	r0, r5
 80021b0:	f000 f9d2 	bl	8002558 <_printf_common>
 80021b4:	3001      	adds	r0, #1
 80021b6:	f040 808d 	bne.w	80022d4 <_printf_float+0x1d0>
 80021ba:	f04f 30ff 	mov.w	r0, #4294967295
 80021be:	b00d      	add	sp, #52	@ 0x34
 80021c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c4:	4642      	mov	r2, r8
 80021c6:	464b      	mov	r3, r9
 80021c8:	4640      	mov	r0, r8
 80021ca:	4649      	mov	r1, r9
 80021cc:	f7fe fcb6 	bl	8000b3c <__aeabi_dcmpun>
 80021d0:	b140      	cbz	r0, 80021e4 <_printf_float+0xe0>
 80021d2:	464b      	mov	r3, r9
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bfbc      	itt	lt
 80021d8:	232d      	movlt	r3, #45	@ 0x2d
 80021da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80021de:	4a7e      	ldr	r2, [pc, #504]	@ (80023d8 <_printf_float+0x2d4>)
 80021e0:	4b7e      	ldr	r3, [pc, #504]	@ (80023dc <_printf_float+0x2d8>)
 80021e2:	e7d4      	b.n	800218e <_printf_float+0x8a>
 80021e4:	6863      	ldr	r3, [r4, #4]
 80021e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80021ea:	9206      	str	r2, [sp, #24]
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	d13b      	bne.n	8002268 <_printf_float+0x164>
 80021f0:	2306      	movs	r3, #6
 80021f2:	6063      	str	r3, [r4, #4]
 80021f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80021f8:	2300      	movs	r3, #0
 80021fa:	6022      	str	r2, [r4, #0]
 80021fc:	9303      	str	r3, [sp, #12]
 80021fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8002200:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002204:	ab09      	add	r3, sp, #36	@ 0x24
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	6861      	ldr	r1, [r4, #4]
 800220a:	ec49 8b10 	vmov	d0, r8, r9
 800220e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002212:	4628      	mov	r0, r5
 8002214:	f7ff fed7 	bl	8001fc6 <__cvt>
 8002218:	9b06      	ldr	r3, [sp, #24]
 800221a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800221c:	2b47      	cmp	r3, #71	@ 0x47
 800221e:	4680      	mov	r8, r0
 8002220:	d129      	bne.n	8002276 <_printf_float+0x172>
 8002222:	1cc8      	adds	r0, r1, #3
 8002224:	db02      	blt.n	800222c <_printf_float+0x128>
 8002226:	6863      	ldr	r3, [r4, #4]
 8002228:	4299      	cmp	r1, r3
 800222a:	dd41      	ble.n	80022b0 <_printf_float+0x1ac>
 800222c:	f1aa 0a02 	sub.w	sl, sl, #2
 8002230:	fa5f fa8a 	uxtb.w	sl, sl
 8002234:	3901      	subs	r1, #1
 8002236:	4652      	mov	r2, sl
 8002238:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800223c:	9109      	str	r1, [sp, #36]	@ 0x24
 800223e:	f7ff ff27 	bl	8002090 <__exponent>
 8002242:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002244:	1813      	adds	r3, r2, r0
 8002246:	2a01      	cmp	r2, #1
 8002248:	4681      	mov	r9, r0
 800224a:	6123      	str	r3, [r4, #16]
 800224c:	dc02      	bgt.n	8002254 <_printf_float+0x150>
 800224e:	6822      	ldr	r2, [r4, #0]
 8002250:	07d2      	lsls	r2, r2, #31
 8002252:	d501      	bpl.n	8002258 <_printf_float+0x154>
 8002254:	3301      	adds	r3, #1
 8002256:	6123      	str	r3, [r4, #16]
 8002258:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0a2      	beq.n	80021a6 <_printf_float+0xa2>
 8002260:	232d      	movs	r3, #45	@ 0x2d
 8002262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002266:	e79e      	b.n	80021a6 <_printf_float+0xa2>
 8002268:	9a06      	ldr	r2, [sp, #24]
 800226a:	2a47      	cmp	r2, #71	@ 0x47
 800226c:	d1c2      	bne.n	80021f4 <_printf_float+0xf0>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1c0      	bne.n	80021f4 <_printf_float+0xf0>
 8002272:	2301      	movs	r3, #1
 8002274:	e7bd      	b.n	80021f2 <_printf_float+0xee>
 8002276:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800227a:	d9db      	bls.n	8002234 <_printf_float+0x130>
 800227c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002280:	d118      	bne.n	80022b4 <_printf_float+0x1b0>
 8002282:	2900      	cmp	r1, #0
 8002284:	6863      	ldr	r3, [r4, #4]
 8002286:	dd0b      	ble.n	80022a0 <_printf_float+0x19c>
 8002288:	6121      	str	r1, [r4, #16]
 800228a:	b913      	cbnz	r3, 8002292 <_printf_float+0x18e>
 800228c:	6822      	ldr	r2, [r4, #0]
 800228e:	07d0      	lsls	r0, r2, #31
 8002290:	d502      	bpl.n	8002298 <_printf_float+0x194>
 8002292:	3301      	adds	r3, #1
 8002294:	440b      	add	r3, r1
 8002296:	6123      	str	r3, [r4, #16]
 8002298:	65a1      	str	r1, [r4, #88]	@ 0x58
 800229a:	f04f 0900 	mov.w	r9, #0
 800229e:	e7db      	b.n	8002258 <_printf_float+0x154>
 80022a0:	b913      	cbnz	r3, 80022a8 <_printf_float+0x1a4>
 80022a2:	6822      	ldr	r2, [r4, #0]
 80022a4:	07d2      	lsls	r2, r2, #31
 80022a6:	d501      	bpl.n	80022ac <_printf_float+0x1a8>
 80022a8:	3302      	adds	r3, #2
 80022aa:	e7f4      	b.n	8002296 <_printf_float+0x192>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e7f2      	b.n	8002296 <_printf_float+0x192>
 80022b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80022b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80022b6:	4299      	cmp	r1, r3
 80022b8:	db05      	blt.n	80022c6 <_printf_float+0x1c2>
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	6121      	str	r1, [r4, #16]
 80022be:	07d8      	lsls	r0, r3, #31
 80022c0:	d5ea      	bpl.n	8002298 <_printf_float+0x194>
 80022c2:	1c4b      	adds	r3, r1, #1
 80022c4:	e7e7      	b.n	8002296 <_printf_float+0x192>
 80022c6:	2900      	cmp	r1, #0
 80022c8:	bfd4      	ite	le
 80022ca:	f1c1 0202 	rsble	r2, r1, #2
 80022ce:	2201      	movgt	r2, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	e7e0      	b.n	8002296 <_printf_float+0x192>
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	055a      	lsls	r2, r3, #21
 80022d8:	d407      	bmi.n	80022ea <_printf_float+0x1e6>
 80022da:	6923      	ldr	r3, [r4, #16]
 80022dc:	4642      	mov	r2, r8
 80022de:	4631      	mov	r1, r6
 80022e0:	4628      	mov	r0, r5
 80022e2:	47b8      	blx	r7
 80022e4:	3001      	adds	r0, #1
 80022e6:	d12b      	bne.n	8002340 <_printf_float+0x23c>
 80022e8:	e767      	b.n	80021ba <_printf_float+0xb6>
 80022ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80022ee:	f240 80dd 	bls.w	80024ac <_printf_float+0x3a8>
 80022f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80022f6:	2200      	movs	r2, #0
 80022f8:	2300      	movs	r3, #0
 80022fa:	f7fe fbed 	bl	8000ad8 <__aeabi_dcmpeq>
 80022fe:	2800      	cmp	r0, #0
 8002300:	d033      	beq.n	800236a <_printf_float+0x266>
 8002302:	4a37      	ldr	r2, [pc, #220]	@ (80023e0 <_printf_float+0x2dc>)
 8002304:	2301      	movs	r3, #1
 8002306:	4631      	mov	r1, r6
 8002308:	4628      	mov	r0, r5
 800230a:	47b8      	blx	r7
 800230c:	3001      	adds	r0, #1
 800230e:	f43f af54 	beq.w	80021ba <_printf_float+0xb6>
 8002312:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8002316:	4543      	cmp	r3, r8
 8002318:	db02      	blt.n	8002320 <_printf_float+0x21c>
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	07d8      	lsls	r0, r3, #31
 800231e:	d50f      	bpl.n	8002340 <_printf_float+0x23c>
 8002320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002324:	4631      	mov	r1, r6
 8002326:	4628      	mov	r0, r5
 8002328:	47b8      	blx	r7
 800232a:	3001      	adds	r0, #1
 800232c:	f43f af45 	beq.w	80021ba <_printf_float+0xb6>
 8002330:	f04f 0900 	mov.w	r9, #0
 8002334:	f108 38ff 	add.w	r8, r8, #4294967295
 8002338:	f104 0a1a 	add.w	sl, r4, #26
 800233c:	45c8      	cmp	r8, r9
 800233e:	dc09      	bgt.n	8002354 <_printf_float+0x250>
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	079b      	lsls	r3, r3, #30
 8002344:	f100 8103 	bmi.w	800254e <_printf_float+0x44a>
 8002348:	68e0      	ldr	r0, [r4, #12]
 800234a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800234c:	4298      	cmp	r0, r3
 800234e:	bfb8      	it	lt
 8002350:	4618      	movlt	r0, r3
 8002352:	e734      	b.n	80021be <_printf_float+0xba>
 8002354:	2301      	movs	r3, #1
 8002356:	4652      	mov	r2, sl
 8002358:	4631      	mov	r1, r6
 800235a:	4628      	mov	r0, r5
 800235c:	47b8      	blx	r7
 800235e:	3001      	adds	r0, #1
 8002360:	f43f af2b 	beq.w	80021ba <_printf_float+0xb6>
 8002364:	f109 0901 	add.w	r9, r9, #1
 8002368:	e7e8      	b.n	800233c <_printf_float+0x238>
 800236a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800236c:	2b00      	cmp	r3, #0
 800236e:	dc39      	bgt.n	80023e4 <_printf_float+0x2e0>
 8002370:	4a1b      	ldr	r2, [pc, #108]	@ (80023e0 <_printf_float+0x2dc>)
 8002372:	2301      	movs	r3, #1
 8002374:	4631      	mov	r1, r6
 8002376:	4628      	mov	r0, r5
 8002378:	47b8      	blx	r7
 800237a:	3001      	adds	r0, #1
 800237c:	f43f af1d 	beq.w	80021ba <_printf_float+0xb6>
 8002380:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002384:	ea59 0303 	orrs.w	r3, r9, r3
 8002388:	d102      	bne.n	8002390 <_printf_float+0x28c>
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	07d9      	lsls	r1, r3, #31
 800238e:	d5d7      	bpl.n	8002340 <_printf_float+0x23c>
 8002390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002394:	4631      	mov	r1, r6
 8002396:	4628      	mov	r0, r5
 8002398:	47b8      	blx	r7
 800239a:	3001      	adds	r0, #1
 800239c:	f43f af0d 	beq.w	80021ba <_printf_float+0xb6>
 80023a0:	f04f 0a00 	mov.w	sl, #0
 80023a4:	f104 0b1a 	add.w	fp, r4, #26
 80023a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80023aa:	425b      	negs	r3, r3
 80023ac:	4553      	cmp	r3, sl
 80023ae:	dc01      	bgt.n	80023b4 <_printf_float+0x2b0>
 80023b0:	464b      	mov	r3, r9
 80023b2:	e793      	b.n	80022dc <_printf_float+0x1d8>
 80023b4:	2301      	movs	r3, #1
 80023b6:	465a      	mov	r2, fp
 80023b8:	4631      	mov	r1, r6
 80023ba:	4628      	mov	r0, r5
 80023bc:	47b8      	blx	r7
 80023be:	3001      	adds	r0, #1
 80023c0:	f43f aefb 	beq.w	80021ba <_printf_float+0xb6>
 80023c4:	f10a 0a01 	add.w	sl, sl, #1
 80023c8:	e7ee      	b.n	80023a8 <_printf_float+0x2a4>
 80023ca:	bf00      	nop
 80023cc:	7fefffff 	.word	0x7fefffff
 80023d0:	08004cde 	.word	0x08004cde
 80023d4:	08004ce2 	.word	0x08004ce2
 80023d8:	08004ce6 	.word	0x08004ce6
 80023dc:	08004cea 	.word	0x08004cea
 80023e0:	08004cee 	.word	0x08004cee
 80023e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80023e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80023ea:	4553      	cmp	r3, sl
 80023ec:	bfa8      	it	ge
 80023ee:	4653      	movge	r3, sl
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	4699      	mov	r9, r3
 80023f4:	dc36      	bgt.n	8002464 <_printf_float+0x360>
 80023f6:	f04f 0b00 	mov.w	fp, #0
 80023fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80023fe:	f104 021a 	add.w	r2, r4, #26
 8002402:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002404:	9306      	str	r3, [sp, #24]
 8002406:	eba3 0309 	sub.w	r3, r3, r9
 800240a:	455b      	cmp	r3, fp
 800240c:	dc31      	bgt.n	8002472 <_printf_float+0x36e>
 800240e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002410:	459a      	cmp	sl, r3
 8002412:	dc3a      	bgt.n	800248a <_printf_float+0x386>
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	07da      	lsls	r2, r3, #31
 8002418:	d437      	bmi.n	800248a <_printf_float+0x386>
 800241a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800241c:	ebaa 0903 	sub.w	r9, sl, r3
 8002420:	9b06      	ldr	r3, [sp, #24]
 8002422:	ebaa 0303 	sub.w	r3, sl, r3
 8002426:	4599      	cmp	r9, r3
 8002428:	bfa8      	it	ge
 800242a:	4699      	movge	r9, r3
 800242c:	f1b9 0f00 	cmp.w	r9, #0
 8002430:	dc33      	bgt.n	800249a <_printf_float+0x396>
 8002432:	f04f 0800 	mov.w	r8, #0
 8002436:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800243a:	f104 0b1a 	add.w	fp, r4, #26
 800243e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002440:	ebaa 0303 	sub.w	r3, sl, r3
 8002444:	eba3 0309 	sub.w	r3, r3, r9
 8002448:	4543      	cmp	r3, r8
 800244a:	f77f af79 	ble.w	8002340 <_printf_float+0x23c>
 800244e:	2301      	movs	r3, #1
 8002450:	465a      	mov	r2, fp
 8002452:	4631      	mov	r1, r6
 8002454:	4628      	mov	r0, r5
 8002456:	47b8      	blx	r7
 8002458:	3001      	adds	r0, #1
 800245a:	f43f aeae 	beq.w	80021ba <_printf_float+0xb6>
 800245e:	f108 0801 	add.w	r8, r8, #1
 8002462:	e7ec      	b.n	800243e <_printf_float+0x33a>
 8002464:	4642      	mov	r2, r8
 8002466:	4631      	mov	r1, r6
 8002468:	4628      	mov	r0, r5
 800246a:	47b8      	blx	r7
 800246c:	3001      	adds	r0, #1
 800246e:	d1c2      	bne.n	80023f6 <_printf_float+0x2f2>
 8002470:	e6a3      	b.n	80021ba <_printf_float+0xb6>
 8002472:	2301      	movs	r3, #1
 8002474:	4631      	mov	r1, r6
 8002476:	4628      	mov	r0, r5
 8002478:	9206      	str	r2, [sp, #24]
 800247a:	47b8      	blx	r7
 800247c:	3001      	adds	r0, #1
 800247e:	f43f ae9c 	beq.w	80021ba <_printf_float+0xb6>
 8002482:	9a06      	ldr	r2, [sp, #24]
 8002484:	f10b 0b01 	add.w	fp, fp, #1
 8002488:	e7bb      	b.n	8002402 <_printf_float+0x2fe>
 800248a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800248e:	4631      	mov	r1, r6
 8002490:	4628      	mov	r0, r5
 8002492:	47b8      	blx	r7
 8002494:	3001      	adds	r0, #1
 8002496:	d1c0      	bne.n	800241a <_printf_float+0x316>
 8002498:	e68f      	b.n	80021ba <_printf_float+0xb6>
 800249a:	9a06      	ldr	r2, [sp, #24]
 800249c:	464b      	mov	r3, r9
 800249e:	4442      	add	r2, r8
 80024a0:	4631      	mov	r1, r6
 80024a2:	4628      	mov	r0, r5
 80024a4:	47b8      	blx	r7
 80024a6:	3001      	adds	r0, #1
 80024a8:	d1c3      	bne.n	8002432 <_printf_float+0x32e>
 80024aa:	e686      	b.n	80021ba <_printf_float+0xb6>
 80024ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80024b0:	f1ba 0f01 	cmp.w	sl, #1
 80024b4:	dc01      	bgt.n	80024ba <_printf_float+0x3b6>
 80024b6:	07db      	lsls	r3, r3, #31
 80024b8:	d536      	bpl.n	8002528 <_printf_float+0x424>
 80024ba:	2301      	movs	r3, #1
 80024bc:	4642      	mov	r2, r8
 80024be:	4631      	mov	r1, r6
 80024c0:	4628      	mov	r0, r5
 80024c2:	47b8      	blx	r7
 80024c4:	3001      	adds	r0, #1
 80024c6:	f43f ae78 	beq.w	80021ba <_printf_float+0xb6>
 80024ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80024ce:	4631      	mov	r1, r6
 80024d0:	4628      	mov	r0, r5
 80024d2:	47b8      	blx	r7
 80024d4:	3001      	adds	r0, #1
 80024d6:	f43f ae70 	beq.w	80021ba <_printf_float+0xb6>
 80024da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80024de:	2200      	movs	r2, #0
 80024e0:	2300      	movs	r3, #0
 80024e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80024e6:	f7fe faf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80024ea:	b9c0      	cbnz	r0, 800251e <_printf_float+0x41a>
 80024ec:	4653      	mov	r3, sl
 80024ee:	f108 0201 	add.w	r2, r8, #1
 80024f2:	4631      	mov	r1, r6
 80024f4:	4628      	mov	r0, r5
 80024f6:	47b8      	blx	r7
 80024f8:	3001      	adds	r0, #1
 80024fa:	d10c      	bne.n	8002516 <_printf_float+0x412>
 80024fc:	e65d      	b.n	80021ba <_printf_float+0xb6>
 80024fe:	2301      	movs	r3, #1
 8002500:	465a      	mov	r2, fp
 8002502:	4631      	mov	r1, r6
 8002504:	4628      	mov	r0, r5
 8002506:	47b8      	blx	r7
 8002508:	3001      	adds	r0, #1
 800250a:	f43f ae56 	beq.w	80021ba <_printf_float+0xb6>
 800250e:	f108 0801 	add.w	r8, r8, #1
 8002512:	45d0      	cmp	r8, sl
 8002514:	dbf3      	blt.n	80024fe <_printf_float+0x3fa>
 8002516:	464b      	mov	r3, r9
 8002518:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800251c:	e6df      	b.n	80022de <_printf_float+0x1da>
 800251e:	f04f 0800 	mov.w	r8, #0
 8002522:	f104 0b1a 	add.w	fp, r4, #26
 8002526:	e7f4      	b.n	8002512 <_printf_float+0x40e>
 8002528:	2301      	movs	r3, #1
 800252a:	4642      	mov	r2, r8
 800252c:	e7e1      	b.n	80024f2 <_printf_float+0x3ee>
 800252e:	2301      	movs	r3, #1
 8002530:	464a      	mov	r2, r9
 8002532:	4631      	mov	r1, r6
 8002534:	4628      	mov	r0, r5
 8002536:	47b8      	blx	r7
 8002538:	3001      	adds	r0, #1
 800253a:	f43f ae3e 	beq.w	80021ba <_printf_float+0xb6>
 800253e:	f108 0801 	add.w	r8, r8, #1
 8002542:	68e3      	ldr	r3, [r4, #12]
 8002544:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002546:	1a5b      	subs	r3, r3, r1
 8002548:	4543      	cmp	r3, r8
 800254a:	dcf0      	bgt.n	800252e <_printf_float+0x42a>
 800254c:	e6fc      	b.n	8002348 <_printf_float+0x244>
 800254e:	f04f 0800 	mov.w	r8, #0
 8002552:	f104 0919 	add.w	r9, r4, #25
 8002556:	e7f4      	b.n	8002542 <_printf_float+0x43e>

08002558 <_printf_common>:
 8002558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800255c:	4616      	mov	r6, r2
 800255e:	4698      	mov	r8, r3
 8002560:	688a      	ldr	r2, [r1, #8]
 8002562:	690b      	ldr	r3, [r1, #16]
 8002564:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002568:	4293      	cmp	r3, r2
 800256a:	bfb8      	it	lt
 800256c:	4613      	movlt	r3, r2
 800256e:	6033      	str	r3, [r6, #0]
 8002570:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002574:	4607      	mov	r7, r0
 8002576:	460c      	mov	r4, r1
 8002578:	b10a      	cbz	r2, 800257e <_printf_common+0x26>
 800257a:	3301      	adds	r3, #1
 800257c:	6033      	str	r3, [r6, #0]
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	0699      	lsls	r1, r3, #26
 8002582:	bf42      	ittt	mi
 8002584:	6833      	ldrmi	r3, [r6, #0]
 8002586:	3302      	addmi	r3, #2
 8002588:	6033      	strmi	r3, [r6, #0]
 800258a:	6825      	ldr	r5, [r4, #0]
 800258c:	f015 0506 	ands.w	r5, r5, #6
 8002590:	d106      	bne.n	80025a0 <_printf_common+0x48>
 8002592:	f104 0a19 	add.w	sl, r4, #25
 8002596:	68e3      	ldr	r3, [r4, #12]
 8002598:	6832      	ldr	r2, [r6, #0]
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	42ab      	cmp	r3, r5
 800259e:	dc26      	bgt.n	80025ee <_printf_common+0x96>
 80025a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80025a4:	6822      	ldr	r2, [r4, #0]
 80025a6:	3b00      	subs	r3, #0
 80025a8:	bf18      	it	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	0692      	lsls	r2, r2, #26
 80025ae:	d42b      	bmi.n	8002608 <_printf_common+0xb0>
 80025b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80025b4:	4641      	mov	r1, r8
 80025b6:	4638      	mov	r0, r7
 80025b8:	47c8      	blx	r9
 80025ba:	3001      	adds	r0, #1
 80025bc:	d01e      	beq.n	80025fc <_printf_common+0xa4>
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	6922      	ldr	r2, [r4, #16]
 80025c2:	f003 0306 	and.w	r3, r3, #6
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	bf02      	ittt	eq
 80025ca:	68e5      	ldreq	r5, [r4, #12]
 80025cc:	6833      	ldreq	r3, [r6, #0]
 80025ce:	1aed      	subeq	r5, r5, r3
 80025d0:	68a3      	ldr	r3, [r4, #8]
 80025d2:	bf0c      	ite	eq
 80025d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025d8:	2500      	movne	r5, #0
 80025da:	4293      	cmp	r3, r2
 80025dc:	bfc4      	itt	gt
 80025de:	1a9b      	subgt	r3, r3, r2
 80025e0:	18ed      	addgt	r5, r5, r3
 80025e2:	2600      	movs	r6, #0
 80025e4:	341a      	adds	r4, #26
 80025e6:	42b5      	cmp	r5, r6
 80025e8:	d11a      	bne.n	8002620 <_printf_common+0xc8>
 80025ea:	2000      	movs	r0, #0
 80025ec:	e008      	b.n	8002600 <_printf_common+0xa8>
 80025ee:	2301      	movs	r3, #1
 80025f0:	4652      	mov	r2, sl
 80025f2:	4641      	mov	r1, r8
 80025f4:	4638      	mov	r0, r7
 80025f6:	47c8      	blx	r9
 80025f8:	3001      	adds	r0, #1
 80025fa:	d103      	bne.n	8002604 <_printf_common+0xac>
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002604:	3501      	adds	r5, #1
 8002606:	e7c6      	b.n	8002596 <_printf_common+0x3e>
 8002608:	18e1      	adds	r1, r4, r3
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	2030      	movs	r0, #48	@ 0x30
 800260e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002612:	4422      	add	r2, r4
 8002614:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002618:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800261c:	3302      	adds	r3, #2
 800261e:	e7c7      	b.n	80025b0 <_printf_common+0x58>
 8002620:	2301      	movs	r3, #1
 8002622:	4622      	mov	r2, r4
 8002624:	4641      	mov	r1, r8
 8002626:	4638      	mov	r0, r7
 8002628:	47c8      	blx	r9
 800262a:	3001      	adds	r0, #1
 800262c:	d0e6      	beq.n	80025fc <_printf_common+0xa4>
 800262e:	3601      	adds	r6, #1
 8002630:	e7d9      	b.n	80025e6 <_printf_common+0x8e>
	...

08002634 <_printf_i>:
 8002634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002638:	7e0f      	ldrb	r7, [r1, #24]
 800263a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800263c:	2f78      	cmp	r7, #120	@ 0x78
 800263e:	4691      	mov	r9, r2
 8002640:	4680      	mov	r8, r0
 8002642:	460c      	mov	r4, r1
 8002644:	469a      	mov	sl, r3
 8002646:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800264a:	d807      	bhi.n	800265c <_printf_i+0x28>
 800264c:	2f62      	cmp	r7, #98	@ 0x62
 800264e:	d80a      	bhi.n	8002666 <_printf_i+0x32>
 8002650:	2f00      	cmp	r7, #0
 8002652:	f000 80d2 	beq.w	80027fa <_printf_i+0x1c6>
 8002656:	2f58      	cmp	r7, #88	@ 0x58
 8002658:	f000 80b9 	beq.w	80027ce <_printf_i+0x19a>
 800265c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002660:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002664:	e03a      	b.n	80026dc <_printf_i+0xa8>
 8002666:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800266a:	2b15      	cmp	r3, #21
 800266c:	d8f6      	bhi.n	800265c <_printf_i+0x28>
 800266e:	a101      	add	r1, pc, #4	@ (adr r1, 8002674 <_printf_i+0x40>)
 8002670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002674:	080026cd 	.word	0x080026cd
 8002678:	080026e1 	.word	0x080026e1
 800267c:	0800265d 	.word	0x0800265d
 8002680:	0800265d 	.word	0x0800265d
 8002684:	0800265d 	.word	0x0800265d
 8002688:	0800265d 	.word	0x0800265d
 800268c:	080026e1 	.word	0x080026e1
 8002690:	0800265d 	.word	0x0800265d
 8002694:	0800265d 	.word	0x0800265d
 8002698:	0800265d 	.word	0x0800265d
 800269c:	0800265d 	.word	0x0800265d
 80026a0:	080027e1 	.word	0x080027e1
 80026a4:	0800270b 	.word	0x0800270b
 80026a8:	0800279b 	.word	0x0800279b
 80026ac:	0800265d 	.word	0x0800265d
 80026b0:	0800265d 	.word	0x0800265d
 80026b4:	08002803 	.word	0x08002803
 80026b8:	0800265d 	.word	0x0800265d
 80026bc:	0800270b 	.word	0x0800270b
 80026c0:	0800265d 	.word	0x0800265d
 80026c4:	0800265d 	.word	0x0800265d
 80026c8:	080027a3 	.word	0x080027a3
 80026cc:	6833      	ldr	r3, [r6, #0]
 80026ce:	1d1a      	adds	r2, r3, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6032      	str	r2, [r6, #0]
 80026d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80026dc:	2301      	movs	r3, #1
 80026de:	e09d      	b.n	800281c <_printf_i+0x1e8>
 80026e0:	6833      	ldr	r3, [r6, #0]
 80026e2:	6820      	ldr	r0, [r4, #0]
 80026e4:	1d19      	adds	r1, r3, #4
 80026e6:	6031      	str	r1, [r6, #0]
 80026e8:	0606      	lsls	r6, r0, #24
 80026ea:	d501      	bpl.n	80026f0 <_printf_i+0xbc>
 80026ec:	681d      	ldr	r5, [r3, #0]
 80026ee:	e003      	b.n	80026f8 <_printf_i+0xc4>
 80026f0:	0645      	lsls	r5, r0, #25
 80026f2:	d5fb      	bpl.n	80026ec <_printf_i+0xb8>
 80026f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80026f8:	2d00      	cmp	r5, #0
 80026fa:	da03      	bge.n	8002704 <_printf_i+0xd0>
 80026fc:	232d      	movs	r3, #45	@ 0x2d
 80026fe:	426d      	negs	r5, r5
 8002700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002704:	4859      	ldr	r0, [pc, #356]	@ (800286c <_printf_i+0x238>)
 8002706:	230a      	movs	r3, #10
 8002708:	e011      	b.n	800272e <_printf_i+0xfa>
 800270a:	6821      	ldr	r1, [r4, #0]
 800270c:	6833      	ldr	r3, [r6, #0]
 800270e:	0608      	lsls	r0, r1, #24
 8002710:	f853 5b04 	ldr.w	r5, [r3], #4
 8002714:	d402      	bmi.n	800271c <_printf_i+0xe8>
 8002716:	0649      	lsls	r1, r1, #25
 8002718:	bf48      	it	mi
 800271a:	b2ad      	uxthmi	r5, r5
 800271c:	2f6f      	cmp	r7, #111	@ 0x6f
 800271e:	4853      	ldr	r0, [pc, #332]	@ (800286c <_printf_i+0x238>)
 8002720:	6033      	str	r3, [r6, #0]
 8002722:	bf14      	ite	ne
 8002724:	230a      	movne	r3, #10
 8002726:	2308      	moveq	r3, #8
 8002728:	2100      	movs	r1, #0
 800272a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800272e:	6866      	ldr	r6, [r4, #4]
 8002730:	60a6      	str	r6, [r4, #8]
 8002732:	2e00      	cmp	r6, #0
 8002734:	bfa2      	ittt	ge
 8002736:	6821      	ldrge	r1, [r4, #0]
 8002738:	f021 0104 	bicge.w	r1, r1, #4
 800273c:	6021      	strge	r1, [r4, #0]
 800273e:	b90d      	cbnz	r5, 8002744 <_printf_i+0x110>
 8002740:	2e00      	cmp	r6, #0
 8002742:	d04b      	beq.n	80027dc <_printf_i+0x1a8>
 8002744:	4616      	mov	r6, r2
 8002746:	fbb5 f1f3 	udiv	r1, r5, r3
 800274a:	fb03 5711 	mls	r7, r3, r1, r5
 800274e:	5dc7      	ldrb	r7, [r0, r7]
 8002750:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002754:	462f      	mov	r7, r5
 8002756:	42bb      	cmp	r3, r7
 8002758:	460d      	mov	r5, r1
 800275a:	d9f4      	bls.n	8002746 <_printf_i+0x112>
 800275c:	2b08      	cmp	r3, #8
 800275e:	d10b      	bne.n	8002778 <_printf_i+0x144>
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	07df      	lsls	r7, r3, #31
 8002764:	d508      	bpl.n	8002778 <_printf_i+0x144>
 8002766:	6923      	ldr	r3, [r4, #16]
 8002768:	6861      	ldr	r1, [r4, #4]
 800276a:	4299      	cmp	r1, r3
 800276c:	bfde      	ittt	le
 800276e:	2330      	movle	r3, #48	@ 0x30
 8002770:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002774:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002778:	1b92      	subs	r2, r2, r6
 800277a:	6122      	str	r2, [r4, #16]
 800277c:	f8cd a000 	str.w	sl, [sp]
 8002780:	464b      	mov	r3, r9
 8002782:	aa03      	add	r2, sp, #12
 8002784:	4621      	mov	r1, r4
 8002786:	4640      	mov	r0, r8
 8002788:	f7ff fee6 	bl	8002558 <_printf_common>
 800278c:	3001      	adds	r0, #1
 800278e:	d14a      	bne.n	8002826 <_printf_i+0x1f2>
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	b004      	add	sp, #16
 8002796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	f043 0320 	orr.w	r3, r3, #32
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	4833      	ldr	r0, [pc, #204]	@ (8002870 <_printf_i+0x23c>)
 80027a4:	2778      	movs	r7, #120	@ 0x78
 80027a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	6831      	ldr	r1, [r6, #0]
 80027ae:	061f      	lsls	r7, r3, #24
 80027b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80027b4:	d402      	bmi.n	80027bc <_printf_i+0x188>
 80027b6:	065f      	lsls	r7, r3, #25
 80027b8:	bf48      	it	mi
 80027ba:	b2ad      	uxthmi	r5, r5
 80027bc:	6031      	str	r1, [r6, #0]
 80027be:	07d9      	lsls	r1, r3, #31
 80027c0:	bf44      	itt	mi
 80027c2:	f043 0320 	orrmi.w	r3, r3, #32
 80027c6:	6023      	strmi	r3, [r4, #0]
 80027c8:	b11d      	cbz	r5, 80027d2 <_printf_i+0x19e>
 80027ca:	2310      	movs	r3, #16
 80027cc:	e7ac      	b.n	8002728 <_printf_i+0xf4>
 80027ce:	4827      	ldr	r0, [pc, #156]	@ (800286c <_printf_i+0x238>)
 80027d0:	e7e9      	b.n	80027a6 <_printf_i+0x172>
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	f023 0320 	bic.w	r3, r3, #32
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	e7f6      	b.n	80027ca <_printf_i+0x196>
 80027dc:	4616      	mov	r6, r2
 80027de:	e7bd      	b.n	800275c <_printf_i+0x128>
 80027e0:	6833      	ldr	r3, [r6, #0]
 80027e2:	6825      	ldr	r5, [r4, #0]
 80027e4:	6961      	ldr	r1, [r4, #20]
 80027e6:	1d18      	adds	r0, r3, #4
 80027e8:	6030      	str	r0, [r6, #0]
 80027ea:	062e      	lsls	r6, r5, #24
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	d501      	bpl.n	80027f4 <_printf_i+0x1c0>
 80027f0:	6019      	str	r1, [r3, #0]
 80027f2:	e002      	b.n	80027fa <_printf_i+0x1c6>
 80027f4:	0668      	lsls	r0, r5, #25
 80027f6:	d5fb      	bpl.n	80027f0 <_printf_i+0x1bc>
 80027f8:	8019      	strh	r1, [r3, #0]
 80027fa:	2300      	movs	r3, #0
 80027fc:	6123      	str	r3, [r4, #16]
 80027fe:	4616      	mov	r6, r2
 8002800:	e7bc      	b.n	800277c <_printf_i+0x148>
 8002802:	6833      	ldr	r3, [r6, #0]
 8002804:	1d1a      	adds	r2, r3, #4
 8002806:	6032      	str	r2, [r6, #0]
 8002808:	681e      	ldr	r6, [r3, #0]
 800280a:	6862      	ldr	r2, [r4, #4]
 800280c:	2100      	movs	r1, #0
 800280e:	4630      	mov	r0, r6
 8002810:	f7fd fce6 	bl	80001e0 <memchr>
 8002814:	b108      	cbz	r0, 800281a <_printf_i+0x1e6>
 8002816:	1b80      	subs	r0, r0, r6
 8002818:	6060      	str	r0, [r4, #4]
 800281a:	6863      	ldr	r3, [r4, #4]
 800281c:	6123      	str	r3, [r4, #16]
 800281e:	2300      	movs	r3, #0
 8002820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002824:	e7aa      	b.n	800277c <_printf_i+0x148>
 8002826:	6923      	ldr	r3, [r4, #16]
 8002828:	4632      	mov	r2, r6
 800282a:	4649      	mov	r1, r9
 800282c:	4640      	mov	r0, r8
 800282e:	47d0      	blx	sl
 8002830:	3001      	adds	r0, #1
 8002832:	d0ad      	beq.n	8002790 <_printf_i+0x15c>
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	079b      	lsls	r3, r3, #30
 8002838:	d413      	bmi.n	8002862 <_printf_i+0x22e>
 800283a:	68e0      	ldr	r0, [r4, #12]
 800283c:	9b03      	ldr	r3, [sp, #12]
 800283e:	4298      	cmp	r0, r3
 8002840:	bfb8      	it	lt
 8002842:	4618      	movlt	r0, r3
 8002844:	e7a6      	b.n	8002794 <_printf_i+0x160>
 8002846:	2301      	movs	r3, #1
 8002848:	4632      	mov	r2, r6
 800284a:	4649      	mov	r1, r9
 800284c:	4640      	mov	r0, r8
 800284e:	47d0      	blx	sl
 8002850:	3001      	adds	r0, #1
 8002852:	d09d      	beq.n	8002790 <_printf_i+0x15c>
 8002854:	3501      	adds	r5, #1
 8002856:	68e3      	ldr	r3, [r4, #12]
 8002858:	9903      	ldr	r1, [sp, #12]
 800285a:	1a5b      	subs	r3, r3, r1
 800285c:	42ab      	cmp	r3, r5
 800285e:	dcf2      	bgt.n	8002846 <_printf_i+0x212>
 8002860:	e7eb      	b.n	800283a <_printf_i+0x206>
 8002862:	2500      	movs	r5, #0
 8002864:	f104 0619 	add.w	r6, r4, #25
 8002868:	e7f5      	b.n	8002856 <_printf_i+0x222>
 800286a:	bf00      	nop
 800286c:	08004cf0 	.word	0x08004cf0
 8002870:	08004d01 	.word	0x08004d01

08002874 <std>:
 8002874:	2300      	movs	r3, #0
 8002876:	b510      	push	{r4, lr}
 8002878:	4604      	mov	r4, r0
 800287a:	e9c0 3300 	strd	r3, r3, [r0]
 800287e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002882:	6083      	str	r3, [r0, #8]
 8002884:	8181      	strh	r1, [r0, #12]
 8002886:	6643      	str	r3, [r0, #100]	@ 0x64
 8002888:	81c2      	strh	r2, [r0, #14]
 800288a:	6183      	str	r3, [r0, #24]
 800288c:	4619      	mov	r1, r3
 800288e:	2208      	movs	r2, #8
 8002890:	305c      	adds	r0, #92	@ 0x5c
 8002892:	f000 f914 	bl	8002abe <memset>
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <std+0x58>)
 8002898:	6263      	str	r3, [r4, #36]	@ 0x24
 800289a:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <std+0x5c>)
 800289c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800289e:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <std+0x60>)
 80028a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80028a2:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <std+0x64>)
 80028a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <std+0x68>)
 80028a8:	6224      	str	r4, [r4, #32]
 80028aa:	429c      	cmp	r4, r3
 80028ac:	d006      	beq.n	80028bc <std+0x48>
 80028ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80028b2:	4294      	cmp	r4, r2
 80028b4:	d002      	beq.n	80028bc <std+0x48>
 80028b6:	33d0      	adds	r3, #208	@ 0xd0
 80028b8:	429c      	cmp	r4, r3
 80028ba:	d105      	bne.n	80028c8 <std+0x54>
 80028bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80028c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028c4:	f000 b978 	b.w	8002bb8 <__retarget_lock_init_recursive>
 80028c8:	bd10      	pop	{r4, pc}
 80028ca:	bf00      	nop
 80028cc:	08002a39 	.word	0x08002a39
 80028d0:	08002a5b 	.word	0x08002a5b
 80028d4:	08002a93 	.word	0x08002a93
 80028d8:	08002ab7 	.word	0x08002ab7
 80028dc:	20000368 	.word	0x20000368

080028e0 <stdio_exit_handler>:
 80028e0:	4a02      	ldr	r2, [pc, #8]	@ (80028ec <stdio_exit_handler+0xc>)
 80028e2:	4903      	ldr	r1, [pc, #12]	@ (80028f0 <stdio_exit_handler+0x10>)
 80028e4:	4803      	ldr	r0, [pc, #12]	@ (80028f4 <stdio_exit_handler+0x14>)
 80028e6:	f000 b869 	b.w	80029bc <_fwalk_sglue>
 80028ea:	bf00      	nop
 80028ec:	20000000 	.word	0x20000000
 80028f0:	08004535 	.word	0x08004535
 80028f4:	20000010 	.word	0x20000010

080028f8 <cleanup_stdio>:
 80028f8:	6841      	ldr	r1, [r0, #4]
 80028fa:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <cleanup_stdio+0x34>)
 80028fc:	4299      	cmp	r1, r3
 80028fe:	b510      	push	{r4, lr}
 8002900:	4604      	mov	r4, r0
 8002902:	d001      	beq.n	8002908 <cleanup_stdio+0x10>
 8002904:	f001 fe16 	bl	8004534 <_fflush_r>
 8002908:	68a1      	ldr	r1, [r4, #8]
 800290a:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <cleanup_stdio+0x38>)
 800290c:	4299      	cmp	r1, r3
 800290e:	d002      	beq.n	8002916 <cleanup_stdio+0x1e>
 8002910:	4620      	mov	r0, r4
 8002912:	f001 fe0f 	bl	8004534 <_fflush_r>
 8002916:	68e1      	ldr	r1, [r4, #12]
 8002918:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <cleanup_stdio+0x3c>)
 800291a:	4299      	cmp	r1, r3
 800291c:	d004      	beq.n	8002928 <cleanup_stdio+0x30>
 800291e:	4620      	mov	r0, r4
 8002920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002924:	f001 be06 	b.w	8004534 <_fflush_r>
 8002928:	bd10      	pop	{r4, pc}
 800292a:	bf00      	nop
 800292c:	20000368 	.word	0x20000368
 8002930:	200003d0 	.word	0x200003d0
 8002934:	20000438 	.word	0x20000438

08002938 <global_stdio_init.part.0>:
 8002938:	b510      	push	{r4, lr}
 800293a:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <global_stdio_init.part.0+0x30>)
 800293c:	4c0b      	ldr	r4, [pc, #44]	@ (800296c <global_stdio_init.part.0+0x34>)
 800293e:	4a0c      	ldr	r2, [pc, #48]	@ (8002970 <global_stdio_init.part.0+0x38>)
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	4620      	mov	r0, r4
 8002944:	2200      	movs	r2, #0
 8002946:	2104      	movs	r1, #4
 8002948:	f7ff ff94 	bl	8002874 <std>
 800294c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002950:	2201      	movs	r2, #1
 8002952:	2109      	movs	r1, #9
 8002954:	f7ff ff8e 	bl	8002874 <std>
 8002958:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800295c:	2202      	movs	r2, #2
 800295e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002962:	2112      	movs	r1, #18
 8002964:	f7ff bf86 	b.w	8002874 <std>
 8002968:	200004a0 	.word	0x200004a0
 800296c:	20000368 	.word	0x20000368
 8002970:	080028e1 	.word	0x080028e1

08002974 <__sfp_lock_acquire>:
 8002974:	4801      	ldr	r0, [pc, #4]	@ (800297c <__sfp_lock_acquire+0x8>)
 8002976:	f000 b920 	b.w	8002bba <__retarget_lock_acquire_recursive>
 800297a:	bf00      	nop
 800297c:	200004a9 	.word	0x200004a9

08002980 <__sfp_lock_release>:
 8002980:	4801      	ldr	r0, [pc, #4]	@ (8002988 <__sfp_lock_release+0x8>)
 8002982:	f000 b91b 	b.w	8002bbc <__retarget_lock_release_recursive>
 8002986:	bf00      	nop
 8002988:	200004a9 	.word	0x200004a9

0800298c <__sinit>:
 800298c:	b510      	push	{r4, lr}
 800298e:	4604      	mov	r4, r0
 8002990:	f7ff fff0 	bl	8002974 <__sfp_lock_acquire>
 8002994:	6a23      	ldr	r3, [r4, #32]
 8002996:	b11b      	cbz	r3, 80029a0 <__sinit+0x14>
 8002998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800299c:	f7ff bff0 	b.w	8002980 <__sfp_lock_release>
 80029a0:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <__sinit+0x28>)
 80029a2:	6223      	str	r3, [r4, #32]
 80029a4:	4b04      	ldr	r3, [pc, #16]	@ (80029b8 <__sinit+0x2c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f5      	bne.n	8002998 <__sinit+0xc>
 80029ac:	f7ff ffc4 	bl	8002938 <global_stdio_init.part.0>
 80029b0:	e7f2      	b.n	8002998 <__sinit+0xc>
 80029b2:	bf00      	nop
 80029b4:	080028f9 	.word	0x080028f9
 80029b8:	200004a0 	.word	0x200004a0

080029bc <_fwalk_sglue>:
 80029bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029c0:	4607      	mov	r7, r0
 80029c2:	4688      	mov	r8, r1
 80029c4:	4614      	mov	r4, r2
 80029c6:	2600      	movs	r6, #0
 80029c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029cc:	f1b9 0901 	subs.w	r9, r9, #1
 80029d0:	d505      	bpl.n	80029de <_fwalk_sglue+0x22>
 80029d2:	6824      	ldr	r4, [r4, #0]
 80029d4:	2c00      	cmp	r4, #0
 80029d6:	d1f7      	bne.n	80029c8 <_fwalk_sglue+0xc>
 80029d8:	4630      	mov	r0, r6
 80029da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029de:	89ab      	ldrh	r3, [r5, #12]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d907      	bls.n	80029f4 <_fwalk_sglue+0x38>
 80029e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029e8:	3301      	adds	r3, #1
 80029ea:	d003      	beq.n	80029f4 <_fwalk_sglue+0x38>
 80029ec:	4629      	mov	r1, r5
 80029ee:	4638      	mov	r0, r7
 80029f0:	47c0      	blx	r8
 80029f2:	4306      	orrs	r6, r0
 80029f4:	3568      	adds	r5, #104	@ 0x68
 80029f6:	e7e9      	b.n	80029cc <_fwalk_sglue+0x10>

080029f8 <siprintf>:
 80029f8:	b40e      	push	{r1, r2, r3}
 80029fa:	b500      	push	{lr}
 80029fc:	b09c      	sub	sp, #112	@ 0x70
 80029fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8002a00:	9002      	str	r0, [sp, #8]
 8002a02:	9006      	str	r0, [sp, #24]
 8002a04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002a08:	4809      	ldr	r0, [pc, #36]	@ (8002a30 <siprintf+0x38>)
 8002a0a:	9107      	str	r1, [sp, #28]
 8002a0c:	9104      	str	r1, [sp, #16]
 8002a0e:	4909      	ldr	r1, [pc, #36]	@ (8002a34 <siprintf+0x3c>)
 8002a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a14:	9105      	str	r1, [sp, #20]
 8002a16:	6800      	ldr	r0, [r0, #0]
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	a902      	add	r1, sp, #8
 8002a1c:	f001 fc0a 	bl	8004234 <_svfiprintf_r>
 8002a20:	9b02      	ldr	r3, [sp, #8]
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	b01c      	add	sp, #112	@ 0x70
 8002a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a2c:	b003      	add	sp, #12
 8002a2e:	4770      	bx	lr
 8002a30:	2000000c 	.word	0x2000000c
 8002a34:	ffff0208 	.word	0xffff0208

08002a38 <__sread>:
 8002a38:	b510      	push	{r4, lr}
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a40:	f000 f86c 	bl	8002b1c <_read_r>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	bfab      	itete	ge
 8002a48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8002a4c:	181b      	addge	r3, r3, r0
 8002a4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002a52:	bfac      	ite	ge
 8002a54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002a56:	81a3      	strhlt	r3, [r4, #12]
 8002a58:	bd10      	pop	{r4, pc}

08002a5a <__swrite>:
 8002a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a5e:	461f      	mov	r7, r3
 8002a60:	898b      	ldrh	r3, [r1, #12]
 8002a62:	05db      	lsls	r3, r3, #23
 8002a64:	4605      	mov	r5, r0
 8002a66:	460c      	mov	r4, r1
 8002a68:	4616      	mov	r6, r2
 8002a6a:	d505      	bpl.n	8002a78 <__swrite+0x1e>
 8002a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a70:	2302      	movs	r3, #2
 8002a72:	2200      	movs	r2, #0
 8002a74:	f000 f840 	bl	8002af8 <_lseek_r>
 8002a78:	89a3      	ldrh	r3, [r4, #12]
 8002a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a82:	81a3      	strh	r3, [r4, #12]
 8002a84:	4632      	mov	r2, r6
 8002a86:	463b      	mov	r3, r7
 8002a88:	4628      	mov	r0, r5
 8002a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a8e:	f000 b857 	b.w	8002b40 <_write_r>

08002a92 <__sseek>:
 8002a92:	b510      	push	{r4, lr}
 8002a94:	460c      	mov	r4, r1
 8002a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a9a:	f000 f82d 	bl	8002af8 <_lseek_r>
 8002a9e:	1c43      	adds	r3, r0, #1
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	bf15      	itete	ne
 8002aa4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002aa6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002aaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002aae:	81a3      	strheq	r3, [r4, #12]
 8002ab0:	bf18      	it	ne
 8002ab2:	81a3      	strhne	r3, [r4, #12]
 8002ab4:	bd10      	pop	{r4, pc}

08002ab6 <__sclose>:
 8002ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aba:	f000 b80d 	b.w	8002ad8 <_close_r>

08002abe <memset>:
 8002abe:	4402      	add	r2, r0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d100      	bne.n	8002ac8 <memset+0xa>
 8002ac6:	4770      	bx	lr
 8002ac8:	f803 1b01 	strb.w	r1, [r3], #1
 8002acc:	e7f9      	b.n	8002ac2 <memset+0x4>
	...

08002ad0 <_localeconv_r>:
 8002ad0:	4800      	ldr	r0, [pc, #0]	@ (8002ad4 <_localeconv_r+0x4>)
 8002ad2:	4770      	bx	lr
 8002ad4:	2000014c 	.word	0x2000014c

08002ad8 <_close_r>:
 8002ad8:	b538      	push	{r3, r4, r5, lr}
 8002ada:	4d06      	ldr	r5, [pc, #24]	@ (8002af4 <_close_r+0x1c>)
 8002adc:	2300      	movs	r3, #0
 8002ade:	4604      	mov	r4, r0
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	602b      	str	r3, [r5, #0]
 8002ae4:	f7ff f9c9 	bl	8001e7a <_close>
 8002ae8:	1c43      	adds	r3, r0, #1
 8002aea:	d102      	bne.n	8002af2 <_close_r+0x1a>
 8002aec:	682b      	ldr	r3, [r5, #0]
 8002aee:	b103      	cbz	r3, 8002af2 <_close_r+0x1a>
 8002af0:	6023      	str	r3, [r4, #0]
 8002af2:	bd38      	pop	{r3, r4, r5, pc}
 8002af4:	200004a4 	.word	0x200004a4

08002af8 <_lseek_r>:
 8002af8:	b538      	push	{r3, r4, r5, lr}
 8002afa:	4d07      	ldr	r5, [pc, #28]	@ (8002b18 <_lseek_r+0x20>)
 8002afc:	4604      	mov	r4, r0
 8002afe:	4608      	mov	r0, r1
 8002b00:	4611      	mov	r1, r2
 8002b02:	2200      	movs	r2, #0
 8002b04:	602a      	str	r2, [r5, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f7ff f9de 	bl	8001ec8 <_lseek>
 8002b0c:	1c43      	adds	r3, r0, #1
 8002b0e:	d102      	bne.n	8002b16 <_lseek_r+0x1e>
 8002b10:	682b      	ldr	r3, [r5, #0]
 8002b12:	b103      	cbz	r3, 8002b16 <_lseek_r+0x1e>
 8002b14:	6023      	str	r3, [r4, #0]
 8002b16:	bd38      	pop	{r3, r4, r5, pc}
 8002b18:	200004a4 	.word	0x200004a4

08002b1c <_read_r>:
 8002b1c:	b538      	push	{r3, r4, r5, lr}
 8002b1e:	4d07      	ldr	r5, [pc, #28]	@ (8002b3c <_read_r+0x20>)
 8002b20:	4604      	mov	r4, r0
 8002b22:	4608      	mov	r0, r1
 8002b24:	4611      	mov	r1, r2
 8002b26:	2200      	movs	r2, #0
 8002b28:	602a      	str	r2, [r5, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f7ff f96c 	bl	8001e08 <_read>
 8002b30:	1c43      	adds	r3, r0, #1
 8002b32:	d102      	bne.n	8002b3a <_read_r+0x1e>
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	b103      	cbz	r3, 8002b3a <_read_r+0x1e>
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	bd38      	pop	{r3, r4, r5, pc}
 8002b3c:	200004a4 	.word	0x200004a4

08002b40 <_write_r>:
 8002b40:	b538      	push	{r3, r4, r5, lr}
 8002b42:	4d07      	ldr	r5, [pc, #28]	@ (8002b60 <_write_r+0x20>)
 8002b44:	4604      	mov	r4, r0
 8002b46:	4608      	mov	r0, r1
 8002b48:	4611      	mov	r1, r2
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	602a      	str	r2, [r5, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f7ff f977 	bl	8001e42 <_write>
 8002b54:	1c43      	adds	r3, r0, #1
 8002b56:	d102      	bne.n	8002b5e <_write_r+0x1e>
 8002b58:	682b      	ldr	r3, [r5, #0]
 8002b5a:	b103      	cbz	r3, 8002b5e <_write_r+0x1e>
 8002b5c:	6023      	str	r3, [r4, #0]
 8002b5e:	bd38      	pop	{r3, r4, r5, pc}
 8002b60:	200004a4 	.word	0x200004a4

08002b64 <__errno>:
 8002b64:	4b01      	ldr	r3, [pc, #4]	@ (8002b6c <__errno+0x8>)
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	2000000c 	.word	0x2000000c

08002b70 <__libc_init_array>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	4d0d      	ldr	r5, [pc, #52]	@ (8002ba8 <__libc_init_array+0x38>)
 8002b74:	4c0d      	ldr	r4, [pc, #52]	@ (8002bac <__libc_init_array+0x3c>)
 8002b76:	1b64      	subs	r4, r4, r5
 8002b78:	10a4      	asrs	r4, r4, #2
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	42a6      	cmp	r6, r4
 8002b7e:	d109      	bne.n	8002b94 <__libc_init_array+0x24>
 8002b80:	4d0b      	ldr	r5, [pc, #44]	@ (8002bb0 <__libc_init_array+0x40>)
 8002b82:	4c0c      	ldr	r4, [pc, #48]	@ (8002bb4 <__libc_init_array+0x44>)
 8002b84:	f002 f866 	bl	8004c54 <_init>
 8002b88:	1b64      	subs	r4, r4, r5
 8002b8a:	10a4      	asrs	r4, r4, #2
 8002b8c:	2600      	movs	r6, #0
 8002b8e:	42a6      	cmp	r6, r4
 8002b90:	d105      	bne.n	8002b9e <__libc_init_array+0x2e>
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
 8002b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b98:	4798      	blx	r3
 8002b9a:	3601      	adds	r6, #1
 8002b9c:	e7ee      	b.n	8002b7c <__libc_init_array+0xc>
 8002b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba2:	4798      	blx	r3
 8002ba4:	3601      	adds	r6, #1
 8002ba6:	e7f2      	b.n	8002b8e <__libc_init_array+0x1e>
 8002ba8:	08005058 	.word	0x08005058
 8002bac:	08005058 	.word	0x08005058
 8002bb0:	08005058 	.word	0x08005058
 8002bb4:	0800505c 	.word	0x0800505c

08002bb8 <__retarget_lock_init_recursive>:
 8002bb8:	4770      	bx	lr

08002bba <__retarget_lock_acquire_recursive>:
 8002bba:	4770      	bx	lr

08002bbc <__retarget_lock_release_recursive>:
 8002bbc:	4770      	bx	lr

08002bbe <memcpy>:
 8002bbe:	440a      	add	r2, r1
 8002bc0:	4291      	cmp	r1, r2
 8002bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bc6:	d100      	bne.n	8002bca <memcpy+0xc>
 8002bc8:	4770      	bx	lr
 8002bca:	b510      	push	{r4, lr}
 8002bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bd4:	4291      	cmp	r1, r2
 8002bd6:	d1f9      	bne.n	8002bcc <memcpy+0xe>
 8002bd8:	bd10      	pop	{r4, pc}

08002bda <quorem>:
 8002bda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bde:	6903      	ldr	r3, [r0, #16]
 8002be0:	690c      	ldr	r4, [r1, #16]
 8002be2:	42a3      	cmp	r3, r4
 8002be4:	4607      	mov	r7, r0
 8002be6:	db7e      	blt.n	8002ce6 <quorem+0x10c>
 8002be8:	3c01      	subs	r4, #1
 8002bea:	f101 0814 	add.w	r8, r1, #20
 8002bee:	00a3      	lsls	r3, r4, #2
 8002bf0:	f100 0514 	add.w	r5, r0, #20
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002c00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002c04:	3301      	adds	r3, #1
 8002c06:	429a      	cmp	r2, r3
 8002c08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002c0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c10:	d32e      	bcc.n	8002c70 <quorem+0x96>
 8002c12:	f04f 0a00 	mov.w	sl, #0
 8002c16:	46c4      	mov	ip, r8
 8002c18:	46ae      	mov	lr, r5
 8002c1a:	46d3      	mov	fp, sl
 8002c1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002c20:	b298      	uxth	r0, r3
 8002c22:	fb06 a000 	mla	r0, r6, r0, sl
 8002c26:	0c02      	lsrs	r2, r0, #16
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	fb06 2303 	mla	r3, r6, r3, r2
 8002c2e:	f8de 2000 	ldr.w	r2, [lr]
 8002c32:	b280      	uxth	r0, r0
 8002c34:	b292      	uxth	r2, r2
 8002c36:	1a12      	subs	r2, r2, r0
 8002c38:	445a      	add	r2, fp
 8002c3a:	f8de 0000 	ldr.w	r0, [lr]
 8002c3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002c48:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002c4c:	b292      	uxth	r2, r2
 8002c4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002c52:	45e1      	cmp	r9, ip
 8002c54:	f84e 2b04 	str.w	r2, [lr], #4
 8002c58:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002c5c:	d2de      	bcs.n	8002c1c <quorem+0x42>
 8002c5e:	9b00      	ldr	r3, [sp, #0]
 8002c60:	58eb      	ldr	r3, [r5, r3]
 8002c62:	b92b      	cbnz	r3, 8002c70 <quorem+0x96>
 8002c64:	9b01      	ldr	r3, [sp, #4]
 8002c66:	3b04      	subs	r3, #4
 8002c68:	429d      	cmp	r5, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	d32f      	bcc.n	8002cce <quorem+0xf4>
 8002c6e:	613c      	str	r4, [r7, #16]
 8002c70:	4638      	mov	r0, r7
 8002c72:	f001 f97b 	bl	8003f6c <__mcmp>
 8002c76:	2800      	cmp	r0, #0
 8002c78:	db25      	blt.n	8002cc6 <quorem+0xec>
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8002c82:	f8d1 c000 	ldr.w	ip, [r1]
 8002c86:	fa1f fe82 	uxth.w	lr, r2
 8002c8a:	fa1f f38c 	uxth.w	r3, ip
 8002c8e:	eba3 030e 	sub.w	r3, r3, lr
 8002c92:	4403      	add	r3, r0
 8002c94:	0c12      	lsrs	r2, r2, #16
 8002c96:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002c9a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ca4:	45c1      	cmp	r9, r8
 8002ca6:	f841 3b04 	str.w	r3, [r1], #4
 8002caa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002cae:	d2e6      	bcs.n	8002c7e <quorem+0xa4>
 8002cb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002cb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002cb8:	b922      	cbnz	r2, 8002cc4 <quorem+0xea>
 8002cba:	3b04      	subs	r3, #4
 8002cbc:	429d      	cmp	r5, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	d30b      	bcc.n	8002cda <quorem+0x100>
 8002cc2:	613c      	str	r4, [r7, #16]
 8002cc4:	3601      	adds	r6, #1
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	b003      	add	sp, #12
 8002cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	3b04      	subs	r3, #4
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d1cb      	bne.n	8002c6e <quorem+0x94>
 8002cd6:	3c01      	subs	r4, #1
 8002cd8:	e7c6      	b.n	8002c68 <quorem+0x8e>
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	3b04      	subs	r3, #4
 8002cde:	2a00      	cmp	r2, #0
 8002ce0:	d1ef      	bne.n	8002cc2 <quorem+0xe8>
 8002ce2:	3c01      	subs	r4, #1
 8002ce4:	e7ea      	b.n	8002cbc <quorem+0xe2>
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	e7ee      	b.n	8002cc8 <quorem+0xee>
 8002cea:	0000      	movs	r0, r0
 8002cec:	0000      	movs	r0, r0
	...

08002cf0 <_dtoa_r>:
 8002cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf4:	69c7      	ldr	r7, [r0, #28]
 8002cf6:	b099      	sub	sp, #100	@ 0x64
 8002cf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002cfc:	ec55 4b10 	vmov	r4, r5, d0
 8002d00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8002d02:	9109      	str	r1, [sp, #36]	@ 0x24
 8002d04:	4683      	mov	fp, r0
 8002d06:	920e      	str	r2, [sp, #56]	@ 0x38
 8002d08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002d0a:	b97f      	cbnz	r7, 8002d2c <_dtoa_r+0x3c>
 8002d0c:	2010      	movs	r0, #16
 8002d0e:	f000 fdfd 	bl	800390c <malloc>
 8002d12:	4602      	mov	r2, r0
 8002d14:	f8cb 001c 	str.w	r0, [fp, #28]
 8002d18:	b920      	cbnz	r0, 8002d24 <_dtoa_r+0x34>
 8002d1a:	4ba7      	ldr	r3, [pc, #668]	@ (8002fb8 <_dtoa_r+0x2c8>)
 8002d1c:	21ef      	movs	r1, #239	@ 0xef
 8002d1e:	48a7      	ldr	r0, [pc, #668]	@ (8002fbc <_dtoa_r+0x2cc>)
 8002d20:	f001 fc5a 	bl	80045d8 <__assert_func>
 8002d24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002d28:	6007      	str	r7, [r0, #0]
 8002d2a:	60c7      	str	r7, [r0, #12]
 8002d2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	b159      	cbz	r1, 8002d4c <_dtoa_r+0x5c>
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	604a      	str	r2, [r1, #4]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	4093      	lsls	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
 8002d3e:	4658      	mov	r0, fp
 8002d40:	f000 feda 	bl	8003af8 <_Bfree>
 8002d44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	1e2b      	subs	r3, r5, #0
 8002d4e:	bfb9      	ittee	lt
 8002d50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002d54:	9303      	strlt	r3, [sp, #12]
 8002d56:	2300      	movge	r3, #0
 8002d58:	6033      	strge	r3, [r6, #0]
 8002d5a:	9f03      	ldr	r7, [sp, #12]
 8002d5c:	4b98      	ldr	r3, [pc, #608]	@ (8002fc0 <_dtoa_r+0x2d0>)
 8002d5e:	bfbc      	itt	lt
 8002d60:	2201      	movlt	r2, #1
 8002d62:	6032      	strlt	r2, [r6, #0]
 8002d64:	43bb      	bics	r3, r7
 8002d66:	d112      	bne.n	8002d8e <_dtoa_r+0x9e>
 8002d68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002d6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002d74:	4323      	orrs	r3, r4
 8002d76:	f000 854d 	beq.w	8003814 <_dtoa_r+0xb24>
 8002d7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002d7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8002fd4 <_dtoa_r+0x2e4>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 854f 	beq.w	8003824 <_dtoa_r+0xb34>
 8002d86:	f10a 0303 	add.w	r3, sl, #3
 8002d8a:	f000 bd49 	b.w	8003820 <_dtoa_r+0xb30>
 8002d8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002d92:	2200      	movs	r2, #0
 8002d94:	ec51 0b17 	vmov	r0, r1, d7
 8002d98:	2300      	movs	r3, #0
 8002d9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002d9e:	f7fd fe9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8002da2:	4680      	mov	r8, r0
 8002da4:	b158      	cbz	r0, 8002dbe <_dtoa_r+0xce>
 8002da6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002da8:	2301      	movs	r3, #1
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002dae:	b113      	cbz	r3, 8002db6 <_dtoa_r+0xc6>
 8002db0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8002db2:	4b84      	ldr	r3, [pc, #528]	@ (8002fc4 <_dtoa_r+0x2d4>)
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8002fd8 <_dtoa_r+0x2e8>
 8002dba:	f000 bd33 	b.w	8003824 <_dtoa_r+0xb34>
 8002dbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8002dc2:	aa16      	add	r2, sp, #88	@ 0x58
 8002dc4:	a917      	add	r1, sp, #92	@ 0x5c
 8002dc6:	4658      	mov	r0, fp
 8002dc8:	f001 f980 	bl	80040cc <__d2b>
 8002dcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002dd0:	4681      	mov	r9, r0
 8002dd2:	2e00      	cmp	r6, #0
 8002dd4:	d077      	beq.n	8002ec6 <_dtoa_r+0x1d6>
 8002dd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002dd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8002ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002de4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002de8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002dec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002df0:	4619      	mov	r1, r3
 8002df2:	2200      	movs	r2, #0
 8002df4:	4b74      	ldr	r3, [pc, #464]	@ (8002fc8 <_dtoa_r+0x2d8>)
 8002df6:	f7fd fa4f 	bl	8000298 <__aeabi_dsub>
 8002dfa:	a369      	add	r3, pc, #420	@ (adr r3, 8002fa0 <_dtoa_r+0x2b0>)
 8002dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e00:	f7fd fc02 	bl	8000608 <__aeabi_dmul>
 8002e04:	a368      	add	r3, pc, #416	@ (adr r3, 8002fa8 <_dtoa_r+0x2b8>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fa47 	bl	800029c <__adddf3>
 8002e0e:	4604      	mov	r4, r0
 8002e10:	4630      	mov	r0, r6
 8002e12:	460d      	mov	r5, r1
 8002e14:	f7fd fb8e 	bl	8000534 <__aeabi_i2d>
 8002e18:	a365      	add	r3, pc, #404	@ (adr r3, 8002fb0 <_dtoa_r+0x2c0>)
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	f7fd fbf3 	bl	8000608 <__aeabi_dmul>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4620      	mov	r0, r4
 8002e28:	4629      	mov	r1, r5
 8002e2a:	f7fd fa37 	bl	800029c <__adddf3>
 8002e2e:	4604      	mov	r4, r0
 8002e30:	460d      	mov	r5, r1
 8002e32:	f7fd fe99 	bl	8000b68 <__aeabi_d2iz>
 8002e36:	2200      	movs	r2, #0
 8002e38:	4607      	mov	r7, r0
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7fd fe54 	bl	8000aec <__aeabi_dcmplt>
 8002e44:	b140      	cbz	r0, 8002e58 <_dtoa_r+0x168>
 8002e46:	4638      	mov	r0, r7
 8002e48:	f7fd fb74 	bl	8000534 <__aeabi_i2d>
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	462b      	mov	r3, r5
 8002e50:	f7fd fe42 	bl	8000ad8 <__aeabi_dcmpeq>
 8002e54:	b900      	cbnz	r0, 8002e58 <_dtoa_r+0x168>
 8002e56:	3f01      	subs	r7, #1
 8002e58:	2f16      	cmp	r7, #22
 8002e5a:	d851      	bhi.n	8002f00 <_dtoa_r+0x210>
 8002e5c:	4b5b      	ldr	r3, [pc, #364]	@ (8002fcc <_dtoa_r+0x2dc>)
 8002e5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002e6a:	f7fd fe3f 	bl	8000aec <__aeabi_dcmplt>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d048      	beq.n	8002f04 <_dtoa_r+0x214>
 8002e72:	3f01      	subs	r7, #1
 8002e74:	2300      	movs	r3, #0
 8002e76:	9312      	str	r3, [sp, #72]	@ 0x48
 8002e78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002e7a:	1b9b      	subs	r3, r3, r6
 8002e7c:	1e5a      	subs	r2, r3, #1
 8002e7e:	bf44      	itt	mi
 8002e80:	f1c3 0801 	rsbmi	r8, r3, #1
 8002e84:	2300      	movmi	r3, #0
 8002e86:	9208      	str	r2, [sp, #32]
 8002e88:	bf54      	ite	pl
 8002e8a:	f04f 0800 	movpl.w	r8, #0
 8002e8e:	9308      	strmi	r3, [sp, #32]
 8002e90:	2f00      	cmp	r7, #0
 8002e92:	db39      	blt.n	8002f08 <_dtoa_r+0x218>
 8002e94:	9b08      	ldr	r3, [sp, #32]
 8002e96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8002e98:	443b      	add	r3, r7
 8002e9a:	9308      	str	r3, [sp, #32]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ea2:	2b09      	cmp	r3, #9
 8002ea4:	d864      	bhi.n	8002f70 <_dtoa_r+0x280>
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	bfc4      	itt	gt
 8002eaa:	3b04      	subgt	r3, #4
 8002eac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8002eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002eb0:	f1a3 0302 	sub.w	r3, r3, #2
 8002eb4:	bfcc      	ite	gt
 8002eb6:	2400      	movgt	r4, #0
 8002eb8:	2401      	movle	r4, #1
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d863      	bhi.n	8002f86 <_dtoa_r+0x296>
 8002ebe:	e8df f003 	tbb	[pc, r3]
 8002ec2:	372a      	.short	0x372a
 8002ec4:	5535      	.short	0x5535
 8002ec6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8002eca:	441e      	add	r6, r3
 8002ecc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	bfc1      	itttt	gt
 8002ed4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002ed8:	409f      	lslgt	r7, r3
 8002eda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002ede:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002ee2:	bfd6      	itet	le
 8002ee4:	f1c3 0320 	rsble	r3, r3, #32
 8002ee8:	ea47 0003 	orrgt.w	r0, r7, r3
 8002eec:	fa04 f003 	lslle.w	r0, r4, r3
 8002ef0:	f7fd fb10 	bl	8000514 <__aeabi_ui2d>
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002efa:	3e01      	subs	r6, #1
 8002efc:	9214      	str	r2, [sp, #80]	@ 0x50
 8002efe:	e777      	b.n	8002df0 <_dtoa_r+0x100>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e7b8      	b.n	8002e76 <_dtoa_r+0x186>
 8002f04:	9012      	str	r0, [sp, #72]	@ 0x48
 8002f06:	e7b7      	b.n	8002e78 <_dtoa_r+0x188>
 8002f08:	427b      	negs	r3, r7
 8002f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	eba8 0807 	sub.w	r8, r8, r7
 8002f12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002f14:	e7c4      	b.n	8002ea0 <_dtoa_r+0x1b0>
 8002f16:	2300      	movs	r3, #0
 8002f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	dc35      	bgt.n	8002f8c <_dtoa_r+0x29c>
 8002f20:	2301      	movs	r3, #1
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	9307      	str	r3, [sp, #28]
 8002f26:	461a      	mov	r2, r3
 8002f28:	920e      	str	r2, [sp, #56]	@ 0x38
 8002f2a:	e00b      	b.n	8002f44 <_dtoa_r+0x254>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e7f3      	b.n	8002f18 <_dtoa_r+0x228>
 8002f30:	2300      	movs	r3, #0
 8002f32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	9307      	str	r3, [sp, #28]
 8002f40:	bfb8      	it	lt
 8002f42:	2301      	movlt	r3, #1
 8002f44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	f102 0514 	add.w	r5, r2, #20
 8002f50:	429d      	cmp	r5, r3
 8002f52:	d91f      	bls.n	8002f94 <_dtoa_r+0x2a4>
 8002f54:	6041      	str	r1, [r0, #4]
 8002f56:	4658      	mov	r0, fp
 8002f58:	f000 fd8e 	bl	8003a78 <_Balloc>
 8002f5c:	4682      	mov	sl, r0
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d13c      	bne.n	8002fdc <_dtoa_r+0x2ec>
 8002f62:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <_dtoa_r+0x2e0>)
 8002f64:	4602      	mov	r2, r0
 8002f66:	f240 11af 	movw	r1, #431	@ 0x1af
 8002f6a:	e6d8      	b.n	8002d1e <_dtoa_r+0x2e>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e7e0      	b.n	8002f32 <_dtoa_r+0x242>
 8002f70:	2401      	movs	r4, #1
 8002f72:	2300      	movs	r3, #0
 8002f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	9307      	str	r3, [sp, #28]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2312      	movs	r3, #18
 8002f84:	e7d0      	b.n	8002f28 <_dtoa_r+0x238>
 8002f86:	2301      	movs	r3, #1
 8002f88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f8a:	e7f5      	b.n	8002f78 <_dtoa_r+0x288>
 8002f8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	9307      	str	r3, [sp, #28]
 8002f92:	e7d7      	b.n	8002f44 <_dtoa_r+0x254>
 8002f94:	3101      	adds	r1, #1
 8002f96:	0052      	lsls	r2, r2, #1
 8002f98:	e7d8      	b.n	8002f4c <_dtoa_r+0x25c>
 8002f9a:	bf00      	nop
 8002f9c:	f3af 8000 	nop.w
 8002fa0:	636f4361 	.word	0x636f4361
 8002fa4:	3fd287a7 	.word	0x3fd287a7
 8002fa8:	8b60c8b3 	.word	0x8b60c8b3
 8002fac:	3fc68a28 	.word	0x3fc68a28
 8002fb0:	509f79fb 	.word	0x509f79fb
 8002fb4:	3fd34413 	.word	0x3fd34413
 8002fb8:	08004d1f 	.word	0x08004d1f
 8002fbc:	08004d36 	.word	0x08004d36
 8002fc0:	7ff00000 	.word	0x7ff00000
 8002fc4:	08004cef 	.word	0x08004cef
 8002fc8:	3ff80000 	.word	0x3ff80000
 8002fcc:	08004e30 	.word	0x08004e30
 8002fd0:	08004d8e 	.word	0x08004d8e
 8002fd4:	08004d1b 	.word	0x08004d1b
 8002fd8:	08004cee 	.word	0x08004cee
 8002fdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002fe0:	6018      	str	r0, [r3, #0]
 8002fe2:	9b07      	ldr	r3, [sp, #28]
 8002fe4:	2b0e      	cmp	r3, #14
 8002fe6:	f200 80a4 	bhi.w	8003132 <_dtoa_r+0x442>
 8002fea:	2c00      	cmp	r4, #0
 8002fec:	f000 80a1 	beq.w	8003132 <_dtoa_r+0x442>
 8002ff0:	2f00      	cmp	r7, #0
 8002ff2:	dd33      	ble.n	800305c <_dtoa_r+0x36c>
 8002ff4:	4bad      	ldr	r3, [pc, #692]	@ (80032ac <_dtoa_r+0x5bc>)
 8002ff6:	f007 020f 	and.w	r2, r7, #15
 8002ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ffe:	ed93 7b00 	vldr	d7, [r3]
 8003002:	05f8      	lsls	r0, r7, #23
 8003004:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003008:	ea4f 1427 	mov.w	r4, r7, asr #4
 800300c:	d516      	bpl.n	800303c <_dtoa_r+0x34c>
 800300e:	4ba8      	ldr	r3, [pc, #672]	@ (80032b0 <_dtoa_r+0x5c0>)
 8003010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003018:	f7fd fc20 	bl	800085c <__aeabi_ddiv>
 800301c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003020:	f004 040f 	and.w	r4, r4, #15
 8003024:	2603      	movs	r6, #3
 8003026:	4da2      	ldr	r5, [pc, #648]	@ (80032b0 <_dtoa_r+0x5c0>)
 8003028:	b954      	cbnz	r4, 8003040 <_dtoa_r+0x350>
 800302a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800302e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003032:	f7fd fc13 	bl	800085c <__aeabi_ddiv>
 8003036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800303a:	e028      	b.n	800308e <_dtoa_r+0x39e>
 800303c:	2602      	movs	r6, #2
 800303e:	e7f2      	b.n	8003026 <_dtoa_r+0x336>
 8003040:	07e1      	lsls	r1, r4, #31
 8003042:	d508      	bpl.n	8003056 <_dtoa_r+0x366>
 8003044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003048:	e9d5 2300 	ldrd	r2, r3, [r5]
 800304c:	f7fd fadc 	bl	8000608 <__aeabi_dmul>
 8003050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003054:	3601      	adds	r6, #1
 8003056:	1064      	asrs	r4, r4, #1
 8003058:	3508      	adds	r5, #8
 800305a:	e7e5      	b.n	8003028 <_dtoa_r+0x338>
 800305c:	f000 80d2 	beq.w	8003204 <_dtoa_r+0x514>
 8003060:	427c      	negs	r4, r7
 8003062:	4b92      	ldr	r3, [pc, #584]	@ (80032ac <_dtoa_r+0x5bc>)
 8003064:	4d92      	ldr	r5, [pc, #584]	@ (80032b0 <_dtoa_r+0x5c0>)
 8003066:	f004 020f 	and.w	r2, r4, #15
 800306a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003076:	f7fd fac7 	bl	8000608 <__aeabi_dmul>
 800307a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800307e:	1124      	asrs	r4, r4, #4
 8003080:	2300      	movs	r3, #0
 8003082:	2602      	movs	r6, #2
 8003084:	2c00      	cmp	r4, #0
 8003086:	f040 80b2 	bne.w	80031ee <_dtoa_r+0x4fe>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1d3      	bne.n	8003036 <_dtoa_r+0x346>
 800308e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003090:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80b7 	beq.w	8003208 <_dtoa_r+0x518>
 800309a:	4b86      	ldr	r3, [pc, #536]	@ (80032b4 <_dtoa_r+0x5c4>)
 800309c:	2200      	movs	r2, #0
 800309e:	4620      	mov	r0, r4
 80030a0:	4629      	mov	r1, r5
 80030a2:	f7fd fd23 	bl	8000aec <__aeabi_dcmplt>
 80030a6:	2800      	cmp	r0, #0
 80030a8:	f000 80ae 	beq.w	8003208 <_dtoa_r+0x518>
 80030ac:	9b07      	ldr	r3, [sp, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80aa 	beq.w	8003208 <_dtoa_r+0x518>
 80030b4:	9b00      	ldr	r3, [sp, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	dd37      	ble.n	800312a <_dtoa_r+0x43a>
 80030ba:	1e7b      	subs	r3, r7, #1
 80030bc:	9304      	str	r3, [sp, #16]
 80030be:	4620      	mov	r0, r4
 80030c0:	4b7d      	ldr	r3, [pc, #500]	@ (80032b8 <_dtoa_r+0x5c8>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	4629      	mov	r1, r5
 80030c6:	f7fd fa9f 	bl	8000608 <__aeabi_dmul>
 80030ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030ce:	9c00      	ldr	r4, [sp, #0]
 80030d0:	3601      	adds	r6, #1
 80030d2:	4630      	mov	r0, r6
 80030d4:	f7fd fa2e 	bl	8000534 <__aeabi_i2d>
 80030d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80030dc:	f7fd fa94 	bl	8000608 <__aeabi_dmul>
 80030e0:	4b76      	ldr	r3, [pc, #472]	@ (80032bc <_dtoa_r+0x5cc>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	f7fd f8da 	bl	800029c <__adddf3>
 80030e8:	4605      	mov	r5, r0
 80030ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80030ee:	2c00      	cmp	r4, #0
 80030f0:	f040 808d 	bne.w	800320e <_dtoa_r+0x51e>
 80030f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030f8:	4b71      	ldr	r3, [pc, #452]	@ (80032c0 <_dtoa_r+0x5d0>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	f7fd f8cc 	bl	8000298 <__aeabi_dsub>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003108:	462a      	mov	r2, r5
 800310a:	4633      	mov	r3, r6
 800310c:	f7fd fd0c 	bl	8000b28 <__aeabi_dcmpgt>
 8003110:	2800      	cmp	r0, #0
 8003112:	f040 828b 	bne.w	800362c <_dtoa_r+0x93c>
 8003116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800311a:	462a      	mov	r2, r5
 800311c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003120:	f7fd fce4 	bl	8000aec <__aeabi_dcmplt>
 8003124:	2800      	cmp	r0, #0
 8003126:	f040 8128 	bne.w	800337a <_dtoa_r+0x68a>
 800312a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800312e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003132:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003134:	2b00      	cmp	r3, #0
 8003136:	f2c0 815a 	blt.w	80033ee <_dtoa_r+0x6fe>
 800313a:	2f0e      	cmp	r7, #14
 800313c:	f300 8157 	bgt.w	80033ee <_dtoa_r+0x6fe>
 8003140:	4b5a      	ldr	r3, [pc, #360]	@ (80032ac <_dtoa_r+0x5bc>)
 8003142:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003146:	ed93 7b00 	vldr	d7, [r3]
 800314a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800314c:	2b00      	cmp	r3, #0
 800314e:	ed8d 7b00 	vstr	d7, [sp]
 8003152:	da03      	bge.n	800315c <_dtoa_r+0x46c>
 8003154:	9b07      	ldr	r3, [sp, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f340 8101 	ble.w	800335e <_dtoa_r+0x66e>
 800315c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003160:	4656      	mov	r6, sl
 8003162:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f7fd fb77 	bl	800085c <__aeabi_ddiv>
 800316e:	f7fd fcfb 	bl	8000b68 <__aeabi_d2iz>
 8003172:	4680      	mov	r8, r0
 8003174:	f7fd f9de 	bl	8000534 <__aeabi_i2d>
 8003178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800317c:	f7fd fa44 	bl	8000608 <__aeabi_dmul>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4620      	mov	r0, r4
 8003186:	4629      	mov	r1, r5
 8003188:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800318c:	f7fd f884 	bl	8000298 <__aeabi_dsub>
 8003190:	f806 4b01 	strb.w	r4, [r6], #1
 8003194:	9d07      	ldr	r5, [sp, #28]
 8003196:	eba6 040a 	sub.w	r4, r6, sl
 800319a:	42a5      	cmp	r5, r4
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	f040 8117 	bne.w	80033d2 <_dtoa_r+0x6e2>
 80031a4:	f7fd f87a 	bl	800029c <__adddf3>
 80031a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80031ac:	4604      	mov	r4, r0
 80031ae:	460d      	mov	r5, r1
 80031b0:	f7fd fcba 	bl	8000b28 <__aeabi_dcmpgt>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	f040 80f9 	bne.w	80033ac <_dtoa_r+0x6bc>
 80031ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80031be:	4620      	mov	r0, r4
 80031c0:	4629      	mov	r1, r5
 80031c2:	f7fd fc89 	bl	8000ad8 <__aeabi_dcmpeq>
 80031c6:	b118      	cbz	r0, 80031d0 <_dtoa_r+0x4e0>
 80031c8:	f018 0f01 	tst.w	r8, #1
 80031cc:	f040 80ee 	bne.w	80033ac <_dtoa_r+0x6bc>
 80031d0:	4649      	mov	r1, r9
 80031d2:	4658      	mov	r0, fp
 80031d4:	f000 fc90 	bl	8003af8 <_Bfree>
 80031d8:	2300      	movs	r3, #0
 80031da:	7033      	strb	r3, [r6, #0]
 80031dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80031de:	3701      	adds	r7, #1
 80031e0:	601f      	str	r7, [r3, #0]
 80031e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 831d 	beq.w	8003824 <_dtoa_r+0xb34>
 80031ea:	601e      	str	r6, [r3, #0]
 80031ec:	e31a      	b.n	8003824 <_dtoa_r+0xb34>
 80031ee:	07e2      	lsls	r2, r4, #31
 80031f0:	d505      	bpl.n	80031fe <_dtoa_r+0x50e>
 80031f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80031f6:	f7fd fa07 	bl	8000608 <__aeabi_dmul>
 80031fa:	3601      	adds	r6, #1
 80031fc:	2301      	movs	r3, #1
 80031fe:	1064      	asrs	r4, r4, #1
 8003200:	3508      	adds	r5, #8
 8003202:	e73f      	b.n	8003084 <_dtoa_r+0x394>
 8003204:	2602      	movs	r6, #2
 8003206:	e742      	b.n	800308e <_dtoa_r+0x39e>
 8003208:	9c07      	ldr	r4, [sp, #28]
 800320a:	9704      	str	r7, [sp, #16]
 800320c:	e761      	b.n	80030d2 <_dtoa_r+0x3e2>
 800320e:	4b27      	ldr	r3, [pc, #156]	@ (80032ac <_dtoa_r+0x5bc>)
 8003210:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003212:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003216:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800321a:	4454      	add	r4, sl
 800321c:	2900      	cmp	r1, #0
 800321e:	d053      	beq.n	80032c8 <_dtoa_r+0x5d8>
 8003220:	4928      	ldr	r1, [pc, #160]	@ (80032c4 <_dtoa_r+0x5d4>)
 8003222:	2000      	movs	r0, #0
 8003224:	f7fd fb1a 	bl	800085c <__aeabi_ddiv>
 8003228:	4633      	mov	r3, r6
 800322a:	462a      	mov	r2, r5
 800322c:	f7fd f834 	bl	8000298 <__aeabi_dsub>
 8003230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003234:	4656      	mov	r6, sl
 8003236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800323a:	f7fd fc95 	bl	8000b68 <__aeabi_d2iz>
 800323e:	4605      	mov	r5, r0
 8003240:	f7fd f978 	bl	8000534 <__aeabi_i2d>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800324c:	f7fd f824 	bl	8000298 <__aeabi_dsub>
 8003250:	3530      	adds	r5, #48	@ 0x30
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800325a:	f806 5b01 	strb.w	r5, [r6], #1
 800325e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003262:	f7fd fc43 	bl	8000aec <__aeabi_dcmplt>
 8003266:	2800      	cmp	r0, #0
 8003268:	d171      	bne.n	800334e <_dtoa_r+0x65e>
 800326a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800326e:	4911      	ldr	r1, [pc, #68]	@ (80032b4 <_dtoa_r+0x5c4>)
 8003270:	2000      	movs	r0, #0
 8003272:	f7fd f811 	bl	8000298 <__aeabi_dsub>
 8003276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800327a:	f7fd fc37 	bl	8000aec <__aeabi_dcmplt>
 800327e:	2800      	cmp	r0, #0
 8003280:	f040 8095 	bne.w	80033ae <_dtoa_r+0x6be>
 8003284:	42a6      	cmp	r6, r4
 8003286:	f43f af50 	beq.w	800312a <_dtoa_r+0x43a>
 800328a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800328e:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <_dtoa_r+0x5c8>)
 8003290:	2200      	movs	r2, #0
 8003292:	f7fd f9b9 	bl	8000608 <__aeabi_dmul>
 8003296:	4b08      	ldr	r3, [pc, #32]	@ (80032b8 <_dtoa_r+0x5c8>)
 8003298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800329c:	2200      	movs	r2, #0
 800329e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032a2:	f7fd f9b1 	bl	8000608 <__aeabi_dmul>
 80032a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032aa:	e7c4      	b.n	8003236 <_dtoa_r+0x546>
 80032ac:	08004e30 	.word	0x08004e30
 80032b0:	08004e08 	.word	0x08004e08
 80032b4:	3ff00000 	.word	0x3ff00000
 80032b8:	40240000 	.word	0x40240000
 80032bc:	401c0000 	.word	0x401c0000
 80032c0:	40140000 	.word	0x40140000
 80032c4:	3fe00000 	.word	0x3fe00000
 80032c8:	4631      	mov	r1, r6
 80032ca:	4628      	mov	r0, r5
 80032cc:	f7fd f99c 	bl	8000608 <__aeabi_dmul>
 80032d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80032d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80032d6:	4656      	mov	r6, sl
 80032d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032dc:	f7fd fc44 	bl	8000b68 <__aeabi_d2iz>
 80032e0:	4605      	mov	r5, r0
 80032e2:	f7fd f927 	bl	8000534 <__aeabi_i2d>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032ee:	f7fc ffd3 	bl	8000298 <__aeabi_dsub>
 80032f2:	3530      	adds	r5, #48	@ 0x30
 80032f4:	f806 5b01 	strb.w	r5, [r6], #1
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	42a6      	cmp	r6, r4
 80032fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	d124      	bne.n	8003352 <_dtoa_r+0x662>
 8003308:	4bac      	ldr	r3, [pc, #688]	@ (80035bc <_dtoa_r+0x8cc>)
 800330a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800330e:	f7fc ffc5 	bl	800029c <__adddf3>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800331a:	f7fd fc05 	bl	8000b28 <__aeabi_dcmpgt>
 800331e:	2800      	cmp	r0, #0
 8003320:	d145      	bne.n	80033ae <_dtoa_r+0x6be>
 8003322:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003326:	49a5      	ldr	r1, [pc, #660]	@ (80035bc <_dtoa_r+0x8cc>)
 8003328:	2000      	movs	r0, #0
 800332a:	f7fc ffb5 	bl	8000298 <__aeabi_dsub>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003336:	f7fd fbd9 	bl	8000aec <__aeabi_dcmplt>
 800333a:	2800      	cmp	r0, #0
 800333c:	f43f aef5 	beq.w	800312a <_dtoa_r+0x43a>
 8003340:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8003342:	1e73      	subs	r3, r6, #1
 8003344:	9315      	str	r3, [sp, #84]	@ 0x54
 8003346:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800334a:	2b30      	cmp	r3, #48	@ 0x30
 800334c:	d0f8      	beq.n	8003340 <_dtoa_r+0x650>
 800334e:	9f04      	ldr	r7, [sp, #16]
 8003350:	e73e      	b.n	80031d0 <_dtoa_r+0x4e0>
 8003352:	4b9b      	ldr	r3, [pc, #620]	@ (80035c0 <_dtoa_r+0x8d0>)
 8003354:	f7fd f958 	bl	8000608 <__aeabi_dmul>
 8003358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800335c:	e7bc      	b.n	80032d8 <_dtoa_r+0x5e8>
 800335e:	d10c      	bne.n	800337a <_dtoa_r+0x68a>
 8003360:	4b98      	ldr	r3, [pc, #608]	@ (80035c4 <_dtoa_r+0x8d4>)
 8003362:	2200      	movs	r2, #0
 8003364:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003368:	f7fd f94e 	bl	8000608 <__aeabi_dmul>
 800336c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003370:	f7fd fbd0 	bl	8000b14 <__aeabi_dcmpge>
 8003374:	2800      	cmp	r0, #0
 8003376:	f000 8157 	beq.w	8003628 <_dtoa_r+0x938>
 800337a:	2400      	movs	r4, #0
 800337c:	4625      	mov	r5, r4
 800337e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003380:	43db      	mvns	r3, r3
 8003382:	9304      	str	r3, [sp, #16]
 8003384:	4656      	mov	r6, sl
 8003386:	2700      	movs	r7, #0
 8003388:	4621      	mov	r1, r4
 800338a:	4658      	mov	r0, fp
 800338c:	f000 fbb4 	bl	8003af8 <_Bfree>
 8003390:	2d00      	cmp	r5, #0
 8003392:	d0dc      	beq.n	800334e <_dtoa_r+0x65e>
 8003394:	b12f      	cbz	r7, 80033a2 <_dtoa_r+0x6b2>
 8003396:	42af      	cmp	r7, r5
 8003398:	d003      	beq.n	80033a2 <_dtoa_r+0x6b2>
 800339a:	4639      	mov	r1, r7
 800339c:	4658      	mov	r0, fp
 800339e:	f000 fbab 	bl	8003af8 <_Bfree>
 80033a2:	4629      	mov	r1, r5
 80033a4:	4658      	mov	r0, fp
 80033a6:	f000 fba7 	bl	8003af8 <_Bfree>
 80033aa:	e7d0      	b.n	800334e <_dtoa_r+0x65e>
 80033ac:	9704      	str	r7, [sp, #16]
 80033ae:	4633      	mov	r3, r6
 80033b0:	461e      	mov	r6, r3
 80033b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80033b6:	2a39      	cmp	r2, #57	@ 0x39
 80033b8:	d107      	bne.n	80033ca <_dtoa_r+0x6da>
 80033ba:	459a      	cmp	sl, r3
 80033bc:	d1f8      	bne.n	80033b0 <_dtoa_r+0x6c0>
 80033be:	9a04      	ldr	r2, [sp, #16]
 80033c0:	3201      	adds	r2, #1
 80033c2:	9204      	str	r2, [sp, #16]
 80033c4:	2230      	movs	r2, #48	@ 0x30
 80033c6:	f88a 2000 	strb.w	r2, [sl]
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	3201      	adds	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e7bd      	b.n	800334e <_dtoa_r+0x65e>
 80033d2:	4b7b      	ldr	r3, [pc, #492]	@ (80035c0 <_dtoa_r+0x8d0>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	f7fd f917 	bl	8000608 <__aeabi_dmul>
 80033da:	2200      	movs	r2, #0
 80033dc:	2300      	movs	r3, #0
 80033de:	4604      	mov	r4, r0
 80033e0:	460d      	mov	r5, r1
 80033e2:	f7fd fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 80033e6:	2800      	cmp	r0, #0
 80033e8:	f43f aebb 	beq.w	8003162 <_dtoa_r+0x472>
 80033ec:	e6f0      	b.n	80031d0 <_dtoa_r+0x4e0>
 80033ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80033f0:	2a00      	cmp	r2, #0
 80033f2:	f000 80db 	beq.w	80035ac <_dtoa_r+0x8bc>
 80033f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033f8:	2a01      	cmp	r2, #1
 80033fa:	f300 80bf 	bgt.w	800357c <_dtoa_r+0x88c>
 80033fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003400:	2a00      	cmp	r2, #0
 8003402:	f000 80b7 	beq.w	8003574 <_dtoa_r+0x884>
 8003406:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800340a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800340c:	4646      	mov	r6, r8
 800340e:	9a08      	ldr	r2, [sp, #32]
 8003410:	2101      	movs	r1, #1
 8003412:	441a      	add	r2, r3
 8003414:	4658      	mov	r0, fp
 8003416:	4498      	add	r8, r3
 8003418:	9208      	str	r2, [sp, #32]
 800341a:	f000 fc21 	bl	8003c60 <__i2b>
 800341e:	4605      	mov	r5, r0
 8003420:	b15e      	cbz	r6, 800343a <_dtoa_r+0x74a>
 8003422:	9b08      	ldr	r3, [sp, #32]
 8003424:	2b00      	cmp	r3, #0
 8003426:	dd08      	ble.n	800343a <_dtoa_r+0x74a>
 8003428:	42b3      	cmp	r3, r6
 800342a:	9a08      	ldr	r2, [sp, #32]
 800342c:	bfa8      	it	ge
 800342e:	4633      	movge	r3, r6
 8003430:	eba8 0803 	sub.w	r8, r8, r3
 8003434:	1af6      	subs	r6, r6, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	9308      	str	r3, [sp, #32]
 800343a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800343c:	b1f3      	cbz	r3, 800347c <_dtoa_r+0x78c>
 800343e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80b7 	beq.w	80035b4 <_dtoa_r+0x8c4>
 8003446:	b18c      	cbz	r4, 800346c <_dtoa_r+0x77c>
 8003448:	4629      	mov	r1, r5
 800344a:	4622      	mov	r2, r4
 800344c:	4658      	mov	r0, fp
 800344e:	f000 fcc7 	bl	8003de0 <__pow5mult>
 8003452:	464a      	mov	r2, r9
 8003454:	4601      	mov	r1, r0
 8003456:	4605      	mov	r5, r0
 8003458:	4658      	mov	r0, fp
 800345a:	f000 fc17 	bl	8003c8c <__multiply>
 800345e:	4649      	mov	r1, r9
 8003460:	9004      	str	r0, [sp, #16]
 8003462:	4658      	mov	r0, fp
 8003464:	f000 fb48 	bl	8003af8 <_Bfree>
 8003468:	9b04      	ldr	r3, [sp, #16]
 800346a:	4699      	mov	r9, r3
 800346c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800346e:	1b1a      	subs	r2, r3, r4
 8003470:	d004      	beq.n	800347c <_dtoa_r+0x78c>
 8003472:	4649      	mov	r1, r9
 8003474:	4658      	mov	r0, fp
 8003476:	f000 fcb3 	bl	8003de0 <__pow5mult>
 800347a:	4681      	mov	r9, r0
 800347c:	2101      	movs	r1, #1
 800347e:	4658      	mov	r0, fp
 8003480:	f000 fbee 	bl	8003c60 <__i2b>
 8003484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003486:	4604      	mov	r4, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 81cf 	beq.w	800382c <_dtoa_r+0xb3c>
 800348e:	461a      	mov	r2, r3
 8003490:	4601      	mov	r1, r0
 8003492:	4658      	mov	r0, fp
 8003494:	f000 fca4 	bl	8003de0 <__pow5mult>
 8003498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800349a:	2b01      	cmp	r3, #1
 800349c:	4604      	mov	r4, r0
 800349e:	f300 8095 	bgt.w	80035cc <_dtoa_r+0x8dc>
 80034a2:	9b02      	ldr	r3, [sp, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f040 8087 	bne.w	80035b8 <_dtoa_r+0x8c8>
 80034aa:	9b03      	ldr	r3, [sp, #12]
 80034ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 8089 	bne.w	80035c8 <_dtoa_r+0x8d8>
 80034b6:	9b03      	ldr	r3, [sp, #12]
 80034b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034bc:	0d1b      	lsrs	r3, r3, #20
 80034be:	051b      	lsls	r3, r3, #20
 80034c0:	b12b      	cbz	r3, 80034ce <_dtoa_r+0x7de>
 80034c2:	9b08      	ldr	r3, [sp, #32]
 80034c4:	3301      	adds	r3, #1
 80034c6:	9308      	str	r3, [sp, #32]
 80034c8:	f108 0801 	add.w	r8, r8, #1
 80034cc:	2301      	movs	r3, #1
 80034ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80034d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 81b0 	beq.w	8003838 <_dtoa_r+0xb48>
 80034d8:	6923      	ldr	r3, [r4, #16]
 80034da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80034de:	6918      	ldr	r0, [r3, #16]
 80034e0:	f000 fb72 	bl	8003bc8 <__hi0bits>
 80034e4:	f1c0 0020 	rsb	r0, r0, #32
 80034e8:	9b08      	ldr	r3, [sp, #32]
 80034ea:	4418      	add	r0, r3
 80034ec:	f010 001f 	ands.w	r0, r0, #31
 80034f0:	d077      	beq.n	80035e2 <_dtoa_r+0x8f2>
 80034f2:	f1c0 0320 	rsb	r3, r0, #32
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	dd6b      	ble.n	80035d2 <_dtoa_r+0x8e2>
 80034fa:	9b08      	ldr	r3, [sp, #32]
 80034fc:	f1c0 001c 	rsb	r0, r0, #28
 8003500:	4403      	add	r3, r0
 8003502:	4480      	add	r8, r0
 8003504:	4406      	add	r6, r0
 8003506:	9308      	str	r3, [sp, #32]
 8003508:	f1b8 0f00 	cmp.w	r8, #0
 800350c:	dd05      	ble.n	800351a <_dtoa_r+0x82a>
 800350e:	4649      	mov	r1, r9
 8003510:	4642      	mov	r2, r8
 8003512:	4658      	mov	r0, fp
 8003514:	f000 fcbe 	bl	8003e94 <__lshift>
 8003518:	4681      	mov	r9, r0
 800351a:	9b08      	ldr	r3, [sp, #32]
 800351c:	2b00      	cmp	r3, #0
 800351e:	dd05      	ble.n	800352c <_dtoa_r+0x83c>
 8003520:	4621      	mov	r1, r4
 8003522:	461a      	mov	r2, r3
 8003524:	4658      	mov	r0, fp
 8003526:	f000 fcb5 	bl	8003e94 <__lshift>
 800352a:	4604      	mov	r4, r0
 800352c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d059      	beq.n	80035e6 <_dtoa_r+0x8f6>
 8003532:	4621      	mov	r1, r4
 8003534:	4648      	mov	r0, r9
 8003536:	f000 fd19 	bl	8003f6c <__mcmp>
 800353a:	2800      	cmp	r0, #0
 800353c:	da53      	bge.n	80035e6 <_dtoa_r+0x8f6>
 800353e:	1e7b      	subs	r3, r7, #1
 8003540:	9304      	str	r3, [sp, #16]
 8003542:	4649      	mov	r1, r9
 8003544:	2300      	movs	r3, #0
 8003546:	220a      	movs	r2, #10
 8003548:	4658      	mov	r0, fp
 800354a:	f000 faf7 	bl	8003b3c <__multadd>
 800354e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003550:	4681      	mov	r9, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8172 	beq.w	800383c <_dtoa_r+0xb4c>
 8003558:	2300      	movs	r3, #0
 800355a:	4629      	mov	r1, r5
 800355c:	220a      	movs	r2, #10
 800355e:	4658      	mov	r0, fp
 8003560:	f000 faec 	bl	8003b3c <__multadd>
 8003564:	9b00      	ldr	r3, [sp, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	4605      	mov	r5, r0
 800356a:	dc67      	bgt.n	800363c <_dtoa_r+0x94c>
 800356c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800356e:	2b02      	cmp	r3, #2
 8003570:	dc41      	bgt.n	80035f6 <_dtoa_r+0x906>
 8003572:	e063      	b.n	800363c <_dtoa_r+0x94c>
 8003574:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003576:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800357a:	e746      	b.n	800340a <_dtoa_r+0x71a>
 800357c:	9b07      	ldr	r3, [sp, #28]
 800357e:	1e5c      	subs	r4, r3, #1
 8003580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003582:	42a3      	cmp	r3, r4
 8003584:	bfbf      	itttt	lt
 8003586:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8003588:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800358a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800358c:	1ae3      	sublt	r3, r4, r3
 800358e:	bfb4      	ite	lt
 8003590:	18d2      	addlt	r2, r2, r3
 8003592:	1b1c      	subge	r4, r3, r4
 8003594:	9b07      	ldr	r3, [sp, #28]
 8003596:	bfbc      	itt	lt
 8003598:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800359a:	2400      	movlt	r4, #0
 800359c:	2b00      	cmp	r3, #0
 800359e:	bfb5      	itete	lt
 80035a0:	eba8 0603 	sublt.w	r6, r8, r3
 80035a4:	9b07      	ldrge	r3, [sp, #28]
 80035a6:	2300      	movlt	r3, #0
 80035a8:	4646      	movge	r6, r8
 80035aa:	e730      	b.n	800340e <_dtoa_r+0x71e>
 80035ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80035ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80035b0:	4646      	mov	r6, r8
 80035b2:	e735      	b.n	8003420 <_dtoa_r+0x730>
 80035b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80035b6:	e75c      	b.n	8003472 <_dtoa_r+0x782>
 80035b8:	2300      	movs	r3, #0
 80035ba:	e788      	b.n	80034ce <_dtoa_r+0x7de>
 80035bc:	3fe00000 	.word	0x3fe00000
 80035c0:	40240000 	.word	0x40240000
 80035c4:	40140000 	.word	0x40140000
 80035c8:	9b02      	ldr	r3, [sp, #8]
 80035ca:	e780      	b.n	80034ce <_dtoa_r+0x7de>
 80035cc:	2300      	movs	r3, #0
 80035ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80035d0:	e782      	b.n	80034d8 <_dtoa_r+0x7e8>
 80035d2:	d099      	beq.n	8003508 <_dtoa_r+0x818>
 80035d4:	9a08      	ldr	r2, [sp, #32]
 80035d6:	331c      	adds	r3, #28
 80035d8:	441a      	add	r2, r3
 80035da:	4498      	add	r8, r3
 80035dc:	441e      	add	r6, r3
 80035de:	9208      	str	r2, [sp, #32]
 80035e0:	e792      	b.n	8003508 <_dtoa_r+0x818>
 80035e2:	4603      	mov	r3, r0
 80035e4:	e7f6      	b.n	80035d4 <_dtoa_r+0x8e4>
 80035e6:	9b07      	ldr	r3, [sp, #28]
 80035e8:	9704      	str	r7, [sp, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	dc20      	bgt.n	8003630 <_dtoa_r+0x940>
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	dd1e      	ble.n	8003634 <_dtoa_r+0x944>
 80035f6:	9b00      	ldr	r3, [sp, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f47f aec0 	bne.w	800337e <_dtoa_r+0x68e>
 80035fe:	4621      	mov	r1, r4
 8003600:	2205      	movs	r2, #5
 8003602:	4658      	mov	r0, fp
 8003604:	f000 fa9a 	bl	8003b3c <__multadd>
 8003608:	4601      	mov	r1, r0
 800360a:	4604      	mov	r4, r0
 800360c:	4648      	mov	r0, r9
 800360e:	f000 fcad 	bl	8003f6c <__mcmp>
 8003612:	2800      	cmp	r0, #0
 8003614:	f77f aeb3 	ble.w	800337e <_dtoa_r+0x68e>
 8003618:	4656      	mov	r6, sl
 800361a:	2331      	movs	r3, #49	@ 0x31
 800361c:	f806 3b01 	strb.w	r3, [r6], #1
 8003620:	9b04      	ldr	r3, [sp, #16]
 8003622:	3301      	adds	r3, #1
 8003624:	9304      	str	r3, [sp, #16]
 8003626:	e6ae      	b.n	8003386 <_dtoa_r+0x696>
 8003628:	9c07      	ldr	r4, [sp, #28]
 800362a:	9704      	str	r7, [sp, #16]
 800362c:	4625      	mov	r5, r4
 800362e:	e7f3      	b.n	8003618 <_dtoa_r+0x928>
 8003630:	9b07      	ldr	r3, [sp, #28]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8104 	beq.w	8003844 <_dtoa_r+0xb54>
 800363c:	2e00      	cmp	r6, #0
 800363e:	dd05      	ble.n	800364c <_dtoa_r+0x95c>
 8003640:	4629      	mov	r1, r5
 8003642:	4632      	mov	r2, r6
 8003644:	4658      	mov	r0, fp
 8003646:	f000 fc25 	bl	8003e94 <__lshift>
 800364a:	4605      	mov	r5, r0
 800364c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800364e:	2b00      	cmp	r3, #0
 8003650:	d05a      	beq.n	8003708 <_dtoa_r+0xa18>
 8003652:	6869      	ldr	r1, [r5, #4]
 8003654:	4658      	mov	r0, fp
 8003656:	f000 fa0f 	bl	8003a78 <_Balloc>
 800365a:	4606      	mov	r6, r0
 800365c:	b928      	cbnz	r0, 800366a <_dtoa_r+0x97a>
 800365e:	4b84      	ldr	r3, [pc, #528]	@ (8003870 <_dtoa_r+0xb80>)
 8003660:	4602      	mov	r2, r0
 8003662:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003666:	f7ff bb5a 	b.w	8002d1e <_dtoa_r+0x2e>
 800366a:	692a      	ldr	r2, [r5, #16]
 800366c:	3202      	adds	r2, #2
 800366e:	0092      	lsls	r2, r2, #2
 8003670:	f105 010c 	add.w	r1, r5, #12
 8003674:	300c      	adds	r0, #12
 8003676:	f7ff faa2 	bl	8002bbe <memcpy>
 800367a:	2201      	movs	r2, #1
 800367c:	4631      	mov	r1, r6
 800367e:	4658      	mov	r0, fp
 8003680:	f000 fc08 	bl	8003e94 <__lshift>
 8003684:	f10a 0301 	add.w	r3, sl, #1
 8003688:	9307      	str	r3, [sp, #28]
 800368a:	9b00      	ldr	r3, [sp, #0]
 800368c:	4453      	add	r3, sl
 800368e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003690:	9b02      	ldr	r3, [sp, #8]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	462f      	mov	r7, r5
 8003698:	930a      	str	r3, [sp, #40]	@ 0x28
 800369a:	4605      	mov	r5, r0
 800369c:	9b07      	ldr	r3, [sp, #28]
 800369e:	4621      	mov	r1, r4
 80036a0:	3b01      	subs	r3, #1
 80036a2:	4648      	mov	r0, r9
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	f7ff fa98 	bl	8002bda <quorem>
 80036aa:	4639      	mov	r1, r7
 80036ac:	9002      	str	r0, [sp, #8]
 80036ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80036b2:	4648      	mov	r0, r9
 80036b4:	f000 fc5a 	bl	8003f6c <__mcmp>
 80036b8:	462a      	mov	r2, r5
 80036ba:	9008      	str	r0, [sp, #32]
 80036bc:	4621      	mov	r1, r4
 80036be:	4658      	mov	r0, fp
 80036c0:	f000 fc70 	bl	8003fa4 <__mdiff>
 80036c4:	68c2      	ldr	r2, [r0, #12]
 80036c6:	4606      	mov	r6, r0
 80036c8:	bb02      	cbnz	r2, 800370c <_dtoa_r+0xa1c>
 80036ca:	4601      	mov	r1, r0
 80036cc:	4648      	mov	r0, r9
 80036ce:	f000 fc4d 	bl	8003f6c <__mcmp>
 80036d2:	4602      	mov	r2, r0
 80036d4:	4631      	mov	r1, r6
 80036d6:	4658      	mov	r0, fp
 80036d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80036da:	f000 fa0d 	bl	8003af8 <_Bfree>
 80036de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80036e2:	9e07      	ldr	r6, [sp, #28]
 80036e4:	ea43 0102 	orr.w	r1, r3, r2
 80036e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036ea:	4319      	orrs	r1, r3
 80036ec:	d110      	bne.n	8003710 <_dtoa_r+0xa20>
 80036ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80036f2:	d029      	beq.n	8003748 <_dtoa_r+0xa58>
 80036f4:	9b08      	ldr	r3, [sp, #32]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	dd02      	ble.n	8003700 <_dtoa_r+0xa10>
 80036fa:	9b02      	ldr	r3, [sp, #8]
 80036fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003700:	9b00      	ldr	r3, [sp, #0]
 8003702:	f883 8000 	strb.w	r8, [r3]
 8003706:	e63f      	b.n	8003388 <_dtoa_r+0x698>
 8003708:	4628      	mov	r0, r5
 800370a:	e7bb      	b.n	8003684 <_dtoa_r+0x994>
 800370c:	2201      	movs	r2, #1
 800370e:	e7e1      	b.n	80036d4 <_dtoa_r+0x9e4>
 8003710:	9b08      	ldr	r3, [sp, #32]
 8003712:	2b00      	cmp	r3, #0
 8003714:	db04      	blt.n	8003720 <_dtoa_r+0xa30>
 8003716:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003718:	430b      	orrs	r3, r1
 800371a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800371c:	430b      	orrs	r3, r1
 800371e:	d120      	bne.n	8003762 <_dtoa_r+0xa72>
 8003720:	2a00      	cmp	r2, #0
 8003722:	dded      	ble.n	8003700 <_dtoa_r+0xa10>
 8003724:	4649      	mov	r1, r9
 8003726:	2201      	movs	r2, #1
 8003728:	4658      	mov	r0, fp
 800372a:	f000 fbb3 	bl	8003e94 <__lshift>
 800372e:	4621      	mov	r1, r4
 8003730:	4681      	mov	r9, r0
 8003732:	f000 fc1b 	bl	8003f6c <__mcmp>
 8003736:	2800      	cmp	r0, #0
 8003738:	dc03      	bgt.n	8003742 <_dtoa_r+0xa52>
 800373a:	d1e1      	bne.n	8003700 <_dtoa_r+0xa10>
 800373c:	f018 0f01 	tst.w	r8, #1
 8003740:	d0de      	beq.n	8003700 <_dtoa_r+0xa10>
 8003742:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003746:	d1d8      	bne.n	80036fa <_dtoa_r+0xa0a>
 8003748:	9a00      	ldr	r2, [sp, #0]
 800374a:	2339      	movs	r3, #57	@ 0x39
 800374c:	7013      	strb	r3, [r2, #0]
 800374e:	4633      	mov	r3, r6
 8003750:	461e      	mov	r6, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003758:	2a39      	cmp	r2, #57	@ 0x39
 800375a:	d052      	beq.n	8003802 <_dtoa_r+0xb12>
 800375c:	3201      	adds	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e612      	b.n	8003388 <_dtoa_r+0x698>
 8003762:	2a00      	cmp	r2, #0
 8003764:	dd07      	ble.n	8003776 <_dtoa_r+0xa86>
 8003766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800376a:	d0ed      	beq.n	8003748 <_dtoa_r+0xa58>
 800376c:	9a00      	ldr	r2, [sp, #0]
 800376e:	f108 0301 	add.w	r3, r8, #1
 8003772:	7013      	strb	r3, [r2, #0]
 8003774:	e608      	b.n	8003388 <_dtoa_r+0x698>
 8003776:	9b07      	ldr	r3, [sp, #28]
 8003778:	9a07      	ldr	r2, [sp, #28]
 800377a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800377e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003780:	4293      	cmp	r3, r2
 8003782:	d028      	beq.n	80037d6 <_dtoa_r+0xae6>
 8003784:	4649      	mov	r1, r9
 8003786:	2300      	movs	r3, #0
 8003788:	220a      	movs	r2, #10
 800378a:	4658      	mov	r0, fp
 800378c:	f000 f9d6 	bl	8003b3c <__multadd>
 8003790:	42af      	cmp	r7, r5
 8003792:	4681      	mov	r9, r0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	f04f 020a 	mov.w	r2, #10
 800379c:	4639      	mov	r1, r7
 800379e:	4658      	mov	r0, fp
 80037a0:	d107      	bne.n	80037b2 <_dtoa_r+0xac2>
 80037a2:	f000 f9cb 	bl	8003b3c <__multadd>
 80037a6:	4607      	mov	r7, r0
 80037a8:	4605      	mov	r5, r0
 80037aa:	9b07      	ldr	r3, [sp, #28]
 80037ac:	3301      	adds	r3, #1
 80037ae:	9307      	str	r3, [sp, #28]
 80037b0:	e774      	b.n	800369c <_dtoa_r+0x9ac>
 80037b2:	f000 f9c3 	bl	8003b3c <__multadd>
 80037b6:	4629      	mov	r1, r5
 80037b8:	4607      	mov	r7, r0
 80037ba:	2300      	movs	r3, #0
 80037bc:	220a      	movs	r2, #10
 80037be:	4658      	mov	r0, fp
 80037c0:	f000 f9bc 	bl	8003b3c <__multadd>
 80037c4:	4605      	mov	r5, r0
 80037c6:	e7f0      	b.n	80037aa <_dtoa_r+0xaba>
 80037c8:	9b00      	ldr	r3, [sp, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bfcc      	ite	gt
 80037ce:	461e      	movgt	r6, r3
 80037d0:	2601      	movle	r6, #1
 80037d2:	4456      	add	r6, sl
 80037d4:	2700      	movs	r7, #0
 80037d6:	4649      	mov	r1, r9
 80037d8:	2201      	movs	r2, #1
 80037da:	4658      	mov	r0, fp
 80037dc:	f000 fb5a 	bl	8003e94 <__lshift>
 80037e0:	4621      	mov	r1, r4
 80037e2:	4681      	mov	r9, r0
 80037e4:	f000 fbc2 	bl	8003f6c <__mcmp>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	dcb0      	bgt.n	800374e <_dtoa_r+0xa5e>
 80037ec:	d102      	bne.n	80037f4 <_dtoa_r+0xb04>
 80037ee:	f018 0f01 	tst.w	r8, #1
 80037f2:	d1ac      	bne.n	800374e <_dtoa_r+0xa5e>
 80037f4:	4633      	mov	r3, r6
 80037f6:	461e      	mov	r6, r3
 80037f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80037fc:	2a30      	cmp	r2, #48	@ 0x30
 80037fe:	d0fa      	beq.n	80037f6 <_dtoa_r+0xb06>
 8003800:	e5c2      	b.n	8003388 <_dtoa_r+0x698>
 8003802:	459a      	cmp	sl, r3
 8003804:	d1a4      	bne.n	8003750 <_dtoa_r+0xa60>
 8003806:	9b04      	ldr	r3, [sp, #16]
 8003808:	3301      	adds	r3, #1
 800380a:	9304      	str	r3, [sp, #16]
 800380c:	2331      	movs	r3, #49	@ 0x31
 800380e:	f88a 3000 	strb.w	r3, [sl]
 8003812:	e5b9      	b.n	8003388 <_dtoa_r+0x698>
 8003814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003816:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8003874 <_dtoa_r+0xb84>
 800381a:	b11b      	cbz	r3, 8003824 <_dtoa_r+0xb34>
 800381c:	f10a 0308 	add.w	r3, sl, #8
 8003820:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	4650      	mov	r0, sl
 8003826:	b019      	add	sp, #100	@ 0x64
 8003828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800382c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800382e:	2b01      	cmp	r3, #1
 8003830:	f77f ae37 	ble.w	80034a2 <_dtoa_r+0x7b2>
 8003834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003836:	930a      	str	r3, [sp, #40]	@ 0x28
 8003838:	2001      	movs	r0, #1
 800383a:	e655      	b.n	80034e8 <_dtoa_r+0x7f8>
 800383c:	9b00      	ldr	r3, [sp, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f77f aed6 	ble.w	80035f0 <_dtoa_r+0x900>
 8003844:	4656      	mov	r6, sl
 8003846:	4621      	mov	r1, r4
 8003848:	4648      	mov	r0, r9
 800384a:	f7ff f9c6 	bl	8002bda <quorem>
 800384e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003852:	f806 8b01 	strb.w	r8, [r6], #1
 8003856:	9b00      	ldr	r3, [sp, #0]
 8003858:	eba6 020a 	sub.w	r2, r6, sl
 800385c:	4293      	cmp	r3, r2
 800385e:	ddb3      	ble.n	80037c8 <_dtoa_r+0xad8>
 8003860:	4649      	mov	r1, r9
 8003862:	2300      	movs	r3, #0
 8003864:	220a      	movs	r2, #10
 8003866:	4658      	mov	r0, fp
 8003868:	f000 f968 	bl	8003b3c <__multadd>
 800386c:	4681      	mov	r9, r0
 800386e:	e7ea      	b.n	8003846 <_dtoa_r+0xb56>
 8003870:	08004d8e 	.word	0x08004d8e
 8003874:	08004d12 	.word	0x08004d12

08003878 <_free_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4605      	mov	r5, r0
 800387c:	2900      	cmp	r1, #0
 800387e:	d041      	beq.n	8003904 <_free_r+0x8c>
 8003880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003884:	1f0c      	subs	r4, r1, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfb8      	it	lt
 800388a:	18e4      	addlt	r4, r4, r3
 800388c:	f000 f8e8 	bl	8003a60 <__malloc_lock>
 8003890:	4a1d      	ldr	r2, [pc, #116]	@ (8003908 <_free_r+0x90>)
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	b933      	cbnz	r3, 80038a4 <_free_r+0x2c>
 8003896:	6063      	str	r3, [r4, #4]
 8003898:	6014      	str	r4, [r2, #0]
 800389a:	4628      	mov	r0, r5
 800389c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a0:	f000 b8e4 	b.w	8003a6c <__malloc_unlock>
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	d908      	bls.n	80038ba <_free_r+0x42>
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	1821      	adds	r1, r4, r0
 80038ac:	428b      	cmp	r3, r1
 80038ae:	bf01      	itttt	eq
 80038b0:	6819      	ldreq	r1, [r3, #0]
 80038b2:	685b      	ldreq	r3, [r3, #4]
 80038b4:	1809      	addeq	r1, r1, r0
 80038b6:	6021      	streq	r1, [r4, #0]
 80038b8:	e7ed      	b.n	8003896 <_free_r+0x1e>
 80038ba:	461a      	mov	r2, r3
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	b10b      	cbz	r3, 80038c4 <_free_r+0x4c>
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d9fa      	bls.n	80038ba <_free_r+0x42>
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	1850      	adds	r0, r2, r1
 80038c8:	42a0      	cmp	r0, r4
 80038ca:	d10b      	bne.n	80038e4 <_free_r+0x6c>
 80038cc:	6820      	ldr	r0, [r4, #0]
 80038ce:	4401      	add	r1, r0
 80038d0:	1850      	adds	r0, r2, r1
 80038d2:	4283      	cmp	r3, r0
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	d1e0      	bne.n	800389a <_free_r+0x22>
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	6053      	str	r3, [r2, #4]
 80038de:	4408      	add	r0, r1
 80038e0:	6010      	str	r0, [r2, #0]
 80038e2:	e7da      	b.n	800389a <_free_r+0x22>
 80038e4:	d902      	bls.n	80038ec <_free_r+0x74>
 80038e6:	230c      	movs	r3, #12
 80038e8:	602b      	str	r3, [r5, #0]
 80038ea:	e7d6      	b.n	800389a <_free_r+0x22>
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	1821      	adds	r1, r4, r0
 80038f0:	428b      	cmp	r3, r1
 80038f2:	bf04      	itt	eq
 80038f4:	6819      	ldreq	r1, [r3, #0]
 80038f6:	685b      	ldreq	r3, [r3, #4]
 80038f8:	6063      	str	r3, [r4, #4]
 80038fa:	bf04      	itt	eq
 80038fc:	1809      	addeq	r1, r1, r0
 80038fe:	6021      	streq	r1, [r4, #0]
 8003900:	6054      	str	r4, [r2, #4]
 8003902:	e7ca      	b.n	800389a <_free_r+0x22>
 8003904:	bd38      	pop	{r3, r4, r5, pc}
 8003906:	bf00      	nop
 8003908:	200004b0 	.word	0x200004b0

0800390c <malloc>:
 800390c:	4b02      	ldr	r3, [pc, #8]	@ (8003918 <malloc+0xc>)
 800390e:	4601      	mov	r1, r0
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	f000 b825 	b.w	8003960 <_malloc_r>
 8003916:	bf00      	nop
 8003918:	2000000c 	.word	0x2000000c

0800391c <sbrk_aligned>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	4e0f      	ldr	r6, [pc, #60]	@ (800395c <sbrk_aligned+0x40>)
 8003920:	460c      	mov	r4, r1
 8003922:	6831      	ldr	r1, [r6, #0]
 8003924:	4605      	mov	r5, r0
 8003926:	b911      	cbnz	r1, 800392e <sbrk_aligned+0x12>
 8003928:	f000 fe46 	bl	80045b8 <_sbrk_r>
 800392c:	6030      	str	r0, [r6, #0]
 800392e:	4621      	mov	r1, r4
 8003930:	4628      	mov	r0, r5
 8003932:	f000 fe41 	bl	80045b8 <_sbrk_r>
 8003936:	1c43      	adds	r3, r0, #1
 8003938:	d103      	bne.n	8003942 <sbrk_aligned+0x26>
 800393a:	f04f 34ff 	mov.w	r4, #4294967295
 800393e:	4620      	mov	r0, r4
 8003940:	bd70      	pop	{r4, r5, r6, pc}
 8003942:	1cc4      	adds	r4, r0, #3
 8003944:	f024 0403 	bic.w	r4, r4, #3
 8003948:	42a0      	cmp	r0, r4
 800394a:	d0f8      	beq.n	800393e <sbrk_aligned+0x22>
 800394c:	1a21      	subs	r1, r4, r0
 800394e:	4628      	mov	r0, r5
 8003950:	f000 fe32 	bl	80045b8 <_sbrk_r>
 8003954:	3001      	adds	r0, #1
 8003956:	d1f2      	bne.n	800393e <sbrk_aligned+0x22>
 8003958:	e7ef      	b.n	800393a <sbrk_aligned+0x1e>
 800395a:	bf00      	nop
 800395c:	200004ac 	.word	0x200004ac

08003960 <_malloc_r>:
 8003960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003964:	1ccd      	adds	r5, r1, #3
 8003966:	f025 0503 	bic.w	r5, r5, #3
 800396a:	3508      	adds	r5, #8
 800396c:	2d0c      	cmp	r5, #12
 800396e:	bf38      	it	cc
 8003970:	250c      	movcc	r5, #12
 8003972:	2d00      	cmp	r5, #0
 8003974:	4606      	mov	r6, r0
 8003976:	db01      	blt.n	800397c <_malloc_r+0x1c>
 8003978:	42a9      	cmp	r1, r5
 800397a:	d904      	bls.n	8003986 <_malloc_r+0x26>
 800397c:	230c      	movs	r3, #12
 800397e:	6033      	str	r3, [r6, #0]
 8003980:	2000      	movs	r0, #0
 8003982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a5c <_malloc_r+0xfc>
 800398a:	f000 f869 	bl	8003a60 <__malloc_lock>
 800398e:	f8d8 3000 	ldr.w	r3, [r8]
 8003992:	461c      	mov	r4, r3
 8003994:	bb44      	cbnz	r4, 80039e8 <_malloc_r+0x88>
 8003996:	4629      	mov	r1, r5
 8003998:	4630      	mov	r0, r6
 800399a:	f7ff ffbf 	bl	800391c <sbrk_aligned>
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	4604      	mov	r4, r0
 80039a2:	d158      	bne.n	8003a56 <_malloc_r+0xf6>
 80039a4:	f8d8 4000 	ldr.w	r4, [r8]
 80039a8:	4627      	mov	r7, r4
 80039aa:	2f00      	cmp	r7, #0
 80039ac:	d143      	bne.n	8003a36 <_malloc_r+0xd6>
 80039ae:	2c00      	cmp	r4, #0
 80039b0:	d04b      	beq.n	8003a4a <_malloc_r+0xea>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	4639      	mov	r1, r7
 80039b6:	4630      	mov	r0, r6
 80039b8:	eb04 0903 	add.w	r9, r4, r3
 80039bc:	f000 fdfc 	bl	80045b8 <_sbrk_r>
 80039c0:	4581      	cmp	r9, r0
 80039c2:	d142      	bne.n	8003a4a <_malloc_r+0xea>
 80039c4:	6821      	ldr	r1, [r4, #0]
 80039c6:	1a6d      	subs	r5, r5, r1
 80039c8:	4629      	mov	r1, r5
 80039ca:	4630      	mov	r0, r6
 80039cc:	f7ff ffa6 	bl	800391c <sbrk_aligned>
 80039d0:	3001      	adds	r0, #1
 80039d2:	d03a      	beq.n	8003a4a <_malloc_r+0xea>
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	442b      	add	r3, r5
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	f8d8 3000 	ldr.w	r3, [r8]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	bb62      	cbnz	r2, 8003a3c <_malloc_r+0xdc>
 80039e2:	f8c8 7000 	str.w	r7, [r8]
 80039e6:	e00f      	b.n	8003a08 <_malloc_r+0xa8>
 80039e8:	6822      	ldr	r2, [r4, #0]
 80039ea:	1b52      	subs	r2, r2, r5
 80039ec:	d420      	bmi.n	8003a30 <_malloc_r+0xd0>
 80039ee:	2a0b      	cmp	r2, #11
 80039f0:	d917      	bls.n	8003a22 <_malloc_r+0xc2>
 80039f2:	1961      	adds	r1, r4, r5
 80039f4:	42a3      	cmp	r3, r4
 80039f6:	6025      	str	r5, [r4, #0]
 80039f8:	bf18      	it	ne
 80039fa:	6059      	strne	r1, [r3, #4]
 80039fc:	6863      	ldr	r3, [r4, #4]
 80039fe:	bf08      	it	eq
 8003a00:	f8c8 1000 	streq.w	r1, [r8]
 8003a04:	5162      	str	r2, [r4, r5]
 8003a06:	604b      	str	r3, [r1, #4]
 8003a08:	4630      	mov	r0, r6
 8003a0a:	f000 f82f 	bl	8003a6c <__malloc_unlock>
 8003a0e:	f104 000b 	add.w	r0, r4, #11
 8003a12:	1d23      	adds	r3, r4, #4
 8003a14:	f020 0007 	bic.w	r0, r0, #7
 8003a18:	1ac2      	subs	r2, r0, r3
 8003a1a:	bf1c      	itt	ne
 8003a1c:	1a1b      	subne	r3, r3, r0
 8003a1e:	50a3      	strne	r3, [r4, r2]
 8003a20:	e7af      	b.n	8003982 <_malloc_r+0x22>
 8003a22:	6862      	ldr	r2, [r4, #4]
 8003a24:	42a3      	cmp	r3, r4
 8003a26:	bf0c      	ite	eq
 8003a28:	f8c8 2000 	streq.w	r2, [r8]
 8003a2c:	605a      	strne	r2, [r3, #4]
 8003a2e:	e7eb      	b.n	8003a08 <_malloc_r+0xa8>
 8003a30:	4623      	mov	r3, r4
 8003a32:	6864      	ldr	r4, [r4, #4]
 8003a34:	e7ae      	b.n	8003994 <_malloc_r+0x34>
 8003a36:	463c      	mov	r4, r7
 8003a38:	687f      	ldr	r7, [r7, #4]
 8003a3a:	e7b6      	b.n	80039aa <_malloc_r+0x4a>
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	42a3      	cmp	r3, r4
 8003a42:	d1fb      	bne.n	8003a3c <_malloc_r+0xdc>
 8003a44:	2300      	movs	r3, #0
 8003a46:	6053      	str	r3, [r2, #4]
 8003a48:	e7de      	b.n	8003a08 <_malloc_r+0xa8>
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	6033      	str	r3, [r6, #0]
 8003a4e:	4630      	mov	r0, r6
 8003a50:	f000 f80c 	bl	8003a6c <__malloc_unlock>
 8003a54:	e794      	b.n	8003980 <_malloc_r+0x20>
 8003a56:	6005      	str	r5, [r0, #0]
 8003a58:	e7d6      	b.n	8003a08 <_malloc_r+0xa8>
 8003a5a:	bf00      	nop
 8003a5c:	200004b0 	.word	0x200004b0

08003a60 <__malloc_lock>:
 8003a60:	4801      	ldr	r0, [pc, #4]	@ (8003a68 <__malloc_lock+0x8>)
 8003a62:	f7ff b8aa 	b.w	8002bba <__retarget_lock_acquire_recursive>
 8003a66:	bf00      	nop
 8003a68:	200004a8 	.word	0x200004a8

08003a6c <__malloc_unlock>:
 8003a6c:	4801      	ldr	r0, [pc, #4]	@ (8003a74 <__malloc_unlock+0x8>)
 8003a6e:	f7ff b8a5 	b.w	8002bbc <__retarget_lock_release_recursive>
 8003a72:	bf00      	nop
 8003a74:	200004a8 	.word	0x200004a8

08003a78 <_Balloc>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	69c6      	ldr	r6, [r0, #28]
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	460d      	mov	r5, r1
 8003a80:	b976      	cbnz	r6, 8003aa0 <_Balloc+0x28>
 8003a82:	2010      	movs	r0, #16
 8003a84:	f7ff ff42 	bl	800390c <malloc>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	61e0      	str	r0, [r4, #28]
 8003a8c:	b920      	cbnz	r0, 8003a98 <_Balloc+0x20>
 8003a8e:	4b18      	ldr	r3, [pc, #96]	@ (8003af0 <_Balloc+0x78>)
 8003a90:	4818      	ldr	r0, [pc, #96]	@ (8003af4 <_Balloc+0x7c>)
 8003a92:	216b      	movs	r1, #107	@ 0x6b
 8003a94:	f000 fda0 	bl	80045d8 <__assert_func>
 8003a98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003a9c:	6006      	str	r6, [r0, #0]
 8003a9e:	60c6      	str	r6, [r0, #12]
 8003aa0:	69e6      	ldr	r6, [r4, #28]
 8003aa2:	68f3      	ldr	r3, [r6, #12]
 8003aa4:	b183      	cbz	r3, 8003ac8 <_Balloc+0x50>
 8003aa6:	69e3      	ldr	r3, [r4, #28]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003aae:	b9b8      	cbnz	r0, 8003ae0 <_Balloc+0x68>
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	fa01 f605 	lsl.w	r6, r1, r5
 8003ab6:	1d72      	adds	r2, r6, #5
 8003ab8:	0092      	lsls	r2, r2, #2
 8003aba:	4620      	mov	r0, r4
 8003abc:	f000 fdaa 	bl	8004614 <_calloc_r>
 8003ac0:	b160      	cbz	r0, 8003adc <_Balloc+0x64>
 8003ac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003ac6:	e00e      	b.n	8003ae6 <_Balloc+0x6e>
 8003ac8:	2221      	movs	r2, #33	@ 0x21
 8003aca:	2104      	movs	r1, #4
 8003acc:	4620      	mov	r0, r4
 8003ace:	f000 fda1 	bl	8004614 <_calloc_r>
 8003ad2:	69e3      	ldr	r3, [r4, #28]
 8003ad4:	60f0      	str	r0, [r6, #12]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e4      	bne.n	8003aa6 <_Balloc+0x2e>
 8003adc:	2000      	movs	r0, #0
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
 8003ae0:	6802      	ldr	r2, [r0, #0]
 8003ae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003aec:	e7f7      	b.n	8003ade <_Balloc+0x66>
 8003aee:	bf00      	nop
 8003af0:	08004d1f 	.word	0x08004d1f
 8003af4:	08004d9f 	.word	0x08004d9f

08003af8 <_Bfree>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	69c6      	ldr	r6, [r0, #28]
 8003afc:	4605      	mov	r5, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	b976      	cbnz	r6, 8003b20 <_Bfree+0x28>
 8003b02:	2010      	movs	r0, #16
 8003b04:	f7ff ff02 	bl	800390c <malloc>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	61e8      	str	r0, [r5, #28]
 8003b0c:	b920      	cbnz	r0, 8003b18 <_Bfree+0x20>
 8003b0e:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <_Bfree+0x3c>)
 8003b10:	4809      	ldr	r0, [pc, #36]	@ (8003b38 <_Bfree+0x40>)
 8003b12:	218f      	movs	r1, #143	@ 0x8f
 8003b14:	f000 fd60 	bl	80045d8 <__assert_func>
 8003b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b1c:	6006      	str	r6, [r0, #0]
 8003b1e:	60c6      	str	r6, [r0, #12]
 8003b20:	b13c      	cbz	r4, 8003b32 <_Bfree+0x3a>
 8003b22:	69eb      	ldr	r3, [r5, #28]
 8003b24:	6862      	ldr	r2, [r4, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b2c:	6021      	str	r1, [r4, #0]
 8003b2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	08004d1f 	.word	0x08004d1f
 8003b38:	08004d9f 	.word	0x08004d9f

08003b3c <__multadd>:
 8003b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b40:	690d      	ldr	r5, [r1, #16]
 8003b42:	4607      	mov	r7, r0
 8003b44:	460c      	mov	r4, r1
 8003b46:	461e      	mov	r6, r3
 8003b48:	f101 0c14 	add.w	ip, r1, #20
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f8dc 3000 	ldr.w	r3, [ip]
 8003b52:	b299      	uxth	r1, r3
 8003b54:	fb02 6101 	mla	r1, r2, r1, r6
 8003b58:	0c1e      	lsrs	r6, r3, #16
 8003b5a:	0c0b      	lsrs	r3, r1, #16
 8003b5c:	fb02 3306 	mla	r3, r2, r6, r3
 8003b60:	b289      	uxth	r1, r1
 8003b62:	3001      	adds	r0, #1
 8003b64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003b68:	4285      	cmp	r5, r0
 8003b6a:	f84c 1b04 	str.w	r1, [ip], #4
 8003b6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003b72:	dcec      	bgt.n	8003b4e <__multadd+0x12>
 8003b74:	b30e      	cbz	r6, 8003bba <__multadd+0x7e>
 8003b76:	68a3      	ldr	r3, [r4, #8]
 8003b78:	42ab      	cmp	r3, r5
 8003b7a:	dc19      	bgt.n	8003bb0 <__multadd+0x74>
 8003b7c:	6861      	ldr	r1, [r4, #4]
 8003b7e:	4638      	mov	r0, r7
 8003b80:	3101      	adds	r1, #1
 8003b82:	f7ff ff79 	bl	8003a78 <_Balloc>
 8003b86:	4680      	mov	r8, r0
 8003b88:	b928      	cbnz	r0, 8003b96 <__multadd+0x5a>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <__multadd+0x84>)
 8003b8e:	480d      	ldr	r0, [pc, #52]	@ (8003bc4 <__multadd+0x88>)
 8003b90:	21ba      	movs	r1, #186	@ 0xba
 8003b92:	f000 fd21 	bl	80045d8 <__assert_func>
 8003b96:	6922      	ldr	r2, [r4, #16]
 8003b98:	3202      	adds	r2, #2
 8003b9a:	f104 010c 	add.w	r1, r4, #12
 8003b9e:	0092      	lsls	r2, r2, #2
 8003ba0:	300c      	adds	r0, #12
 8003ba2:	f7ff f80c 	bl	8002bbe <memcpy>
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	4638      	mov	r0, r7
 8003baa:	f7ff ffa5 	bl	8003af8 <_Bfree>
 8003bae:	4644      	mov	r4, r8
 8003bb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003bb4:	3501      	adds	r5, #1
 8003bb6:	615e      	str	r6, [r3, #20]
 8003bb8:	6125      	str	r5, [r4, #16]
 8003bba:	4620      	mov	r0, r4
 8003bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc0:	08004d8e 	.word	0x08004d8e
 8003bc4:	08004d9f 	.word	0x08004d9f

08003bc8 <__hi0bits>:
 8003bc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003bcc:	4603      	mov	r3, r0
 8003bce:	bf36      	itet	cc
 8003bd0:	0403      	lslcc	r3, r0, #16
 8003bd2:	2000      	movcs	r0, #0
 8003bd4:	2010      	movcc	r0, #16
 8003bd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bda:	bf3c      	itt	cc
 8003bdc:	021b      	lslcc	r3, r3, #8
 8003bde:	3008      	addcc	r0, #8
 8003be0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003be4:	bf3c      	itt	cc
 8003be6:	011b      	lslcc	r3, r3, #4
 8003be8:	3004      	addcc	r0, #4
 8003bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bee:	bf3c      	itt	cc
 8003bf0:	009b      	lslcc	r3, r3, #2
 8003bf2:	3002      	addcc	r0, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	db05      	blt.n	8003c04 <__hi0bits+0x3c>
 8003bf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003bfc:	f100 0001 	add.w	r0, r0, #1
 8003c00:	bf08      	it	eq
 8003c02:	2020      	moveq	r0, #32
 8003c04:	4770      	bx	lr

08003c06 <__lo0bits>:
 8003c06:	6803      	ldr	r3, [r0, #0]
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f013 0007 	ands.w	r0, r3, #7
 8003c0e:	d00b      	beq.n	8003c28 <__lo0bits+0x22>
 8003c10:	07d9      	lsls	r1, r3, #31
 8003c12:	d421      	bmi.n	8003c58 <__lo0bits+0x52>
 8003c14:	0798      	lsls	r0, r3, #30
 8003c16:	bf49      	itett	mi
 8003c18:	085b      	lsrmi	r3, r3, #1
 8003c1a:	089b      	lsrpl	r3, r3, #2
 8003c1c:	2001      	movmi	r0, #1
 8003c1e:	6013      	strmi	r3, [r2, #0]
 8003c20:	bf5c      	itt	pl
 8003c22:	6013      	strpl	r3, [r2, #0]
 8003c24:	2002      	movpl	r0, #2
 8003c26:	4770      	bx	lr
 8003c28:	b299      	uxth	r1, r3
 8003c2a:	b909      	cbnz	r1, 8003c30 <__lo0bits+0x2a>
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	2010      	movs	r0, #16
 8003c30:	b2d9      	uxtb	r1, r3
 8003c32:	b909      	cbnz	r1, 8003c38 <__lo0bits+0x32>
 8003c34:	3008      	adds	r0, #8
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	0719      	lsls	r1, r3, #28
 8003c3a:	bf04      	itt	eq
 8003c3c:	091b      	lsreq	r3, r3, #4
 8003c3e:	3004      	addeq	r0, #4
 8003c40:	0799      	lsls	r1, r3, #30
 8003c42:	bf04      	itt	eq
 8003c44:	089b      	lsreq	r3, r3, #2
 8003c46:	3002      	addeq	r0, #2
 8003c48:	07d9      	lsls	r1, r3, #31
 8003c4a:	d403      	bmi.n	8003c54 <__lo0bits+0x4e>
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	f100 0001 	add.w	r0, r0, #1
 8003c52:	d003      	beq.n	8003c5c <__lo0bits+0x56>
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	4770      	bx	lr
 8003c58:	2000      	movs	r0, #0
 8003c5a:	4770      	bx	lr
 8003c5c:	2020      	movs	r0, #32
 8003c5e:	4770      	bx	lr

08003c60 <__i2b>:
 8003c60:	b510      	push	{r4, lr}
 8003c62:	460c      	mov	r4, r1
 8003c64:	2101      	movs	r1, #1
 8003c66:	f7ff ff07 	bl	8003a78 <_Balloc>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	b928      	cbnz	r0, 8003c7a <__i2b+0x1a>
 8003c6e:	4b05      	ldr	r3, [pc, #20]	@ (8003c84 <__i2b+0x24>)
 8003c70:	4805      	ldr	r0, [pc, #20]	@ (8003c88 <__i2b+0x28>)
 8003c72:	f240 1145 	movw	r1, #325	@ 0x145
 8003c76:	f000 fcaf 	bl	80045d8 <__assert_func>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	6144      	str	r4, [r0, #20]
 8003c7e:	6103      	str	r3, [r0, #16]
 8003c80:	bd10      	pop	{r4, pc}
 8003c82:	bf00      	nop
 8003c84:	08004d8e 	.word	0x08004d8e
 8003c88:	08004d9f 	.word	0x08004d9f

08003c8c <__multiply>:
 8003c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c90:	4614      	mov	r4, r2
 8003c92:	690a      	ldr	r2, [r1, #16]
 8003c94:	6923      	ldr	r3, [r4, #16]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	bfa8      	it	ge
 8003c9a:	4623      	movge	r3, r4
 8003c9c:	460f      	mov	r7, r1
 8003c9e:	bfa4      	itt	ge
 8003ca0:	460c      	movge	r4, r1
 8003ca2:	461f      	movge	r7, r3
 8003ca4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003ca8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8003cac:	68a3      	ldr	r3, [r4, #8]
 8003cae:	6861      	ldr	r1, [r4, #4]
 8003cb0:	eb0a 0609 	add.w	r6, sl, r9
 8003cb4:	42b3      	cmp	r3, r6
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	bfb8      	it	lt
 8003cba:	3101      	addlt	r1, #1
 8003cbc:	f7ff fedc 	bl	8003a78 <_Balloc>
 8003cc0:	b930      	cbnz	r0, 8003cd0 <__multiply+0x44>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4b44      	ldr	r3, [pc, #272]	@ (8003dd8 <__multiply+0x14c>)
 8003cc6:	4845      	ldr	r0, [pc, #276]	@ (8003ddc <__multiply+0x150>)
 8003cc8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003ccc:	f000 fc84 	bl	80045d8 <__assert_func>
 8003cd0:	f100 0514 	add.w	r5, r0, #20
 8003cd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003cd8:	462b      	mov	r3, r5
 8003cda:	2200      	movs	r2, #0
 8003cdc:	4543      	cmp	r3, r8
 8003cde:	d321      	bcc.n	8003d24 <__multiply+0x98>
 8003ce0:	f107 0114 	add.w	r1, r7, #20
 8003ce4:	f104 0214 	add.w	r2, r4, #20
 8003ce8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8003cec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8003cf0:	9302      	str	r3, [sp, #8]
 8003cf2:	1b13      	subs	r3, r2, r4
 8003cf4:	3b15      	subs	r3, #21
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	f104 0715 	add.w	r7, r4, #21
 8003d00:	42ba      	cmp	r2, r7
 8003d02:	bf38      	it	cc
 8003d04:	2304      	movcc	r3, #4
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	9b02      	ldr	r3, [sp, #8]
 8003d0a:	9103      	str	r1, [sp, #12]
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	d80c      	bhi.n	8003d2a <__multiply+0x9e>
 8003d10:	2e00      	cmp	r6, #0
 8003d12:	dd03      	ble.n	8003d1c <__multiply+0x90>
 8003d14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d05b      	beq.n	8003dd4 <__multiply+0x148>
 8003d1c:	6106      	str	r6, [r0, #16]
 8003d1e:	b005      	add	sp, #20
 8003d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d24:	f843 2b04 	str.w	r2, [r3], #4
 8003d28:	e7d8      	b.n	8003cdc <__multiply+0x50>
 8003d2a:	f8b1 a000 	ldrh.w	sl, [r1]
 8003d2e:	f1ba 0f00 	cmp.w	sl, #0
 8003d32:	d024      	beq.n	8003d7e <__multiply+0xf2>
 8003d34:	f104 0e14 	add.w	lr, r4, #20
 8003d38:	46a9      	mov	r9, r5
 8003d3a:	f04f 0c00 	mov.w	ip, #0
 8003d3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003d42:	f8d9 3000 	ldr.w	r3, [r9]
 8003d46:	fa1f fb87 	uxth.w	fp, r7
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8003d50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8003d54:	f8d9 7000 	ldr.w	r7, [r9]
 8003d58:	4463      	add	r3, ip
 8003d5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003d5e:	fb0a c70b 	mla	r7, sl, fp, ip
 8003d62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003d6c:	4572      	cmp	r2, lr
 8003d6e:	f849 3b04 	str.w	r3, [r9], #4
 8003d72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003d76:	d8e2      	bhi.n	8003d3e <__multiply+0xb2>
 8003d78:	9b01      	ldr	r3, [sp, #4]
 8003d7a:	f845 c003 	str.w	ip, [r5, r3]
 8003d7e:	9b03      	ldr	r3, [sp, #12]
 8003d80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003d84:	3104      	adds	r1, #4
 8003d86:	f1b9 0f00 	cmp.w	r9, #0
 8003d8a:	d021      	beq.n	8003dd0 <__multiply+0x144>
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	f104 0c14 	add.w	ip, r4, #20
 8003d92:	46ae      	mov	lr, r5
 8003d94:	f04f 0a00 	mov.w	sl, #0
 8003d98:	f8bc b000 	ldrh.w	fp, [ip]
 8003d9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8003da0:	fb09 770b 	mla	r7, r9, fp, r7
 8003da4:	4457      	add	r7, sl
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003dac:	f84e 3b04 	str.w	r3, [lr], #4
 8003db0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003db4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003db8:	f8be 3000 	ldrh.w	r3, [lr]
 8003dbc:	fb09 330a 	mla	r3, r9, sl, r3
 8003dc0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8003dc4:	4562      	cmp	r2, ip
 8003dc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003dca:	d8e5      	bhi.n	8003d98 <__multiply+0x10c>
 8003dcc:	9f01      	ldr	r7, [sp, #4]
 8003dce:	51eb      	str	r3, [r5, r7]
 8003dd0:	3504      	adds	r5, #4
 8003dd2:	e799      	b.n	8003d08 <__multiply+0x7c>
 8003dd4:	3e01      	subs	r6, #1
 8003dd6:	e79b      	b.n	8003d10 <__multiply+0x84>
 8003dd8:	08004d8e 	.word	0x08004d8e
 8003ddc:	08004d9f 	.word	0x08004d9f

08003de0 <__pow5mult>:
 8003de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de4:	4615      	mov	r5, r2
 8003de6:	f012 0203 	ands.w	r2, r2, #3
 8003dea:	4607      	mov	r7, r0
 8003dec:	460e      	mov	r6, r1
 8003dee:	d007      	beq.n	8003e00 <__pow5mult+0x20>
 8003df0:	4c25      	ldr	r4, [pc, #148]	@ (8003e88 <__pow5mult+0xa8>)
 8003df2:	3a01      	subs	r2, #1
 8003df4:	2300      	movs	r3, #0
 8003df6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003dfa:	f7ff fe9f 	bl	8003b3c <__multadd>
 8003dfe:	4606      	mov	r6, r0
 8003e00:	10ad      	asrs	r5, r5, #2
 8003e02:	d03d      	beq.n	8003e80 <__pow5mult+0xa0>
 8003e04:	69fc      	ldr	r4, [r7, #28]
 8003e06:	b97c      	cbnz	r4, 8003e28 <__pow5mult+0x48>
 8003e08:	2010      	movs	r0, #16
 8003e0a:	f7ff fd7f 	bl	800390c <malloc>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	61f8      	str	r0, [r7, #28]
 8003e12:	b928      	cbnz	r0, 8003e20 <__pow5mult+0x40>
 8003e14:	4b1d      	ldr	r3, [pc, #116]	@ (8003e8c <__pow5mult+0xac>)
 8003e16:	481e      	ldr	r0, [pc, #120]	@ (8003e90 <__pow5mult+0xb0>)
 8003e18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003e1c:	f000 fbdc 	bl	80045d8 <__assert_func>
 8003e20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e24:	6004      	str	r4, [r0, #0]
 8003e26:	60c4      	str	r4, [r0, #12]
 8003e28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003e2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003e30:	b94c      	cbnz	r4, 8003e46 <__pow5mult+0x66>
 8003e32:	f240 2171 	movw	r1, #625	@ 0x271
 8003e36:	4638      	mov	r0, r7
 8003e38:	f7ff ff12 	bl	8003c60 <__i2b>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003e42:	4604      	mov	r4, r0
 8003e44:	6003      	str	r3, [r0, #0]
 8003e46:	f04f 0900 	mov.w	r9, #0
 8003e4a:	07eb      	lsls	r3, r5, #31
 8003e4c:	d50a      	bpl.n	8003e64 <__pow5mult+0x84>
 8003e4e:	4631      	mov	r1, r6
 8003e50:	4622      	mov	r2, r4
 8003e52:	4638      	mov	r0, r7
 8003e54:	f7ff ff1a 	bl	8003c8c <__multiply>
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4680      	mov	r8, r0
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	f7ff fe4b 	bl	8003af8 <_Bfree>
 8003e62:	4646      	mov	r6, r8
 8003e64:	106d      	asrs	r5, r5, #1
 8003e66:	d00b      	beq.n	8003e80 <__pow5mult+0xa0>
 8003e68:	6820      	ldr	r0, [r4, #0]
 8003e6a:	b938      	cbnz	r0, 8003e7c <__pow5mult+0x9c>
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	4621      	mov	r1, r4
 8003e70:	4638      	mov	r0, r7
 8003e72:	f7ff ff0b 	bl	8003c8c <__multiply>
 8003e76:	6020      	str	r0, [r4, #0]
 8003e78:	f8c0 9000 	str.w	r9, [r0]
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	e7e4      	b.n	8003e4a <__pow5mult+0x6a>
 8003e80:	4630      	mov	r0, r6
 8003e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e86:	bf00      	nop
 8003e88:	08004df8 	.word	0x08004df8
 8003e8c:	08004d1f 	.word	0x08004d1f
 8003e90:	08004d9f 	.word	0x08004d9f

08003e94 <__lshift>:
 8003e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e98:	460c      	mov	r4, r1
 8003e9a:	6849      	ldr	r1, [r1, #4]
 8003e9c:	6923      	ldr	r3, [r4, #16]
 8003e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003ea2:	68a3      	ldr	r3, [r4, #8]
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	4691      	mov	r9, r2
 8003ea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003eac:	f108 0601 	add.w	r6, r8, #1
 8003eb0:	42b3      	cmp	r3, r6
 8003eb2:	db0b      	blt.n	8003ecc <__lshift+0x38>
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f7ff fddf 	bl	8003a78 <_Balloc>
 8003eba:	4605      	mov	r5, r0
 8003ebc:	b948      	cbnz	r0, 8003ed2 <__lshift+0x3e>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4b28      	ldr	r3, [pc, #160]	@ (8003f64 <__lshift+0xd0>)
 8003ec2:	4829      	ldr	r0, [pc, #164]	@ (8003f68 <__lshift+0xd4>)
 8003ec4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003ec8:	f000 fb86 	bl	80045d8 <__assert_func>
 8003ecc:	3101      	adds	r1, #1
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	e7ee      	b.n	8003eb0 <__lshift+0x1c>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f100 0114 	add.w	r1, r0, #20
 8003ed8:	f100 0210 	add.w	r2, r0, #16
 8003edc:	4618      	mov	r0, r3
 8003ede:	4553      	cmp	r3, sl
 8003ee0:	db33      	blt.n	8003f4a <__lshift+0xb6>
 8003ee2:	6920      	ldr	r0, [r4, #16]
 8003ee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003ee8:	f104 0314 	add.w	r3, r4, #20
 8003eec:	f019 091f 	ands.w	r9, r9, #31
 8003ef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003ef4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003ef8:	d02b      	beq.n	8003f52 <__lshift+0xbe>
 8003efa:	f1c9 0e20 	rsb	lr, r9, #32
 8003efe:	468a      	mov	sl, r1
 8003f00:	2200      	movs	r2, #0
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	fa00 f009 	lsl.w	r0, r0, r9
 8003f08:	4310      	orrs	r0, r2
 8003f0a:	f84a 0b04 	str.w	r0, [sl], #4
 8003f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f12:	459c      	cmp	ip, r3
 8003f14:	fa22 f20e 	lsr.w	r2, r2, lr
 8003f18:	d8f3      	bhi.n	8003f02 <__lshift+0x6e>
 8003f1a:	ebac 0304 	sub.w	r3, ip, r4
 8003f1e:	3b15      	subs	r3, #21
 8003f20:	f023 0303 	bic.w	r3, r3, #3
 8003f24:	3304      	adds	r3, #4
 8003f26:	f104 0015 	add.w	r0, r4, #21
 8003f2a:	4584      	cmp	ip, r0
 8003f2c:	bf38      	it	cc
 8003f2e:	2304      	movcc	r3, #4
 8003f30:	50ca      	str	r2, [r1, r3]
 8003f32:	b10a      	cbz	r2, 8003f38 <__lshift+0xa4>
 8003f34:	f108 0602 	add.w	r6, r8, #2
 8003f38:	3e01      	subs	r6, #1
 8003f3a:	4638      	mov	r0, r7
 8003f3c:	612e      	str	r6, [r5, #16]
 8003f3e:	4621      	mov	r1, r4
 8003f40:	f7ff fdda 	bl	8003af8 <_Bfree>
 8003f44:	4628      	mov	r0, r5
 8003f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8003f4e:	3301      	adds	r3, #1
 8003f50:	e7c5      	b.n	8003ede <__lshift+0x4a>
 8003f52:	3904      	subs	r1, #4
 8003f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8003f5c:	459c      	cmp	ip, r3
 8003f5e:	d8f9      	bhi.n	8003f54 <__lshift+0xc0>
 8003f60:	e7ea      	b.n	8003f38 <__lshift+0xa4>
 8003f62:	bf00      	nop
 8003f64:	08004d8e 	.word	0x08004d8e
 8003f68:	08004d9f 	.word	0x08004d9f

08003f6c <__mcmp>:
 8003f6c:	690a      	ldr	r2, [r1, #16]
 8003f6e:	4603      	mov	r3, r0
 8003f70:	6900      	ldr	r0, [r0, #16]
 8003f72:	1a80      	subs	r0, r0, r2
 8003f74:	b530      	push	{r4, r5, lr}
 8003f76:	d10e      	bne.n	8003f96 <__mcmp+0x2a>
 8003f78:	3314      	adds	r3, #20
 8003f7a:	3114      	adds	r1, #20
 8003f7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003f80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003f84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003f88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003f8c:	4295      	cmp	r5, r2
 8003f8e:	d003      	beq.n	8003f98 <__mcmp+0x2c>
 8003f90:	d205      	bcs.n	8003f9e <__mcmp+0x32>
 8003f92:	f04f 30ff 	mov.w	r0, #4294967295
 8003f96:	bd30      	pop	{r4, r5, pc}
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	d3f3      	bcc.n	8003f84 <__mcmp+0x18>
 8003f9c:	e7fb      	b.n	8003f96 <__mcmp+0x2a>
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	e7f9      	b.n	8003f96 <__mcmp+0x2a>
	...

08003fa4 <__mdiff>:
 8003fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa8:	4689      	mov	r9, r1
 8003faa:	4606      	mov	r6, r0
 8003fac:	4611      	mov	r1, r2
 8003fae:	4648      	mov	r0, r9
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	f7ff ffdb 	bl	8003f6c <__mcmp>
 8003fb6:	1e05      	subs	r5, r0, #0
 8003fb8:	d112      	bne.n	8003fe0 <__mdiff+0x3c>
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	f7ff fd5b 	bl	8003a78 <_Balloc>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	b928      	cbnz	r0, 8003fd2 <__mdiff+0x2e>
 8003fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80040c4 <__mdiff+0x120>)
 8003fc8:	f240 2137 	movw	r1, #567	@ 0x237
 8003fcc:	483e      	ldr	r0, [pc, #248]	@ (80040c8 <__mdiff+0x124>)
 8003fce:	f000 fb03 	bl	80045d8 <__assert_func>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003fd8:	4610      	mov	r0, r2
 8003fda:	b003      	add	sp, #12
 8003fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe0:	bfbc      	itt	lt
 8003fe2:	464b      	movlt	r3, r9
 8003fe4:	46a1      	movlt	r9, r4
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003fec:	bfba      	itte	lt
 8003fee:	461c      	movlt	r4, r3
 8003ff0:	2501      	movlt	r5, #1
 8003ff2:	2500      	movge	r5, #0
 8003ff4:	f7ff fd40 	bl	8003a78 <_Balloc>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	b918      	cbnz	r0, 8004004 <__mdiff+0x60>
 8003ffc:	4b31      	ldr	r3, [pc, #196]	@ (80040c4 <__mdiff+0x120>)
 8003ffe:	f240 2145 	movw	r1, #581	@ 0x245
 8004002:	e7e3      	b.n	8003fcc <__mdiff+0x28>
 8004004:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004008:	6926      	ldr	r6, [r4, #16]
 800400a:	60c5      	str	r5, [r0, #12]
 800400c:	f109 0310 	add.w	r3, r9, #16
 8004010:	f109 0514 	add.w	r5, r9, #20
 8004014:	f104 0e14 	add.w	lr, r4, #20
 8004018:	f100 0b14 	add.w	fp, r0, #20
 800401c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004020:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	46d9      	mov	r9, fp
 8004028:	f04f 0c00 	mov.w	ip, #0
 800402c:	9b01      	ldr	r3, [sp, #4]
 800402e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004032:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	fa1f f38a 	uxth.w	r3, sl
 800403c:	4619      	mov	r1, r3
 800403e:	b283      	uxth	r3, r0
 8004040:	1acb      	subs	r3, r1, r3
 8004042:	0c00      	lsrs	r0, r0, #16
 8004044:	4463      	add	r3, ip
 8004046:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800404a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800404e:	b29b      	uxth	r3, r3
 8004050:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004054:	4576      	cmp	r6, lr
 8004056:	f849 3b04 	str.w	r3, [r9], #4
 800405a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800405e:	d8e5      	bhi.n	800402c <__mdiff+0x88>
 8004060:	1b33      	subs	r3, r6, r4
 8004062:	3b15      	subs	r3, #21
 8004064:	f023 0303 	bic.w	r3, r3, #3
 8004068:	3415      	adds	r4, #21
 800406a:	3304      	adds	r3, #4
 800406c:	42a6      	cmp	r6, r4
 800406e:	bf38      	it	cc
 8004070:	2304      	movcc	r3, #4
 8004072:	441d      	add	r5, r3
 8004074:	445b      	add	r3, fp
 8004076:	461e      	mov	r6, r3
 8004078:	462c      	mov	r4, r5
 800407a:	4544      	cmp	r4, r8
 800407c:	d30e      	bcc.n	800409c <__mdiff+0xf8>
 800407e:	f108 0103 	add.w	r1, r8, #3
 8004082:	1b49      	subs	r1, r1, r5
 8004084:	f021 0103 	bic.w	r1, r1, #3
 8004088:	3d03      	subs	r5, #3
 800408a:	45a8      	cmp	r8, r5
 800408c:	bf38      	it	cc
 800408e:	2100      	movcc	r1, #0
 8004090:	440b      	add	r3, r1
 8004092:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004096:	b191      	cbz	r1, 80040be <__mdiff+0x11a>
 8004098:	6117      	str	r7, [r2, #16]
 800409a:	e79d      	b.n	8003fd8 <__mdiff+0x34>
 800409c:	f854 1b04 	ldr.w	r1, [r4], #4
 80040a0:	46e6      	mov	lr, ip
 80040a2:	0c08      	lsrs	r0, r1, #16
 80040a4:	fa1c fc81 	uxtah	ip, ip, r1
 80040a8:	4471      	add	r1, lr
 80040aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80040ae:	b289      	uxth	r1, r1
 80040b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80040b4:	f846 1b04 	str.w	r1, [r6], #4
 80040b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80040bc:	e7dd      	b.n	800407a <__mdiff+0xd6>
 80040be:	3f01      	subs	r7, #1
 80040c0:	e7e7      	b.n	8004092 <__mdiff+0xee>
 80040c2:	bf00      	nop
 80040c4:	08004d8e 	.word	0x08004d8e
 80040c8:	08004d9f 	.word	0x08004d9f

080040cc <__d2b>:
 80040cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80040d0:	460f      	mov	r7, r1
 80040d2:	2101      	movs	r1, #1
 80040d4:	ec59 8b10 	vmov	r8, r9, d0
 80040d8:	4616      	mov	r6, r2
 80040da:	f7ff fccd 	bl	8003a78 <_Balloc>
 80040de:	4604      	mov	r4, r0
 80040e0:	b930      	cbnz	r0, 80040f0 <__d2b+0x24>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4b23      	ldr	r3, [pc, #140]	@ (8004174 <__d2b+0xa8>)
 80040e6:	4824      	ldr	r0, [pc, #144]	@ (8004178 <__d2b+0xac>)
 80040e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80040ec:	f000 fa74 	bl	80045d8 <__assert_func>
 80040f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80040f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80040f8:	b10d      	cbz	r5, 80040fe <__d2b+0x32>
 80040fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	f1b8 0300 	subs.w	r3, r8, #0
 8004104:	d023      	beq.n	800414e <__d2b+0x82>
 8004106:	4668      	mov	r0, sp
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	f7ff fd7c 	bl	8003c06 <__lo0bits>
 800410e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004112:	b1d0      	cbz	r0, 800414a <__d2b+0x7e>
 8004114:	f1c0 0320 	rsb	r3, r0, #32
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	430b      	orrs	r3, r1
 800411e:	40c2      	lsrs	r2, r0
 8004120:	6163      	str	r3, [r4, #20]
 8004122:	9201      	str	r2, [sp, #4]
 8004124:	9b01      	ldr	r3, [sp, #4]
 8004126:	61a3      	str	r3, [r4, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2201      	moveq	r2, #1
 800412e:	2202      	movne	r2, #2
 8004130:	6122      	str	r2, [r4, #16]
 8004132:	b1a5      	cbz	r5, 800415e <__d2b+0x92>
 8004134:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004138:	4405      	add	r5, r0
 800413a:	603d      	str	r5, [r7, #0]
 800413c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004140:	6030      	str	r0, [r6, #0]
 8004142:	4620      	mov	r0, r4
 8004144:	b003      	add	sp, #12
 8004146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800414a:	6161      	str	r1, [r4, #20]
 800414c:	e7ea      	b.n	8004124 <__d2b+0x58>
 800414e:	a801      	add	r0, sp, #4
 8004150:	f7ff fd59 	bl	8003c06 <__lo0bits>
 8004154:	9b01      	ldr	r3, [sp, #4]
 8004156:	6163      	str	r3, [r4, #20]
 8004158:	3020      	adds	r0, #32
 800415a:	2201      	movs	r2, #1
 800415c:	e7e8      	b.n	8004130 <__d2b+0x64>
 800415e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004162:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004166:	6038      	str	r0, [r7, #0]
 8004168:	6918      	ldr	r0, [r3, #16]
 800416a:	f7ff fd2d 	bl	8003bc8 <__hi0bits>
 800416e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004172:	e7e5      	b.n	8004140 <__d2b+0x74>
 8004174:	08004d8e 	.word	0x08004d8e
 8004178:	08004d9f 	.word	0x08004d9f

0800417c <__ssputs_r>:
 800417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004180:	688e      	ldr	r6, [r1, #8]
 8004182:	461f      	mov	r7, r3
 8004184:	42be      	cmp	r6, r7
 8004186:	680b      	ldr	r3, [r1, #0]
 8004188:	4682      	mov	sl, r0
 800418a:	460c      	mov	r4, r1
 800418c:	4690      	mov	r8, r2
 800418e:	d82d      	bhi.n	80041ec <__ssputs_r+0x70>
 8004190:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004194:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004198:	d026      	beq.n	80041e8 <__ssputs_r+0x6c>
 800419a:	6965      	ldr	r5, [r4, #20]
 800419c:	6909      	ldr	r1, [r1, #16]
 800419e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041a2:	eba3 0901 	sub.w	r9, r3, r1
 80041a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041aa:	1c7b      	adds	r3, r7, #1
 80041ac:	444b      	add	r3, r9
 80041ae:	106d      	asrs	r5, r5, #1
 80041b0:	429d      	cmp	r5, r3
 80041b2:	bf38      	it	cc
 80041b4:	461d      	movcc	r5, r3
 80041b6:	0553      	lsls	r3, r2, #21
 80041b8:	d527      	bpl.n	800420a <__ssputs_r+0x8e>
 80041ba:	4629      	mov	r1, r5
 80041bc:	f7ff fbd0 	bl	8003960 <_malloc_r>
 80041c0:	4606      	mov	r6, r0
 80041c2:	b360      	cbz	r0, 800421e <__ssputs_r+0xa2>
 80041c4:	6921      	ldr	r1, [r4, #16]
 80041c6:	464a      	mov	r2, r9
 80041c8:	f7fe fcf9 	bl	8002bbe <memcpy>
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80041d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041d6:	81a3      	strh	r3, [r4, #12]
 80041d8:	6126      	str	r6, [r4, #16]
 80041da:	6165      	str	r5, [r4, #20]
 80041dc:	444e      	add	r6, r9
 80041de:	eba5 0509 	sub.w	r5, r5, r9
 80041e2:	6026      	str	r6, [r4, #0]
 80041e4:	60a5      	str	r5, [r4, #8]
 80041e6:	463e      	mov	r6, r7
 80041e8:	42be      	cmp	r6, r7
 80041ea:	d900      	bls.n	80041ee <__ssputs_r+0x72>
 80041ec:	463e      	mov	r6, r7
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	4632      	mov	r2, r6
 80041f2:	4641      	mov	r1, r8
 80041f4:	f000 f9c6 	bl	8004584 <memmove>
 80041f8:	68a3      	ldr	r3, [r4, #8]
 80041fa:	1b9b      	subs	r3, r3, r6
 80041fc:	60a3      	str	r3, [r4, #8]
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	4433      	add	r3, r6
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	2000      	movs	r0, #0
 8004206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800420a:	462a      	mov	r2, r5
 800420c:	f000 fa28 	bl	8004660 <_realloc_r>
 8004210:	4606      	mov	r6, r0
 8004212:	2800      	cmp	r0, #0
 8004214:	d1e0      	bne.n	80041d8 <__ssputs_r+0x5c>
 8004216:	6921      	ldr	r1, [r4, #16]
 8004218:	4650      	mov	r0, sl
 800421a:	f7ff fb2d 	bl	8003878 <_free_r>
 800421e:	230c      	movs	r3, #12
 8004220:	f8ca 3000 	str.w	r3, [sl]
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800422a:	81a3      	strh	r3, [r4, #12]
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	e7e9      	b.n	8004206 <__ssputs_r+0x8a>
	...

08004234 <_svfiprintf_r>:
 8004234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004238:	4698      	mov	r8, r3
 800423a:	898b      	ldrh	r3, [r1, #12]
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	b09d      	sub	sp, #116	@ 0x74
 8004240:	4607      	mov	r7, r0
 8004242:	460d      	mov	r5, r1
 8004244:	4614      	mov	r4, r2
 8004246:	d510      	bpl.n	800426a <_svfiprintf_r+0x36>
 8004248:	690b      	ldr	r3, [r1, #16]
 800424a:	b973      	cbnz	r3, 800426a <_svfiprintf_r+0x36>
 800424c:	2140      	movs	r1, #64	@ 0x40
 800424e:	f7ff fb87 	bl	8003960 <_malloc_r>
 8004252:	6028      	str	r0, [r5, #0]
 8004254:	6128      	str	r0, [r5, #16]
 8004256:	b930      	cbnz	r0, 8004266 <_svfiprintf_r+0x32>
 8004258:	230c      	movs	r3, #12
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	f04f 30ff 	mov.w	r0, #4294967295
 8004260:	b01d      	add	sp, #116	@ 0x74
 8004262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004266:	2340      	movs	r3, #64	@ 0x40
 8004268:	616b      	str	r3, [r5, #20]
 800426a:	2300      	movs	r3, #0
 800426c:	9309      	str	r3, [sp, #36]	@ 0x24
 800426e:	2320      	movs	r3, #32
 8004270:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004274:	f8cd 800c 	str.w	r8, [sp, #12]
 8004278:	2330      	movs	r3, #48	@ 0x30
 800427a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004418 <_svfiprintf_r+0x1e4>
 800427e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004282:	f04f 0901 	mov.w	r9, #1
 8004286:	4623      	mov	r3, r4
 8004288:	469a      	mov	sl, r3
 800428a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800428e:	b10a      	cbz	r2, 8004294 <_svfiprintf_r+0x60>
 8004290:	2a25      	cmp	r2, #37	@ 0x25
 8004292:	d1f9      	bne.n	8004288 <_svfiprintf_r+0x54>
 8004294:	ebba 0b04 	subs.w	fp, sl, r4
 8004298:	d00b      	beq.n	80042b2 <_svfiprintf_r+0x7e>
 800429a:	465b      	mov	r3, fp
 800429c:	4622      	mov	r2, r4
 800429e:	4629      	mov	r1, r5
 80042a0:	4638      	mov	r0, r7
 80042a2:	f7ff ff6b 	bl	800417c <__ssputs_r>
 80042a6:	3001      	adds	r0, #1
 80042a8:	f000 80a7 	beq.w	80043fa <_svfiprintf_r+0x1c6>
 80042ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042ae:	445a      	add	r2, fp
 80042b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80042b2:	f89a 3000 	ldrb.w	r3, [sl]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 809f 	beq.w	80043fa <_svfiprintf_r+0x1c6>
 80042bc:	2300      	movs	r3, #0
 80042be:	f04f 32ff 	mov.w	r2, #4294967295
 80042c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042c6:	f10a 0a01 	add.w	sl, sl, #1
 80042ca:	9304      	str	r3, [sp, #16]
 80042cc:	9307      	str	r3, [sp, #28]
 80042ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80042d4:	4654      	mov	r4, sl
 80042d6:	2205      	movs	r2, #5
 80042d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042dc:	484e      	ldr	r0, [pc, #312]	@ (8004418 <_svfiprintf_r+0x1e4>)
 80042de:	f7fb ff7f 	bl	80001e0 <memchr>
 80042e2:	9a04      	ldr	r2, [sp, #16]
 80042e4:	b9d8      	cbnz	r0, 800431e <_svfiprintf_r+0xea>
 80042e6:	06d0      	lsls	r0, r2, #27
 80042e8:	bf44      	itt	mi
 80042ea:	2320      	movmi	r3, #32
 80042ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042f0:	0711      	lsls	r1, r2, #28
 80042f2:	bf44      	itt	mi
 80042f4:	232b      	movmi	r3, #43	@ 0x2b
 80042f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042fa:	f89a 3000 	ldrb.w	r3, [sl]
 80042fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004300:	d015      	beq.n	800432e <_svfiprintf_r+0xfa>
 8004302:	9a07      	ldr	r2, [sp, #28]
 8004304:	4654      	mov	r4, sl
 8004306:	2000      	movs	r0, #0
 8004308:	f04f 0c0a 	mov.w	ip, #10
 800430c:	4621      	mov	r1, r4
 800430e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004312:	3b30      	subs	r3, #48	@ 0x30
 8004314:	2b09      	cmp	r3, #9
 8004316:	d94b      	bls.n	80043b0 <_svfiprintf_r+0x17c>
 8004318:	b1b0      	cbz	r0, 8004348 <_svfiprintf_r+0x114>
 800431a:	9207      	str	r2, [sp, #28]
 800431c:	e014      	b.n	8004348 <_svfiprintf_r+0x114>
 800431e:	eba0 0308 	sub.w	r3, r0, r8
 8004322:	fa09 f303 	lsl.w	r3, r9, r3
 8004326:	4313      	orrs	r3, r2
 8004328:	9304      	str	r3, [sp, #16]
 800432a:	46a2      	mov	sl, r4
 800432c:	e7d2      	b.n	80042d4 <_svfiprintf_r+0xa0>
 800432e:	9b03      	ldr	r3, [sp, #12]
 8004330:	1d19      	adds	r1, r3, #4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	9103      	str	r1, [sp, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	bfbb      	ittet	lt
 800433a:	425b      	neglt	r3, r3
 800433c:	f042 0202 	orrlt.w	r2, r2, #2
 8004340:	9307      	strge	r3, [sp, #28]
 8004342:	9307      	strlt	r3, [sp, #28]
 8004344:	bfb8      	it	lt
 8004346:	9204      	strlt	r2, [sp, #16]
 8004348:	7823      	ldrb	r3, [r4, #0]
 800434a:	2b2e      	cmp	r3, #46	@ 0x2e
 800434c:	d10a      	bne.n	8004364 <_svfiprintf_r+0x130>
 800434e:	7863      	ldrb	r3, [r4, #1]
 8004350:	2b2a      	cmp	r3, #42	@ 0x2a
 8004352:	d132      	bne.n	80043ba <_svfiprintf_r+0x186>
 8004354:	9b03      	ldr	r3, [sp, #12]
 8004356:	1d1a      	adds	r2, r3, #4
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	9203      	str	r2, [sp, #12]
 800435c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004360:	3402      	adds	r4, #2
 8004362:	9305      	str	r3, [sp, #20]
 8004364:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004428 <_svfiprintf_r+0x1f4>
 8004368:	7821      	ldrb	r1, [r4, #0]
 800436a:	2203      	movs	r2, #3
 800436c:	4650      	mov	r0, sl
 800436e:	f7fb ff37 	bl	80001e0 <memchr>
 8004372:	b138      	cbz	r0, 8004384 <_svfiprintf_r+0x150>
 8004374:	9b04      	ldr	r3, [sp, #16]
 8004376:	eba0 000a 	sub.w	r0, r0, sl
 800437a:	2240      	movs	r2, #64	@ 0x40
 800437c:	4082      	lsls	r2, r0
 800437e:	4313      	orrs	r3, r2
 8004380:	3401      	adds	r4, #1
 8004382:	9304      	str	r3, [sp, #16]
 8004384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004388:	4824      	ldr	r0, [pc, #144]	@ (800441c <_svfiprintf_r+0x1e8>)
 800438a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800438e:	2206      	movs	r2, #6
 8004390:	f7fb ff26 	bl	80001e0 <memchr>
 8004394:	2800      	cmp	r0, #0
 8004396:	d036      	beq.n	8004406 <_svfiprintf_r+0x1d2>
 8004398:	4b21      	ldr	r3, [pc, #132]	@ (8004420 <_svfiprintf_r+0x1ec>)
 800439a:	bb1b      	cbnz	r3, 80043e4 <_svfiprintf_r+0x1b0>
 800439c:	9b03      	ldr	r3, [sp, #12]
 800439e:	3307      	adds	r3, #7
 80043a0:	f023 0307 	bic.w	r3, r3, #7
 80043a4:	3308      	adds	r3, #8
 80043a6:	9303      	str	r3, [sp, #12]
 80043a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043aa:	4433      	add	r3, r6
 80043ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80043ae:	e76a      	b.n	8004286 <_svfiprintf_r+0x52>
 80043b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80043b4:	460c      	mov	r4, r1
 80043b6:	2001      	movs	r0, #1
 80043b8:	e7a8      	b.n	800430c <_svfiprintf_r+0xd8>
 80043ba:	2300      	movs	r3, #0
 80043bc:	3401      	adds	r4, #1
 80043be:	9305      	str	r3, [sp, #20]
 80043c0:	4619      	mov	r1, r3
 80043c2:	f04f 0c0a 	mov.w	ip, #10
 80043c6:	4620      	mov	r0, r4
 80043c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043cc:	3a30      	subs	r2, #48	@ 0x30
 80043ce:	2a09      	cmp	r2, #9
 80043d0:	d903      	bls.n	80043da <_svfiprintf_r+0x1a6>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0c6      	beq.n	8004364 <_svfiprintf_r+0x130>
 80043d6:	9105      	str	r1, [sp, #20]
 80043d8:	e7c4      	b.n	8004364 <_svfiprintf_r+0x130>
 80043da:	fb0c 2101 	mla	r1, ip, r1, r2
 80043de:	4604      	mov	r4, r0
 80043e0:	2301      	movs	r3, #1
 80043e2:	e7f0      	b.n	80043c6 <_svfiprintf_r+0x192>
 80043e4:	ab03      	add	r3, sp, #12
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	462a      	mov	r2, r5
 80043ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004424 <_svfiprintf_r+0x1f0>)
 80043ec:	a904      	add	r1, sp, #16
 80043ee:	4638      	mov	r0, r7
 80043f0:	f7fd fe88 	bl	8002104 <_printf_float>
 80043f4:	1c42      	adds	r2, r0, #1
 80043f6:	4606      	mov	r6, r0
 80043f8:	d1d6      	bne.n	80043a8 <_svfiprintf_r+0x174>
 80043fa:	89ab      	ldrh	r3, [r5, #12]
 80043fc:	065b      	lsls	r3, r3, #25
 80043fe:	f53f af2d 	bmi.w	800425c <_svfiprintf_r+0x28>
 8004402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004404:	e72c      	b.n	8004260 <_svfiprintf_r+0x2c>
 8004406:	ab03      	add	r3, sp, #12
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	462a      	mov	r2, r5
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <_svfiprintf_r+0x1f0>)
 800440e:	a904      	add	r1, sp, #16
 8004410:	4638      	mov	r0, r7
 8004412:	f7fe f90f 	bl	8002634 <_printf_i>
 8004416:	e7ed      	b.n	80043f4 <_svfiprintf_r+0x1c0>
 8004418:	08004ef8 	.word	0x08004ef8
 800441c:	08004f02 	.word	0x08004f02
 8004420:	08002105 	.word	0x08002105
 8004424:	0800417d 	.word	0x0800417d
 8004428:	08004efe 	.word	0x08004efe

0800442c <__sflush_r>:
 800442c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004434:	0716      	lsls	r6, r2, #28
 8004436:	4605      	mov	r5, r0
 8004438:	460c      	mov	r4, r1
 800443a:	d454      	bmi.n	80044e6 <__sflush_r+0xba>
 800443c:	684b      	ldr	r3, [r1, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	dc02      	bgt.n	8004448 <__sflush_r+0x1c>
 8004442:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	dd48      	ble.n	80044da <__sflush_r+0xae>
 8004448:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800444a:	2e00      	cmp	r6, #0
 800444c:	d045      	beq.n	80044da <__sflush_r+0xae>
 800444e:	2300      	movs	r3, #0
 8004450:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004454:	682f      	ldr	r7, [r5, #0]
 8004456:	6a21      	ldr	r1, [r4, #32]
 8004458:	602b      	str	r3, [r5, #0]
 800445a:	d030      	beq.n	80044be <__sflush_r+0x92>
 800445c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	0759      	lsls	r1, r3, #29
 8004462:	d505      	bpl.n	8004470 <__sflush_r+0x44>
 8004464:	6863      	ldr	r3, [r4, #4]
 8004466:	1ad2      	subs	r2, r2, r3
 8004468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800446a:	b10b      	cbz	r3, 8004470 <__sflush_r+0x44>
 800446c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004474:	6a21      	ldr	r1, [r4, #32]
 8004476:	4628      	mov	r0, r5
 8004478:	47b0      	blx	r6
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	d106      	bne.n	800448e <__sflush_r+0x62>
 8004480:	6829      	ldr	r1, [r5, #0]
 8004482:	291d      	cmp	r1, #29
 8004484:	d82b      	bhi.n	80044de <__sflush_r+0xb2>
 8004486:	4a2a      	ldr	r2, [pc, #168]	@ (8004530 <__sflush_r+0x104>)
 8004488:	410a      	asrs	r2, r1
 800448a:	07d6      	lsls	r6, r2, #31
 800448c:	d427      	bmi.n	80044de <__sflush_r+0xb2>
 800448e:	2200      	movs	r2, #0
 8004490:	6062      	str	r2, [r4, #4]
 8004492:	04d9      	lsls	r1, r3, #19
 8004494:	6922      	ldr	r2, [r4, #16]
 8004496:	6022      	str	r2, [r4, #0]
 8004498:	d504      	bpl.n	80044a4 <__sflush_r+0x78>
 800449a:	1c42      	adds	r2, r0, #1
 800449c:	d101      	bne.n	80044a2 <__sflush_r+0x76>
 800449e:	682b      	ldr	r3, [r5, #0]
 80044a0:	b903      	cbnz	r3, 80044a4 <__sflush_r+0x78>
 80044a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80044a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044a6:	602f      	str	r7, [r5, #0]
 80044a8:	b1b9      	cbz	r1, 80044da <__sflush_r+0xae>
 80044aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044ae:	4299      	cmp	r1, r3
 80044b0:	d002      	beq.n	80044b8 <__sflush_r+0x8c>
 80044b2:	4628      	mov	r0, r5
 80044b4:	f7ff f9e0 	bl	8003878 <_free_r>
 80044b8:	2300      	movs	r3, #0
 80044ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80044bc:	e00d      	b.n	80044da <__sflush_r+0xae>
 80044be:	2301      	movs	r3, #1
 80044c0:	4628      	mov	r0, r5
 80044c2:	47b0      	blx	r6
 80044c4:	4602      	mov	r2, r0
 80044c6:	1c50      	adds	r0, r2, #1
 80044c8:	d1c9      	bne.n	800445e <__sflush_r+0x32>
 80044ca:	682b      	ldr	r3, [r5, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0c6      	beq.n	800445e <__sflush_r+0x32>
 80044d0:	2b1d      	cmp	r3, #29
 80044d2:	d001      	beq.n	80044d8 <__sflush_r+0xac>
 80044d4:	2b16      	cmp	r3, #22
 80044d6:	d11e      	bne.n	8004516 <__sflush_r+0xea>
 80044d8:	602f      	str	r7, [r5, #0]
 80044da:	2000      	movs	r0, #0
 80044dc:	e022      	b.n	8004524 <__sflush_r+0xf8>
 80044de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044e2:	b21b      	sxth	r3, r3
 80044e4:	e01b      	b.n	800451e <__sflush_r+0xf2>
 80044e6:	690f      	ldr	r7, [r1, #16]
 80044e8:	2f00      	cmp	r7, #0
 80044ea:	d0f6      	beq.n	80044da <__sflush_r+0xae>
 80044ec:	0793      	lsls	r3, r2, #30
 80044ee:	680e      	ldr	r6, [r1, #0]
 80044f0:	bf08      	it	eq
 80044f2:	694b      	ldreq	r3, [r1, #20]
 80044f4:	600f      	str	r7, [r1, #0]
 80044f6:	bf18      	it	ne
 80044f8:	2300      	movne	r3, #0
 80044fa:	eba6 0807 	sub.w	r8, r6, r7
 80044fe:	608b      	str	r3, [r1, #8]
 8004500:	f1b8 0f00 	cmp.w	r8, #0
 8004504:	dde9      	ble.n	80044da <__sflush_r+0xae>
 8004506:	6a21      	ldr	r1, [r4, #32]
 8004508:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800450a:	4643      	mov	r3, r8
 800450c:	463a      	mov	r2, r7
 800450e:	4628      	mov	r0, r5
 8004510:	47b0      	blx	r6
 8004512:	2800      	cmp	r0, #0
 8004514:	dc08      	bgt.n	8004528 <__sflush_r+0xfc>
 8004516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800451a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800451e:	81a3      	strh	r3, [r4, #12]
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004528:	4407      	add	r7, r0
 800452a:	eba8 0800 	sub.w	r8, r8, r0
 800452e:	e7e7      	b.n	8004500 <__sflush_r+0xd4>
 8004530:	dfbffffe 	.word	0xdfbffffe

08004534 <_fflush_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	690b      	ldr	r3, [r1, #16]
 8004538:	4605      	mov	r5, r0
 800453a:	460c      	mov	r4, r1
 800453c:	b913      	cbnz	r3, 8004544 <_fflush_r+0x10>
 800453e:	2500      	movs	r5, #0
 8004540:	4628      	mov	r0, r5
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	b118      	cbz	r0, 800454e <_fflush_r+0x1a>
 8004546:	6a03      	ldr	r3, [r0, #32]
 8004548:	b90b      	cbnz	r3, 800454e <_fflush_r+0x1a>
 800454a:	f7fe fa1f 	bl	800298c <__sinit>
 800454e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f3      	beq.n	800453e <_fflush_r+0xa>
 8004556:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004558:	07d0      	lsls	r0, r2, #31
 800455a:	d404      	bmi.n	8004566 <_fflush_r+0x32>
 800455c:	0599      	lsls	r1, r3, #22
 800455e:	d402      	bmi.n	8004566 <_fflush_r+0x32>
 8004560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004562:	f7fe fb2a 	bl	8002bba <__retarget_lock_acquire_recursive>
 8004566:	4628      	mov	r0, r5
 8004568:	4621      	mov	r1, r4
 800456a:	f7ff ff5f 	bl	800442c <__sflush_r>
 800456e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004570:	07da      	lsls	r2, r3, #31
 8004572:	4605      	mov	r5, r0
 8004574:	d4e4      	bmi.n	8004540 <_fflush_r+0xc>
 8004576:	89a3      	ldrh	r3, [r4, #12]
 8004578:	059b      	lsls	r3, r3, #22
 800457a:	d4e1      	bmi.n	8004540 <_fflush_r+0xc>
 800457c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800457e:	f7fe fb1d 	bl	8002bbc <__retarget_lock_release_recursive>
 8004582:	e7dd      	b.n	8004540 <_fflush_r+0xc>

08004584 <memmove>:
 8004584:	4288      	cmp	r0, r1
 8004586:	b510      	push	{r4, lr}
 8004588:	eb01 0402 	add.w	r4, r1, r2
 800458c:	d902      	bls.n	8004594 <memmove+0x10>
 800458e:	4284      	cmp	r4, r0
 8004590:	4623      	mov	r3, r4
 8004592:	d807      	bhi.n	80045a4 <memmove+0x20>
 8004594:	1e43      	subs	r3, r0, #1
 8004596:	42a1      	cmp	r1, r4
 8004598:	d008      	beq.n	80045ac <memmove+0x28>
 800459a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800459e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045a2:	e7f8      	b.n	8004596 <memmove+0x12>
 80045a4:	4402      	add	r2, r0
 80045a6:	4601      	mov	r1, r0
 80045a8:	428a      	cmp	r2, r1
 80045aa:	d100      	bne.n	80045ae <memmove+0x2a>
 80045ac:	bd10      	pop	{r4, pc}
 80045ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045b6:	e7f7      	b.n	80045a8 <memmove+0x24>

080045b8 <_sbrk_r>:
 80045b8:	b538      	push	{r3, r4, r5, lr}
 80045ba:	4d06      	ldr	r5, [pc, #24]	@ (80045d4 <_sbrk_r+0x1c>)
 80045bc:	2300      	movs	r3, #0
 80045be:	4604      	mov	r4, r0
 80045c0:	4608      	mov	r0, r1
 80045c2:	602b      	str	r3, [r5, #0]
 80045c4:	f7fd fc8e 	bl	8001ee4 <_sbrk>
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	d102      	bne.n	80045d2 <_sbrk_r+0x1a>
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	b103      	cbz	r3, 80045d2 <_sbrk_r+0x1a>
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	bd38      	pop	{r3, r4, r5, pc}
 80045d4:	200004a4 	.word	0x200004a4

080045d8 <__assert_func>:
 80045d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045da:	4614      	mov	r4, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <__assert_func+0x2c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4605      	mov	r5, r0
 80045e4:	68d8      	ldr	r0, [r3, #12]
 80045e6:	b954      	cbnz	r4, 80045fe <__assert_func+0x26>
 80045e8:	4b07      	ldr	r3, [pc, #28]	@ (8004608 <__assert_func+0x30>)
 80045ea:	461c      	mov	r4, r3
 80045ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80045f0:	9100      	str	r1, [sp, #0]
 80045f2:	462b      	mov	r3, r5
 80045f4:	4905      	ldr	r1, [pc, #20]	@ (800460c <__assert_func+0x34>)
 80045f6:	f000 f86f 	bl	80046d8 <fiprintf>
 80045fa:	f000 f87f 	bl	80046fc <abort>
 80045fe:	4b04      	ldr	r3, [pc, #16]	@ (8004610 <__assert_func+0x38>)
 8004600:	e7f4      	b.n	80045ec <__assert_func+0x14>
 8004602:	bf00      	nop
 8004604:	2000000c 	.word	0x2000000c
 8004608:	08004f4e 	.word	0x08004f4e
 800460c:	08004f20 	.word	0x08004f20
 8004610:	08004f13 	.word	0x08004f13

08004614 <_calloc_r>:
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	fba1 5402 	umull	r5, r4, r1, r2
 800461a:	b93c      	cbnz	r4, 800462c <_calloc_r+0x18>
 800461c:	4629      	mov	r1, r5
 800461e:	f7ff f99f 	bl	8003960 <_malloc_r>
 8004622:	4606      	mov	r6, r0
 8004624:	b928      	cbnz	r0, 8004632 <_calloc_r+0x1e>
 8004626:	2600      	movs	r6, #0
 8004628:	4630      	mov	r0, r6
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	220c      	movs	r2, #12
 800462e:	6002      	str	r2, [r0, #0]
 8004630:	e7f9      	b.n	8004626 <_calloc_r+0x12>
 8004632:	462a      	mov	r2, r5
 8004634:	4621      	mov	r1, r4
 8004636:	f7fe fa42 	bl	8002abe <memset>
 800463a:	e7f5      	b.n	8004628 <_calloc_r+0x14>

0800463c <__ascii_mbtowc>:
 800463c:	b082      	sub	sp, #8
 800463e:	b901      	cbnz	r1, 8004642 <__ascii_mbtowc+0x6>
 8004640:	a901      	add	r1, sp, #4
 8004642:	b142      	cbz	r2, 8004656 <__ascii_mbtowc+0x1a>
 8004644:	b14b      	cbz	r3, 800465a <__ascii_mbtowc+0x1e>
 8004646:	7813      	ldrb	r3, [r2, #0]
 8004648:	600b      	str	r3, [r1, #0]
 800464a:	7812      	ldrb	r2, [r2, #0]
 800464c:	1e10      	subs	r0, r2, #0
 800464e:	bf18      	it	ne
 8004650:	2001      	movne	r0, #1
 8004652:	b002      	add	sp, #8
 8004654:	4770      	bx	lr
 8004656:	4610      	mov	r0, r2
 8004658:	e7fb      	b.n	8004652 <__ascii_mbtowc+0x16>
 800465a:	f06f 0001 	mvn.w	r0, #1
 800465e:	e7f8      	b.n	8004652 <__ascii_mbtowc+0x16>

08004660 <_realloc_r>:
 8004660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004664:	4680      	mov	r8, r0
 8004666:	4615      	mov	r5, r2
 8004668:	460c      	mov	r4, r1
 800466a:	b921      	cbnz	r1, 8004676 <_realloc_r+0x16>
 800466c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004670:	4611      	mov	r1, r2
 8004672:	f7ff b975 	b.w	8003960 <_malloc_r>
 8004676:	b92a      	cbnz	r2, 8004684 <_realloc_r+0x24>
 8004678:	f7ff f8fe 	bl	8003878 <_free_r>
 800467c:	2400      	movs	r4, #0
 800467e:	4620      	mov	r0, r4
 8004680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004684:	f000 f841 	bl	800470a <_malloc_usable_size_r>
 8004688:	4285      	cmp	r5, r0
 800468a:	4606      	mov	r6, r0
 800468c:	d802      	bhi.n	8004694 <_realloc_r+0x34>
 800468e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004692:	d8f4      	bhi.n	800467e <_realloc_r+0x1e>
 8004694:	4629      	mov	r1, r5
 8004696:	4640      	mov	r0, r8
 8004698:	f7ff f962 	bl	8003960 <_malloc_r>
 800469c:	4607      	mov	r7, r0
 800469e:	2800      	cmp	r0, #0
 80046a0:	d0ec      	beq.n	800467c <_realloc_r+0x1c>
 80046a2:	42b5      	cmp	r5, r6
 80046a4:	462a      	mov	r2, r5
 80046a6:	4621      	mov	r1, r4
 80046a8:	bf28      	it	cs
 80046aa:	4632      	movcs	r2, r6
 80046ac:	f7fe fa87 	bl	8002bbe <memcpy>
 80046b0:	4621      	mov	r1, r4
 80046b2:	4640      	mov	r0, r8
 80046b4:	f7ff f8e0 	bl	8003878 <_free_r>
 80046b8:	463c      	mov	r4, r7
 80046ba:	e7e0      	b.n	800467e <_realloc_r+0x1e>

080046bc <__ascii_wctomb>:
 80046bc:	4603      	mov	r3, r0
 80046be:	4608      	mov	r0, r1
 80046c0:	b141      	cbz	r1, 80046d4 <__ascii_wctomb+0x18>
 80046c2:	2aff      	cmp	r2, #255	@ 0xff
 80046c4:	d904      	bls.n	80046d0 <__ascii_wctomb+0x14>
 80046c6:	228a      	movs	r2, #138	@ 0x8a
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f04f 30ff 	mov.w	r0, #4294967295
 80046ce:	4770      	bx	lr
 80046d0:	700a      	strb	r2, [r1, #0]
 80046d2:	2001      	movs	r0, #1
 80046d4:	4770      	bx	lr
	...

080046d8 <fiprintf>:
 80046d8:	b40e      	push	{r1, r2, r3}
 80046da:	b503      	push	{r0, r1, lr}
 80046dc:	4601      	mov	r1, r0
 80046de:	ab03      	add	r3, sp, #12
 80046e0:	4805      	ldr	r0, [pc, #20]	@ (80046f8 <fiprintf+0x20>)
 80046e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80046e6:	6800      	ldr	r0, [r0, #0]
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	f000 f83f 	bl	800476c <_vfiprintf_r>
 80046ee:	b002      	add	sp, #8
 80046f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046f4:	b003      	add	sp, #12
 80046f6:	4770      	bx	lr
 80046f8:	2000000c 	.word	0x2000000c

080046fc <abort>:
 80046fc:	b508      	push	{r3, lr}
 80046fe:	2006      	movs	r0, #6
 8004700:	f000 fa08 	bl	8004b14 <raise>
 8004704:	2001      	movs	r0, #1
 8004706:	f7fd fb74 	bl	8001df2 <_exit>

0800470a <_malloc_usable_size_r>:
 800470a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800470e:	1f18      	subs	r0, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	bfbc      	itt	lt
 8004714:	580b      	ldrlt	r3, [r1, r0]
 8004716:	18c0      	addlt	r0, r0, r3
 8004718:	4770      	bx	lr

0800471a <__sfputc_r>:
 800471a:	6893      	ldr	r3, [r2, #8]
 800471c:	3b01      	subs	r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	b410      	push	{r4}
 8004722:	6093      	str	r3, [r2, #8]
 8004724:	da08      	bge.n	8004738 <__sfputc_r+0x1e>
 8004726:	6994      	ldr	r4, [r2, #24]
 8004728:	42a3      	cmp	r3, r4
 800472a:	db01      	blt.n	8004730 <__sfputc_r+0x16>
 800472c:	290a      	cmp	r1, #10
 800472e:	d103      	bne.n	8004738 <__sfputc_r+0x1e>
 8004730:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004734:	f000 b932 	b.w	800499c <__swbuf_r>
 8004738:	6813      	ldr	r3, [r2, #0]
 800473a:	1c58      	adds	r0, r3, #1
 800473c:	6010      	str	r0, [r2, #0]
 800473e:	7019      	strb	r1, [r3, #0]
 8004740:	4608      	mov	r0, r1
 8004742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004746:	4770      	bx	lr

08004748 <__sfputs_r>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	4606      	mov	r6, r0
 800474c:	460f      	mov	r7, r1
 800474e:	4614      	mov	r4, r2
 8004750:	18d5      	adds	r5, r2, r3
 8004752:	42ac      	cmp	r4, r5
 8004754:	d101      	bne.n	800475a <__sfputs_r+0x12>
 8004756:	2000      	movs	r0, #0
 8004758:	e007      	b.n	800476a <__sfputs_r+0x22>
 800475a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800475e:	463a      	mov	r2, r7
 8004760:	4630      	mov	r0, r6
 8004762:	f7ff ffda 	bl	800471a <__sfputc_r>
 8004766:	1c43      	adds	r3, r0, #1
 8004768:	d1f3      	bne.n	8004752 <__sfputs_r+0xa>
 800476a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800476c <_vfiprintf_r>:
 800476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004770:	460d      	mov	r5, r1
 8004772:	b09d      	sub	sp, #116	@ 0x74
 8004774:	4614      	mov	r4, r2
 8004776:	4698      	mov	r8, r3
 8004778:	4606      	mov	r6, r0
 800477a:	b118      	cbz	r0, 8004784 <_vfiprintf_r+0x18>
 800477c:	6a03      	ldr	r3, [r0, #32]
 800477e:	b90b      	cbnz	r3, 8004784 <_vfiprintf_r+0x18>
 8004780:	f7fe f904 	bl	800298c <__sinit>
 8004784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004786:	07d9      	lsls	r1, r3, #31
 8004788:	d405      	bmi.n	8004796 <_vfiprintf_r+0x2a>
 800478a:	89ab      	ldrh	r3, [r5, #12]
 800478c:	059a      	lsls	r2, r3, #22
 800478e:	d402      	bmi.n	8004796 <_vfiprintf_r+0x2a>
 8004790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004792:	f7fe fa12 	bl	8002bba <__retarget_lock_acquire_recursive>
 8004796:	89ab      	ldrh	r3, [r5, #12]
 8004798:	071b      	lsls	r3, r3, #28
 800479a:	d501      	bpl.n	80047a0 <_vfiprintf_r+0x34>
 800479c:	692b      	ldr	r3, [r5, #16]
 800479e:	b99b      	cbnz	r3, 80047c8 <_vfiprintf_r+0x5c>
 80047a0:	4629      	mov	r1, r5
 80047a2:	4630      	mov	r0, r6
 80047a4:	f000 f938 	bl	8004a18 <__swsetup_r>
 80047a8:	b170      	cbz	r0, 80047c8 <_vfiprintf_r+0x5c>
 80047aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047ac:	07dc      	lsls	r4, r3, #31
 80047ae:	d504      	bpl.n	80047ba <_vfiprintf_r+0x4e>
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295
 80047b4:	b01d      	add	sp, #116	@ 0x74
 80047b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ba:	89ab      	ldrh	r3, [r5, #12]
 80047bc:	0598      	lsls	r0, r3, #22
 80047be:	d4f7      	bmi.n	80047b0 <_vfiprintf_r+0x44>
 80047c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047c2:	f7fe f9fb 	bl	8002bbc <__retarget_lock_release_recursive>
 80047c6:	e7f3      	b.n	80047b0 <_vfiprintf_r+0x44>
 80047c8:	2300      	movs	r3, #0
 80047ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80047cc:	2320      	movs	r3, #32
 80047ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80047d6:	2330      	movs	r3, #48	@ 0x30
 80047d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004988 <_vfiprintf_r+0x21c>
 80047dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047e0:	f04f 0901 	mov.w	r9, #1
 80047e4:	4623      	mov	r3, r4
 80047e6:	469a      	mov	sl, r3
 80047e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ec:	b10a      	cbz	r2, 80047f2 <_vfiprintf_r+0x86>
 80047ee:	2a25      	cmp	r2, #37	@ 0x25
 80047f0:	d1f9      	bne.n	80047e6 <_vfiprintf_r+0x7a>
 80047f2:	ebba 0b04 	subs.w	fp, sl, r4
 80047f6:	d00b      	beq.n	8004810 <_vfiprintf_r+0xa4>
 80047f8:	465b      	mov	r3, fp
 80047fa:	4622      	mov	r2, r4
 80047fc:	4629      	mov	r1, r5
 80047fe:	4630      	mov	r0, r6
 8004800:	f7ff ffa2 	bl	8004748 <__sfputs_r>
 8004804:	3001      	adds	r0, #1
 8004806:	f000 80a7 	beq.w	8004958 <_vfiprintf_r+0x1ec>
 800480a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800480c:	445a      	add	r2, fp
 800480e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004810:	f89a 3000 	ldrb.w	r3, [sl]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 809f 	beq.w	8004958 <_vfiprintf_r+0x1ec>
 800481a:	2300      	movs	r3, #0
 800481c:	f04f 32ff 	mov.w	r2, #4294967295
 8004820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004824:	f10a 0a01 	add.w	sl, sl, #1
 8004828:	9304      	str	r3, [sp, #16]
 800482a:	9307      	str	r3, [sp, #28]
 800482c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004830:	931a      	str	r3, [sp, #104]	@ 0x68
 8004832:	4654      	mov	r4, sl
 8004834:	2205      	movs	r2, #5
 8004836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800483a:	4853      	ldr	r0, [pc, #332]	@ (8004988 <_vfiprintf_r+0x21c>)
 800483c:	f7fb fcd0 	bl	80001e0 <memchr>
 8004840:	9a04      	ldr	r2, [sp, #16]
 8004842:	b9d8      	cbnz	r0, 800487c <_vfiprintf_r+0x110>
 8004844:	06d1      	lsls	r1, r2, #27
 8004846:	bf44      	itt	mi
 8004848:	2320      	movmi	r3, #32
 800484a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800484e:	0713      	lsls	r3, r2, #28
 8004850:	bf44      	itt	mi
 8004852:	232b      	movmi	r3, #43	@ 0x2b
 8004854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004858:	f89a 3000 	ldrb.w	r3, [sl]
 800485c:	2b2a      	cmp	r3, #42	@ 0x2a
 800485e:	d015      	beq.n	800488c <_vfiprintf_r+0x120>
 8004860:	9a07      	ldr	r2, [sp, #28]
 8004862:	4654      	mov	r4, sl
 8004864:	2000      	movs	r0, #0
 8004866:	f04f 0c0a 	mov.w	ip, #10
 800486a:	4621      	mov	r1, r4
 800486c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004870:	3b30      	subs	r3, #48	@ 0x30
 8004872:	2b09      	cmp	r3, #9
 8004874:	d94b      	bls.n	800490e <_vfiprintf_r+0x1a2>
 8004876:	b1b0      	cbz	r0, 80048a6 <_vfiprintf_r+0x13a>
 8004878:	9207      	str	r2, [sp, #28]
 800487a:	e014      	b.n	80048a6 <_vfiprintf_r+0x13a>
 800487c:	eba0 0308 	sub.w	r3, r0, r8
 8004880:	fa09 f303 	lsl.w	r3, r9, r3
 8004884:	4313      	orrs	r3, r2
 8004886:	9304      	str	r3, [sp, #16]
 8004888:	46a2      	mov	sl, r4
 800488a:	e7d2      	b.n	8004832 <_vfiprintf_r+0xc6>
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	1d19      	adds	r1, r3, #4
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	9103      	str	r1, [sp, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	bfbb      	ittet	lt
 8004898:	425b      	neglt	r3, r3
 800489a:	f042 0202 	orrlt.w	r2, r2, #2
 800489e:	9307      	strge	r3, [sp, #28]
 80048a0:	9307      	strlt	r3, [sp, #28]
 80048a2:	bfb8      	it	lt
 80048a4:	9204      	strlt	r2, [sp, #16]
 80048a6:	7823      	ldrb	r3, [r4, #0]
 80048a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80048aa:	d10a      	bne.n	80048c2 <_vfiprintf_r+0x156>
 80048ac:	7863      	ldrb	r3, [r4, #1]
 80048ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80048b0:	d132      	bne.n	8004918 <_vfiprintf_r+0x1ac>
 80048b2:	9b03      	ldr	r3, [sp, #12]
 80048b4:	1d1a      	adds	r2, r3, #4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	9203      	str	r2, [sp, #12]
 80048ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048be:	3402      	adds	r4, #2
 80048c0:	9305      	str	r3, [sp, #20]
 80048c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004998 <_vfiprintf_r+0x22c>
 80048c6:	7821      	ldrb	r1, [r4, #0]
 80048c8:	2203      	movs	r2, #3
 80048ca:	4650      	mov	r0, sl
 80048cc:	f7fb fc88 	bl	80001e0 <memchr>
 80048d0:	b138      	cbz	r0, 80048e2 <_vfiprintf_r+0x176>
 80048d2:	9b04      	ldr	r3, [sp, #16]
 80048d4:	eba0 000a 	sub.w	r0, r0, sl
 80048d8:	2240      	movs	r2, #64	@ 0x40
 80048da:	4082      	lsls	r2, r0
 80048dc:	4313      	orrs	r3, r2
 80048de:	3401      	adds	r4, #1
 80048e0:	9304      	str	r3, [sp, #16]
 80048e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e6:	4829      	ldr	r0, [pc, #164]	@ (800498c <_vfiprintf_r+0x220>)
 80048e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048ec:	2206      	movs	r2, #6
 80048ee:	f7fb fc77 	bl	80001e0 <memchr>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d03f      	beq.n	8004976 <_vfiprintf_r+0x20a>
 80048f6:	4b26      	ldr	r3, [pc, #152]	@ (8004990 <_vfiprintf_r+0x224>)
 80048f8:	bb1b      	cbnz	r3, 8004942 <_vfiprintf_r+0x1d6>
 80048fa:	9b03      	ldr	r3, [sp, #12]
 80048fc:	3307      	adds	r3, #7
 80048fe:	f023 0307 	bic.w	r3, r3, #7
 8004902:	3308      	adds	r3, #8
 8004904:	9303      	str	r3, [sp, #12]
 8004906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004908:	443b      	add	r3, r7
 800490a:	9309      	str	r3, [sp, #36]	@ 0x24
 800490c:	e76a      	b.n	80047e4 <_vfiprintf_r+0x78>
 800490e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004912:	460c      	mov	r4, r1
 8004914:	2001      	movs	r0, #1
 8004916:	e7a8      	b.n	800486a <_vfiprintf_r+0xfe>
 8004918:	2300      	movs	r3, #0
 800491a:	3401      	adds	r4, #1
 800491c:	9305      	str	r3, [sp, #20]
 800491e:	4619      	mov	r1, r3
 8004920:	f04f 0c0a 	mov.w	ip, #10
 8004924:	4620      	mov	r0, r4
 8004926:	f810 2b01 	ldrb.w	r2, [r0], #1
 800492a:	3a30      	subs	r2, #48	@ 0x30
 800492c:	2a09      	cmp	r2, #9
 800492e:	d903      	bls.n	8004938 <_vfiprintf_r+0x1cc>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0c6      	beq.n	80048c2 <_vfiprintf_r+0x156>
 8004934:	9105      	str	r1, [sp, #20]
 8004936:	e7c4      	b.n	80048c2 <_vfiprintf_r+0x156>
 8004938:	fb0c 2101 	mla	r1, ip, r1, r2
 800493c:	4604      	mov	r4, r0
 800493e:	2301      	movs	r3, #1
 8004940:	e7f0      	b.n	8004924 <_vfiprintf_r+0x1b8>
 8004942:	ab03      	add	r3, sp, #12
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	462a      	mov	r2, r5
 8004948:	4b12      	ldr	r3, [pc, #72]	@ (8004994 <_vfiprintf_r+0x228>)
 800494a:	a904      	add	r1, sp, #16
 800494c:	4630      	mov	r0, r6
 800494e:	f7fd fbd9 	bl	8002104 <_printf_float>
 8004952:	4607      	mov	r7, r0
 8004954:	1c78      	adds	r0, r7, #1
 8004956:	d1d6      	bne.n	8004906 <_vfiprintf_r+0x19a>
 8004958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800495a:	07d9      	lsls	r1, r3, #31
 800495c:	d405      	bmi.n	800496a <_vfiprintf_r+0x1fe>
 800495e:	89ab      	ldrh	r3, [r5, #12]
 8004960:	059a      	lsls	r2, r3, #22
 8004962:	d402      	bmi.n	800496a <_vfiprintf_r+0x1fe>
 8004964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004966:	f7fe f929 	bl	8002bbc <__retarget_lock_release_recursive>
 800496a:	89ab      	ldrh	r3, [r5, #12]
 800496c:	065b      	lsls	r3, r3, #25
 800496e:	f53f af1f 	bmi.w	80047b0 <_vfiprintf_r+0x44>
 8004972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004974:	e71e      	b.n	80047b4 <_vfiprintf_r+0x48>
 8004976:	ab03      	add	r3, sp, #12
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	462a      	mov	r2, r5
 800497c:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <_vfiprintf_r+0x228>)
 800497e:	a904      	add	r1, sp, #16
 8004980:	4630      	mov	r0, r6
 8004982:	f7fd fe57 	bl	8002634 <_printf_i>
 8004986:	e7e4      	b.n	8004952 <_vfiprintf_r+0x1e6>
 8004988:	08004ef8 	.word	0x08004ef8
 800498c:	08004f02 	.word	0x08004f02
 8004990:	08002105 	.word	0x08002105
 8004994:	08004749 	.word	0x08004749
 8004998:	08004efe 	.word	0x08004efe

0800499c <__swbuf_r>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	460e      	mov	r6, r1
 80049a0:	4614      	mov	r4, r2
 80049a2:	4605      	mov	r5, r0
 80049a4:	b118      	cbz	r0, 80049ae <__swbuf_r+0x12>
 80049a6:	6a03      	ldr	r3, [r0, #32]
 80049a8:	b90b      	cbnz	r3, 80049ae <__swbuf_r+0x12>
 80049aa:	f7fd ffef 	bl	800298c <__sinit>
 80049ae:	69a3      	ldr	r3, [r4, #24]
 80049b0:	60a3      	str	r3, [r4, #8]
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	071a      	lsls	r2, r3, #28
 80049b6:	d501      	bpl.n	80049bc <__swbuf_r+0x20>
 80049b8:	6923      	ldr	r3, [r4, #16]
 80049ba:	b943      	cbnz	r3, 80049ce <__swbuf_r+0x32>
 80049bc:	4621      	mov	r1, r4
 80049be:	4628      	mov	r0, r5
 80049c0:	f000 f82a 	bl	8004a18 <__swsetup_r>
 80049c4:	b118      	cbz	r0, 80049ce <__swbuf_r+0x32>
 80049c6:	f04f 37ff 	mov.w	r7, #4294967295
 80049ca:	4638      	mov	r0, r7
 80049cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	6922      	ldr	r2, [r4, #16]
 80049d2:	1a98      	subs	r0, r3, r2
 80049d4:	6963      	ldr	r3, [r4, #20]
 80049d6:	b2f6      	uxtb	r6, r6
 80049d8:	4283      	cmp	r3, r0
 80049da:	4637      	mov	r7, r6
 80049dc:	dc05      	bgt.n	80049ea <__swbuf_r+0x4e>
 80049de:	4621      	mov	r1, r4
 80049e0:	4628      	mov	r0, r5
 80049e2:	f7ff fda7 	bl	8004534 <_fflush_r>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d1ed      	bne.n	80049c6 <__swbuf_r+0x2a>
 80049ea:	68a3      	ldr	r3, [r4, #8]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	60a3      	str	r3, [r4, #8]
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	6022      	str	r2, [r4, #0]
 80049f6:	701e      	strb	r6, [r3, #0]
 80049f8:	6962      	ldr	r2, [r4, #20]
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d004      	beq.n	8004a0a <__swbuf_r+0x6e>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	07db      	lsls	r3, r3, #31
 8004a04:	d5e1      	bpl.n	80049ca <__swbuf_r+0x2e>
 8004a06:	2e0a      	cmp	r6, #10
 8004a08:	d1df      	bne.n	80049ca <__swbuf_r+0x2e>
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f7ff fd91 	bl	8004534 <_fflush_r>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d0d9      	beq.n	80049ca <__swbuf_r+0x2e>
 8004a16:	e7d6      	b.n	80049c6 <__swbuf_r+0x2a>

08004a18 <__swsetup_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4b29      	ldr	r3, [pc, #164]	@ (8004ac0 <__swsetup_r+0xa8>)
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	460c      	mov	r4, r1
 8004a22:	b118      	cbz	r0, 8004a2c <__swsetup_r+0x14>
 8004a24:	6a03      	ldr	r3, [r0, #32]
 8004a26:	b90b      	cbnz	r3, 8004a2c <__swsetup_r+0x14>
 8004a28:	f7fd ffb0 	bl	800298c <__sinit>
 8004a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a30:	0719      	lsls	r1, r3, #28
 8004a32:	d422      	bmi.n	8004a7a <__swsetup_r+0x62>
 8004a34:	06da      	lsls	r2, r3, #27
 8004a36:	d407      	bmi.n	8004a48 <__swsetup_r+0x30>
 8004a38:	2209      	movs	r2, #9
 8004a3a:	602a      	str	r2, [r5, #0]
 8004a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a40:	81a3      	strh	r3, [r4, #12]
 8004a42:	f04f 30ff 	mov.w	r0, #4294967295
 8004a46:	e033      	b.n	8004ab0 <__swsetup_r+0x98>
 8004a48:	0758      	lsls	r0, r3, #29
 8004a4a:	d512      	bpl.n	8004a72 <__swsetup_r+0x5a>
 8004a4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a4e:	b141      	cbz	r1, 8004a62 <__swsetup_r+0x4a>
 8004a50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a54:	4299      	cmp	r1, r3
 8004a56:	d002      	beq.n	8004a5e <__swsetup_r+0x46>
 8004a58:	4628      	mov	r0, r5
 8004a5a:	f7fe ff0d 	bl	8003878 <_free_r>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a62:	89a3      	ldrh	r3, [r4, #12]
 8004a64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a68:	81a3      	strh	r3, [r4, #12]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6063      	str	r3, [r4, #4]
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	f043 0308 	orr.w	r3, r3, #8
 8004a78:	81a3      	strh	r3, [r4, #12]
 8004a7a:	6923      	ldr	r3, [r4, #16]
 8004a7c:	b94b      	cbnz	r3, 8004a92 <__swsetup_r+0x7a>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a88:	d003      	beq.n	8004a92 <__swsetup_r+0x7a>
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f000 f883 	bl	8004b98 <__smakebuf_r>
 8004a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a96:	f013 0201 	ands.w	r2, r3, #1
 8004a9a:	d00a      	beq.n	8004ab2 <__swsetup_r+0x9a>
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	60a2      	str	r2, [r4, #8]
 8004aa0:	6962      	ldr	r2, [r4, #20]
 8004aa2:	4252      	negs	r2, r2
 8004aa4:	61a2      	str	r2, [r4, #24]
 8004aa6:	6922      	ldr	r2, [r4, #16]
 8004aa8:	b942      	cbnz	r2, 8004abc <__swsetup_r+0xa4>
 8004aaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004aae:	d1c5      	bne.n	8004a3c <__swsetup_r+0x24>
 8004ab0:	bd38      	pop	{r3, r4, r5, pc}
 8004ab2:	0799      	lsls	r1, r3, #30
 8004ab4:	bf58      	it	pl
 8004ab6:	6962      	ldrpl	r2, [r4, #20]
 8004ab8:	60a2      	str	r2, [r4, #8]
 8004aba:	e7f4      	b.n	8004aa6 <__swsetup_r+0x8e>
 8004abc:	2000      	movs	r0, #0
 8004abe:	e7f7      	b.n	8004ab0 <__swsetup_r+0x98>
 8004ac0:	2000000c 	.word	0x2000000c

08004ac4 <_raise_r>:
 8004ac4:	291f      	cmp	r1, #31
 8004ac6:	b538      	push	{r3, r4, r5, lr}
 8004ac8:	4605      	mov	r5, r0
 8004aca:	460c      	mov	r4, r1
 8004acc:	d904      	bls.n	8004ad8 <_raise_r+0x14>
 8004ace:	2316      	movs	r3, #22
 8004ad0:	6003      	str	r3, [r0, #0]
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004ada:	b112      	cbz	r2, 8004ae2 <_raise_r+0x1e>
 8004adc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ae0:	b94b      	cbnz	r3, 8004af6 <_raise_r+0x32>
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f000 f830 	bl	8004b48 <_getpid_r>
 8004ae8:	4622      	mov	r2, r4
 8004aea:	4601      	mov	r1, r0
 8004aec:	4628      	mov	r0, r5
 8004aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004af2:	f000 b817 	b.w	8004b24 <_kill_r>
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d00a      	beq.n	8004b10 <_raise_r+0x4c>
 8004afa:	1c59      	adds	r1, r3, #1
 8004afc:	d103      	bne.n	8004b06 <_raise_r+0x42>
 8004afe:	2316      	movs	r3, #22
 8004b00:	6003      	str	r3, [r0, #0]
 8004b02:	2001      	movs	r0, #1
 8004b04:	e7e7      	b.n	8004ad6 <_raise_r+0x12>
 8004b06:	2100      	movs	r1, #0
 8004b08:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	4798      	blx	r3
 8004b10:	2000      	movs	r0, #0
 8004b12:	e7e0      	b.n	8004ad6 <_raise_r+0x12>

08004b14 <raise>:
 8004b14:	4b02      	ldr	r3, [pc, #8]	@ (8004b20 <raise+0xc>)
 8004b16:	4601      	mov	r1, r0
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	f7ff bfd3 	b.w	8004ac4 <_raise_r>
 8004b1e:	bf00      	nop
 8004b20:	2000000c 	.word	0x2000000c

08004b24 <_kill_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	4d07      	ldr	r5, [pc, #28]	@ (8004b44 <_kill_r+0x20>)
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	4611      	mov	r1, r2
 8004b30:	602b      	str	r3, [r5, #0]
 8004b32:	f7fd f94e 	bl	8001dd2 <_kill>
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	d102      	bne.n	8004b40 <_kill_r+0x1c>
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	b103      	cbz	r3, 8004b40 <_kill_r+0x1c>
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	bd38      	pop	{r3, r4, r5, pc}
 8004b42:	bf00      	nop
 8004b44:	200004a4 	.word	0x200004a4

08004b48 <_getpid_r>:
 8004b48:	f7fd b93b 	b.w	8001dc2 <_getpid>

08004b4c <__swhatbuf_r>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	460c      	mov	r4, r1
 8004b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b54:	2900      	cmp	r1, #0
 8004b56:	b096      	sub	sp, #88	@ 0x58
 8004b58:	4615      	mov	r5, r2
 8004b5a:	461e      	mov	r6, r3
 8004b5c:	da0d      	bge.n	8004b7a <__swhatbuf_r+0x2e>
 8004b5e:	89a3      	ldrh	r3, [r4, #12]
 8004b60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	bf14      	ite	ne
 8004b6a:	2340      	movne	r3, #64	@ 0x40
 8004b6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b70:	2000      	movs	r0, #0
 8004b72:	6031      	str	r1, [r6, #0]
 8004b74:	602b      	str	r3, [r5, #0]
 8004b76:	b016      	add	sp, #88	@ 0x58
 8004b78:	bd70      	pop	{r4, r5, r6, pc}
 8004b7a:	466a      	mov	r2, sp
 8004b7c:	f000 f848 	bl	8004c10 <_fstat_r>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	dbec      	blt.n	8004b5e <__swhatbuf_r+0x12>
 8004b84:	9901      	ldr	r1, [sp, #4]
 8004b86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b8e:	4259      	negs	r1, r3
 8004b90:	4159      	adcs	r1, r3
 8004b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b96:	e7eb      	b.n	8004b70 <__swhatbuf_r+0x24>

08004b98 <__smakebuf_r>:
 8004b98:	898b      	ldrh	r3, [r1, #12]
 8004b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b9c:	079d      	lsls	r5, r3, #30
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	d507      	bpl.n	8004bb4 <__smakebuf_r+0x1c>
 8004ba4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	6123      	str	r3, [r4, #16]
 8004bac:	2301      	movs	r3, #1
 8004bae:	6163      	str	r3, [r4, #20]
 8004bb0:	b003      	add	sp, #12
 8004bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb4:	ab01      	add	r3, sp, #4
 8004bb6:	466a      	mov	r2, sp
 8004bb8:	f7ff ffc8 	bl	8004b4c <__swhatbuf_r>
 8004bbc:	9f00      	ldr	r7, [sp, #0]
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	4639      	mov	r1, r7
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f7fe fecc 	bl	8003960 <_malloc_r>
 8004bc8:	b948      	cbnz	r0, 8004bde <__smakebuf_r+0x46>
 8004bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bce:	059a      	lsls	r2, r3, #22
 8004bd0:	d4ee      	bmi.n	8004bb0 <__smakebuf_r+0x18>
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	f043 0302 	orr.w	r3, r3, #2
 8004bda:	81a3      	strh	r3, [r4, #12]
 8004bdc:	e7e2      	b.n	8004ba4 <__smakebuf_r+0xc>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	6020      	str	r0, [r4, #0]
 8004be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be6:	81a3      	strh	r3, [r4, #12]
 8004be8:	9b01      	ldr	r3, [sp, #4]
 8004bea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004bee:	b15b      	cbz	r3, 8004c08 <__smakebuf_r+0x70>
 8004bf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	f000 f81d 	bl	8004c34 <_isatty_r>
 8004bfa:	b128      	cbz	r0, 8004c08 <__smakebuf_r+0x70>
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	81a3      	strh	r3, [r4, #12]
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	431d      	orrs	r5, r3
 8004c0c:	81a5      	strh	r5, [r4, #12]
 8004c0e:	e7cf      	b.n	8004bb0 <__smakebuf_r+0x18>

08004c10 <_fstat_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4d07      	ldr	r5, [pc, #28]	@ (8004c30 <_fstat_r+0x20>)
 8004c14:	2300      	movs	r3, #0
 8004c16:	4604      	mov	r4, r0
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	602b      	str	r3, [r5, #0]
 8004c1e:	f7fd f938 	bl	8001e92 <_fstat>
 8004c22:	1c43      	adds	r3, r0, #1
 8004c24:	d102      	bne.n	8004c2c <_fstat_r+0x1c>
 8004c26:	682b      	ldr	r3, [r5, #0]
 8004c28:	b103      	cbz	r3, 8004c2c <_fstat_r+0x1c>
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	bd38      	pop	{r3, r4, r5, pc}
 8004c2e:	bf00      	nop
 8004c30:	200004a4 	.word	0x200004a4

08004c34 <_isatty_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4d06      	ldr	r5, [pc, #24]	@ (8004c50 <_isatty_r+0x1c>)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4608      	mov	r0, r1
 8004c3e:	602b      	str	r3, [r5, #0]
 8004c40:	f7fd f937 	bl	8001eb2 <_isatty>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	d102      	bne.n	8004c4e <_isatty_r+0x1a>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	b103      	cbz	r3, 8004c4e <_isatty_r+0x1a>
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
 8004c50:	200004a4 	.word	0x200004a4

08004c54 <_init>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr

08004c60 <_fini>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr
