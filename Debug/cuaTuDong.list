
cuaTuDong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08004558  08004558  00005558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c8  080048c8  000061cc  2**0
                  CONTENTS
  4 .ARM          00000008  080048c8  080048c8  000058c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d0  080048d0  000061cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d0  080048d0  000058d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048d4  080048d4  000058d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  080048d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  200001cc  08004aa4  000061cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08004aa4  000064bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c7c  00000000  00000000  000061fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000110d  00000000  00000000  00009e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b0  00000000  00000000  0000af88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000028d  00000000  00000000  0000b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000104c3  00000000  00000000  0000b5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000060e3  00000000  00000000  0001ba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085fa9  00000000  00000000  00021b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7b14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b7c  00000000  00000000  000a7b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000a96d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800453c 	.word	0x0800453c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d0 	.word	0x200001d0
 80001dc:	0800453c 	.word	0x0800453c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	@ (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <get_gpio_port_source>:

// Mảng lưu trữ các callback cho từng EXTI line (0-15)
static exti_callback_t g_exti_callbacks[16] = {NULL};

// Helper function để lấy port source cho SYSCFG_EXTICR
static uint8_t get_gpio_port_source(GPIO_TypeDef* GPIOx) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    if (GPIOx == GPIOA) return 0x00U;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a15      	ldr	r2, [pc, #84]	@ (8000ca8 <get_gpio_port_source+0x60>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d101      	bne.n	8000c5c <get_gpio_port_source+0x14>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e01e      	b.n	8000c9a <get_gpio_port_source+0x52>
    if (GPIOx == GPIOB) return 0x01U;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a13      	ldr	r2, [pc, #76]	@ (8000cac <get_gpio_port_source+0x64>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <get_gpio_port_source+0x20>
 8000c64:	2301      	movs	r3, #1
 8000c66:	e018      	b.n	8000c9a <get_gpio_port_source+0x52>
    if (GPIOx == GPIOC) return 0x02U;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a11      	ldr	r2, [pc, #68]	@ (8000cb0 <get_gpio_port_source+0x68>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d101      	bne.n	8000c74 <get_gpio_port_source+0x2c>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e012      	b.n	8000c9a <get_gpio_port_source+0x52>
    if (GPIOx == GPIOD) return 0x03U;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb4 <get_gpio_port_source+0x6c>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d101      	bne.n	8000c80 <get_gpio_port_source+0x38>
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e00c      	b.n	8000c9a <get_gpio_port_source+0x52>
    if (GPIOx == GPIOE) return 0x04U;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <get_gpio_port_source+0x70>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d101      	bne.n	8000c8c <get_gpio_port_source+0x44>
 8000c88:	2304      	movs	r3, #4
 8000c8a:	e006      	b.n	8000c9a <get_gpio_port_source+0x52>
    if (GPIOx == GPIOH) return 0x07U; // GPIOH là 0b111
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000cbc <get_gpio_port_source+0x74>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <get_gpio_port_source+0x50>
 8000c94:	2307      	movs	r3, #7
 8000c96:	e000      	b.n	8000c9a <get_gpio_port_source+0x52>
    return 0xFFU; // Lỗi
 8000c98:	23ff      	movs	r3, #255	@ 0xff
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020400 	.word	0x40020400
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	40020c00 	.word	0x40020c00
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40021c00 	.word	0x40021c00

08000cc0 <EXTI_InitPin>:

void EXTI_InitPin(GPIO_TypeDef* GPIOx, uint8_t pin_number, uint8_t trigger_type,
                  uint8_t priority, exti_callback_t callback) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4611      	mov	r1, r2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4603      	mov	r3, r0
 8000cd0:	70fb      	strb	r3, [r7, #3]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	70bb      	strb	r3, [r7, #2]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	707b      	strb	r3, [r7, #1]
    if (pin_number > 15) return; // Chỉ hỗ trợ pin 0-15
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	f200 80aa 	bhi.w	8000e36 <EXTI_InitPin+0x176>

    // 1. Cấu hình chân GPIO làm input (thường có pull-up hoặc pull-down)
    // Giả sử người dùng đã bật clock cho GPIOx hoặc GPIO_InitPin sẽ làm điều đó.
    // Ví dụ, cấu hình input với pull-up:
    GPIO_InitPin(GPIOx, (1U << pin_number), GPIO_MODE_INPUT, GPIO_PULL_UP,
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	b299      	uxth	r1, r3
 8000cec:	2300      	movs	r3, #0
 8000cee:	9302      	str	r3, [sp, #8]
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f9c5 	bl	800108c <GPIO_InitPin>
                 GPIO_SPEED_LOW, 0, 0); // otype và alt_func không dùng cho input thường

    // 2. Bật clock cho SYSCFG
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000d02:	4b50      	ldr	r3, [pc, #320]	@ (8000e44 <EXTI_InitPin+0x184>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a4f      	ldr	r2, [pc, #316]	@ (8000e44 <EXTI_InitPin+0x184>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44

    // 3. Kết nối EXTI Line với chân GPIO thông qua SYSCFG
    // SYSCFG_EXTICRx có 4 trường, mỗi trường 4 bit, cho 4 EXTI line.
    // EXTICR[0] cho lines 0-3, EXTICR[1] cho lines 4-7, ...
    uint8_t exti_cr_index = pin_number / 4; // 0, 1, 2, 3
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	089b      	lsrs	r3, r3, #2
 8000d12:	73bb      	strb	r3, [r7, #14]
    uint8_t exti_cr_pos = (pin_number % 4) * 4; // 0, 4, 8, 12
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	737b      	strb	r3, [r7, #13]
    uint8_t port_source = get_gpio_port_source(GPIOx);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff91 	bl	8000c48 <get_gpio_port_source>
 8000d26:	4603      	mov	r3, r0
 8000d28:	733b      	strb	r3, [r7, #12]

    if (port_source == 0xFFU) return; // Port không hợp lệ
 8000d2a:	7b3b      	ldrb	r3, [r7, #12]
 8000d2c:	2bff      	cmp	r3, #255	@ 0xff
 8000d2e:	f000 8084 	beq.w	8000e3a <EXTI_InitPin+0x17a>

    // Xóa các bit cũ và set port source mới
    SYSCFG->EXTICR[exti_cr_index] &= ~(0x0FU << exti_cr_pos);
 8000d32:	4a45      	ldr	r2, [pc, #276]	@ (8000e48 <EXTI_InitPin+0x188>)
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
 8000d36:	3302      	adds	r3, #2
 8000d38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d3c:	7b7b      	ldrb	r3, [r7, #13]
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43da      	mvns	r2, r3
 8000d46:	4840      	ldr	r0, [pc, #256]	@ (8000e48 <EXTI_InitPin+0x188>)
 8000d48:	7bbb      	ldrb	r3, [r7, #14]
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    SYSCFG->EXTICR[exti_cr_index] |= (port_source << exti_cr_pos);
 8000d52:	4a3d      	ldr	r2, [pc, #244]	@ (8000e48 <EXTI_InitPin+0x188>)
 8000d54:	7bbb      	ldrb	r3, [r7, #14]
 8000d56:	3302      	adds	r3, #2
 8000d58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d5c:	7b39      	ldrb	r1, [r7, #12]
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	4618      	mov	r0, r3
 8000d66:	4938      	ldr	r1, [pc, #224]	@ (8000e48 <EXTI_InitPin+0x188>)
 8000d68:	7bbb      	ldrb	r3, [r7, #14]
 8000d6a:	4302      	orrs	r2, r0
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // 4. Cấu hình EXTI Line
    // Bỏ mask ngắt (cho phép ngắt)
    EXTI->IMR |= (1U << pin_number);
 8000d72:	4b36      	ldr	r3, [pc, #216]	@ (8000e4c <EXTI_InitPin+0x18c>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	78fb      	ldrb	r3, [r7, #3]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	4933      	ldr	r1, [pc, #204]	@ (8000e4c <EXTI_InitPin+0x18c>)
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
    // Không dùng event mask ở đây
    // EXTI->EMR &= ~(1U << pin_number);

    // Cấu hình trigger type
    if (trigger_type == EXTI_TRIGGER_RISING || trigger_type == EXTI_TRIGGER_BOTH) {
 8000d84:	78bb      	ldrb	r3, [r7, #2]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d002      	beq.n	8000d90 <EXTI_InitPin+0xd0>
 8000d8a:	78bb      	ldrb	r3, [r7, #2]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d109      	bne.n	8000da4 <EXTI_InitPin+0xe4>
        EXTI->RTSR |= (1U << pin_number);
 8000d90:	4b2e      	ldr	r3, [pc, #184]	@ (8000e4c <EXTI_InitPin+0x18c>)
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	2101      	movs	r1, #1
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	492b      	ldr	r1, [pc, #172]	@ (8000e4c <EXTI_InitPin+0x18c>)
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	608b      	str	r3, [r1, #8]
 8000da2:	e009      	b.n	8000db8 <EXTI_InitPin+0xf8>
    } else {
        EXTI->RTSR &= ~(1U << pin_number); // Clear nếu không phải rising
 8000da4:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <EXTI_InitPin+0x18c>)
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	78fb      	ldrb	r3, [r7, #3]
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4926      	ldr	r1, [pc, #152]	@ (8000e4c <EXTI_InitPin+0x18c>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	608b      	str	r3, [r1, #8]
    }

    if (trigger_type == EXTI_TRIGGER_FALLING || trigger_type == EXTI_TRIGGER_BOTH) {
 8000db8:	78bb      	ldrb	r3, [r7, #2]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d002      	beq.n	8000dc4 <EXTI_InitPin+0x104>
 8000dbe:	78bb      	ldrb	r3, [r7, #2]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d109      	bne.n	8000dd8 <EXTI_InitPin+0x118>
        EXTI->FTSR |= (1U << pin_number);
 8000dc4:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <EXTI_InitPin+0x18c>)
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	2101      	movs	r1, #1
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	491e      	ldr	r1, [pc, #120]	@ (8000e4c <EXTI_InitPin+0x18c>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	60cb      	str	r3, [r1, #12]
 8000dd6:	e009      	b.n	8000dec <EXTI_InitPin+0x12c>
    } else {
        EXTI->FTSR &= ~(1U << pin_number); // Clear nếu không phải falling
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <EXTI_InitPin+0x18c>)
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	2101      	movs	r1, #1
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4919      	ldr	r1, [pc, #100]	@ (8000e4c <EXTI_InitPin+0x18c>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	60cb      	str	r3, [r1, #12]
    }

    // 5. Đăng ký callback
    if (pin_number < 16) {
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	2b0f      	cmp	r3, #15
 8000df0:	d804      	bhi.n	8000dfc <EXTI_InitPin+0x13c>
        g_exti_callbacks[pin_number] = callback;
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	4916      	ldr	r1, [pc, #88]	@ (8000e50 <EXTI_InitPin+0x190>)
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    // 6. Cấu hình và kích hoạt ngắt trong NVIC
    IRQn_Type irq_number;
    if (pin_number <= 4) { // EXTI0 đến EXTI4
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d804      	bhi.n	8000e0c <EXTI_InitPin+0x14c>
        irq_number = (IRQn_Type)(EXTI0_IRQn + pin_number);
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	3306      	adds	r3, #6
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e007      	b.n	8000e1c <EXTI_InitPin+0x15c>
    } else if (pin_number <= 9) { // EXTI5 đến EXTI9
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b09      	cmp	r3, #9
 8000e10:	d802      	bhi.n	8000e18 <EXTI_InitPin+0x158>
        irq_number = EXTI9_5_IRQn;
 8000e12:	2317      	movs	r3, #23
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e001      	b.n	8000e1c <EXTI_InitPin+0x15c>
    } else { // EXTI10 đến EXTI15
        irq_number = EXTI15_10_IRQn;
 8000e18:	2328      	movs	r3, #40	@ 0x28
 8000e1a:	73fb      	strb	r3, [r7, #15]
    }

    NVIC_SetPriority(irq_number, priority);
 8000e1c:	787a      	ldrb	r2, [r7, #1]
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fee5 	bl	8000bf4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(irq_number);
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fec2 	bl	8000bb8 <__NVIC_EnableIRQ>
 8000e34:	e002      	b.n	8000e3c <EXTI_InitPin+0x17c>
    if (pin_number > 15) return; // Chỉ hỗ trợ pin 0-15
 8000e36:	bf00      	nop
 8000e38:	e000      	b.n	8000e3c <EXTI_InitPin+0x17c>
    if (port_source == 0xFFU) return; // Port không hợp lệ
 8000e3a:	bf00      	nop
}
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40013800 	.word	0x40013800
 8000e4c:	40013c00 	.word	0x40013c00
 8000e50:	200001e8 	.word	0x200001e8

08000e54 <EXTI_ClearPendingBit>:

void EXTI_ClearPendingBit(uint8_t exti_line) {
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
    if (exti_line > 15) return;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d806      	bhi.n	8000e72 <EXTI_ClearPendingBit+0x1e>
    // Ghi 1 vào bit tương ứng trong Pending Register để xóa nó
    EXTI->PR = (1U << exti_line);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4a06      	ldr	r2, [pc, #24]	@ (8000e80 <EXTI_ClearPendingBit+0x2c>)
 8000e68:	2101      	movs	r1, #1
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	6153      	str	r3, [r2, #20]
 8000e70:	e000      	b.n	8000e74 <EXTI_ClearPendingBit+0x20>
    if (exti_line > 15) return;
 8000e72:	bf00      	nop
}
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40013c00 	.word	0x40013c00

08000e84 <EXTI_IRQHandler_Helper>:
// --- Trình xử lý ngắt (ISRs) ---
// Các hàm này cần được định nghĩa với tên chính xác như trong vector ngắt.
// Chúng sẽ kiểm tra cờ pending và gọi callback tương ứng.

// Helper function để xử lý logic chung trong ISR
static void EXTI_IRQHandler_Helper(uint8_t exti_line_start, uint8_t exti_line_end) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	4613      	mov	r3, r2
 8000e92:	71bb      	strb	r3, [r7, #6]
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e01c      	b.n	8000ed4 <EXTI_IRQHandler_Helper+0x50>
        // Kiểm tra cờ Pending Bit cho từng line
        if ((EXTI->PR & (1U << line)) != 0) {
 8000e9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <EXTI_IRQHandler_Helper+0x64>)
 8000e9c:	695a      	ldr	r2, [r3, #20]
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d010      	beq.n	8000ece <EXTI_IRQHandler_Helper+0x4a>
            // Xóa Pending Bit trước khi gọi callback (quan trọng!)
            EXTI_ClearPendingBit(line);
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ffd0 	bl	8000e54 <EXTI_ClearPendingBit>

            // Gọi callback nếu có
            if (g_exti_callbacks[line] != NULL) {
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <EXTI_IRQHandler_Helper+0x68>)
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <EXTI_IRQHandler_Helper+0x4a>
                g_exti_callbacks[line](line);
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <EXTI_IRQHandler_Helper+0x68>)
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4798      	blx	r3
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	7bfa      	ldrb	r2, [r7, #15]
 8000ed6:	79bb      	ldrb	r3, [r7, #6]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d9de      	bls.n	8000e9a <EXTI_IRQHandler_Helper+0x16>
            }
        }
    }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40013c00 	.word	0x40013c00
 8000eec:	200001e8 	.word	0x200001e8

08000ef0 <EXTI0_IRQHandler>:

// ISR cho EXTI Line 0
void EXTI0_IRQHandler(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(0, 0);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff ffc4 	bl	8000e84 <EXTI_IRQHandler_Helper>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <EXTI1_IRQHandler>:

// ISR cho EXTI Line 1
void EXTI1_IRQHandler(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(1, 1);
 8000f04:	2101      	movs	r1, #1
 8000f06:	2001      	movs	r0, #1
 8000f08:	f7ff ffbc 	bl	8000e84 <EXTI_IRQHandler_Helper>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <EXTI2_IRQHandler>:

// ISR cho EXTI Line 2
void EXTI2_IRQHandler(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(2, 2);
 8000f14:	2102      	movs	r1, #2
 8000f16:	2002      	movs	r0, #2
 8000f18:	f7ff ffb4 	bl	8000e84 <EXTI_IRQHandler_Helper>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <EXTI3_IRQHandler>:

// ISR cho EXTI Line 3
void EXTI3_IRQHandler(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(3, 3);
 8000f24:	2103      	movs	r1, #3
 8000f26:	2003      	movs	r0, #3
 8000f28:	f7ff ffac 	bl	8000e84 <EXTI_IRQHandler_Helper>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <EXTI4_IRQHandler>:

// ISR cho EXTI Line 4
void EXTI4_IRQHandler(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(4, 4);
 8000f34:	2104      	movs	r1, #4
 8000f36:	2004      	movs	r0, #4
 8000f38:	f7ff ffa4 	bl	8000e84 <EXTI_IRQHandler_Helper>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <EXTI9_5_IRQHandler>:

// ISR cho EXTI Lines 5 đến 9
void EXTI9_5_IRQHandler(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(5, 9);
 8000f44:	2109      	movs	r1, #9
 8000f46:	2005      	movs	r0, #5
 8000f48:	f7ff ff9c 	bl	8000e84 <EXTI_IRQHandler_Helper>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <EXTI15_10_IRQHandler>:

// ISR cho EXTI Lines 10 đến 15
void EXTI15_10_IRQHandler(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(10, 15);
 8000f54:	210f      	movs	r1, #15
 8000f56:	200a      	movs	r0, #10
 8000f58:	f7ff ff94 	bl	8000e84 <EXTI_IRQHandler_Helper>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <GPIO_ClockCmd>:
 */

#include "gpio_driver.h"

// Helper function to enable/disable clock for GPIO port
void GPIO_ClockCmd(GPIO_TypeDef* GPIOx, uint8_t NewState) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
    if (NewState == CLOCK_CMD_ENABLE) {
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d141      	bne.n	8000ff6 <GPIO_ClockCmd+0x96>
        if (GPIOx == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a3e      	ldr	r2, [pc, #248]	@ (8001070 <GPIO_ClockCmd+0x110>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d106      	bne.n	8000f88 <GPIO_ClockCmd+0x28>
 8000f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a3d      	ldr	r2, [pc, #244]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
        // ...
    }
}
 8000f86:	e06c      	b.n	8001062 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001078 <GPIO_ClockCmd+0x118>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d106      	bne.n	8000f9e <GPIO_ClockCmd+0x3e>
 8000f90:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	4a37      	ldr	r2, [pc, #220]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f9c:	e061      	b.n	8001062 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a36      	ldr	r2, [pc, #216]	@ (800107c <GPIO_ClockCmd+0x11c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d106      	bne.n	8000fb4 <GPIO_ClockCmd+0x54>
 8000fa6:	4b33      	ldr	r3, [pc, #204]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a32      	ldr	r2, [pc, #200]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fb2:	e056      	b.n	8001062 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a32      	ldr	r2, [pc, #200]	@ (8001080 <GPIO_ClockCmd+0x120>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d106      	bne.n	8000fca <GPIO_ClockCmd+0x6a>
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000fc2:	f043 0308 	orr.w	r3, r3, #8
 8000fc6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fc8:	e04b      	b.n	8001062 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8001084 <GPIO_ClockCmd+0x124>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d106      	bne.n	8000fe0 <GPIO_ClockCmd+0x80>
 8000fd2:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a27      	ldr	r2, [pc, #156]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000fd8:	f043 0310 	orr.w	r3, r3, #16
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fde:	e040      	b.n	8001062 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a29      	ldr	r2, [pc, #164]	@ (8001088 <GPIO_ClockCmd+0x128>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d13c      	bne.n	8001062 <GPIO_ClockCmd+0x102>
 8000fe8:	4b22      	ldr	r3, [pc, #136]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fec:	4a21      	ldr	r2, [pc, #132]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8000fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ff4:	e035      	b.n	8001062 <GPIO_ClockCmd+0x102>
        if (GPIOx == GPIOA) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8001070 <GPIO_ClockCmd+0x110>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d106      	bne.n	800100c <GPIO_ClockCmd+0xac>
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800100a:	e02a      	b.n	8001062 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOBEN;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a1a      	ldr	r2, [pc, #104]	@ (8001078 <GPIO_ClockCmd+0x118>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d106      	bne.n	8001022 <GPIO_ClockCmd+0xc2>
 8001014:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001018:	4a16      	ldr	r2, [pc, #88]	@ (8001074 <GPIO_ClockCmd+0x114>)
 800101a:	f023 0302 	bic.w	r3, r3, #2
 800101e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001020:	e01f      	b.n	8001062 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a15      	ldr	r2, [pc, #84]	@ (800107c <GPIO_ClockCmd+0x11c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d106      	bne.n	8001038 <GPIO_ClockCmd+0xd8>
 800102a:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <GPIO_ClockCmd+0x114>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a11      	ldr	r2, [pc, #68]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8001030:	f023 0304 	bic.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001036:	e014      	b.n	8001062 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a11      	ldr	r2, [pc, #68]	@ (8001080 <GPIO_ClockCmd+0x120>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d106      	bne.n	800104e <GPIO_ClockCmd+0xee>
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001044:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8001046:	f023 0308 	bic.w	r3, r3, #8
 800104a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800104c:	e009      	b.n	8001062 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a0c      	ldr	r2, [pc, #48]	@ (8001084 <GPIO_ClockCmd+0x124>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d105      	bne.n	8001062 <GPIO_ClockCmd+0x102>
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <GPIO_ClockCmd+0x114>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <GPIO_ClockCmd+0x114>)
 800105c:	f023 0310 	bic.w	r3, r3, #16
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40020000 	.word	0x40020000
 8001074:	40023800 	.word	0x40023800
 8001078:	40020400 	.word	0x40020400
 800107c:	40020800 	.word	0x40020800
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40021000 	.word	0x40021000
 8001088:	40021c00 	.word	0x40021c00

0800108c <GPIO_InitPin>:


void GPIO_InitPin(GPIO_TypeDef* GPIOx, uint16_t pin, uint32_t mode, uint32_t pull,
                  uint32_t speed, uint32_t otype, uint32_t alt_func) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	460b      	mov	r3, r1
 800109a:	817b      	strh	r3, [r7, #10]
    uint32_t position;
    uint32_t iocurrent;
    uint32_t temp;

    // Enable clock for the GPIO port
    GPIO_ClockCmd(GPIOx, CLOCK_CMD_ENABLE);
 800109c:	2101      	movs	r1, #1
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f7ff ff5e 	bl	8000f60 <GPIO_ClockCmd>

    for (position = 0; position < 16; position++) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	e0a4      	b.n	80011f4 <GPIO_InitPin+0x168>
        iocurrent = (0x1U << position); // Mask for current pin
 80010aa:	2201      	movs	r2, #1
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	61bb      	str	r3, [r7, #24]
        if (pin & iocurrent) {          // If this pin is selected
 80010b4:	897a      	ldrh	r2, [r7, #10]
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8097 	beq.w	80011ee <GPIO_InitPin+0x162>
            // 1. Configure Mode (Input, Output, AF, Analog)
            temp = GPIOx->MODER;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2)); // Clear mode bits for this pin
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4013      	ands	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
            temp |= (mode << (position * 2));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	617b      	str	r3, [r7, #20]
            GPIOx->MODER = temp;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	601a      	str	r2, [r3, #0]

            if ((mode == GPIO_MODE_OUTPUT) || (mode == GPIO_MODE_AF)) {
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d002      	beq.n	80010fa <GPIO_InitPin+0x6e>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d12b      	bne.n	8001152 <GPIO_InitPin+0xc6>
                // 2. Configure Speed
                temp = GPIOx->OSPEEDR;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	617b      	str	r3, [r7, #20]
                temp &= ~(0x03U << (position * 2));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	4013      	ands	r3, r2
 8001110:	617b      	str	r3, [r7, #20]
                temp |= (speed << (position * 2));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	4313      	orrs	r3, r2
 8001120:	617b      	str	r3, [r7, #20]
                GPIOx->OSPEEDR = temp;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	609a      	str	r2, [r3, #8]

                // 3. Configure Output Type (Push-Pull or Open-Drain)
                temp = GPIOx->OTYPER;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	617b      	str	r3, [r7, #20]
                temp &= ~(0x01U << position);
 800112e:	2201      	movs	r2, #1
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	4013      	ands	r3, r2
 800113c:	617b      	str	r3, [r7, #20]
                temp |= (otype << position);
 800113e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4313      	orrs	r3, r2
 800114a:	617b      	str	r3, [r7, #20]
                GPIOx->OTYPER = temp;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	605a      	str	r2, [r3, #4]
            }

            // 4. Configure Pull-up/Pull-down
            temp = GPIOx->PUPDR;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	4013      	ands	r3, r2
 8001168:	617b      	str	r3, [r7, #20]
            temp |= (pull << (position * 2));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	4313      	orrs	r3, r2
 8001178:	617b      	str	r3, [r7, #20]
            GPIOx->PUPDR = temp;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	60da      	str	r2, [r3, #12]

            // 5. Configure Alternate Function (if AF mode)
            if (mode == GPIO_MODE_AF) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d133      	bne.n	80011ee <GPIO_InitPin+0x162>
                if (position < 8) { // AFR[0] for pins 0-7
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	2b07      	cmp	r3, #7
 800118a:	d817      	bhi.n	80011bc <GPIO_InitPin+0x130>
                    temp = GPIOx->AFR[0];
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << (position * 4));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4013      	ands	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << (position * 4));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[0] = temp;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	621a      	str	r2, [r3, #32]
 80011ba:	e018      	b.n	80011ee <GPIO_InitPin+0x162>
                } else { // AFR[1] for pins 8-15
                    temp = GPIOx->AFR[1];
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c0:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << ((position - 8) * 4));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b08      	subs	r3, #8
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	4013      	ands	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << ((position - 8) * 4));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b08      	subs	r3, #8
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[1] = temp;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	625a      	str	r2, [r3, #36]	@ 0x24
    for (position = 0; position < 16; position++) {
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	f67f af57 	bls.w	80010aa <GPIO_InitPin+0x1e>
                }
            }
        }
    }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <GPIO_ReadPin>:

uint8_t GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t pin) {
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]
    if ((GPIOx->IDR & pin) != 0x00U) {
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <GPIO_ReadPin+0x1c>
        return GPIO_PIN_SET;
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <GPIO_ReadPin+0x1e>
    } else {
        return GPIO_PIN_RESET;
 8001222:	2300      	movs	r3, #0
    }
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t pin, uint8_t state) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
 800123c:	4613      	mov	r3, r2
 800123e:	707b      	strb	r3, [r7, #1]
    if (state == GPIO_PIN_SET) {
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d103      	bne.n	800124e <GPIO_WritePin+0x1e>
        GPIOx->BSRR = (uint32_t)pin; // Set bit
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
    }
}
 800124c:	e003      	b.n	8001256 <GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	041a      	lsls	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	619a      	str	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <SystemClock_Config>:
  #define PLL_P_REG_VAL 0x03U
#else
  #error "Invalid PLL_P_VAL. Must be 2, 4, 6, or 8."
#endif

void SystemClock_Config(void) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
    uint32_t temp_reg; // Biến tạm, tránh warning unused nếu không có MODIFY_REG

    // 1. Bật HSE và đợi nó ổn định (nếu dùng HSE là nguồn PLL)
    RCC->CR |= RCC_CR_HSEON;
 800126a:	4b47      	ldr	r3, [pc, #284]	@ (8001388 <SystemClock_Config+0x124>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a46      	ldr	r2, [pc, #280]	@ (8001388 <SystemClock_Config+0x124>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001274:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8001276:	bf00      	nop
 8001278:	4b43      	ldr	r3, [pc, #268]	@ (8001388 <SystemClock_Config+0x124>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f9      	beq.n	8001278 <SystemClock_Config+0x14>

    // 2. Cấu hình Power Control Register
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001284:	4b40      	ldr	r3, [pc, #256]	@ (8001388 <SystemClock_Config+0x124>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	4a3f      	ldr	r2, [pc, #252]	@ (8001388 <SystemClock_Config+0x124>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	@ 0x40
    temp_reg = PWR->CR;
 8001290:	4b3e      	ldr	r3, [pc, #248]	@ (800138c <SystemClock_Config+0x128>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	607b      	str	r3, [r7, #4]
    temp_reg &= ~PWR_CR_VOS;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800129c:	607b      	str	r3, [r7, #4]
    temp_reg |= PWR_CR_VOS_1; // Scale 2
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012a4:	607b      	str	r3, [r7, #4]
    PWR->CR = temp_reg;
 80012a6:	4a39      	ldr	r2, [pc, #228]	@ (800138c <SystemClock_Config+0x128>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6013      	str	r3, [r2, #0]

    // 3. Cấu hình các hệ số chia cho HCLK, PCLK1, PCLK2
    temp_reg = RCC->CFGR;
 80012ac:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <SystemClock_Config+0x124>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_HPRE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80012b8:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_HPRE_DIV1;
    RCC->CFGR = temp_reg;
 80012ba:	4a33      	ldr	r2, [pc, #204]	@ (8001388 <SystemClock_Config+0x124>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 80012c0:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <SystemClock_Config+0x124>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80012cc:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE1_DIV2;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d4:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 80012d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001388 <SystemClock_Config+0x124>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 80012dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <SystemClock_Config+0x124>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE2;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80012e8:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE2_DIV1;
    RCC->CFGR = temp_reg;
 80012ea:	4a27      	ldr	r2, [pc, #156]	@ (8001388 <SystemClock_Config+0x124>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6093      	str	r3, [r2, #8]

    // 4. Cấu hình PLL
    RCC->CR &= ~RCC_CR_PLLON;
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <SystemClock_Config+0x124>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a24      	ldr	r2, [pc, #144]	@ (8001388 <SystemClock_Config+0x124>)
 80012f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012fa:	6013      	str	r3, [r2, #0]
    while(RCC->CR & RCC_CR_PLLRDY);
 80012fc:	bf00      	nop
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <SystemClock_Config+0x124>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <SystemClock_Config+0x9a>

    RCC->PLLCFGR = (PLL_Q_VAL << RCC_PLLCFGR_PLLQ_Pos) |
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <SystemClock_Config+0x124>)
 800130c:	4a20      	ldr	r2, [pc, #128]	@ (8001390 <SystemClock_Config+0x12c>)
 800130e:	605a      	str	r2, [r3, #4]
                   (PLL_P_REG_VAL << RCC_PLLCFGR_PLLP_Pos)|
                   (PLL_N_VAL << RCC_PLLCFGR_PLLN_Pos) |
                   (PLL_M_VAL << RCC_PLLCFGR_PLLM_Pos);

    // 5. Bật PLL và đợi nó ổn định
    RCC->CR |= RCC_CR_PLLON;
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <SystemClock_Config+0x124>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a1c      	ldr	r2, [pc, #112]	@ (8001388 <SystemClock_Config+0x124>)
 8001316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800131a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 800131c:	bf00      	nop
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <SystemClock_Config+0x124>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f9      	beq.n	800131e <SystemClock_Config+0xba>

    // 6. Cấu hình Flash latency
    temp_reg = FLASH->ACR;
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <SystemClock_Config+0x130>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	607b      	str	r3, [r7, #4]
    temp_reg &= ~FLASH_ACR_LATENCY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f023 0307 	bic.w	r3, r3, #7
 8001336:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_LATENCY_2WS;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_PRFTEN;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001346:	607b      	str	r3, [r7, #4]
    FLASH->ACR = temp_reg;
 8001348:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <SystemClock_Config+0x130>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]

    // 7. Chọn PLL làm nguồn SYSCLK
    temp_reg = RCC->CFGR;
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <SystemClock_Config+0x124>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_SW;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f023 0303 	bic.w	r3, r3, #3
 800135a:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_SW_PLL;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 8001364:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <SystemClock_Config+0x124>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800136a:	bf00      	nop
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <SystemClock_Config+0x124>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d1f9      	bne.n	800136c <SystemClock_Config+0x108>
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000
 8001390:	07415408 	.word	0x07415408
 8001394:	40023c00 	.word	0x40023c00

08001398 <__NVIC_SetPriority>:
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <SysTick_Init>:
#include "stm32f401xe.h"
#include "rcc_config.h"

static volatile uint32_t g_sysTickCounter = 0;

void SysTick_Init(void){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
	// 1. Tính toán giá trị nạp cho SysTick để có tick mỗi 1ms
	// (HCLK / 1000) - 1 vì SysTick đếm từ LOAD_VAL về 0 (LOAD_VAL + 1 chu kỳ)
	uint32_t reload_value = (HCLK_FREQUENCY_HZ / 1000U) - 1U;
 80013f2:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <SysTick_Init+0x54>)
 80013f4:	607b      	str	r3, [r7, #4]

	// 2. Cấu hình SysTick
    // Vô hiệu hóa SysTick trước khi cấu hình
    SysTick->CTRL = 0;
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <SysTick_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

    // Nạp giá trị reload
    SysTick->LOAD = reload_value;
 80013fc:	4a11      	ldr	r2, [pc, #68]	@ (8001444 <SysTick_Init+0x58>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6053      	str	r3, [r2, #4]

    // Đặt ưu tiên ngắt SysTick cho Cortex-M4 (4 bit ưu tiên)
    NVIC_SetPriority(SysTick_IRQn, 15); // Mức ưu tiên 15 (thấp nhất nếu 4 bit prio)
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ffc6 	bl	8001398 <__NVIC_SetPriority>

    // Reset bộ đếm SysTick hiện tại
    SysTick->VAL = 0;
 800140c:	4b0d      	ldr	r3, [pc, #52]	@ (8001444 <SysTick_Init+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]

    // Kích hoạt SysTick với nguồn clock là HCLK và bật ngắt
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // CLKSOURCE = AHB clock
 8001412:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <SysTick_Init+0x58>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <SysTick_Init+0x58>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;   // Enable SysTick interrupt
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <SysTick_Init+0x58>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a08      	ldr	r2, [pc, #32]	@ (8001444 <SysTick_Init+0x58>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;    // Enable SysTick
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <SysTick_Init+0x58>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <SysTick_Init+0x58>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6013      	str	r3, [r2, #0]
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	0001481f 	.word	0x0001481f
 8001444:	e000e010 	.word	0xe000e010

08001448 <Delay_ms>:

void Delay_ms(volatile uint32_t ms){
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	uint32_t start_tick = g_sysTickCounter;
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <Delay_ms+0x2c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
	while ((g_sysTickCounter - start_tick) < ms){
 8001456:	bf00      	nop
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <Delay_ms+0x2c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1ad2      	subs	r2, r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	429a      	cmp	r2, r3
 8001464:	d3f8      	bcc.n	8001458 <Delay_ms+0x10>

	}
}
 8001466:	bf00      	nop
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000228 	.word	0x20000228

08001478 <GetTick>:

uint32_t GetTick(void){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	return g_sysTickCounter;
 800147c:	4b03      	ldr	r3, [pc, #12]	@ (800148c <GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000228 	.word	0x20000228

08001490 <IncTick>:

void IncTick(void){
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	g_sysTickCounter ++;
 8001494:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <IncTick+0x18>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	4a03      	ldr	r2, [pc, #12]	@ (80014a8 <IncTick+0x18>)
 800149c:	6013      	str	r3, [r2, #0]
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	20000228 	.word	0x20000228

080014ac <SysTick_Handler>:

void SysTick_Handler(void){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	IncTick();
 80014b0:	f7ff ffee 	bl	8001490 <IncTick>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <USART2_IRQHandler>:
    __disable_irq();
    g_uart2_error_flags &= ~flags;
    __enable_irq();
}

void USART2_IRQHandler(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
    uint32_t sr_reg = USART2->SR; // Đọc thanh ghi SR một lần
 80014be:	4b6e      	ldr	r3, [pc, #440]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]

    // --- Xử lý ngắt RXNE (Receive Data Register Not Empty) ---
    if ((sr_reg & USART_SR_RXNE) && (USART2->CR1 & USART_CR1_RXNEIE)) {
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d032      	beq.n	8001534 <USART2_IRQHandler+0x7c>
 80014ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d02c      	beq.n	8001534 <USART2_IRQHandler+0x7c>
        uint8_t received_byte = (uint8_t)(USART2->DR & 0xFFU);
 80014da:	4b67      	ldr	r3, [pc, #412]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	72fb      	strb	r3, [r7, #11]

        if (g_uart2_rx_buffer_count < UART2_RX_BUFFER_SIZE) {
 80014e0:	4b66      	ldr	r3, [pc, #408]	@ (800167c <USART2_IRQHandler+0x1c4>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80014e8:	d81c      	bhi.n	8001524 <USART2_IRQHandler+0x6c>
            g_uart2_rx_buffer[g_uart2_rx_buffer_tail] = received_byte;
 80014ea:	4b65      	ldr	r3, [pc, #404]	@ (8001680 <USART2_IRQHandler+0x1c8>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4619      	mov	r1, r3
 80014f2:	4a64      	ldr	r2, [pc, #400]	@ (8001684 <USART2_IRQHandler+0x1cc>)
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	5453      	strb	r3, [r2, r1]
            g_uart2_rx_buffer_tail = (g_uart2_rx_buffer_tail + 1) % UART2_RX_BUFFER_SIZE;
 80014f8:	4b61      	ldr	r3, [pc, #388]	@ (8001680 <USART2_IRQHandler+0x1c8>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	425a      	negs	r2, r3
 8001502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001506:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800150a:	bf58      	it	pl
 800150c:	4253      	negpl	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b5b      	ldr	r3, [pc, #364]	@ (8001680 <USART2_IRQHandler+0x1c8>)
 8001512:	801a      	strh	r2, [r3, #0]
            g_uart2_rx_buffer_count++;
 8001514:	4b59      	ldr	r3, [pc, #356]	@ (800167c <USART2_IRQHandler+0x1c4>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	3301      	adds	r3, #1
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b57      	ldr	r3, [pc, #348]	@ (800167c <USART2_IRQHandler+0x1c4>)
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	e007      	b.n	8001534 <USART2_IRQHandler+0x7c>
        } else {
            // Buffer RX đầy, đánh dấu lỗi bằng cách thêm cờ
            g_uart2_error_flags |= UART_ERROR_BUFFER_FULL;
 8001524:	4b58      	ldr	r3, [pc, #352]	@ (8001688 <USART2_IRQHandler+0x1d0>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b55      	ldr	r3, [pc, #340]	@ (8001688 <USART2_IRQHandler+0x1d0>)
 8001532:	701a      	strb	r2, [r3, #0]
        }
        // Cờ RXNE tự xóa khi đọc DR.
    }

    // --- Xử lý ngắt TXE (Transmit Data Register Empty) ---
    if ((sr_reg & USART_SR_TXE) && (USART2->CR1 & USART_CR1_TXEIE)) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800153a:	2b00      	cmp	r3, #0
 800153c:	d039      	beq.n	80015b2 <USART2_IRQHandler+0xfa>
 800153e:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001546:	2b00      	cmp	r3, #0
 8001548:	d033      	beq.n	80015b2 <USART2_IRQHandler+0xfa>
        if (g_uart2_tx_buffer_count > 0) {
 800154a:	4b50      	ldr	r3, [pc, #320]	@ (800168c <USART2_IRQHandler+0x1d4>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d02e      	beq.n	80015b2 <USART2_IRQHandler+0xfa>
            USART2->DR = g_uart2_tx_buffer[g_uart2_tx_buffer_head];
 8001554:	4b4e      	ldr	r3, [pc, #312]	@ (8001690 <USART2_IRQHandler+0x1d8>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	4b4d      	ldr	r3, [pc, #308]	@ (8001694 <USART2_IRQHandler+0x1dc>)
 800155e:	5c9b      	ldrb	r3, [r3, r2]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b45      	ldr	r3, [pc, #276]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 8001564:	605a      	str	r2, [r3, #4]
            g_uart2_tx_buffer_head = (g_uart2_tx_buffer_head + 1) % UART2_TX_BUFFER_SIZE;
 8001566:	4b4a      	ldr	r3, [pc, #296]	@ (8001690 <USART2_IRQHandler+0x1d8>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	3301      	adds	r3, #1
 800156e:	425a      	negs	r2, r3
 8001570:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001574:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001578:	bf58      	it	pl
 800157a:	4253      	negpl	r3, r2
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b44      	ldr	r3, [pc, #272]	@ (8001690 <USART2_IRQHandler+0x1d8>)
 8001580:	801a      	strh	r2, [r3, #0]
            g_uart2_tx_buffer_count--;
 8001582:	4b42      	ldr	r3, [pc, #264]	@ (800168c <USART2_IRQHandler+0x1d4>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	3b01      	subs	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b3f      	ldr	r3, [pc, #252]	@ (800168c <USART2_IRQHandler+0x1d4>)
 800158e:	801a      	strh	r2, [r3, #0]

            if (g_uart2_tx_buffer_count == 0) {
 8001590:	4b3e      	ldr	r3, [pc, #248]	@ (800168c <USART2_IRQHandler+0x1d4>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	b29b      	uxth	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10b      	bne.n	80015b2 <USART2_IRQHandler+0xfa>
                // Đã gửi hết buffer, tắt ngắt TXE
                USART2->CR1 &= ~USART_CR1_TXEIE;
 800159a:	4b37      	ldr	r3, [pc, #220]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	4a36      	ldr	r2, [pc, #216]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 80015a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015a4:	60d3      	str	r3, [r2, #12]
                // Bật ngắt TC (Transmission Complete) để biết khi nào byte cuối cùng thực sự ra khỏi shift register
                USART2->CR1 |= USART_CR1_TCIE;
 80015a6:	4b34      	ldr	r3, [pc, #208]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	4a33      	ldr	r2, [pc, #204]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 80015ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015b0:	60d3      	str	r3, [r2, #12]
        }
        // Cờ TXE tự xóa khi ghi vào DR.
    }

    // --- Xử lý ngắt TC (Transmission Complete) ---
    if ((sr_reg & USART_SR_TC) && (USART2->CR1 & USART_CR1_TCIE)) {
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d01b      	beq.n	80015f4 <USART2_IRQHandler+0x13c>
 80015bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d015      	beq.n	80015f4 <USART2_IRQHandler+0x13c>
        // Byte cuối cùng đã được gửi hoàn toàn
        USART2->CR1 &= ~USART_CR1_TCIE; // Tắt ngắt TC
 80015c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 80015ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80015d2:	60d3      	str	r3, [r2, #12]
        g_uart2_tx_busy = false;      // Đánh dấu  không còn bận gửi
 80015d4:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <USART2_IRQHandler+0x1e0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]

        if (g_uart2_tx_complete_callback != NULL) {
 80015da:	4b30      	ldr	r3, [pc, #192]	@ (800169c <USART2_IRQHandler+0x1e4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d002      	beq.n	80015e8 <USART2_IRQHandler+0x130>
            g_uart2_tx_complete_callback();
 80015e2:	4b2e      	ldr	r3, [pc, #184]	@ (800169c <USART2_IRQHandler+0x1e4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4798      	blx	r3
        }
        // Cờ TC được xóa bằng cách ghi 0 vào nó (hoặc đọc SR rồi ghi vào DR - nhưng ở đây đã xong TX)
        USART2->SR &= ~USART_SR_TC; // Xóa cờ TC
 80015e8:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a22      	ldr	r2, [pc, #136]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 80015ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80015f2:	6013      	str	r3, [r2, #0]
    }


    // --- Xử lý các cờ lỗi (Overrun, Noise, Framing, Parity) ---
    if (sr_reg & (USART_SR_ORE | USART_SR_NE | USART_SR_FE | USART_SR_PE)) {
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d037      	beq.n	800166e <USART2_IRQHandler+0x1b6>
        // Lưu lại lỗi để ứng dụng có thể kiểm tra
        if (sr_reg & USART_SR_ORE) g_uart2_error_flags |= UART_ERROR_OVERRUN;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <USART2_IRQHandler+0x160>
 8001608:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <USART2_IRQHandler+0x1d0>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	b2da      	uxtb	r2, r3
 8001614:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <USART2_IRQHandler+0x1d0>)
 8001616:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_NE) g_uart2_error_flags |= UART_ERROR_NOISE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <USART2_IRQHandler+0x17a>
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <USART2_IRQHandler+0x1d0>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <USART2_IRQHandler+0x1d0>)
 8001630:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_FE) g_uart2_error_flags |= UART_ERROR_FRAMING;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d007      	beq.n	800164c <USART2_IRQHandler+0x194>
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <USART2_IRQHandler+0x1d0>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <USART2_IRQHandler+0x1d0>)
 800164a:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_PE) g_uart2_error_flags |= UART_ERROR_PARITY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <USART2_IRQHandler+0x1ae>
 8001656:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <USART2_IRQHandler+0x1d0>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <USART2_IRQHandler+0x1d0>)
 8001664:	701a      	strb	r2, [r3, #0]
        
        // Đọc DR để xóa cờ lỗi
        volatile uint32_t temp_dr = USART2->DR;
 8001666:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <USART2_IRQHandler+0x1c0>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	607b      	str	r3, [r7, #4]
        (void)temp_dr; // Tránh warning
 800166c:	687b      	ldr	r3, [r7, #4]
    }
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40004400 	.word	0x40004400
 800167c:	200002ae 	.word	0x200002ae
 8001680:	200002ac 	.word	0x200002ac
 8001684:	2000022c 	.word	0x2000022c
 8001688:	2000033c 	.word	0x2000033c
 800168c:	20000332 	.word	0x20000332
 8001690:	20000330 	.word	0x20000330
 8001694:	200002b0 	.word	0x200002b0
 8001698:	20000334 	.word	0x20000334
 800169c:	20000338 	.word	0x20000338

080016a0 <LightService_Init>:
// --- Biến nội bộ lưu trữ thông tin chân GPIO và trạng thái đèn ---
static GPIO_TypeDef* g_light_relay_port = NULL;
static uint16_t      g_light_relay_pin_mask = 0; // Sẽ là (1U << pin_number)
static bool          g_is_light_on = false;     // Trạng thái hiện tại của đèn

void LightService_Init(GPIO_TypeDef* light_relay_port, uint8_t light_relay_pin_number) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
    if (light_relay_port == NULL || light_relay_pin_number > 15) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d026      	beq.n	8001700 <LightService_Init+0x60>
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	2b0f      	cmp	r3, #15
 80016b6:	d823      	bhi.n	8001700 <LightService_Init+0x60>
        // Xử lý lỗi đầu vào không hợp lệ (ví dụ: return hoặc assert)
        return;
    }

    g_light_relay_port = light_relay_port;
 80016b8:	4a13      	ldr	r2, [pc, #76]	@ (8001708 <LightService_Init+0x68>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
    g_light_relay_pin_mask = (1U << light_relay_pin_number);
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	2201      	movs	r2, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b10      	ldr	r3, [pc, #64]	@ (800170c <LightService_Init+0x6c>)
 80016ca:	801a      	strh	r2, [r3, #0]

    // Cấu hình chân GPIO làm output, push-pull, không pull, tốc độ thấp
    // GPIO_ClockCmd sẽ được gọi bên trong GPIO_InitPin
    GPIO_InitPin(g_light_relay_port, g_light_relay_pin_mask,
 80016cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <LightService_Init+0x68>)
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <LightService_Init+0x6c>)
 80016d2:	8819      	ldrh	r1, [r3, #0]
 80016d4:	2300      	movs	r3, #0
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	2300      	movs	r3, #0
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	2300      	movs	r3, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2300      	movs	r3, #0
 80016e2:	2201      	movs	r2, #1
 80016e4:	f7ff fcd2 	bl	800108c <GPIO_InitPin>
                 GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW,
                 GPIO_OTYPE_PUSHPULL, 0); // AF không dùng

    // Đặt trạng thái ban đầu cho relay (ví dụ: tắt đèn)
    GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_INACTIVE_LEVEL);
 80016e8:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <LightService_Init+0x68>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a07      	ldr	r2, [pc, #28]	@ (800170c <LightService_Init+0x6c>)
 80016ee:	8811      	ldrh	r1, [r2, #0]
 80016f0:	2200      	movs	r2, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd9c 	bl	8001230 <GPIO_WritePin>
    g_is_light_on = false;
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <LightService_Init+0x70>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	e000      	b.n	8001702 <LightService_Init+0x62>
        return;
 8001700:	bf00      	nop
}
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000340 	.word	0x20000340
 800170c:	20000344 	.word	0x20000344
 8001710:	20000346 	.word	0x20000346

08001714 <LightService_TurnOn>:

void LightService_TurnOn(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
    if (g_light_relay_port != NULL) {
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <LightService_TurnOn+0x28>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00a      	beq.n	8001736 <LightService_TurnOn+0x22>
        GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_ACTIVE_LEVEL);
 8001720:	4b06      	ldr	r3, [pc, #24]	@ (800173c <LightService_TurnOn+0x28>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a06      	ldr	r2, [pc, #24]	@ (8001740 <LightService_TurnOn+0x2c>)
 8001726:	8811      	ldrh	r1, [r2, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd80 	bl	8001230 <GPIO_WritePin>
        g_is_light_on = true;
 8001730:	4b04      	ldr	r3, [pc, #16]	@ (8001744 <LightService_TurnOn+0x30>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
    }
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000340 	.word	0x20000340
 8001740:	20000344 	.word	0x20000344
 8001744:	20000346 	.word	0x20000346

08001748 <LightService_TurnOff>:

void LightService_TurnOff(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
    if (g_light_relay_port != NULL) {
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <LightService_TurnOff+0x28>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00a      	beq.n	800176a <LightService_TurnOff+0x22>
        GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_INACTIVE_LEVEL);
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <LightService_TurnOff+0x28>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <LightService_TurnOff+0x2c>)
 800175a:	8811      	ldrh	r1, [r2, #0]
 800175c:	2200      	movs	r2, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fd66 	bl	8001230 <GPIO_WritePin>
        g_is_light_on = false;
 8001764:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <LightService_TurnOff+0x30>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
    }
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000340 	.word	0x20000340
 8001774:	20000344 	.word	0x20000344
 8001778:	20000346 	.word	0x20000346

0800177c <ls_open_exti_handler>:
// Giả định: Công tắc là ACTIVE LOW (khi nhấn thì nối với GND, dùng PULL_UP nội)
// Do đó, khi đọc pin, LOW (0) nghĩa là công tắc được nhấn (active).
#define LIMIT_SWITCH_ACTIVE_LEVEL GPIO_PIN_RESET // 0

// Callback cho công tắc "Cửa Mở Hoàn Toàn"
static void ls_open_exti_handler(uint8_t exti_line) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
    (void)exti_line; // Tránh warning
    LimitSwitch_Internal_t* ls = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN];
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <ls_open_exti_handler+0x50>)
 8001788:	60fb      	str	r3, [r7, #12]

    // Đọc trạng thái thô của pin ngay lập tức
    ls->last_raw_pin_state = GPIO_ReadPin(ls->port, (1U << ls->pin_number));
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	791b      	ldrb	r3, [r3, #4]
 8001792:	4619      	mov	r1, r3
 8001794:	2301      	movs	r3, #1
 8001796:	408b      	lsls	r3, r1
 8001798:	b29b      	uxth	r3, r3
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f7ff fd32 	bl	8001206 <GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	731a      	strb	r2, [r3, #12]

    // Nếu đang IDLE (chưa debounce), bắt đầu quá trình debounce
    if (ls->debounce_state == DEBOUNCE_STATE_IDLE) {
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	79db      	ldrb	r3, [r3, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <ls_open_exti_handler+0x46>
        ls->debounce_state = DEBOUNCE_STATE_WAITING;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	71da      	strb	r2, [r3, #7]
        ls->debounce_start_tick = GetTick();
 80017b8:	f7ff fe5e 	bl	8001478 <GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	609a      	str	r2, [r3, #8]
    }
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000348 	.word	0x20000348

080017d0 <ls_closed_exti_handler>:

// Callback cho công tắc "Cửa Đóng Hoàn Toàn"
static void ls_closed_exti_handler(uint8_t exti_line) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
    (void)exti_line;
    LimitSwitch_Internal_t* ls = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED];
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <ls_closed_exti_handler+0x50>)
 80017dc:	60fb      	str	r3, [r7, #12]
    ls->last_raw_pin_state = GPIO_ReadPin(ls->port, (1U << ls->pin_number));
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	791b      	ldrb	r3, [r3, #4]
 80017e6:	4619      	mov	r1, r3
 80017e8:	2301      	movs	r3, #1
 80017ea:	408b      	lsls	r3, r1
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	4610      	mov	r0, r2
 80017f2:	f7ff fd08 	bl	8001206 <GPIO_ReadPin>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	731a      	strb	r2, [r3, #12]
    if (ls->debounce_state == DEBOUNCE_STATE_IDLE) {
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	79db      	ldrb	r3, [r3, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d107      	bne.n	8001816 <ls_closed_exti_handler+0x46>
        ls->debounce_state = DEBOUNCE_STATE_WAITING;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2201      	movs	r2, #1
 800180a:	71da      	strb	r2, [r3, #7]
        ls->debounce_start_tick = GetTick();
 800180c:	f7ff fe34 	bl	8001478 <GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	609a      	str	r2, [r3, #8]
    }
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000358 	.word	0x20000358

08001824 <LimitSwitchService_Init>:

void LimitSwitchService_Init(GPIO_TypeDef* open_ls_port, uint8_t open_ls_pin_number,
                             GPIO_TypeDef* closed_ls_port, uint8_t closed_ls_pin_number,
                             uint8_t nvic_priority) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	461a      	mov	r2, r3
 8001830:	460b      	mov	r3, r1
 8001832:	72fb      	strb	r3, [r7, #11]
 8001834:	4613      	mov	r3, r2
 8001836:	72bb      	strb	r3, [r7, #10]
    // --- Cấu hình cho Công tắc Cửa Mở ---
    LimitSwitch_Internal_t* ls_open = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN];
 8001838:	4b39      	ldr	r3, [pc, #228]	@ (8001920 <LimitSwitchService_Init+0xfc>)
 800183a:	617b      	str	r3, [r7, #20]
    ls_open->port = open_ls_port;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	601a      	str	r2, [r3, #0]
    ls_open->pin_number = open_ls_pin_number;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	7afa      	ldrb	r2, [r7, #11]
 8001846:	711a      	strb	r2, [r3, #4]
    ls_open->exti_line = open_ls_pin_number; // EXTI line thường trùng pin_number
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	7afa      	ldrb	r2, [r7, #11]
 800184c:	715a      	strb	r2, [r3, #5]
    ls_open->current_stable_state = (GPIO_ReadPin(ls_open->port, (1U << ls_open->pin_number)) == LIMIT_SWITCH_ACTIVE_LEVEL); // Đọc trạng thái ban đầu
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	791b      	ldrb	r3, [r3, #4]
 8001856:	4619      	mov	r1, r3
 8001858:	2301      	movs	r3, #1
 800185a:	408b      	lsls	r3, r1
 800185c:	b29b      	uxth	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	4610      	mov	r0, r2
 8001862:	f7ff fcd0 	bl	8001206 <GPIO_ReadPin>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf0c      	ite	eq
 800186c:	2301      	moveq	r3, #1
 800186e:	2300      	movne	r3, #0
 8001870:	b2da      	uxtb	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	719a      	strb	r2, [r3, #6]
    ls_open->debounce_state = DEBOUNCE_STATE_IDLE;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	2200      	movs	r2, #0
 800187a:	71da      	strb	r2, [r3, #7]
    ls_open->debounce_start_tick = 0;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
    ls_open->last_raw_pin_state = (ls_open->current_stable_state ? LIMIT_SWITCH_ACTIVE_LEVEL : !LIMIT_SWITCH_ACTIVE_LEVEL);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	799b      	ldrb	r3, [r3, #6]
 8001886:	f083 0301 	eor.w	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	731a      	strb	r2, [r3, #12]

    // EXTI_InitPin sẽ cấu hình GPIO là input. Chúng ta muốn PULL_UP vì công tắc active LOW.
    // Trigger trên cả hai sườn để bắt đầu debounce khi có bất kỳ thay đổi nào.
    EXTI_InitPin(ls_open->port, ls_open->pin_number, EXTI_TRIGGER_BOTH,
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	7919      	ldrb	r1, [r3, #4]
 800189a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800189e:	4a21      	ldr	r2, [pc, #132]	@ (8001924 <LimitSwitchService_Init+0x100>)
 80018a0:	9200      	str	r2, [sp, #0]
 80018a2:	2203      	movs	r2, #3
 80018a4:	f7ff fa0c 	bl	8000cc0 <EXTI_InitPin>
                 nvic_priority, ls_open_exti_handler);


    // --- Cấu hình cho Công tắc Cửa Đóng ---
    LimitSwitch_Internal_t* ls_closed = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED];
 80018a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001928 <LimitSwitchService_Init+0x104>)
 80018aa:	613b      	str	r3, [r7, #16]
    ls_closed->port = closed_ls_port;
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	601a      	str	r2, [r3, #0]
    ls_closed->pin_number = closed_ls_pin_number;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	7aba      	ldrb	r2, [r7, #10]
 80018b6:	711a      	strb	r2, [r3, #4]
    ls_closed->exti_line = closed_ls_pin_number;
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	7aba      	ldrb	r2, [r7, #10]
 80018bc:	715a      	strb	r2, [r3, #5]
    ls_closed->current_stable_state = (GPIO_ReadPin(ls_closed->port, (1U << ls_closed->pin_number)) == LIMIT_SWITCH_ACTIVE_LEVEL);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	4619      	mov	r1, r3
 80018c8:	2301      	movs	r3, #1
 80018ca:	408b      	lsls	r3, r1
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	4619      	mov	r1, r3
 80018d0:	4610      	mov	r0, r2
 80018d2:	f7ff fc98 	bl	8001206 <GPIO_ReadPin>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	719a      	strb	r2, [r3, #6]
    ls_closed->debounce_state = DEBOUNCE_STATE_IDLE;
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2200      	movs	r2, #0
 80018ea:	71da      	strb	r2, [r3, #7]
    ls_closed->debounce_start_tick = 0;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
    ls_closed->last_raw_pin_state = (ls_closed->current_stable_state ? LIMIT_SWITCH_ACTIVE_LEVEL : !LIMIT_SWITCH_ACTIVE_LEVEL);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	799b      	ldrb	r3, [r3, #6]
 80018f6:	f083 0301 	eor.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	731a      	strb	r2, [r3, #12]

    EXTI_InitPin(ls_closed->port, ls_closed->pin_number, EXTI_TRIGGER_BOTH,
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	7919      	ldrb	r1, [r3, #4]
 800190a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800190e:	4a07      	ldr	r2, [pc, #28]	@ (800192c <LimitSwitchService_Init+0x108>)
 8001910:	9200      	str	r2, [sp, #0]
 8001912:	2203      	movs	r2, #3
 8001914:	f7ff f9d4 	bl	8000cc0 <EXTI_InitPin>
                 nvic_priority, ls_closed_exti_handler);
}
 8001918:	bf00      	nop
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000348 	.word	0x20000348
 8001924:	0800177d 	.word	0x0800177d
 8001928:	20000358 	.word	0x20000358
 800192c:	080017d1 	.word	0x080017d1

08001930 <LimitSwitchService_IsDoorFullyOpen>:
            }
        }
    }
}

bool LimitSwitchService_IsDoorFullyOpen(void) {
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001936:	b672      	cpsid	i
}
 8001938:	bf00      	nop
    // hoặc nếu có đa luồng. Trong trường hợp ProcessDebounce chạy ở main loop,
    // và ISR chỉ set cờ, thì việc đọc trực tiếp có thể ổn.
    // Để an toàn, có thể dùng critical section ngắn.
    bool state;
    __disable_irq(); // Ví dụ critical section
    state = g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN].current_stable_state;
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <LimitSwitchService_IsDoorFullyOpen+0x24>)
 800193c:	799b      	ldrb	r3, [r3, #6]
 800193e:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 8001940:	b662      	cpsie	i
}
 8001942:	bf00      	nop
    __enable_irq();
    return state;
 8001944:	79fb      	ldrb	r3, [r7, #7]
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000348 	.word	0x20000348

08001958 <LimitSwitchService_IsDoorFullyClosed>:

bool LimitSwitchService_IsDoorFullyClosed(void) {
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800195e:	b672      	cpsid	i
}
 8001960:	bf00      	nop
    bool state;
    __disable_irq();
    state = g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED].current_stable_state;
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <LimitSwitchService_IsDoorFullyClosed+0x24>)
 8001964:	7d9b      	ldrb	r3, [r3, #22]
 8001966:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 8001968:	b662      	cpsie	i
}
 800196a:	bf00      	nop
    __enable_irq();
    return state;
 800196c:	79fb      	ldrb	r3, [r7, #7]
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000348 	.word	0x20000348

08001980 <main>:
#define PIR_NVIC_PRIORITY				2

static bool opened = true; // Theo dõi trạng thái trước đó của PIR1
static bool	closed = false;

int main(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af02      	add	r7, sp, #8
  SystemClock_Config(); // Configure system clocks using your rcc_config.c
 8001986:	f7ff fc6d 	bl	8001264 <SystemClock_Config>
  SysTick_Init();         // Initialize SysTick for Delay_ms and GetTick
 800198a:	f7ff fd2f 	bl	80013ec <SysTick_Init>


  LimitSwitchService_Init(PIR1_PORT, PIR1_PIN, PIR2_PORT, PIR2_PIN, PIR_NVIC_PRIORITY);
 800198e:	2302      	movs	r3, #2
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2309      	movs	r3, #9
 8001994:	4a11      	ldr	r2, [pc, #68]	@ (80019dc <main+0x5c>)
 8001996:	2108      	movs	r1, #8
 8001998:	4810      	ldr	r0, [pc, #64]	@ (80019dc <main+0x5c>)
 800199a:	f7ff ff43 	bl	8001824 <LimitSwitchService_Init>
  LightService_Init(RELAY1_PORT, RELAY1_PIN);
 800199e:	2109      	movs	r1, #9
 80019a0:	480f      	ldr	r0, [pc, #60]	@ (80019e0 <main+0x60>)
 80019a2:	f7ff fe7d 	bl	80016a0 <LightService_Init>
  LightService_TurnOff();
 80019a6:	f7ff fecf 	bl	8001748 <LightService_TurnOff>

  while (1){
	  opened = LimitSwitchService_IsDoorFullyOpen();
 80019aa:	f7ff ffc1 	bl	8001930 <LimitSwitchService_IsDoorFullyOpen>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <main+0x64>)
 80019b4:	701a      	strb	r2, [r3, #0]
	  closed = LimitSwitchService_IsDoorFullyClosed();
 80019b6:	f7ff ffcf 	bl	8001958 <LimitSwitchService_IsDoorFullyClosed>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <main+0x68>)
 80019c0:	701a      	strb	r2, [r3, #0]

	  if(opened == true){
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <main+0x64>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <main+0x50>
		  LightService_TurnOn();
 80019ca:	f7ff fea3 	bl	8001714 <LightService_TurnOn>
 80019ce:	e001      	b.n	80019d4 <main+0x54>
	  } else {
		  LightService_TurnOff();
 80019d0:	f7ff feba 	bl	8001748 <LightService_TurnOff>
	  }
	  Delay_ms(100); // Kiểm tra trạng thái PIR mỗi 100ms
 80019d4:	2064      	movs	r0, #100	@ 0x64
 80019d6:	f7ff fd37 	bl	8001448 <Delay_ms>
	  opened = LimitSwitchService_IsDoorFullyOpen();
 80019da:	e7e6      	b.n	80019aa <main+0x2a>
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000368 	.word	0x20000368

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <NMI_Handler+0x4>

080019f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <MemManage_Handler+0x4>

08001a04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  return 1;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <_kill>:

int _kill(int pid, int sig)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a58:	f000 fea2 	bl	80027a0 <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2216      	movs	r2, #22
 8001a60:	601a      	str	r2, [r3, #0]
  return -1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_exit>:

void _exit (int status)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a76:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffe7 	bl	8001a4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <_exit+0x12>

08001a84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e00a      	b.n	8001aac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a96:	f3af 8000 	nop.w
 8001a9a:	4601      	mov	r1, r0
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	60ba      	str	r2, [r7, #8]
 8001aa2:	b2ca      	uxtb	r2, r1
 8001aa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf0      	blt.n	8001a96 <_read+0x12>
  }

  return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e009      	b.n	8001ae4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	60ba      	str	r2, [r7, #8]
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf1      	blt.n	8001ad0 <_write+0x12>
  }
  return len;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_close>:

int _close(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_isatty>:

int _isatty(int file)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	@ (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d207      	bcs.n	8001ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b90:	f000 fe06 	bl	80027a0 <__errno>
 8001b94:	4603      	mov	r3, r0
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a05      	ldr	r2, [pc, #20]	@ (8001bc4 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20018000 	.word	0x20018000
 8001bc0:	00000400 	.word	0x00000400
 8001bc4:	2000036c 	.word	0x2000036c
 8001bc8:	200004c0 	.word	0x200004c0

08001bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <SystemInit+0x20>)
 8001bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bd6:	4a05      	ldr	r2, [pc, #20]	@ (8001bec <SystemInit+0x20>)
 8001bd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bf4:	f7ff ffea 	bl	8001bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf8:	480c      	ldr	r0, [pc, #48]	@ (8001c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bfa:	490d      	ldr	r1, [pc, #52]	@ (8001c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c10:	4c0a      	ldr	r4, [pc, #40]	@ (8001c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f000 fdc5 	bl	80027ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c22:	f7ff fead 	bl	8001980 <main>
  bx  lr    
 8001c26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001c34:	080048d8 	.word	0x080048d8
  ldr r2, =_sbss
 8001c38:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001c3c:	200004bc 	.word	0x200004bc

08001c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC_IRQHandler>

08001c42 <__cvt>:
 8001c42:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c46:	ec57 6b10 	vmov	r6, r7, d0
 8001c4a:	2f00      	cmp	r7, #0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	4619      	mov	r1, r3
 8001c50:	463b      	mov	r3, r7
 8001c52:	bfbb      	ittet	lt
 8001c54:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001c58:	461f      	movlt	r7, r3
 8001c5a:	2300      	movge	r3, #0
 8001c5c:	232d      	movlt	r3, #45	@ 0x2d
 8001c5e:	700b      	strb	r3, [r1, #0]
 8001c60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001c62:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8001c66:	4691      	mov	r9, r2
 8001c68:	f023 0820 	bic.w	r8, r3, #32
 8001c6c:	bfbc      	itt	lt
 8001c6e:	4632      	movlt	r2, r6
 8001c70:	4616      	movlt	r6, r2
 8001c72:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001c76:	d005      	beq.n	8001c84 <__cvt+0x42>
 8001c78:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8001c7c:	d100      	bne.n	8001c80 <__cvt+0x3e>
 8001c7e:	3401      	adds	r4, #1
 8001c80:	2102      	movs	r1, #2
 8001c82:	e000      	b.n	8001c86 <__cvt+0x44>
 8001c84:	2103      	movs	r1, #3
 8001c86:	ab03      	add	r3, sp, #12
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	ab02      	add	r3, sp, #8
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	ec47 6b10 	vmov	d0, r6, r7
 8001c92:	4653      	mov	r3, sl
 8001c94:	4622      	mov	r2, r4
 8001c96:	f000 fe47 	bl	8002928 <_dtoa_r>
 8001c9a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	d119      	bne.n	8001cd6 <__cvt+0x94>
 8001ca2:	f019 0f01 	tst.w	r9, #1
 8001ca6:	d00e      	beq.n	8001cc6 <__cvt+0x84>
 8001ca8:	eb00 0904 	add.w	r9, r0, r4
 8001cac:	2200      	movs	r2, #0
 8001cae:	2300      	movs	r3, #0
 8001cb0:	4630      	mov	r0, r6
 8001cb2:	4639      	mov	r1, r7
 8001cb4:	f7fe ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 8001cb8:	b108      	cbz	r0, 8001cbe <__cvt+0x7c>
 8001cba:	f8cd 900c 	str.w	r9, [sp, #12]
 8001cbe:	2230      	movs	r2, #48	@ 0x30
 8001cc0:	9b03      	ldr	r3, [sp, #12]
 8001cc2:	454b      	cmp	r3, r9
 8001cc4:	d31e      	bcc.n	8001d04 <__cvt+0xc2>
 8001cc6:	9b03      	ldr	r3, [sp, #12]
 8001cc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001cca:	1b5b      	subs	r3, r3, r5
 8001ccc:	4628      	mov	r0, r5
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	b004      	add	sp, #16
 8001cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cd6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001cda:	eb00 0904 	add.w	r9, r0, r4
 8001cde:	d1e5      	bne.n	8001cac <__cvt+0x6a>
 8001ce0:	7803      	ldrb	r3, [r0, #0]
 8001ce2:	2b30      	cmp	r3, #48	@ 0x30
 8001ce4:	d10a      	bne.n	8001cfc <__cvt+0xba>
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2300      	movs	r3, #0
 8001cea:	4630      	mov	r0, r6
 8001cec:	4639      	mov	r1, r7
 8001cee:	f7fe fef3 	bl	8000ad8 <__aeabi_dcmpeq>
 8001cf2:	b918      	cbnz	r0, 8001cfc <__cvt+0xba>
 8001cf4:	f1c4 0401 	rsb	r4, r4, #1
 8001cf8:	f8ca 4000 	str.w	r4, [sl]
 8001cfc:	f8da 3000 	ldr.w	r3, [sl]
 8001d00:	4499      	add	r9, r3
 8001d02:	e7d3      	b.n	8001cac <__cvt+0x6a>
 8001d04:	1c59      	adds	r1, r3, #1
 8001d06:	9103      	str	r1, [sp, #12]
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e7d9      	b.n	8001cc0 <__cvt+0x7e>

08001d0c <__exponent>:
 8001d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d0e:	2900      	cmp	r1, #0
 8001d10:	bfba      	itte	lt
 8001d12:	4249      	neglt	r1, r1
 8001d14:	232d      	movlt	r3, #45	@ 0x2d
 8001d16:	232b      	movge	r3, #43	@ 0x2b
 8001d18:	2909      	cmp	r1, #9
 8001d1a:	7002      	strb	r2, [r0, #0]
 8001d1c:	7043      	strb	r3, [r0, #1]
 8001d1e:	dd29      	ble.n	8001d74 <__exponent+0x68>
 8001d20:	f10d 0307 	add.w	r3, sp, #7
 8001d24:	461d      	mov	r5, r3
 8001d26:	270a      	movs	r7, #10
 8001d28:	461a      	mov	r2, r3
 8001d2a:	fbb1 f6f7 	udiv	r6, r1, r7
 8001d2e:	fb07 1416 	mls	r4, r7, r6, r1
 8001d32:	3430      	adds	r4, #48	@ 0x30
 8001d34:	f802 4c01 	strb.w	r4, [r2, #-1]
 8001d38:	460c      	mov	r4, r1
 8001d3a:	2c63      	cmp	r4, #99	@ 0x63
 8001d3c:	f103 33ff 	add.w	r3, r3, #4294967295
 8001d40:	4631      	mov	r1, r6
 8001d42:	dcf1      	bgt.n	8001d28 <__exponent+0x1c>
 8001d44:	3130      	adds	r1, #48	@ 0x30
 8001d46:	1e94      	subs	r4, r2, #2
 8001d48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001d4c:	1c41      	adds	r1, r0, #1
 8001d4e:	4623      	mov	r3, r4
 8001d50:	42ab      	cmp	r3, r5
 8001d52:	d30a      	bcc.n	8001d6a <__exponent+0x5e>
 8001d54:	f10d 0309 	add.w	r3, sp, #9
 8001d58:	1a9b      	subs	r3, r3, r2
 8001d5a:	42ac      	cmp	r4, r5
 8001d5c:	bf88      	it	hi
 8001d5e:	2300      	movhi	r3, #0
 8001d60:	3302      	adds	r3, #2
 8001d62:	4403      	add	r3, r0
 8001d64:	1a18      	subs	r0, r3, r0
 8001d66:	b003      	add	sp, #12
 8001d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d6a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001d6e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8001d72:	e7ed      	b.n	8001d50 <__exponent+0x44>
 8001d74:	2330      	movs	r3, #48	@ 0x30
 8001d76:	3130      	adds	r1, #48	@ 0x30
 8001d78:	7083      	strb	r3, [r0, #2]
 8001d7a:	70c1      	strb	r1, [r0, #3]
 8001d7c:	1d03      	adds	r3, r0, #4
 8001d7e:	e7f1      	b.n	8001d64 <__exponent+0x58>

08001d80 <_printf_float>:
 8001d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d84:	b08d      	sub	sp, #52	@ 0x34
 8001d86:	460c      	mov	r4, r1
 8001d88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8001d8c:	4616      	mov	r6, r2
 8001d8e:	461f      	mov	r7, r3
 8001d90:	4605      	mov	r5, r0
 8001d92:	f000 fcbb 	bl	800270c <_localeconv_r>
 8001d96:	6803      	ldr	r3, [r0, #0]
 8001d98:	9304      	str	r3, [sp, #16]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fa70 	bl	8000280 <strlen>
 8001da0:	2300      	movs	r3, #0
 8001da2:	930a      	str	r3, [sp, #40]	@ 0x28
 8001da4:	f8d8 3000 	ldr.w	r3, [r8]
 8001da8:	9005      	str	r0, [sp, #20]
 8001daa:	3307      	adds	r3, #7
 8001dac:	f023 0307 	bic.w	r3, r3, #7
 8001db0:	f103 0208 	add.w	r2, r3, #8
 8001db4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8001db8:	f8d4 b000 	ldr.w	fp, [r4]
 8001dbc:	f8c8 2000 	str.w	r2, [r8]
 8001dc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001dc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8001dc8:	9307      	str	r3, [sp, #28]
 8001dca:	f8cd 8018 	str.w	r8, [sp, #24]
 8001dce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8001dd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8002048 <_printf_float+0x2c8>)
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	f7fe feae 	bl	8000b3c <__aeabi_dcmpun>
 8001de0:	bb70      	cbnz	r0, 8001e40 <_printf_float+0xc0>
 8001de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001de6:	4b98      	ldr	r3, [pc, #608]	@ (8002048 <_printf_float+0x2c8>)
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	f7fe fe88 	bl	8000b00 <__aeabi_dcmple>
 8001df0:	bb30      	cbnz	r0, 8001e40 <_printf_float+0xc0>
 8001df2:	2200      	movs	r2, #0
 8001df4:	2300      	movs	r3, #0
 8001df6:	4640      	mov	r0, r8
 8001df8:	4649      	mov	r1, r9
 8001dfa:	f7fe fe77 	bl	8000aec <__aeabi_dcmplt>
 8001dfe:	b110      	cbz	r0, 8001e06 <_printf_float+0x86>
 8001e00:	232d      	movs	r3, #45	@ 0x2d
 8001e02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e06:	4a91      	ldr	r2, [pc, #580]	@ (800204c <_printf_float+0x2cc>)
 8001e08:	4b91      	ldr	r3, [pc, #580]	@ (8002050 <_printf_float+0x2d0>)
 8001e0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8001e0e:	bf94      	ite	ls
 8001e10:	4690      	movls	r8, r2
 8001e12:	4698      	movhi	r8, r3
 8001e14:	2303      	movs	r3, #3
 8001e16:	6123      	str	r3, [r4, #16]
 8001e18:	f02b 0304 	bic.w	r3, fp, #4
 8001e1c:	6023      	str	r3, [r4, #0]
 8001e1e:	f04f 0900 	mov.w	r9, #0
 8001e22:	9700      	str	r7, [sp, #0]
 8001e24:	4633      	mov	r3, r6
 8001e26:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001e28:	4621      	mov	r1, r4
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	f000 f9d2 	bl	80021d4 <_printf_common>
 8001e30:	3001      	adds	r0, #1
 8001e32:	f040 808d 	bne.w	8001f50 <_printf_float+0x1d0>
 8001e36:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3a:	b00d      	add	sp, #52	@ 0x34
 8001e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e40:	4642      	mov	r2, r8
 8001e42:	464b      	mov	r3, r9
 8001e44:	4640      	mov	r0, r8
 8001e46:	4649      	mov	r1, r9
 8001e48:	f7fe fe78 	bl	8000b3c <__aeabi_dcmpun>
 8001e4c:	b140      	cbz	r0, 8001e60 <_printf_float+0xe0>
 8001e4e:	464b      	mov	r3, r9
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bfbc      	itt	lt
 8001e54:	232d      	movlt	r3, #45	@ 0x2d
 8001e56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8001e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002054 <_printf_float+0x2d4>)
 8001e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8002058 <_printf_float+0x2d8>)
 8001e5e:	e7d4      	b.n	8001e0a <_printf_float+0x8a>
 8001e60:	6863      	ldr	r3, [r4, #4]
 8001e62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8001e66:	9206      	str	r2, [sp, #24]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	d13b      	bne.n	8001ee4 <_printf_float+0x164>
 8001e6c:	2306      	movs	r3, #6
 8001e6e:	6063      	str	r3, [r4, #4]
 8001e70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8001e74:	2300      	movs	r3, #0
 8001e76:	6022      	str	r2, [r4, #0]
 8001e78:	9303      	str	r3, [sp, #12]
 8001e7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8001e7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8001e80:	ab09      	add	r3, sp, #36	@ 0x24
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	6861      	ldr	r1, [r4, #4]
 8001e86:	ec49 8b10 	vmov	d0, r8, r9
 8001e8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8001e8e:	4628      	mov	r0, r5
 8001e90:	f7ff fed7 	bl	8001c42 <__cvt>
 8001e94:	9b06      	ldr	r3, [sp, #24]
 8001e96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8001e98:	2b47      	cmp	r3, #71	@ 0x47
 8001e9a:	4680      	mov	r8, r0
 8001e9c:	d129      	bne.n	8001ef2 <_printf_float+0x172>
 8001e9e:	1cc8      	adds	r0, r1, #3
 8001ea0:	db02      	blt.n	8001ea8 <_printf_float+0x128>
 8001ea2:	6863      	ldr	r3, [r4, #4]
 8001ea4:	4299      	cmp	r1, r3
 8001ea6:	dd41      	ble.n	8001f2c <_printf_float+0x1ac>
 8001ea8:	f1aa 0a02 	sub.w	sl, sl, #2
 8001eac:	fa5f fa8a 	uxtb.w	sl, sl
 8001eb0:	3901      	subs	r1, #1
 8001eb2:	4652      	mov	r2, sl
 8001eb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8001eb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8001eba:	f7ff ff27 	bl	8001d0c <__exponent>
 8001ebe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001ec0:	1813      	adds	r3, r2, r0
 8001ec2:	2a01      	cmp	r2, #1
 8001ec4:	4681      	mov	r9, r0
 8001ec6:	6123      	str	r3, [r4, #16]
 8001ec8:	dc02      	bgt.n	8001ed0 <_printf_float+0x150>
 8001eca:	6822      	ldr	r2, [r4, #0]
 8001ecc:	07d2      	lsls	r2, r2, #31
 8001ece:	d501      	bpl.n	8001ed4 <_printf_float+0x154>
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	6123      	str	r3, [r4, #16]
 8001ed4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0a2      	beq.n	8001e22 <_printf_float+0xa2>
 8001edc:	232d      	movs	r3, #45	@ 0x2d
 8001ede:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ee2:	e79e      	b.n	8001e22 <_printf_float+0xa2>
 8001ee4:	9a06      	ldr	r2, [sp, #24]
 8001ee6:	2a47      	cmp	r2, #71	@ 0x47
 8001ee8:	d1c2      	bne.n	8001e70 <_printf_float+0xf0>
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1c0      	bne.n	8001e70 <_printf_float+0xf0>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e7bd      	b.n	8001e6e <_printf_float+0xee>
 8001ef2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8001ef6:	d9db      	bls.n	8001eb0 <_printf_float+0x130>
 8001ef8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8001efc:	d118      	bne.n	8001f30 <_printf_float+0x1b0>
 8001efe:	2900      	cmp	r1, #0
 8001f00:	6863      	ldr	r3, [r4, #4]
 8001f02:	dd0b      	ble.n	8001f1c <_printf_float+0x19c>
 8001f04:	6121      	str	r1, [r4, #16]
 8001f06:	b913      	cbnz	r3, 8001f0e <_printf_float+0x18e>
 8001f08:	6822      	ldr	r2, [r4, #0]
 8001f0a:	07d0      	lsls	r0, r2, #31
 8001f0c:	d502      	bpl.n	8001f14 <_printf_float+0x194>
 8001f0e:	3301      	adds	r3, #1
 8001f10:	440b      	add	r3, r1
 8001f12:	6123      	str	r3, [r4, #16]
 8001f14:	65a1      	str	r1, [r4, #88]	@ 0x58
 8001f16:	f04f 0900 	mov.w	r9, #0
 8001f1a:	e7db      	b.n	8001ed4 <_printf_float+0x154>
 8001f1c:	b913      	cbnz	r3, 8001f24 <_printf_float+0x1a4>
 8001f1e:	6822      	ldr	r2, [r4, #0]
 8001f20:	07d2      	lsls	r2, r2, #31
 8001f22:	d501      	bpl.n	8001f28 <_printf_float+0x1a8>
 8001f24:	3302      	adds	r3, #2
 8001f26:	e7f4      	b.n	8001f12 <_printf_float+0x192>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e7f2      	b.n	8001f12 <_printf_float+0x192>
 8001f2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8001f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001f32:	4299      	cmp	r1, r3
 8001f34:	db05      	blt.n	8001f42 <_printf_float+0x1c2>
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	6121      	str	r1, [r4, #16]
 8001f3a:	07d8      	lsls	r0, r3, #31
 8001f3c:	d5ea      	bpl.n	8001f14 <_printf_float+0x194>
 8001f3e:	1c4b      	adds	r3, r1, #1
 8001f40:	e7e7      	b.n	8001f12 <_printf_float+0x192>
 8001f42:	2900      	cmp	r1, #0
 8001f44:	bfd4      	ite	le
 8001f46:	f1c1 0202 	rsble	r2, r1, #2
 8001f4a:	2201      	movgt	r2, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	e7e0      	b.n	8001f12 <_printf_float+0x192>
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	055a      	lsls	r2, r3, #21
 8001f54:	d407      	bmi.n	8001f66 <_printf_float+0x1e6>
 8001f56:	6923      	ldr	r3, [r4, #16]
 8001f58:	4642      	mov	r2, r8
 8001f5a:	4631      	mov	r1, r6
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	47b8      	blx	r7
 8001f60:	3001      	adds	r0, #1
 8001f62:	d12b      	bne.n	8001fbc <_printf_float+0x23c>
 8001f64:	e767      	b.n	8001e36 <_printf_float+0xb6>
 8001f66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8001f6a:	f240 80dd 	bls.w	8002128 <_printf_float+0x3a8>
 8001f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8001f72:	2200      	movs	r2, #0
 8001f74:	2300      	movs	r3, #0
 8001f76:	f7fe fdaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d033      	beq.n	8001fe6 <_printf_float+0x266>
 8001f7e:	4a37      	ldr	r2, [pc, #220]	@ (800205c <_printf_float+0x2dc>)
 8001f80:	2301      	movs	r3, #1
 8001f82:	4631      	mov	r1, r6
 8001f84:	4628      	mov	r0, r5
 8001f86:	47b8      	blx	r7
 8001f88:	3001      	adds	r0, #1
 8001f8a:	f43f af54 	beq.w	8001e36 <_printf_float+0xb6>
 8001f8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8001f92:	4543      	cmp	r3, r8
 8001f94:	db02      	blt.n	8001f9c <_printf_float+0x21c>
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	07d8      	lsls	r0, r3, #31
 8001f9a:	d50f      	bpl.n	8001fbc <_printf_float+0x23c>
 8001f9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001fa0:	4631      	mov	r1, r6
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	47b8      	blx	r7
 8001fa6:	3001      	adds	r0, #1
 8001fa8:	f43f af45 	beq.w	8001e36 <_printf_float+0xb6>
 8001fac:	f04f 0900 	mov.w	r9, #0
 8001fb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8001fb4:	f104 0a1a 	add.w	sl, r4, #26
 8001fb8:	45c8      	cmp	r8, r9
 8001fba:	dc09      	bgt.n	8001fd0 <_printf_float+0x250>
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	079b      	lsls	r3, r3, #30
 8001fc0:	f100 8103 	bmi.w	80021ca <_printf_float+0x44a>
 8001fc4:	68e0      	ldr	r0, [r4, #12]
 8001fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001fc8:	4298      	cmp	r0, r3
 8001fca:	bfb8      	it	lt
 8001fcc:	4618      	movlt	r0, r3
 8001fce:	e734      	b.n	8001e3a <_printf_float+0xba>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	4631      	mov	r1, r6
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	47b8      	blx	r7
 8001fda:	3001      	adds	r0, #1
 8001fdc:	f43f af2b 	beq.w	8001e36 <_printf_float+0xb6>
 8001fe0:	f109 0901 	add.w	r9, r9, #1
 8001fe4:	e7e8      	b.n	8001fb8 <_printf_float+0x238>
 8001fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	dc39      	bgt.n	8002060 <_printf_float+0x2e0>
 8001fec:	4a1b      	ldr	r2, [pc, #108]	@ (800205c <_printf_float+0x2dc>)
 8001fee:	2301      	movs	r3, #1
 8001ff0:	4631      	mov	r1, r6
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	47b8      	blx	r7
 8001ff6:	3001      	adds	r0, #1
 8001ff8:	f43f af1d 	beq.w	8001e36 <_printf_float+0xb6>
 8001ffc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002000:	ea59 0303 	orrs.w	r3, r9, r3
 8002004:	d102      	bne.n	800200c <_printf_float+0x28c>
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	07d9      	lsls	r1, r3, #31
 800200a:	d5d7      	bpl.n	8001fbc <_printf_float+0x23c>
 800200c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002010:	4631      	mov	r1, r6
 8002012:	4628      	mov	r0, r5
 8002014:	47b8      	blx	r7
 8002016:	3001      	adds	r0, #1
 8002018:	f43f af0d 	beq.w	8001e36 <_printf_float+0xb6>
 800201c:	f04f 0a00 	mov.w	sl, #0
 8002020:	f104 0b1a 	add.w	fp, r4, #26
 8002024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002026:	425b      	negs	r3, r3
 8002028:	4553      	cmp	r3, sl
 800202a:	dc01      	bgt.n	8002030 <_printf_float+0x2b0>
 800202c:	464b      	mov	r3, r9
 800202e:	e793      	b.n	8001f58 <_printf_float+0x1d8>
 8002030:	2301      	movs	r3, #1
 8002032:	465a      	mov	r2, fp
 8002034:	4631      	mov	r1, r6
 8002036:	4628      	mov	r0, r5
 8002038:	47b8      	blx	r7
 800203a:	3001      	adds	r0, #1
 800203c:	f43f aefb 	beq.w	8001e36 <_printf_float+0xb6>
 8002040:	f10a 0a01 	add.w	sl, sl, #1
 8002044:	e7ee      	b.n	8002024 <_printf_float+0x2a4>
 8002046:	bf00      	nop
 8002048:	7fefffff 	.word	0x7fefffff
 800204c:	08004558 	.word	0x08004558
 8002050:	0800455c 	.word	0x0800455c
 8002054:	08004560 	.word	0x08004560
 8002058:	08004564 	.word	0x08004564
 800205c:	08004568 	.word	0x08004568
 8002060:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002062:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002066:	4553      	cmp	r3, sl
 8002068:	bfa8      	it	ge
 800206a:	4653      	movge	r3, sl
 800206c:	2b00      	cmp	r3, #0
 800206e:	4699      	mov	r9, r3
 8002070:	dc36      	bgt.n	80020e0 <_printf_float+0x360>
 8002072:	f04f 0b00 	mov.w	fp, #0
 8002076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800207a:	f104 021a 	add.w	r2, r4, #26
 800207e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002080:	9306      	str	r3, [sp, #24]
 8002082:	eba3 0309 	sub.w	r3, r3, r9
 8002086:	455b      	cmp	r3, fp
 8002088:	dc31      	bgt.n	80020ee <_printf_float+0x36e>
 800208a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800208c:	459a      	cmp	sl, r3
 800208e:	dc3a      	bgt.n	8002106 <_printf_float+0x386>
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	07da      	lsls	r2, r3, #31
 8002094:	d437      	bmi.n	8002106 <_printf_float+0x386>
 8002096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002098:	ebaa 0903 	sub.w	r9, sl, r3
 800209c:	9b06      	ldr	r3, [sp, #24]
 800209e:	ebaa 0303 	sub.w	r3, sl, r3
 80020a2:	4599      	cmp	r9, r3
 80020a4:	bfa8      	it	ge
 80020a6:	4699      	movge	r9, r3
 80020a8:	f1b9 0f00 	cmp.w	r9, #0
 80020ac:	dc33      	bgt.n	8002116 <_printf_float+0x396>
 80020ae:	f04f 0800 	mov.w	r8, #0
 80020b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80020b6:	f104 0b1a 	add.w	fp, r4, #26
 80020ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80020bc:	ebaa 0303 	sub.w	r3, sl, r3
 80020c0:	eba3 0309 	sub.w	r3, r3, r9
 80020c4:	4543      	cmp	r3, r8
 80020c6:	f77f af79 	ble.w	8001fbc <_printf_float+0x23c>
 80020ca:	2301      	movs	r3, #1
 80020cc:	465a      	mov	r2, fp
 80020ce:	4631      	mov	r1, r6
 80020d0:	4628      	mov	r0, r5
 80020d2:	47b8      	blx	r7
 80020d4:	3001      	adds	r0, #1
 80020d6:	f43f aeae 	beq.w	8001e36 <_printf_float+0xb6>
 80020da:	f108 0801 	add.w	r8, r8, #1
 80020de:	e7ec      	b.n	80020ba <_printf_float+0x33a>
 80020e0:	4642      	mov	r2, r8
 80020e2:	4631      	mov	r1, r6
 80020e4:	4628      	mov	r0, r5
 80020e6:	47b8      	blx	r7
 80020e8:	3001      	adds	r0, #1
 80020ea:	d1c2      	bne.n	8002072 <_printf_float+0x2f2>
 80020ec:	e6a3      	b.n	8001e36 <_printf_float+0xb6>
 80020ee:	2301      	movs	r3, #1
 80020f0:	4631      	mov	r1, r6
 80020f2:	4628      	mov	r0, r5
 80020f4:	9206      	str	r2, [sp, #24]
 80020f6:	47b8      	blx	r7
 80020f8:	3001      	adds	r0, #1
 80020fa:	f43f ae9c 	beq.w	8001e36 <_printf_float+0xb6>
 80020fe:	9a06      	ldr	r2, [sp, #24]
 8002100:	f10b 0b01 	add.w	fp, fp, #1
 8002104:	e7bb      	b.n	800207e <_printf_float+0x2fe>
 8002106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800210a:	4631      	mov	r1, r6
 800210c:	4628      	mov	r0, r5
 800210e:	47b8      	blx	r7
 8002110:	3001      	adds	r0, #1
 8002112:	d1c0      	bne.n	8002096 <_printf_float+0x316>
 8002114:	e68f      	b.n	8001e36 <_printf_float+0xb6>
 8002116:	9a06      	ldr	r2, [sp, #24]
 8002118:	464b      	mov	r3, r9
 800211a:	4442      	add	r2, r8
 800211c:	4631      	mov	r1, r6
 800211e:	4628      	mov	r0, r5
 8002120:	47b8      	blx	r7
 8002122:	3001      	adds	r0, #1
 8002124:	d1c3      	bne.n	80020ae <_printf_float+0x32e>
 8002126:	e686      	b.n	8001e36 <_printf_float+0xb6>
 8002128:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800212c:	f1ba 0f01 	cmp.w	sl, #1
 8002130:	dc01      	bgt.n	8002136 <_printf_float+0x3b6>
 8002132:	07db      	lsls	r3, r3, #31
 8002134:	d536      	bpl.n	80021a4 <_printf_float+0x424>
 8002136:	2301      	movs	r3, #1
 8002138:	4642      	mov	r2, r8
 800213a:	4631      	mov	r1, r6
 800213c:	4628      	mov	r0, r5
 800213e:	47b8      	blx	r7
 8002140:	3001      	adds	r0, #1
 8002142:	f43f ae78 	beq.w	8001e36 <_printf_float+0xb6>
 8002146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800214a:	4631      	mov	r1, r6
 800214c:	4628      	mov	r0, r5
 800214e:	47b8      	blx	r7
 8002150:	3001      	adds	r0, #1
 8002152:	f43f ae70 	beq.w	8001e36 <_printf_float+0xb6>
 8002156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800215a:	2200      	movs	r2, #0
 800215c:	2300      	movs	r3, #0
 800215e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002162:	f7fe fcb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8002166:	b9c0      	cbnz	r0, 800219a <_printf_float+0x41a>
 8002168:	4653      	mov	r3, sl
 800216a:	f108 0201 	add.w	r2, r8, #1
 800216e:	4631      	mov	r1, r6
 8002170:	4628      	mov	r0, r5
 8002172:	47b8      	blx	r7
 8002174:	3001      	adds	r0, #1
 8002176:	d10c      	bne.n	8002192 <_printf_float+0x412>
 8002178:	e65d      	b.n	8001e36 <_printf_float+0xb6>
 800217a:	2301      	movs	r3, #1
 800217c:	465a      	mov	r2, fp
 800217e:	4631      	mov	r1, r6
 8002180:	4628      	mov	r0, r5
 8002182:	47b8      	blx	r7
 8002184:	3001      	adds	r0, #1
 8002186:	f43f ae56 	beq.w	8001e36 <_printf_float+0xb6>
 800218a:	f108 0801 	add.w	r8, r8, #1
 800218e:	45d0      	cmp	r8, sl
 8002190:	dbf3      	blt.n	800217a <_printf_float+0x3fa>
 8002192:	464b      	mov	r3, r9
 8002194:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002198:	e6df      	b.n	8001f5a <_printf_float+0x1da>
 800219a:	f04f 0800 	mov.w	r8, #0
 800219e:	f104 0b1a 	add.w	fp, r4, #26
 80021a2:	e7f4      	b.n	800218e <_printf_float+0x40e>
 80021a4:	2301      	movs	r3, #1
 80021a6:	4642      	mov	r2, r8
 80021a8:	e7e1      	b.n	800216e <_printf_float+0x3ee>
 80021aa:	2301      	movs	r3, #1
 80021ac:	464a      	mov	r2, r9
 80021ae:	4631      	mov	r1, r6
 80021b0:	4628      	mov	r0, r5
 80021b2:	47b8      	blx	r7
 80021b4:	3001      	adds	r0, #1
 80021b6:	f43f ae3e 	beq.w	8001e36 <_printf_float+0xb6>
 80021ba:	f108 0801 	add.w	r8, r8, #1
 80021be:	68e3      	ldr	r3, [r4, #12]
 80021c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80021c2:	1a5b      	subs	r3, r3, r1
 80021c4:	4543      	cmp	r3, r8
 80021c6:	dcf0      	bgt.n	80021aa <_printf_float+0x42a>
 80021c8:	e6fc      	b.n	8001fc4 <_printf_float+0x244>
 80021ca:	f04f 0800 	mov.w	r8, #0
 80021ce:	f104 0919 	add.w	r9, r4, #25
 80021d2:	e7f4      	b.n	80021be <_printf_float+0x43e>

080021d4 <_printf_common>:
 80021d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021d8:	4616      	mov	r6, r2
 80021da:	4698      	mov	r8, r3
 80021dc:	688a      	ldr	r2, [r1, #8]
 80021de:	690b      	ldr	r3, [r1, #16]
 80021e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80021e4:	4293      	cmp	r3, r2
 80021e6:	bfb8      	it	lt
 80021e8:	4613      	movlt	r3, r2
 80021ea:	6033      	str	r3, [r6, #0]
 80021ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80021f0:	4607      	mov	r7, r0
 80021f2:	460c      	mov	r4, r1
 80021f4:	b10a      	cbz	r2, 80021fa <_printf_common+0x26>
 80021f6:	3301      	adds	r3, #1
 80021f8:	6033      	str	r3, [r6, #0]
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	0699      	lsls	r1, r3, #26
 80021fe:	bf42      	ittt	mi
 8002200:	6833      	ldrmi	r3, [r6, #0]
 8002202:	3302      	addmi	r3, #2
 8002204:	6033      	strmi	r3, [r6, #0]
 8002206:	6825      	ldr	r5, [r4, #0]
 8002208:	f015 0506 	ands.w	r5, r5, #6
 800220c:	d106      	bne.n	800221c <_printf_common+0x48>
 800220e:	f104 0a19 	add.w	sl, r4, #25
 8002212:	68e3      	ldr	r3, [r4, #12]
 8002214:	6832      	ldr	r2, [r6, #0]
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	42ab      	cmp	r3, r5
 800221a:	dc26      	bgt.n	800226a <_printf_common+0x96>
 800221c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002220:	6822      	ldr	r2, [r4, #0]
 8002222:	3b00      	subs	r3, #0
 8002224:	bf18      	it	ne
 8002226:	2301      	movne	r3, #1
 8002228:	0692      	lsls	r2, r2, #26
 800222a:	d42b      	bmi.n	8002284 <_printf_common+0xb0>
 800222c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002230:	4641      	mov	r1, r8
 8002232:	4638      	mov	r0, r7
 8002234:	47c8      	blx	r9
 8002236:	3001      	adds	r0, #1
 8002238:	d01e      	beq.n	8002278 <_printf_common+0xa4>
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	6922      	ldr	r2, [r4, #16]
 800223e:	f003 0306 	and.w	r3, r3, #6
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf02      	ittt	eq
 8002246:	68e5      	ldreq	r5, [r4, #12]
 8002248:	6833      	ldreq	r3, [r6, #0]
 800224a:	1aed      	subeq	r5, r5, r3
 800224c:	68a3      	ldr	r3, [r4, #8]
 800224e:	bf0c      	ite	eq
 8002250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002254:	2500      	movne	r5, #0
 8002256:	4293      	cmp	r3, r2
 8002258:	bfc4      	itt	gt
 800225a:	1a9b      	subgt	r3, r3, r2
 800225c:	18ed      	addgt	r5, r5, r3
 800225e:	2600      	movs	r6, #0
 8002260:	341a      	adds	r4, #26
 8002262:	42b5      	cmp	r5, r6
 8002264:	d11a      	bne.n	800229c <_printf_common+0xc8>
 8002266:	2000      	movs	r0, #0
 8002268:	e008      	b.n	800227c <_printf_common+0xa8>
 800226a:	2301      	movs	r3, #1
 800226c:	4652      	mov	r2, sl
 800226e:	4641      	mov	r1, r8
 8002270:	4638      	mov	r0, r7
 8002272:	47c8      	blx	r9
 8002274:	3001      	adds	r0, #1
 8002276:	d103      	bne.n	8002280 <_printf_common+0xac>
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002280:	3501      	adds	r5, #1
 8002282:	e7c6      	b.n	8002212 <_printf_common+0x3e>
 8002284:	18e1      	adds	r1, r4, r3
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	2030      	movs	r0, #48	@ 0x30
 800228a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800228e:	4422      	add	r2, r4
 8002290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002298:	3302      	adds	r3, #2
 800229a:	e7c7      	b.n	800222c <_printf_common+0x58>
 800229c:	2301      	movs	r3, #1
 800229e:	4622      	mov	r2, r4
 80022a0:	4641      	mov	r1, r8
 80022a2:	4638      	mov	r0, r7
 80022a4:	47c8      	blx	r9
 80022a6:	3001      	adds	r0, #1
 80022a8:	d0e6      	beq.n	8002278 <_printf_common+0xa4>
 80022aa:	3601      	adds	r6, #1
 80022ac:	e7d9      	b.n	8002262 <_printf_common+0x8e>
	...

080022b0 <_printf_i>:
 80022b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022b4:	7e0f      	ldrb	r7, [r1, #24]
 80022b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80022b8:	2f78      	cmp	r7, #120	@ 0x78
 80022ba:	4691      	mov	r9, r2
 80022bc:	4680      	mov	r8, r0
 80022be:	460c      	mov	r4, r1
 80022c0:	469a      	mov	sl, r3
 80022c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80022c6:	d807      	bhi.n	80022d8 <_printf_i+0x28>
 80022c8:	2f62      	cmp	r7, #98	@ 0x62
 80022ca:	d80a      	bhi.n	80022e2 <_printf_i+0x32>
 80022cc:	2f00      	cmp	r7, #0
 80022ce:	f000 80d2 	beq.w	8002476 <_printf_i+0x1c6>
 80022d2:	2f58      	cmp	r7, #88	@ 0x58
 80022d4:	f000 80b9 	beq.w	800244a <_printf_i+0x19a>
 80022d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80022dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80022e0:	e03a      	b.n	8002358 <_printf_i+0xa8>
 80022e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80022e6:	2b15      	cmp	r3, #21
 80022e8:	d8f6      	bhi.n	80022d8 <_printf_i+0x28>
 80022ea:	a101      	add	r1, pc, #4	@ (adr r1, 80022f0 <_printf_i+0x40>)
 80022ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022f0:	08002349 	.word	0x08002349
 80022f4:	0800235d 	.word	0x0800235d
 80022f8:	080022d9 	.word	0x080022d9
 80022fc:	080022d9 	.word	0x080022d9
 8002300:	080022d9 	.word	0x080022d9
 8002304:	080022d9 	.word	0x080022d9
 8002308:	0800235d 	.word	0x0800235d
 800230c:	080022d9 	.word	0x080022d9
 8002310:	080022d9 	.word	0x080022d9
 8002314:	080022d9 	.word	0x080022d9
 8002318:	080022d9 	.word	0x080022d9
 800231c:	0800245d 	.word	0x0800245d
 8002320:	08002387 	.word	0x08002387
 8002324:	08002417 	.word	0x08002417
 8002328:	080022d9 	.word	0x080022d9
 800232c:	080022d9 	.word	0x080022d9
 8002330:	0800247f 	.word	0x0800247f
 8002334:	080022d9 	.word	0x080022d9
 8002338:	08002387 	.word	0x08002387
 800233c:	080022d9 	.word	0x080022d9
 8002340:	080022d9 	.word	0x080022d9
 8002344:	0800241f 	.word	0x0800241f
 8002348:	6833      	ldr	r3, [r6, #0]
 800234a:	1d1a      	adds	r2, r3, #4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6032      	str	r2, [r6, #0]
 8002350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002358:	2301      	movs	r3, #1
 800235a:	e09d      	b.n	8002498 <_printf_i+0x1e8>
 800235c:	6833      	ldr	r3, [r6, #0]
 800235e:	6820      	ldr	r0, [r4, #0]
 8002360:	1d19      	adds	r1, r3, #4
 8002362:	6031      	str	r1, [r6, #0]
 8002364:	0606      	lsls	r6, r0, #24
 8002366:	d501      	bpl.n	800236c <_printf_i+0xbc>
 8002368:	681d      	ldr	r5, [r3, #0]
 800236a:	e003      	b.n	8002374 <_printf_i+0xc4>
 800236c:	0645      	lsls	r5, r0, #25
 800236e:	d5fb      	bpl.n	8002368 <_printf_i+0xb8>
 8002370:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002374:	2d00      	cmp	r5, #0
 8002376:	da03      	bge.n	8002380 <_printf_i+0xd0>
 8002378:	232d      	movs	r3, #45	@ 0x2d
 800237a:	426d      	negs	r5, r5
 800237c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002380:	4859      	ldr	r0, [pc, #356]	@ (80024e8 <_printf_i+0x238>)
 8002382:	230a      	movs	r3, #10
 8002384:	e011      	b.n	80023aa <_printf_i+0xfa>
 8002386:	6821      	ldr	r1, [r4, #0]
 8002388:	6833      	ldr	r3, [r6, #0]
 800238a:	0608      	lsls	r0, r1, #24
 800238c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002390:	d402      	bmi.n	8002398 <_printf_i+0xe8>
 8002392:	0649      	lsls	r1, r1, #25
 8002394:	bf48      	it	mi
 8002396:	b2ad      	uxthmi	r5, r5
 8002398:	2f6f      	cmp	r7, #111	@ 0x6f
 800239a:	4853      	ldr	r0, [pc, #332]	@ (80024e8 <_printf_i+0x238>)
 800239c:	6033      	str	r3, [r6, #0]
 800239e:	bf14      	ite	ne
 80023a0:	230a      	movne	r3, #10
 80023a2:	2308      	moveq	r3, #8
 80023a4:	2100      	movs	r1, #0
 80023a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80023aa:	6866      	ldr	r6, [r4, #4]
 80023ac:	60a6      	str	r6, [r4, #8]
 80023ae:	2e00      	cmp	r6, #0
 80023b0:	bfa2      	ittt	ge
 80023b2:	6821      	ldrge	r1, [r4, #0]
 80023b4:	f021 0104 	bicge.w	r1, r1, #4
 80023b8:	6021      	strge	r1, [r4, #0]
 80023ba:	b90d      	cbnz	r5, 80023c0 <_printf_i+0x110>
 80023bc:	2e00      	cmp	r6, #0
 80023be:	d04b      	beq.n	8002458 <_printf_i+0x1a8>
 80023c0:	4616      	mov	r6, r2
 80023c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80023c6:	fb03 5711 	mls	r7, r3, r1, r5
 80023ca:	5dc7      	ldrb	r7, [r0, r7]
 80023cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80023d0:	462f      	mov	r7, r5
 80023d2:	42bb      	cmp	r3, r7
 80023d4:	460d      	mov	r5, r1
 80023d6:	d9f4      	bls.n	80023c2 <_printf_i+0x112>
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d10b      	bne.n	80023f4 <_printf_i+0x144>
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	07df      	lsls	r7, r3, #31
 80023e0:	d508      	bpl.n	80023f4 <_printf_i+0x144>
 80023e2:	6923      	ldr	r3, [r4, #16]
 80023e4:	6861      	ldr	r1, [r4, #4]
 80023e6:	4299      	cmp	r1, r3
 80023e8:	bfde      	ittt	le
 80023ea:	2330      	movle	r3, #48	@ 0x30
 80023ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80023f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80023f4:	1b92      	subs	r2, r2, r6
 80023f6:	6122      	str	r2, [r4, #16]
 80023f8:	f8cd a000 	str.w	sl, [sp]
 80023fc:	464b      	mov	r3, r9
 80023fe:	aa03      	add	r2, sp, #12
 8002400:	4621      	mov	r1, r4
 8002402:	4640      	mov	r0, r8
 8002404:	f7ff fee6 	bl	80021d4 <_printf_common>
 8002408:	3001      	adds	r0, #1
 800240a:	d14a      	bne.n	80024a2 <_printf_i+0x1f2>
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	b004      	add	sp, #16
 8002412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	f043 0320 	orr.w	r3, r3, #32
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	4833      	ldr	r0, [pc, #204]	@ (80024ec <_printf_i+0x23c>)
 8002420:	2778      	movs	r7, #120	@ 0x78
 8002422:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	6831      	ldr	r1, [r6, #0]
 800242a:	061f      	lsls	r7, r3, #24
 800242c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002430:	d402      	bmi.n	8002438 <_printf_i+0x188>
 8002432:	065f      	lsls	r7, r3, #25
 8002434:	bf48      	it	mi
 8002436:	b2ad      	uxthmi	r5, r5
 8002438:	6031      	str	r1, [r6, #0]
 800243a:	07d9      	lsls	r1, r3, #31
 800243c:	bf44      	itt	mi
 800243e:	f043 0320 	orrmi.w	r3, r3, #32
 8002442:	6023      	strmi	r3, [r4, #0]
 8002444:	b11d      	cbz	r5, 800244e <_printf_i+0x19e>
 8002446:	2310      	movs	r3, #16
 8002448:	e7ac      	b.n	80023a4 <_printf_i+0xf4>
 800244a:	4827      	ldr	r0, [pc, #156]	@ (80024e8 <_printf_i+0x238>)
 800244c:	e7e9      	b.n	8002422 <_printf_i+0x172>
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	f023 0320 	bic.w	r3, r3, #32
 8002454:	6023      	str	r3, [r4, #0]
 8002456:	e7f6      	b.n	8002446 <_printf_i+0x196>
 8002458:	4616      	mov	r6, r2
 800245a:	e7bd      	b.n	80023d8 <_printf_i+0x128>
 800245c:	6833      	ldr	r3, [r6, #0]
 800245e:	6825      	ldr	r5, [r4, #0]
 8002460:	6961      	ldr	r1, [r4, #20]
 8002462:	1d18      	adds	r0, r3, #4
 8002464:	6030      	str	r0, [r6, #0]
 8002466:	062e      	lsls	r6, r5, #24
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	d501      	bpl.n	8002470 <_printf_i+0x1c0>
 800246c:	6019      	str	r1, [r3, #0]
 800246e:	e002      	b.n	8002476 <_printf_i+0x1c6>
 8002470:	0668      	lsls	r0, r5, #25
 8002472:	d5fb      	bpl.n	800246c <_printf_i+0x1bc>
 8002474:	8019      	strh	r1, [r3, #0]
 8002476:	2300      	movs	r3, #0
 8002478:	6123      	str	r3, [r4, #16]
 800247a:	4616      	mov	r6, r2
 800247c:	e7bc      	b.n	80023f8 <_printf_i+0x148>
 800247e:	6833      	ldr	r3, [r6, #0]
 8002480:	1d1a      	adds	r2, r3, #4
 8002482:	6032      	str	r2, [r6, #0]
 8002484:	681e      	ldr	r6, [r3, #0]
 8002486:	6862      	ldr	r2, [r4, #4]
 8002488:	2100      	movs	r1, #0
 800248a:	4630      	mov	r0, r6
 800248c:	f7fd fea8 	bl	80001e0 <memchr>
 8002490:	b108      	cbz	r0, 8002496 <_printf_i+0x1e6>
 8002492:	1b80      	subs	r0, r0, r6
 8002494:	6060      	str	r0, [r4, #4]
 8002496:	6863      	ldr	r3, [r4, #4]
 8002498:	6123      	str	r3, [r4, #16]
 800249a:	2300      	movs	r3, #0
 800249c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024a0:	e7aa      	b.n	80023f8 <_printf_i+0x148>
 80024a2:	6923      	ldr	r3, [r4, #16]
 80024a4:	4632      	mov	r2, r6
 80024a6:	4649      	mov	r1, r9
 80024a8:	4640      	mov	r0, r8
 80024aa:	47d0      	blx	sl
 80024ac:	3001      	adds	r0, #1
 80024ae:	d0ad      	beq.n	800240c <_printf_i+0x15c>
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	079b      	lsls	r3, r3, #30
 80024b4:	d413      	bmi.n	80024de <_printf_i+0x22e>
 80024b6:	68e0      	ldr	r0, [r4, #12]
 80024b8:	9b03      	ldr	r3, [sp, #12]
 80024ba:	4298      	cmp	r0, r3
 80024bc:	bfb8      	it	lt
 80024be:	4618      	movlt	r0, r3
 80024c0:	e7a6      	b.n	8002410 <_printf_i+0x160>
 80024c2:	2301      	movs	r3, #1
 80024c4:	4632      	mov	r2, r6
 80024c6:	4649      	mov	r1, r9
 80024c8:	4640      	mov	r0, r8
 80024ca:	47d0      	blx	sl
 80024cc:	3001      	adds	r0, #1
 80024ce:	d09d      	beq.n	800240c <_printf_i+0x15c>
 80024d0:	3501      	adds	r5, #1
 80024d2:	68e3      	ldr	r3, [r4, #12]
 80024d4:	9903      	ldr	r1, [sp, #12]
 80024d6:	1a5b      	subs	r3, r3, r1
 80024d8:	42ab      	cmp	r3, r5
 80024da:	dcf2      	bgt.n	80024c2 <_printf_i+0x212>
 80024dc:	e7eb      	b.n	80024b6 <_printf_i+0x206>
 80024de:	2500      	movs	r5, #0
 80024e0:	f104 0619 	add.w	r6, r4, #25
 80024e4:	e7f5      	b.n	80024d2 <_printf_i+0x222>
 80024e6:	bf00      	nop
 80024e8:	0800456a 	.word	0x0800456a
 80024ec:	0800457b 	.word	0x0800457b

080024f0 <std>:
 80024f0:	2300      	movs	r3, #0
 80024f2:	b510      	push	{r4, lr}
 80024f4:	4604      	mov	r4, r0
 80024f6:	e9c0 3300 	strd	r3, r3, [r0]
 80024fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024fe:	6083      	str	r3, [r0, #8]
 8002500:	8181      	strh	r1, [r0, #12]
 8002502:	6643      	str	r3, [r0, #100]	@ 0x64
 8002504:	81c2      	strh	r2, [r0, #14]
 8002506:	6183      	str	r3, [r0, #24]
 8002508:	4619      	mov	r1, r3
 800250a:	2208      	movs	r2, #8
 800250c:	305c      	adds	r0, #92	@ 0x5c
 800250e:	f000 f8f4 	bl	80026fa <memset>
 8002512:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <std+0x58>)
 8002514:	6263      	str	r3, [r4, #36]	@ 0x24
 8002516:	4b0d      	ldr	r3, [pc, #52]	@ (800254c <std+0x5c>)
 8002518:	62a3      	str	r3, [r4, #40]	@ 0x28
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <std+0x60>)
 800251c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800251e:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <std+0x64>)
 8002520:	6323      	str	r3, [r4, #48]	@ 0x30
 8002522:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <std+0x68>)
 8002524:	6224      	str	r4, [r4, #32]
 8002526:	429c      	cmp	r4, r3
 8002528:	d006      	beq.n	8002538 <std+0x48>
 800252a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800252e:	4294      	cmp	r4, r2
 8002530:	d002      	beq.n	8002538 <std+0x48>
 8002532:	33d0      	adds	r3, #208	@ 0xd0
 8002534:	429c      	cmp	r4, r3
 8002536:	d105      	bne.n	8002544 <std+0x54>
 8002538:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800253c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002540:	f000 b958 	b.w	80027f4 <__retarget_lock_init_recursive>
 8002544:	bd10      	pop	{r4, pc}
 8002546:	bf00      	nop
 8002548:	08002675 	.word	0x08002675
 800254c:	08002697 	.word	0x08002697
 8002550:	080026cf 	.word	0x080026cf
 8002554:	080026f3 	.word	0x080026f3
 8002558:	20000370 	.word	0x20000370

0800255c <stdio_exit_handler>:
 800255c:	4a02      	ldr	r2, [pc, #8]	@ (8002568 <stdio_exit_handler+0xc>)
 800255e:	4903      	ldr	r1, [pc, #12]	@ (800256c <stdio_exit_handler+0x10>)
 8002560:	4803      	ldr	r0, [pc, #12]	@ (8002570 <stdio_exit_handler+0x14>)
 8002562:	f000 b869 	b.w	8002638 <_fwalk_sglue>
 8002566:	bf00      	nop
 8002568:	20000004 	.word	0x20000004
 800256c:	08003ebd 	.word	0x08003ebd
 8002570:	20000014 	.word	0x20000014

08002574 <cleanup_stdio>:
 8002574:	6841      	ldr	r1, [r0, #4]
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <cleanup_stdio+0x34>)
 8002578:	4299      	cmp	r1, r3
 800257a:	b510      	push	{r4, lr}
 800257c:	4604      	mov	r4, r0
 800257e:	d001      	beq.n	8002584 <cleanup_stdio+0x10>
 8002580:	f001 fc9c 	bl	8003ebc <_fflush_r>
 8002584:	68a1      	ldr	r1, [r4, #8]
 8002586:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <cleanup_stdio+0x38>)
 8002588:	4299      	cmp	r1, r3
 800258a:	d002      	beq.n	8002592 <cleanup_stdio+0x1e>
 800258c:	4620      	mov	r0, r4
 800258e:	f001 fc95 	bl	8003ebc <_fflush_r>
 8002592:	68e1      	ldr	r1, [r4, #12]
 8002594:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <cleanup_stdio+0x3c>)
 8002596:	4299      	cmp	r1, r3
 8002598:	d004      	beq.n	80025a4 <cleanup_stdio+0x30>
 800259a:	4620      	mov	r0, r4
 800259c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a0:	f001 bc8c 	b.w	8003ebc <_fflush_r>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	bf00      	nop
 80025a8:	20000370 	.word	0x20000370
 80025ac:	200003d8 	.word	0x200003d8
 80025b0:	20000440 	.word	0x20000440

080025b4 <global_stdio_init.part.0>:
 80025b4:	b510      	push	{r4, lr}
 80025b6:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <global_stdio_init.part.0+0x30>)
 80025b8:	4c0b      	ldr	r4, [pc, #44]	@ (80025e8 <global_stdio_init.part.0+0x34>)
 80025ba:	4a0c      	ldr	r2, [pc, #48]	@ (80025ec <global_stdio_init.part.0+0x38>)
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	4620      	mov	r0, r4
 80025c0:	2200      	movs	r2, #0
 80025c2:	2104      	movs	r1, #4
 80025c4:	f7ff ff94 	bl	80024f0 <std>
 80025c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80025cc:	2201      	movs	r2, #1
 80025ce:	2109      	movs	r1, #9
 80025d0:	f7ff ff8e 	bl	80024f0 <std>
 80025d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80025d8:	2202      	movs	r2, #2
 80025da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025de:	2112      	movs	r1, #18
 80025e0:	f7ff bf86 	b.w	80024f0 <std>
 80025e4:	200004a8 	.word	0x200004a8
 80025e8:	20000370 	.word	0x20000370
 80025ec:	0800255d 	.word	0x0800255d

080025f0 <__sfp_lock_acquire>:
 80025f0:	4801      	ldr	r0, [pc, #4]	@ (80025f8 <__sfp_lock_acquire+0x8>)
 80025f2:	f000 b900 	b.w	80027f6 <__retarget_lock_acquire_recursive>
 80025f6:	bf00      	nop
 80025f8:	200004b1 	.word	0x200004b1

080025fc <__sfp_lock_release>:
 80025fc:	4801      	ldr	r0, [pc, #4]	@ (8002604 <__sfp_lock_release+0x8>)
 80025fe:	f000 b8fb 	b.w	80027f8 <__retarget_lock_release_recursive>
 8002602:	bf00      	nop
 8002604:	200004b1 	.word	0x200004b1

08002608 <__sinit>:
 8002608:	b510      	push	{r4, lr}
 800260a:	4604      	mov	r4, r0
 800260c:	f7ff fff0 	bl	80025f0 <__sfp_lock_acquire>
 8002610:	6a23      	ldr	r3, [r4, #32]
 8002612:	b11b      	cbz	r3, 800261c <__sinit+0x14>
 8002614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002618:	f7ff bff0 	b.w	80025fc <__sfp_lock_release>
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <__sinit+0x28>)
 800261e:	6223      	str	r3, [r4, #32]
 8002620:	4b04      	ldr	r3, [pc, #16]	@ (8002634 <__sinit+0x2c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f5      	bne.n	8002614 <__sinit+0xc>
 8002628:	f7ff ffc4 	bl	80025b4 <global_stdio_init.part.0>
 800262c:	e7f2      	b.n	8002614 <__sinit+0xc>
 800262e:	bf00      	nop
 8002630:	08002575 	.word	0x08002575
 8002634:	200004a8 	.word	0x200004a8

08002638 <_fwalk_sglue>:
 8002638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800263c:	4607      	mov	r7, r0
 800263e:	4688      	mov	r8, r1
 8002640:	4614      	mov	r4, r2
 8002642:	2600      	movs	r6, #0
 8002644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002648:	f1b9 0901 	subs.w	r9, r9, #1
 800264c:	d505      	bpl.n	800265a <_fwalk_sglue+0x22>
 800264e:	6824      	ldr	r4, [r4, #0]
 8002650:	2c00      	cmp	r4, #0
 8002652:	d1f7      	bne.n	8002644 <_fwalk_sglue+0xc>
 8002654:	4630      	mov	r0, r6
 8002656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800265a:	89ab      	ldrh	r3, [r5, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d907      	bls.n	8002670 <_fwalk_sglue+0x38>
 8002660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002664:	3301      	adds	r3, #1
 8002666:	d003      	beq.n	8002670 <_fwalk_sglue+0x38>
 8002668:	4629      	mov	r1, r5
 800266a:	4638      	mov	r0, r7
 800266c:	47c0      	blx	r8
 800266e:	4306      	orrs	r6, r0
 8002670:	3568      	adds	r5, #104	@ 0x68
 8002672:	e7e9      	b.n	8002648 <_fwalk_sglue+0x10>

08002674 <__sread>:
 8002674:	b510      	push	{r4, lr}
 8002676:	460c      	mov	r4, r1
 8002678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800267c:	f000 f86c 	bl	8002758 <_read_r>
 8002680:	2800      	cmp	r0, #0
 8002682:	bfab      	itete	ge
 8002684:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002686:	89a3      	ldrhlt	r3, [r4, #12]
 8002688:	181b      	addge	r3, r3, r0
 800268a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800268e:	bfac      	ite	ge
 8002690:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002692:	81a3      	strhlt	r3, [r4, #12]
 8002694:	bd10      	pop	{r4, pc}

08002696 <__swrite>:
 8002696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800269a:	461f      	mov	r7, r3
 800269c:	898b      	ldrh	r3, [r1, #12]
 800269e:	05db      	lsls	r3, r3, #23
 80026a0:	4605      	mov	r5, r0
 80026a2:	460c      	mov	r4, r1
 80026a4:	4616      	mov	r6, r2
 80026a6:	d505      	bpl.n	80026b4 <__swrite+0x1e>
 80026a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ac:	2302      	movs	r3, #2
 80026ae:	2200      	movs	r2, #0
 80026b0:	f000 f840 	bl	8002734 <_lseek_r>
 80026b4:	89a3      	ldrh	r3, [r4, #12]
 80026b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026be:	81a3      	strh	r3, [r4, #12]
 80026c0:	4632      	mov	r2, r6
 80026c2:	463b      	mov	r3, r7
 80026c4:	4628      	mov	r0, r5
 80026c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026ca:	f000 b857 	b.w	800277c <_write_r>

080026ce <__sseek>:
 80026ce:	b510      	push	{r4, lr}
 80026d0:	460c      	mov	r4, r1
 80026d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026d6:	f000 f82d 	bl	8002734 <_lseek_r>
 80026da:	1c43      	adds	r3, r0, #1
 80026dc:	89a3      	ldrh	r3, [r4, #12]
 80026de:	bf15      	itete	ne
 80026e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80026e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80026e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80026ea:	81a3      	strheq	r3, [r4, #12]
 80026ec:	bf18      	it	ne
 80026ee:	81a3      	strhne	r3, [r4, #12]
 80026f0:	bd10      	pop	{r4, pc}

080026f2 <__sclose>:
 80026f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026f6:	f000 b80d 	b.w	8002714 <_close_r>

080026fa <memset>:
 80026fa:	4402      	add	r2, r0
 80026fc:	4603      	mov	r3, r0
 80026fe:	4293      	cmp	r3, r2
 8002700:	d100      	bne.n	8002704 <memset+0xa>
 8002702:	4770      	bx	lr
 8002704:	f803 1b01 	strb.w	r1, [r3], #1
 8002708:	e7f9      	b.n	80026fe <memset+0x4>
	...

0800270c <_localeconv_r>:
 800270c:	4800      	ldr	r0, [pc, #0]	@ (8002710 <_localeconv_r+0x4>)
 800270e:	4770      	bx	lr
 8002710:	20000150 	.word	0x20000150

08002714 <_close_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4d06      	ldr	r5, [pc, #24]	@ (8002730 <_close_r+0x1c>)
 8002718:	2300      	movs	r3, #0
 800271a:	4604      	mov	r4, r0
 800271c:	4608      	mov	r0, r1
 800271e:	602b      	str	r3, [r5, #0]
 8002720:	f7ff f9e9 	bl	8001af6 <_close>
 8002724:	1c43      	adds	r3, r0, #1
 8002726:	d102      	bne.n	800272e <_close_r+0x1a>
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	b103      	cbz	r3, 800272e <_close_r+0x1a>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	200004ac 	.word	0x200004ac

08002734 <_lseek_r>:
 8002734:	b538      	push	{r3, r4, r5, lr}
 8002736:	4d07      	ldr	r5, [pc, #28]	@ (8002754 <_lseek_r+0x20>)
 8002738:	4604      	mov	r4, r0
 800273a:	4608      	mov	r0, r1
 800273c:	4611      	mov	r1, r2
 800273e:	2200      	movs	r2, #0
 8002740:	602a      	str	r2, [r5, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	f7ff f9fe 	bl	8001b44 <_lseek>
 8002748:	1c43      	adds	r3, r0, #1
 800274a:	d102      	bne.n	8002752 <_lseek_r+0x1e>
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	b103      	cbz	r3, 8002752 <_lseek_r+0x1e>
 8002750:	6023      	str	r3, [r4, #0]
 8002752:	bd38      	pop	{r3, r4, r5, pc}
 8002754:	200004ac 	.word	0x200004ac

08002758 <_read_r>:
 8002758:	b538      	push	{r3, r4, r5, lr}
 800275a:	4d07      	ldr	r5, [pc, #28]	@ (8002778 <_read_r+0x20>)
 800275c:	4604      	mov	r4, r0
 800275e:	4608      	mov	r0, r1
 8002760:	4611      	mov	r1, r2
 8002762:	2200      	movs	r2, #0
 8002764:	602a      	str	r2, [r5, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	f7ff f98c 	bl	8001a84 <_read>
 800276c:	1c43      	adds	r3, r0, #1
 800276e:	d102      	bne.n	8002776 <_read_r+0x1e>
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	b103      	cbz	r3, 8002776 <_read_r+0x1e>
 8002774:	6023      	str	r3, [r4, #0]
 8002776:	bd38      	pop	{r3, r4, r5, pc}
 8002778:	200004ac 	.word	0x200004ac

0800277c <_write_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4d07      	ldr	r5, [pc, #28]	@ (800279c <_write_r+0x20>)
 8002780:	4604      	mov	r4, r0
 8002782:	4608      	mov	r0, r1
 8002784:	4611      	mov	r1, r2
 8002786:	2200      	movs	r2, #0
 8002788:	602a      	str	r2, [r5, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	f7ff f997 	bl	8001abe <_write>
 8002790:	1c43      	adds	r3, r0, #1
 8002792:	d102      	bne.n	800279a <_write_r+0x1e>
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	b103      	cbz	r3, 800279a <_write_r+0x1e>
 8002798:	6023      	str	r3, [r4, #0]
 800279a:	bd38      	pop	{r3, r4, r5, pc}
 800279c:	200004ac 	.word	0x200004ac

080027a0 <__errno>:
 80027a0:	4b01      	ldr	r3, [pc, #4]	@ (80027a8 <__errno+0x8>)
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000010 	.word	0x20000010

080027ac <__libc_init_array>:
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	4d0d      	ldr	r5, [pc, #52]	@ (80027e4 <__libc_init_array+0x38>)
 80027b0:	4c0d      	ldr	r4, [pc, #52]	@ (80027e8 <__libc_init_array+0x3c>)
 80027b2:	1b64      	subs	r4, r4, r5
 80027b4:	10a4      	asrs	r4, r4, #2
 80027b6:	2600      	movs	r6, #0
 80027b8:	42a6      	cmp	r6, r4
 80027ba:	d109      	bne.n	80027d0 <__libc_init_array+0x24>
 80027bc:	4d0b      	ldr	r5, [pc, #44]	@ (80027ec <__libc_init_array+0x40>)
 80027be:	4c0c      	ldr	r4, [pc, #48]	@ (80027f0 <__libc_init_array+0x44>)
 80027c0:	f001 febc 	bl	800453c <_init>
 80027c4:	1b64      	subs	r4, r4, r5
 80027c6:	10a4      	asrs	r4, r4, #2
 80027c8:	2600      	movs	r6, #0
 80027ca:	42a6      	cmp	r6, r4
 80027cc:	d105      	bne.n	80027da <__libc_init_array+0x2e>
 80027ce:	bd70      	pop	{r4, r5, r6, pc}
 80027d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d4:	4798      	blx	r3
 80027d6:	3601      	adds	r6, #1
 80027d8:	e7ee      	b.n	80027b8 <__libc_init_array+0xc>
 80027da:	f855 3b04 	ldr.w	r3, [r5], #4
 80027de:	4798      	blx	r3
 80027e0:	3601      	adds	r6, #1
 80027e2:	e7f2      	b.n	80027ca <__libc_init_array+0x1e>
 80027e4:	080048d0 	.word	0x080048d0
 80027e8:	080048d0 	.word	0x080048d0
 80027ec:	080048d0 	.word	0x080048d0
 80027f0:	080048d4 	.word	0x080048d4

080027f4 <__retarget_lock_init_recursive>:
 80027f4:	4770      	bx	lr

080027f6 <__retarget_lock_acquire_recursive>:
 80027f6:	4770      	bx	lr

080027f8 <__retarget_lock_release_recursive>:
 80027f8:	4770      	bx	lr

080027fa <memcpy>:
 80027fa:	440a      	add	r2, r1
 80027fc:	4291      	cmp	r1, r2
 80027fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8002802:	d100      	bne.n	8002806 <memcpy+0xc>
 8002804:	4770      	bx	lr
 8002806:	b510      	push	{r4, lr}
 8002808:	f811 4b01 	ldrb.w	r4, [r1], #1
 800280c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002810:	4291      	cmp	r1, r2
 8002812:	d1f9      	bne.n	8002808 <memcpy+0xe>
 8002814:	bd10      	pop	{r4, pc}

08002816 <quorem>:
 8002816:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800281a:	6903      	ldr	r3, [r0, #16]
 800281c:	690c      	ldr	r4, [r1, #16]
 800281e:	42a3      	cmp	r3, r4
 8002820:	4607      	mov	r7, r0
 8002822:	db7e      	blt.n	8002922 <quorem+0x10c>
 8002824:	3c01      	subs	r4, #1
 8002826:	f101 0814 	add.w	r8, r1, #20
 800282a:	00a3      	lsls	r3, r4, #2
 800282c:	f100 0514 	add.w	r5, r0, #20
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800283c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002840:	3301      	adds	r3, #1
 8002842:	429a      	cmp	r2, r3
 8002844:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002848:	fbb2 f6f3 	udiv	r6, r2, r3
 800284c:	d32e      	bcc.n	80028ac <quorem+0x96>
 800284e:	f04f 0a00 	mov.w	sl, #0
 8002852:	46c4      	mov	ip, r8
 8002854:	46ae      	mov	lr, r5
 8002856:	46d3      	mov	fp, sl
 8002858:	f85c 3b04 	ldr.w	r3, [ip], #4
 800285c:	b298      	uxth	r0, r3
 800285e:	fb06 a000 	mla	r0, r6, r0, sl
 8002862:	0c02      	lsrs	r2, r0, #16
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	fb06 2303 	mla	r3, r6, r3, r2
 800286a:	f8de 2000 	ldr.w	r2, [lr]
 800286e:	b280      	uxth	r0, r0
 8002870:	b292      	uxth	r2, r2
 8002872:	1a12      	subs	r2, r2, r0
 8002874:	445a      	add	r2, fp
 8002876:	f8de 0000 	ldr.w	r0, [lr]
 800287a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800287e:	b29b      	uxth	r3, r3
 8002880:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002884:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002888:	b292      	uxth	r2, r2
 800288a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800288e:	45e1      	cmp	r9, ip
 8002890:	f84e 2b04 	str.w	r2, [lr], #4
 8002894:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002898:	d2de      	bcs.n	8002858 <quorem+0x42>
 800289a:	9b00      	ldr	r3, [sp, #0]
 800289c:	58eb      	ldr	r3, [r5, r3]
 800289e:	b92b      	cbnz	r3, 80028ac <quorem+0x96>
 80028a0:	9b01      	ldr	r3, [sp, #4]
 80028a2:	3b04      	subs	r3, #4
 80028a4:	429d      	cmp	r5, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	d32f      	bcc.n	800290a <quorem+0xf4>
 80028aa:	613c      	str	r4, [r7, #16]
 80028ac:	4638      	mov	r0, r7
 80028ae:	f001 f979 	bl	8003ba4 <__mcmp>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	db25      	blt.n	8002902 <quorem+0xec>
 80028b6:	4629      	mov	r1, r5
 80028b8:	2000      	movs	r0, #0
 80028ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80028be:	f8d1 c000 	ldr.w	ip, [r1]
 80028c2:	fa1f fe82 	uxth.w	lr, r2
 80028c6:	fa1f f38c 	uxth.w	r3, ip
 80028ca:	eba3 030e 	sub.w	r3, r3, lr
 80028ce:	4403      	add	r3, r0
 80028d0:	0c12      	lsrs	r2, r2, #16
 80028d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80028d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80028da:	b29b      	uxth	r3, r3
 80028dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028e0:	45c1      	cmp	r9, r8
 80028e2:	f841 3b04 	str.w	r3, [r1], #4
 80028e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80028ea:	d2e6      	bcs.n	80028ba <quorem+0xa4>
 80028ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80028f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80028f4:	b922      	cbnz	r2, 8002900 <quorem+0xea>
 80028f6:	3b04      	subs	r3, #4
 80028f8:	429d      	cmp	r5, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	d30b      	bcc.n	8002916 <quorem+0x100>
 80028fe:	613c      	str	r4, [r7, #16]
 8002900:	3601      	adds	r6, #1
 8002902:	4630      	mov	r0, r6
 8002904:	b003      	add	sp, #12
 8002906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	3b04      	subs	r3, #4
 800290e:	2a00      	cmp	r2, #0
 8002910:	d1cb      	bne.n	80028aa <quorem+0x94>
 8002912:	3c01      	subs	r4, #1
 8002914:	e7c6      	b.n	80028a4 <quorem+0x8e>
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	3b04      	subs	r3, #4
 800291a:	2a00      	cmp	r2, #0
 800291c:	d1ef      	bne.n	80028fe <quorem+0xe8>
 800291e:	3c01      	subs	r4, #1
 8002920:	e7ea      	b.n	80028f8 <quorem+0xe2>
 8002922:	2000      	movs	r0, #0
 8002924:	e7ee      	b.n	8002904 <quorem+0xee>
	...

08002928 <_dtoa_r>:
 8002928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800292c:	69c7      	ldr	r7, [r0, #28]
 800292e:	b099      	sub	sp, #100	@ 0x64
 8002930:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002934:	ec55 4b10 	vmov	r4, r5, d0
 8002938:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800293a:	9109      	str	r1, [sp, #36]	@ 0x24
 800293c:	4683      	mov	fp, r0
 800293e:	920e      	str	r2, [sp, #56]	@ 0x38
 8002940:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002942:	b97f      	cbnz	r7, 8002964 <_dtoa_r+0x3c>
 8002944:	2010      	movs	r0, #16
 8002946:	f000 fdfd 	bl	8003544 <malloc>
 800294a:	4602      	mov	r2, r0
 800294c:	f8cb 001c 	str.w	r0, [fp, #28]
 8002950:	b920      	cbnz	r0, 800295c <_dtoa_r+0x34>
 8002952:	4ba7      	ldr	r3, [pc, #668]	@ (8002bf0 <_dtoa_r+0x2c8>)
 8002954:	21ef      	movs	r1, #239	@ 0xef
 8002956:	48a7      	ldr	r0, [pc, #668]	@ (8002bf4 <_dtoa_r+0x2cc>)
 8002958:	f001 fae8 	bl	8003f2c <__assert_func>
 800295c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002960:	6007      	str	r7, [r0, #0]
 8002962:	60c7      	str	r7, [r0, #12]
 8002964:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	b159      	cbz	r1, 8002984 <_dtoa_r+0x5c>
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	604a      	str	r2, [r1, #4]
 8002970:	2301      	movs	r3, #1
 8002972:	4093      	lsls	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
 8002976:	4658      	mov	r0, fp
 8002978:	f000 feda 	bl	8003730 <_Bfree>
 800297c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	1e2b      	subs	r3, r5, #0
 8002986:	bfb9      	ittee	lt
 8002988:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800298c:	9303      	strlt	r3, [sp, #12]
 800298e:	2300      	movge	r3, #0
 8002990:	6033      	strge	r3, [r6, #0]
 8002992:	9f03      	ldr	r7, [sp, #12]
 8002994:	4b98      	ldr	r3, [pc, #608]	@ (8002bf8 <_dtoa_r+0x2d0>)
 8002996:	bfbc      	itt	lt
 8002998:	2201      	movlt	r2, #1
 800299a:	6032      	strlt	r2, [r6, #0]
 800299c:	43bb      	bics	r3, r7
 800299e:	d112      	bne.n	80029c6 <_dtoa_r+0x9e>
 80029a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80029a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80029ac:	4323      	orrs	r3, r4
 80029ae:	f000 854d 	beq.w	800344c <_dtoa_r+0xb24>
 80029b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80029b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8002c0c <_dtoa_r+0x2e4>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 854f 	beq.w	800345c <_dtoa_r+0xb34>
 80029be:	f10a 0303 	add.w	r3, sl, #3
 80029c2:	f000 bd49 	b.w	8003458 <_dtoa_r+0xb30>
 80029c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	ec51 0b17 	vmov	r0, r1, d7
 80029d0:	2300      	movs	r3, #0
 80029d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80029d6:	f7fe f87f 	bl	8000ad8 <__aeabi_dcmpeq>
 80029da:	4680      	mov	r8, r0
 80029dc:	b158      	cbz	r0, 80029f6 <_dtoa_r+0xce>
 80029de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80029e0:	2301      	movs	r3, #1
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80029e6:	b113      	cbz	r3, 80029ee <_dtoa_r+0xc6>
 80029e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80029ea:	4b84      	ldr	r3, [pc, #528]	@ (8002bfc <_dtoa_r+0x2d4>)
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8002c10 <_dtoa_r+0x2e8>
 80029f2:	f000 bd33 	b.w	800345c <_dtoa_r+0xb34>
 80029f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80029fa:	aa16      	add	r2, sp, #88	@ 0x58
 80029fc:	a917      	add	r1, sp, #92	@ 0x5c
 80029fe:	4658      	mov	r0, fp
 8002a00:	f001 f980 	bl	8003d04 <__d2b>
 8002a04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002a08:	4681      	mov	r9, r0
 8002a0a:	2e00      	cmp	r6, #0
 8002a0c:	d077      	beq.n	8002afe <_dtoa_r+0x1d6>
 8002a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002a10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8002a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002a1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002a20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002a24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002a28:	4619      	mov	r1, r3
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4b74      	ldr	r3, [pc, #464]	@ (8002c00 <_dtoa_r+0x2d8>)
 8002a2e:	f7fd fc33 	bl	8000298 <__aeabi_dsub>
 8002a32:	a369      	add	r3, pc, #420	@ (adr r3, 8002bd8 <_dtoa_r+0x2b0>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f7fd fde6 	bl	8000608 <__aeabi_dmul>
 8002a3c:	a368      	add	r3, pc, #416	@ (adr r3, 8002be0 <_dtoa_r+0x2b8>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd fc2b 	bl	800029c <__adddf3>
 8002a46:	4604      	mov	r4, r0
 8002a48:	4630      	mov	r0, r6
 8002a4a:	460d      	mov	r5, r1
 8002a4c:	f7fd fd72 	bl	8000534 <__aeabi_i2d>
 8002a50:	a365      	add	r3, pc, #404	@ (adr r3, 8002be8 <_dtoa_r+0x2c0>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fd fdd7 	bl	8000608 <__aeabi_dmul>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4620      	mov	r0, r4
 8002a60:	4629      	mov	r1, r5
 8002a62:	f7fd fc1b 	bl	800029c <__adddf3>
 8002a66:	4604      	mov	r4, r0
 8002a68:	460d      	mov	r5, r1
 8002a6a:	f7fe f87d 	bl	8000b68 <__aeabi_d2iz>
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4607      	mov	r7, r0
 8002a72:	2300      	movs	r3, #0
 8002a74:	4620      	mov	r0, r4
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7fe f838 	bl	8000aec <__aeabi_dcmplt>
 8002a7c:	b140      	cbz	r0, 8002a90 <_dtoa_r+0x168>
 8002a7e:	4638      	mov	r0, r7
 8002a80:	f7fd fd58 	bl	8000534 <__aeabi_i2d>
 8002a84:	4622      	mov	r2, r4
 8002a86:	462b      	mov	r3, r5
 8002a88:	f7fe f826 	bl	8000ad8 <__aeabi_dcmpeq>
 8002a8c:	b900      	cbnz	r0, 8002a90 <_dtoa_r+0x168>
 8002a8e:	3f01      	subs	r7, #1
 8002a90:	2f16      	cmp	r7, #22
 8002a92:	d851      	bhi.n	8002b38 <_dtoa_r+0x210>
 8002a94:	4b5b      	ldr	r3, [pc, #364]	@ (8002c04 <_dtoa_r+0x2dc>)
 8002a96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002aa2:	f7fe f823 	bl	8000aec <__aeabi_dcmplt>
 8002aa6:	2800      	cmp	r0, #0
 8002aa8:	d048      	beq.n	8002b3c <_dtoa_r+0x214>
 8002aaa:	3f01      	subs	r7, #1
 8002aac:	2300      	movs	r3, #0
 8002aae:	9312      	str	r3, [sp, #72]	@ 0x48
 8002ab0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002ab2:	1b9b      	subs	r3, r3, r6
 8002ab4:	1e5a      	subs	r2, r3, #1
 8002ab6:	bf44      	itt	mi
 8002ab8:	f1c3 0801 	rsbmi	r8, r3, #1
 8002abc:	2300      	movmi	r3, #0
 8002abe:	9208      	str	r2, [sp, #32]
 8002ac0:	bf54      	ite	pl
 8002ac2:	f04f 0800 	movpl.w	r8, #0
 8002ac6:	9308      	strmi	r3, [sp, #32]
 8002ac8:	2f00      	cmp	r7, #0
 8002aca:	db39      	blt.n	8002b40 <_dtoa_r+0x218>
 8002acc:	9b08      	ldr	r3, [sp, #32]
 8002ace:	970f      	str	r7, [sp, #60]	@ 0x3c
 8002ad0:	443b      	add	r3, r7
 8002ad2:	9308      	str	r3, [sp, #32]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8002ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ada:	2b09      	cmp	r3, #9
 8002adc:	d864      	bhi.n	8002ba8 <_dtoa_r+0x280>
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	bfc4      	itt	gt
 8002ae2:	3b04      	subgt	r3, #4
 8002ae4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8002ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ae8:	f1a3 0302 	sub.w	r3, r3, #2
 8002aec:	bfcc      	ite	gt
 8002aee:	2400      	movgt	r4, #0
 8002af0:	2401      	movle	r4, #1
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d863      	bhi.n	8002bbe <_dtoa_r+0x296>
 8002af6:	e8df f003 	tbb	[pc, r3]
 8002afa:	372a      	.short	0x372a
 8002afc:	5535      	.short	0x5535
 8002afe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8002b02:	441e      	add	r6, r3
 8002b04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	bfc1      	itttt	gt
 8002b0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002b10:	409f      	lslgt	r7, r3
 8002b12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002b16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002b1a:	bfd6      	itet	le
 8002b1c:	f1c3 0320 	rsble	r3, r3, #32
 8002b20:	ea47 0003 	orrgt.w	r0, r7, r3
 8002b24:	fa04 f003 	lslle.w	r0, r4, r3
 8002b28:	f7fd fcf4 	bl	8000514 <__aeabi_ui2d>
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002b32:	3e01      	subs	r6, #1
 8002b34:	9214      	str	r2, [sp, #80]	@ 0x50
 8002b36:	e777      	b.n	8002a28 <_dtoa_r+0x100>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e7b8      	b.n	8002aae <_dtoa_r+0x186>
 8002b3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8002b3e:	e7b7      	b.n	8002ab0 <_dtoa_r+0x188>
 8002b40:	427b      	negs	r3, r7
 8002b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8002b44:	2300      	movs	r3, #0
 8002b46:	eba8 0807 	sub.w	r8, r8, r7
 8002b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002b4c:	e7c4      	b.n	8002ad8 <_dtoa_r+0x1b0>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	dc35      	bgt.n	8002bc4 <_dtoa_r+0x29c>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	9307      	str	r3, [sp, #28]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	920e      	str	r2, [sp, #56]	@ 0x38
 8002b62:	e00b      	b.n	8002b7c <_dtoa_r+0x254>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e7f3      	b.n	8002b50 <_dtoa_r+0x228>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	9307      	str	r3, [sp, #28]
 8002b78:	bfb8      	it	lt
 8002b7a:	2301      	movlt	r3, #1
 8002b7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8002b80:	2100      	movs	r1, #0
 8002b82:	2204      	movs	r2, #4
 8002b84:	f102 0514 	add.w	r5, r2, #20
 8002b88:	429d      	cmp	r5, r3
 8002b8a:	d91f      	bls.n	8002bcc <_dtoa_r+0x2a4>
 8002b8c:	6041      	str	r1, [r0, #4]
 8002b8e:	4658      	mov	r0, fp
 8002b90:	f000 fd8e 	bl	80036b0 <_Balloc>
 8002b94:	4682      	mov	sl, r0
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d13c      	bne.n	8002c14 <_dtoa_r+0x2ec>
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <_dtoa_r+0x2e0>)
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8002ba2:	e6d8      	b.n	8002956 <_dtoa_r+0x2e>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e7e0      	b.n	8002b6a <_dtoa_r+0x242>
 8002ba8:	2401      	movs	r4, #1
 8002baa:	2300      	movs	r3, #0
 8002bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	9307      	str	r3, [sp, #28]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2312      	movs	r3, #18
 8002bbc:	e7d0      	b.n	8002b60 <_dtoa_r+0x238>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002bc2:	e7f5      	b.n	8002bb0 <_dtoa_r+0x288>
 8002bc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	9307      	str	r3, [sp, #28]
 8002bca:	e7d7      	b.n	8002b7c <_dtoa_r+0x254>
 8002bcc:	3101      	adds	r1, #1
 8002bce:	0052      	lsls	r2, r2, #1
 8002bd0:	e7d8      	b.n	8002b84 <_dtoa_r+0x25c>
 8002bd2:	bf00      	nop
 8002bd4:	f3af 8000 	nop.w
 8002bd8:	636f4361 	.word	0x636f4361
 8002bdc:	3fd287a7 	.word	0x3fd287a7
 8002be0:	8b60c8b3 	.word	0x8b60c8b3
 8002be4:	3fc68a28 	.word	0x3fc68a28
 8002be8:	509f79fb 	.word	0x509f79fb
 8002bec:	3fd34413 	.word	0x3fd34413
 8002bf0:	08004599 	.word	0x08004599
 8002bf4:	080045b0 	.word	0x080045b0
 8002bf8:	7ff00000 	.word	0x7ff00000
 8002bfc:	08004569 	.word	0x08004569
 8002c00:	3ff80000 	.word	0x3ff80000
 8002c04:	080046a8 	.word	0x080046a8
 8002c08:	08004608 	.word	0x08004608
 8002c0c:	08004595 	.word	0x08004595
 8002c10:	08004568 	.word	0x08004568
 8002c14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002c18:	6018      	str	r0, [r3, #0]
 8002c1a:	9b07      	ldr	r3, [sp, #28]
 8002c1c:	2b0e      	cmp	r3, #14
 8002c1e:	f200 80a4 	bhi.w	8002d6a <_dtoa_r+0x442>
 8002c22:	2c00      	cmp	r4, #0
 8002c24:	f000 80a1 	beq.w	8002d6a <_dtoa_r+0x442>
 8002c28:	2f00      	cmp	r7, #0
 8002c2a:	dd33      	ble.n	8002c94 <_dtoa_r+0x36c>
 8002c2c:	4bad      	ldr	r3, [pc, #692]	@ (8002ee4 <_dtoa_r+0x5bc>)
 8002c2e:	f007 020f 	and.w	r2, r7, #15
 8002c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c36:	ed93 7b00 	vldr	d7, [r3]
 8002c3a:	05f8      	lsls	r0, r7, #23
 8002c3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002c40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8002c44:	d516      	bpl.n	8002c74 <_dtoa_r+0x34c>
 8002c46:	4ba8      	ldr	r3, [pc, #672]	@ (8002ee8 <_dtoa_r+0x5c0>)
 8002c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002c4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c50:	f7fd fe04 	bl	800085c <__aeabi_ddiv>
 8002c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c58:	f004 040f 	and.w	r4, r4, #15
 8002c5c:	2603      	movs	r6, #3
 8002c5e:	4da2      	ldr	r5, [pc, #648]	@ (8002ee8 <_dtoa_r+0x5c0>)
 8002c60:	b954      	cbnz	r4, 8002c78 <_dtoa_r+0x350>
 8002c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c6a:	f7fd fdf7 	bl	800085c <__aeabi_ddiv>
 8002c6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c72:	e028      	b.n	8002cc6 <_dtoa_r+0x39e>
 8002c74:	2602      	movs	r6, #2
 8002c76:	e7f2      	b.n	8002c5e <_dtoa_r+0x336>
 8002c78:	07e1      	lsls	r1, r4, #31
 8002c7a:	d508      	bpl.n	8002c8e <_dtoa_r+0x366>
 8002c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002c80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002c84:	f7fd fcc0 	bl	8000608 <__aeabi_dmul>
 8002c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c8c:	3601      	adds	r6, #1
 8002c8e:	1064      	asrs	r4, r4, #1
 8002c90:	3508      	adds	r5, #8
 8002c92:	e7e5      	b.n	8002c60 <_dtoa_r+0x338>
 8002c94:	f000 80d2 	beq.w	8002e3c <_dtoa_r+0x514>
 8002c98:	427c      	negs	r4, r7
 8002c9a:	4b92      	ldr	r3, [pc, #584]	@ (8002ee4 <_dtoa_r+0x5bc>)
 8002c9c:	4d92      	ldr	r5, [pc, #584]	@ (8002ee8 <_dtoa_r+0x5c0>)
 8002c9e:	f004 020f 	and.w	r2, r4, #15
 8002ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002cae:	f7fd fcab 	bl	8000608 <__aeabi_dmul>
 8002cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002cb6:	1124      	asrs	r4, r4, #4
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2602      	movs	r6, #2
 8002cbc:	2c00      	cmp	r4, #0
 8002cbe:	f040 80b2 	bne.w	8002e26 <_dtoa_r+0x4fe>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1d3      	bne.n	8002c6e <_dtoa_r+0x346>
 8002cc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002cc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80b7 	beq.w	8002e40 <_dtoa_r+0x518>
 8002cd2:	4b86      	ldr	r3, [pc, #536]	@ (8002eec <_dtoa_r+0x5c4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	4629      	mov	r1, r5
 8002cda:	f7fd ff07 	bl	8000aec <__aeabi_dcmplt>
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	f000 80ae 	beq.w	8002e40 <_dtoa_r+0x518>
 8002ce4:	9b07      	ldr	r3, [sp, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 80aa 	beq.w	8002e40 <_dtoa_r+0x518>
 8002cec:	9b00      	ldr	r3, [sp, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	dd37      	ble.n	8002d62 <_dtoa_r+0x43a>
 8002cf2:	1e7b      	subs	r3, r7, #1
 8002cf4:	9304      	str	r3, [sp, #16]
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	4b7d      	ldr	r3, [pc, #500]	@ (8002ef0 <_dtoa_r+0x5c8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	f7fd fc83 	bl	8000608 <__aeabi_dmul>
 8002d02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d06:	9c00      	ldr	r4, [sp, #0]
 8002d08:	3601      	adds	r6, #1
 8002d0a:	4630      	mov	r0, r6
 8002d0c:	f7fd fc12 	bl	8000534 <__aeabi_i2d>
 8002d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002d14:	f7fd fc78 	bl	8000608 <__aeabi_dmul>
 8002d18:	4b76      	ldr	r3, [pc, #472]	@ (8002ef4 <_dtoa_r+0x5cc>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f7fd fabe 	bl	800029c <__adddf3>
 8002d20:	4605      	mov	r5, r0
 8002d22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8002d26:	2c00      	cmp	r4, #0
 8002d28:	f040 808d 	bne.w	8002e46 <_dtoa_r+0x51e>
 8002d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d30:	4b71      	ldr	r3, [pc, #452]	@ (8002ef8 <_dtoa_r+0x5d0>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	f7fd fab0 	bl	8000298 <__aeabi_dsub>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d40:	462a      	mov	r2, r5
 8002d42:	4633      	mov	r3, r6
 8002d44:	f7fd fef0 	bl	8000b28 <__aeabi_dcmpgt>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	f040 828b 	bne.w	8003264 <_dtoa_r+0x93c>
 8002d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d52:	462a      	mov	r2, r5
 8002d54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8002d58:	f7fd fec8 	bl	8000aec <__aeabi_dcmplt>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	f040 8128 	bne.w	8002fb2 <_dtoa_r+0x68a>
 8002d62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8002d66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002d6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f2c0 815a 	blt.w	8003026 <_dtoa_r+0x6fe>
 8002d72:	2f0e      	cmp	r7, #14
 8002d74:	f300 8157 	bgt.w	8003026 <_dtoa_r+0x6fe>
 8002d78:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee4 <_dtoa_r+0x5bc>)
 8002d7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002d7e:	ed93 7b00 	vldr	d7, [r3]
 8002d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	ed8d 7b00 	vstr	d7, [sp]
 8002d8a:	da03      	bge.n	8002d94 <_dtoa_r+0x46c>
 8002d8c:	9b07      	ldr	r3, [sp, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f340 8101 	ble.w	8002f96 <_dtoa_r+0x66e>
 8002d94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002d98:	4656      	mov	r6, sl
 8002d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d9e:	4620      	mov	r0, r4
 8002da0:	4629      	mov	r1, r5
 8002da2:	f7fd fd5b 	bl	800085c <__aeabi_ddiv>
 8002da6:	f7fd fedf 	bl	8000b68 <__aeabi_d2iz>
 8002daa:	4680      	mov	r8, r0
 8002dac:	f7fd fbc2 	bl	8000534 <__aeabi_i2d>
 8002db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002db4:	f7fd fc28 	bl	8000608 <__aeabi_dmul>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8002dc4:	f7fd fa68 	bl	8000298 <__aeabi_dsub>
 8002dc8:	f806 4b01 	strb.w	r4, [r6], #1
 8002dcc:	9d07      	ldr	r5, [sp, #28]
 8002dce:	eba6 040a 	sub.w	r4, r6, sl
 8002dd2:	42a5      	cmp	r5, r4
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	f040 8117 	bne.w	800300a <_dtoa_r+0x6e2>
 8002ddc:	f7fd fa5e 	bl	800029c <__adddf3>
 8002de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002de4:	4604      	mov	r4, r0
 8002de6:	460d      	mov	r5, r1
 8002de8:	f7fd fe9e 	bl	8000b28 <__aeabi_dcmpgt>
 8002dec:	2800      	cmp	r0, #0
 8002dee:	f040 80f9 	bne.w	8002fe4 <_dtoa_r+0x6bc>
 8002df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002df6:	4620      	mov	r0, r4
 8002df8:	4629      	mov	r1, r5
 8002dfa:	f7fd fe6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8002dfe:	b118      	cbz	r0, 8002e08 <_dtoa_r+0x4e0>
 8002e00:	f018 0f01 	tst.w	r8, #1
 8002e04:	f040 80ee 	bne.w	8002fe4 <_dtoa_r+0x6bc>
 8002e08:	4649      	mov	r1, r9
 8002e0a:	4658      	mov	r0, fp
 8002e0c:	f000 fc90 	bl	8003730 <_Bfree>
 8002e10:	2300      	movs	r3, #0
 8002e12:	7033      	strb	r3, [r6, #0]
 8002e14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8002e16:	3701      	adds	r7, #1
 8002e18:	601f      	str	r7, [r3, #0]
 8002e1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 831d 	beq.w	800345c <_dtoa_r+0xb34>
 8002e22:	601e      	str	r6, [r3, #0]
 8002e24:	e31a      	b.n	800345c <_dtoa_r+0xb34>
 8002e26:	07e2      	lsls	r2, r4, #31
 8002e28:	d505      	bpl.n	8002e36 <_dtoa_r+0x50e>
 8002e2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002e2e:	f7fd fbeb 	bl	8000608 <__aeabi_dmul>
 8002e32:	3601      	adds	r6, #1
 8002e34:	2301      	movs	r3, #1
 8002e36:	1064      	asrs	r4, r4, #1
 8002e38:	3508      	adds	r5, #8
 8002e3a:	e73f      	b.n	8002cbc <_dtoa_r+0x394>
 8002e3c:	2602      	movs	r6, #2
 8002e3e:	e742      	b.n	8002cc6 <_dtoa_r+0x39e>
 8002e40:	9c07      	ldr	r4, [sp, #28]
 8002e42:	9704      	str	r7, [sp, #16]
 8002e44:	e761      	b.n	8002d0a <_dtoa_r+0x3e2>
 8002e46:	4b27      	ldr	r3, [pc, #156]	@ (8002ee4 <_dtoa_r+0x5bc>)
 8002e48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002e4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002e4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002e52:	4454      	add	r4, sl
 8002e54:	2900      	cmp	r1, #0
 8002e56:	d053      	beq.n	8002f00 <_dtoa_r+0x5d8>
 8002e58:	4928      	ldr	r1, [pc, #160]	@ (8002efc <_dtoa_r+0x5d4>)
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fd fcfe 	bl	800085c <__aeabi_ddiv>
 8002e60:	4633      	mov	r3, r6
 8002e62:	462a      	mov	r2, r5
 8002e64:	f7fd fa18 	bl	8000298 <__aeabi_dsub>
 8002e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002e6c:	4656      	mov	r6, sl
 8002e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e72:	f7fd fe79 	bl	8000b68 <__aeabi_d2iz>
 8002e76:	4605      	mov	r5, r0
 8002e78:	f7fd fb5c 	bl	8000534 <__aeabi_i2d>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e84:	f7fd fa08 	bl	8000298 <__aeabi_dsub>
 8002e88:	3530      	adds	r5, #48	@ 0x30
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e92:	f806 5b01 	strb.w	r5, [r6], #1
 8002e96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002e9a:	f7fd fe27 	bl	8000aec <__aeabi_dcmplt>
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d171      	bne.n	8002f86 <_dtoa_r+0x65e>
 8002ea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ea6:	4911      	ldr	r1, [pc, #68]	@ (8002eec <_dtoa_r+0x5c4>)
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7fd f9f5 	bl	8000298 <__aeabi_dsub>
 8002eae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002eb2:	f7fd fe1b 	bl	8000aec <__aeabi_dcmplt>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	f040 8095 	bne.w	8002fe6 <_dtoa_r+0x6be>
 8002ebc:	42a6      	cmp	r6, r4
 8002ebe:	f43f af50 	beq.w	8002d62 <_dtoa_r+0x43a>
 8002ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <_dtoa_r+0x5c8>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f7fd fb9d 	bl	8000608 <__aeabi_dmul>
 8002ece:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <_dtoa_r+0x5c8>)
 8002ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002eda:	f7fd fb95 	bl	8000608 <__aeabi_dmul>
 8002ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ee2:	e7c4      	b.n	8002e6e <_dtoa_r+0x546>
 8002ee4:	080046a8 	.word	0x080046a8
 8002ee8:	08004680 	.word	0x08004680
 8002eec:	3ff00000 	.word	0x3ff00000
 8002ef0:	40240000 	.word	0x40240000
 8002ef4:	401c0000 	.word	0x401c0000
 8002ef8:	40140000 	.word	0x40140000
 8002efc:	3fe00000 	.word	0x3fe00000
 8002f00:	4631      	mov	r1, r6
 8002f02:	4628      	mov	r0, r5
 8002f04:	f7fd fb80 	bl	8000608 <__aeabi_dmul>
 8002f08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002f0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8002f0e:	4656      	mov	r6, sl
 8002f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f14:	f7fd fe28 	bl	8000b68 <__aeabi_d2iz>
 8002f18:	4605      	mov	r5, r0
 8002f1a:	f7fd fb0b 	bl	8000534 <__aeabi_i2d>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f26:	f7fd f9b7 	bl	8000298 <__aeabi_dsub>
 8002f2a:	3530      	adds	r5, #48	@ 0x30
 8002f2c:	f806 5b01 	strb.w	r5, [r6], #1
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	42a6      	cmp	r6, r4
 8002f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	d124      	bne.n	8002f8a <_dtoa_r+0x662>
 8002f40:	4bac      	ldr	r3, [pc, #688]	@ (80031f4 <_dtoa_r+0x8cc>)
 8002f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8002f46:	f7fd f9a9 	bl	800029c <__adddf3>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f52:	f7fd fde9 	bl	8000b28 <__aeabi_dcmpgt>
 8002f56:	2800      	cmp	r0, #0
 8002f58:	d145      	bne.n	8002fe6 <_dtoa_r+0x6be>
 8002f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002f5e:	49a5      	ldr	r1, [pc, #660]	@ (80031f4 <_dtoa_r+0x8cc>)
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7fd f999 	bl	8000298 <__aeabi_dsub>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f6e:	f7fd fdbd 	bl	8000aec <__aeabi_dcmplt>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	f43f aef5 	beq.w	8002d62 <_dtoa_r+0x43a>
 8002f78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8002f7a:	1e73      	subs	r3, r6, #1
 8002f7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8002f7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8002f82:	2b30      	cmp	r3, #48	@ 0x30
 8002f84:	d0f8      	beq.n	8002f78 <_dtoa_r+0x650>
 8002f86:	9f04      	ldr	r7, [sp, #16]
 8002f88:	e73e      	b.n	8002e08 <_dtoa_r+0x4e0>
 8002f8a:	4b9b      	ldr	r3, [pc, #620]	@ (80031f8 <_dtoa_r+0x8d0>)
 8002f8c:	f7fd fb3c 	bl	8000608 <__aeabi_dmul>
 8002f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f94:	e7bc      	b.n	8002f10 <_dtoa_r+0x5e8>
 8002f96:	d10c      	bne.n	8002fb2 <_dtoa_r+0x68a>
 8002f98:	4b98      	ldr	r3, [pc, #608]	@ (80031fc <_dtoa_r+0x8d4>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002fa0:	f7fd fb32 	bl	8000608 <__aeabi_dmul>
 8002fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002fa8:	f7fd fdb4 	bl	8000b14 <__aeabi_dcmpge>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	f000 8157 	beq.w	8003260 <_dtoa_r+0x938>
 8002fb2:	2400      	movs	r4, #0
 8002fb4:	4625      	mov	r5, r4
 8002fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	9304      	str	r3, [sp, #16]
 8002fbc:	4656      	mov	r6, sl
 8002fbe:	2700      	movs	r7, #0
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	4658      	mov	r0, fp
 8002fc4:	f000 fbb4 	bl	8003730 <_Bfree>
 8002fc8:	2d00      	cmp	r5, #0
 8002fca:	d0dc      	beq.n	8002f86 <_dtoa_r+0x65e>
 8002fcc:	b12f      	cbz	r7, 8002fda <_dtoa_r+0x6b2>
 8002fce:	42af      	cmp	r7, r5
 8002fd0:	d003      	beq.n	8002fda <_dtoa_r+0x6b2>
 8002fd2:	4639      	mov	r1, r7
 8002fd4:	4658      	mov	r0, fp
 8002fd6:	f000 fbab 	bl	8003730 <_Bfree>
 8002fda:	4629      	mov	r1, r5
 8002fdc:	4658      	mov	r0, fp
 8002fde:	f000 fba7 	bl	8003730 <_Bfree>
 8002fe2:	e7d0      	b.n	8002f86 <_dtoa_r+0x65e>
 8002fe4:	9704      	str	r7, [sp, #16]
 8002fe6:	4633      	mov	r3, r6
 8002fe8:	461e      	mov	r6, r3
 8002fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002fee:	2a39      	cmp	r2, #57	@ 0x39
 8002ff0:	d107      	bne.n	8003002 <_dtoa_r+0x6da>
 8002ff2:	459a      	cmp	sl, r3
 8002ff4:	d1f8      	bne.n	8002fe8 <_dtoa_r+0x6c0>
 8002ff6:	9a04      	ldr	r2, [sp, #16]
 8002ff8:	3201      	adds	r2, #1
 8002ffa:	9204      	str	r2, [sp, #16]
 8002ffc:	2230      	movs	r2, #48	@ 0x30
 8002ffe:	f88a 2000 	strb.w	r2, [sl]
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	3201      	adds	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e7bd      	b.n	8002f86 <_dtoa_r+0x65e>
 800300a:	4b7b      	ldr	r3, [pc, #492]	@ (80031f8 <_dtoa_r+0x8d0>)
 800300c:	2200      	movs	r2, #0
 800300e:	f7fd fafb 	bl	8000608 <__aeabi_dmul>
 8003012:	2200      	movs	r2, #0
 8003014:	2300      	movs	r3, #0
 8003016:	4604      	mov	r4, r0
 8003018:	460d      	mov	r5, r1
 800301a:	f7fd fd5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800301e:	2800      	cmp	r0, #0
 8003020:	f43f aebb 	beq.w	8002d9a <_dtoa_r+0x472>
 8003024:	e6f0      	b.n	8002e08 <_dtoa_r+0x4e0>
 8003026:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003028:	2a00      	cmp	r2, #0
 800302a:	f000 80db 	beq.w	80031e4 <_dtoa_r+0x8bc>
 800302e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003030:	2a01      	cmp	r2, #1
 8003032:	f300 80bf 	bgt.w	80031b4 <_dtoa_r+0x88c>
 8003036:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003038:	2a00      	cmp	r2, #0
 800303a:	f000 80b7 	beq.w	80031ac <_dtoa_r+0x884>
 800303e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003042:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003044:	4646      	mov	r6, r8
 8003046:	9a08      	ldr	r2, [sp, #32]
 8003048:	2101      	movs	r1, #1
 800304a:	441a      	add	r2, r3
 800304c:	4658      	mov	r0, fp
 800304e:	4498      	add	r8, r3
 8003050:	9208      	str	r2, [sp, #32]
 8003052:	f000 fc21 	bl	8003898 <__i2b>
 8003056:	4605      	mov	r5, r0
 8003058:	b15e      	cbz	r6, 8003072 <_dtoa_r+0x74a>
 800305a:	9b08      	ldr	r3, [sp, #32]
 800305c:	2b00      	cmp	r3, #0
 800305e:	dd08      	ble.n	8003072 <_dtoa_r+0x74a>
 8003060:	42b3      	cmp	r3, r6
 8003062:	9a08      	ldr	r2, [sp, #32]
 8003064:	bfa8      	it	ge
 8003066:	4633      	movge	r3, r6
 8003068:	eba8 0803 	sub.w	r8, r8, r3
 800306c:	1af6      	subs	r6, r6, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	9308      	str	r3, [sp, #32]
 8003072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003074:	b1f3      	cbz	r3, 80030b4 <_dtoa_r+0x78c>
 8003076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80b7 	beq.w	80031ec <_dtoa_r+0x8c4>
 800307e:	b18c      	cbz	r4, 80030a4 <_dtoa_r+0x77c>
 8003080:	4629      	mov	r1, r5
 8003082:	4622      	mov	r2, r4
 8003084:	4658      	mov	r0, fp
 8003086:	f000 fcc7 	bl	8003a18 <__pow5mult>
 800308a:	464a      	mov	r2, r9
 800308c:	4601      	mov	r1, r0
 800308e:	4605      	mov	r5, r0
 8003090:	4658      	mov	r0, fp
 8003092:	f000 fc17 	bl	80038c4 <__multiply>
 8003096:	4649      	mov	r1, r9
 8003098:	9004      	str	r0, [sp, #16]
 800309a:	4658      	mov	r0, fp
 800309c:	f000 fb48 	bl	8003730 <_Bfree>
 80030a0:	9b04      	ldr	r3, [sp, #16]
 80030a2:	4699      	mov	r9, r3
 80030a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80030a6:	1b1a      	subs	r2, r3, r4
 80030a8:	d004      	beq.n	80030b4 <_dtoa_r+0x78c>
 80030aa:	4649      	mov	r1, r9
 80030ac:	4658      	mov	r0, fp
 80030ae:	f000 fcb3 	bl	8003a18 <__pow5mult>
 80030b2:	4681      	mov	r9, r0
 80030b4:	2101      	movs	r1, #1
 80030b6:	4658      	mov	r0, fp
 80030b8:	f000 fbee 	bl	8003898 <__i2b>
 80030bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80030be:	4604      	mov	r4, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 81cf 	beq.w	8003464 <_dtoa_r+0xb3c>
 80030c6:	461a      	mov	r2, r3
 80030c8:	4601      	mov	r1, r0
 80030ca:	4658      	mov	r0, fp
 80030cc:	f000 fca4 	bl	8003a18 <__pow5mult>
 80030d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	4604      	mov	r4, r0
 80030d6:	f300 8095 	bgt.w	8003204 <_dtoa_r+0x8dc>
 80030da:	9b02      	ldr	r3, [sp, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f040 8087 	bne.w	80031f0 <_dtoa_r+0x8c8>
 80030e2:	9b03      	ldr	r3, [sp, #12]
 80030e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f040 8089 	bne.w	8003200 <_dtoa_r+0x8d8>
 80030ee:	9b03      	ldr	r3, [sp, #12]
 80030f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030f4:	0d1b      	lsrs	r3, r3, #20
 80030f6:	051b      	lsls	r3, r3, #20
 80030f8:	b12b      	cbz	r3, 8003106 <_dtoa_r+0x7de>
 80030fa:	9b08      	ldr	r3, [sp, #32]
 80030fc:	3301      	adds	r3, #1
 80030fe:	9308      	str	r3, [sp, #32]
 8003100:	f108 0801 	add.w	r8, r8, #1
 8003104:	2301      	movs	r3, #1
 8003106:	930a      	str	r3, [sp, #40]	@ 0x28
 8003108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 81b0 	beq.w	8003470 <_dtoa_r+0xb48>
 8003110:	6923      	ldr	r3, [r4, #16]
 8003112:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003116:	6918      	ldr	r0, [r3, #16]
 8003118:	f000 fb72 	bl	8003800 <__hi0bits>
 800311c:	f1c0 0020 	rsb	r0, r0, #32
 8003120:	9b08      	ldr	r3, [sp, #32]
 8003122:	4418      	add	r0, r3
 8003124:	f010 001f 	ands.w	r0, r0, #31
 8003128:	d077      	beq.n	800321a <_dtoa_r+0x8f2>
 800312a:	f1c0 0320 	rsb	r3, r0, #32
 800312e:	2b04      	cmp	r3, #4
 8003130:	dd6b      	ble.n	800320a <_dtoa_r+0x8e2>
 8003132:	9b08      	ldr	r3, [sp, #32]
 8003134:	f1c0 001c 	rsb	r0, r0, #28
 8003138:	4403      	add	r3, r0
 800313a:	4480      	add	r8, r0
 800313c:	4406      	add	r6, r0
 800313e:	9308      	str	r3, [sp, #32]
 8003140:	f1b8 0f00 	cmp.w	r8, #0
 8003144:	dd05      	ble.n	8003152 <_dtoa_r+0x82a>
 8003146:	4649      	mov	r1, r9
 8003148:	4642      	mov	r2, r8
 800314a:	4658      	mov	r0, fp
 800314c:	f000 fcbe 	bl	8003acc <__lshift>
 8003150:	4681      	mov	r9, r0
 8003152:	9b08      	ldr	r3, [sp, #32]
 8003154:	2b00      	cmp	r3, #0
 8003156:	dd05      	ble.n	8003164 <_dtoa_r+0x83c>
 8003158:	4621      	mov	r1, r4
 800315a:	461a      	mov	r2, r3
 800315c:	4658      	mov	r0, fp
 800315e:	f000 fcb5 	bl	8003acc <__lshift>
 8003162:	4604      	mov	r4, r0
 8003164:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003166:	2b00      	cmp	r3, #0
 8003168:	d059      	beq.n	800321e <_dtoa_r+0x8f6>
 800316a:	4621      	mov	r1, r4
 800316c:	4648      	mov	r0, r9
 800316e:	f000 fd19 	bl	8003ba4 <__mcmp>
 8003172:	2800      	cmp	r0, #0
 8003174:	da53      	bge.n	800321e <_dtoa_r+0x8f6>
 8003176:	1e7b      	subs	r3, r7, #1
 8003178:	9304      	str	r3, [sp, #16]
 800317a:	4649      	mov	r1, r9
 800317c:	2300      	movs	r3, #0
 800317e:	220a      	movs	r2, #10
 8003180:	4658      	mov	r0, fp
 8003182:	f000 faf7 	bl	8003774 <__multadd>
 8003186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003188:	4681      	mov	r9, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8172 	beq.w	8003474 <_dtoa_r+0xb4c>
 8003190:	2300      	movs	r3, #0
 8003192:	4629      	mov	r1, r5
 8003194:	220a      	movs	r2, #10
 8003196:	4658      	mov	r0, fp
 8003198:	f000 faec 	bl	8003774 <__multadd>
 800319c:	9b00      	ldr	r3, [sp, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	4605      	mov	r5, r0
 80031a2:	dc67      	bgt.n	8003274 <_dtoa_r+0x94c>
 80031a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	dc41      	bgt.n	800322e <_dtoa_r+0x906>
 80031aa:	e063      	b.n	8003274 <_dtoa_r+0x94c>
 80031ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80031ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80031b2:	e746      	b.n	8003042 <_dtoa_r+0x71a>
 80031b4:	9b07      	ldr	r3, [sp, #28]
 80031b6:	1e5c      	subs	r4, r3, #1
 80031b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	bfbf      	itttt	lt
 80031be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80031c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80031c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80031c4:	1ae3      	sublt	r3, r4, r3
 80031c6:	bfb4      	ite	lt
 80031c8:	18d2      	addlt	r2, r2, r3
 80031ca:	1b1c      	subge	r4, r3, r4
 80031cc:	9b07      	ldr	r3, [sp, #28]
 80031ce:	bfbc      	itt	lt
 80031d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80031d2:	2400      	movlt	r4, #0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bfb5      	itete	lt
 80031d8:	eba8 0603 	sublt.w	r6, r8, r3
 80031dc:	9b07      	ldrge	r3, [sp, #28]
 80031de:	2300      	movlt	r3, #0
 80031e0:	4646      	movge	r6, r8
 80031e2:	e730      	b.n	8003046 <_dtoa_r+0x71e>
 80031e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80031e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80031e8:	4646      	mov	r6, r8
 80031ea:	e735      	b.n	8003058 <_dtoa_r+0x730>
 80031ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80031ee:	e75c      	b.n	80030aa <_dtoa_r+0x782>
 80031f0:	2300      	movs	r3, #0
 80031f2:	e788      	b.n	8003106 <_dtoa_r+0x7de>
 80031f4:	3fe00000 	.word	0x3fe00000
 80031f8:	40240000 	.word	0x40240000
 80031fc:	40140000 	.word	0x40140000
 8003200:	9b02      	ldr	r3, [sp, #8]
 8003202:	e780      	b.n	8003106 <_dtoa_r+0x7de>
 8003204:	2300      	movs	r3, #0
 8003206:	930a      	str	r3, [sp, #40]	@ 0x28
 8003208:	e782      	b.n	8003110 <_dtoa_r+0x7e8>
 800320a:	d099      	beq.n	8003140 <_dtoa_r+0x818>
 800320c:	9a08      	ldr	r2, [sp, #32]
 800320e:	331c      	adds	r3, #28
 8003210:	441a      	add	r2, r3
 8003212:	4498      	add	r8, r3
 8003214:	441e      	add	r6, r3
 8003216:	9208      	str	r2, [sp, #32]
 8003218:	e792      	b.n	8003140 <_dtoa_r+0x818>
 800321a:	4603      	mov	r3, r0
 800321c:	e7f6      	b.n	800320c <_dtoa_r+0x8e4>
 800321e:	9b07      	ldr	r3, [sp, #28]
 8003220:	9704      	str	r7, [sp, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	dc20      	bgt.n	8003268 <_dtoa_r+0x940>
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800322a:	2b02      	cmp	r3, #2
 800322c:	dd1e      	ble.n	800326c <_dtoa_r+0x944>
 800322e:	9b00      	ldr	r3, [sp, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f47f aec0 	bne.w	8002fb6 <_dtoa_r+0x68e>
 8003236:	4621      	mov	r1, r4
 8003238:	2205      	movs	r2, #5
 800323a:	4658      	mov	r0, fp
 800323c:	f000 fa9a 	bl	8003774 <__multadd>
 8003240:	4601      	mov	r1, r0
 8003242:	4604      	mov	r4, r0
 8003244:	4648      	mov	r0, r9
 8003246:	f000 fcad 	bl	8003ba4 <__mcmp>
 800324a:	2800      	cmp	r0, #0
 800324c:	f77f aeb3 	ble.w	8002fb6 <_dtoa_r+0x68e>
 8003250:	4656      	mov	r6, sl
 8003252:	2331      	movs	r3, #49	@ 0x31
 8003254:	f806 3b01 	strb.w	r3, [r6], #1
 8003258:	9b04      	ldr	r3, [sp, #16]
 800325a:	3301      	adds	r3, #1
 800325c:	9304      	str	r3, [sp, #16]
 800325e:	e6ae      	b.n	8002fbe <_dtoa_r+0x696>
 8003260:	9c07      	ldr	r4, [sp, #28]
 8003262:	9704      	str	r7, [sp, #16]
 8003264:	4625      	mov	r5, r4
 8003266:	e7f3      	b.n	8003250 <_dtoa_r+0x928>
 8003268:	9b07      	ldr	r3, [sp, #28]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8104 	beq.w	800347c <_dtoa_r+0xb54>
 8003274:	2e00      	cmp	r6, #0
 8003276:	dd05      	ble.n	8003284 <_dtoa_r+0x95c>
 8003278:	4629      	mov	r1, r5
 800327a:	4632      	mov	r2, r6
 800327c:	4658      	mov	r0, fp
 800327e:	f000 fc25 	bl	8003acc <__lshift>
 8003282:	4605      	mov	r5, r0
 8003284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003286:	2b00      	cmp	r3, #0
 8003288:	d05a      	beq.n	8003340 <_dtoa_r+0xa18>
 800328a:	6869      	ldr	r1, [r5, #4]
 800328c:	4658      	mov	r0, fp
 800328e:	f000 fa0f 	bl	80036b0 <_Balloc>
 8003292:	4606      	mov	r6, r0
 8003294:	b928      	cbnz	r0, 80032a2 <_dtoa_r+0x97a>
 8003296:	4b84      	ldr	r3, [pc, #528]	@ (80034a8 <_dtoa_r+0xb80>)
 8003298:	4602      	mov	r2, r0
 800329a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800329e:	f7ff bb5a 	b.w	8002956 <_dtoa_r+0x2e>
 80032a2:	692a      	ldr	r2, [r5, #16]
 80032a4:	3202      	adds	r2, #2
 80032a6:	0092      	lsls	r2, r2, #2
 80032a8:	f105 010c 	add.w	r1, r5, #12
 80032ac:	300c      	adds	r0, #12
 80032ae:	f7ff faa4 	bl	80027fa <memcpy>
 80032b2:	2201      	movs	r2, #1
 80032b4:	4631      	mov	r1, r6
 80032b6:	4658      	mov	r0, fp
 80032b8:	f000 fc08 	bl	8003acc <__lshift>
 80032bc:	f10a 0301 	add.w	r3, sl, #1
 80032c0:	9307      	str	r3, [sp, #28]
 80032c2:	9b00      	ldr	r3, [sp, #0]
 80032c4:	4453      	add	r3, sl
 80032c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80032c8:	9b02      	ldr	r3, [sp, #8]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	462f      	mov	r7, r5
 80032d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80032d2:	4605      	mov	r5, r0
 80032d4:	9b07      	ldr	r3, [sp, #28]
 80032d6:	4621      	mov	r1, r4
 80032d8:	3b01      	subs	r3, #1
 80032da:	4648      	mov	r0, r9
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	f7ff fa9a 	bl	8002816 <quorem>
 80032e2:	4639      	mov	r1, r7
 80032e4:	9002      	str	r0, [sp, #8]
 80032e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80032ea:	4648      	mov	r0, r9
 80032ec:	f000 fc5a 	bl	8003ba4 <__mcmp>
 80032f0:	462a      	mov	r2, r5
 80032f2:	9008      	str	r0, [sp, #32]
 80032f4:	4621      	mov	r1, r4
 80032f6:	4658      	mov	r0, fp
 80032f8:	f000 fc70 	bl	8003bdc <__mdiff>
 80032fc:	68c2      	ldr	r2, [r0, #12]
 80032fe:	4606      	mov	r6, r0
 8003300:	bb02      	cbnz	r2, 8003344 <_dtoa_r+0xa1c>
 8003302:	4601      	mov	r1, r0
 8003304:	4648      	mov	r0, r9
 8003306:	f000 fc4d 	bl	8003ba4 <__mcmp>
 800330a:	4602      	mov	r2, r0
 800330c:	4631      	mov	r1, r6
 800330e:	4658      	mov	r0, fp
 8003310:	920e      	str	r2, [sp, #56]	@ 0x38
 8003312:	f000 fa0d 	bl	8003730 <_Bfree>
 8003316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003318:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800331a:	9e07      	ldr	r6, [sp, #28]
 800331c:	ea43 0102 	orr.w	r1, r3, r2
 8003320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003322:	4319      	orrs	r1, r3
 8003324:	d110      	bne.n	8003348 <_dtoa_r+0xa20>
 8003326:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800332a:	d029      	beq.n	8003380 <_dtoa_r+0xa58>
 800332c:	9b08      	ldr	r3, [sp, #32]
 800332e:	2b00      	cmp	r3, #0
 8003330:	dd02      	ble.n	8003338 <_dtoa_r+0xa10>
 8003332:	9b02      	ldr	r3, [sp, #8]
 8003334:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003338:	9b00      	ldr	r3, [sp, #0]
 800333a:	f883 8000 	strb.w	r8, [r3]
 800333e:	e63f      	b.n	8002fc0 <_dtoa_r+0x698>
 8003340:	4628      	mov	r0, r5
 8003342:	e7bb      	b.n	80032bc <_dtoa_r+0x994>
 8003344:	2201      	movs	r2, #1
 8003346:	e7e1      	b.n	800330c <_dtoa_r+0x9e4>
 8003348:	9b08      	ldr	r3, [sp, #32]
 800334a:	2b00      	cmp	r3, #0
 800334c:	db04      	blt.n	8003358 <_dtoa_r+0xa30>
 800334e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003350:	430b      	orrs	r3, r1
 8003352:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003354:	430b      	orrs	r3, r1
 8003356:	d120      	bne.n	800339a <_dtoa_r+0xa72>
 8003358:	2a00      	cmp	r2, #0
 800335a:	dded      	ble.n	8003338 <_dtoa_r+0xa10>
 800335c:	4649      	mov	r1, r9
 800335e:	2201      	movs	r2, #1
 8003360:	4658      	mov	r0, fp
 8003362:	f000 fbb3 	bl	8003acc <__lshift>
 8003366:	4621      	mov	r1, r4
 8003368:	4681      	mov	r9, r0
 800336a:	f000 fc1b 	bl	8003ba4 <__mcmp>
 800336e:	2800      	cmp	r0, #0
 8003370:	dc03      	bgt.n	800337a <_dtoa_r+0xa52>
 8003372:	d1e1      	bne.n	8003338 <_dtoa_r+0xa10>
 8003374:	f018 0f01 	tst.w	r8, #1
 8003378:	d0de      	beq.n	8003338 <_dtoa_r+0xa10>
 800337a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800337e:	d1d8      	bne.n	8003332 <_dtoa_r+0xa0a>
 8003380:	9a00      	ldr	r2, [sp, #0]
 8003382:	2339      	movs	r3, #57	@ 0x39
 8003384:	7013      	strb	r3, [r2, #0]
 8003386:	4633      	mov	r3, r6
 8003388:	461e      	mov	r6, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003390:	2a39      	cmp	r2, #57	@ 0x39
 8003392:	d052      	beq.n	800343a <_dtoa_r+0xb12>
 8003394:	3201      	adds	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e612      	b.n	8002fc0 <_dtoa_r+0x698>
 800339a:	2a00      	cmp	r2, #0
 800339c:	dd07      	ble.n	80033ae <_dtoa_r+0xa86>
 800339e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80033a2:	d0ed      	beq.n	8003380 <_dtoa_r+0xa58>
 80033a4:	9a00      	ldr	r2, [sp, #0]
 80033a6:	f108 0301 	add.w	r3, r8, #1
 80033aa:	7013      	strb	r3, [r2, #0]
 80033ac:	e608      	b.n	8002fc0 <_dtoa_r+0x698>
 80033ae:	9b07      	ldr	r3, [sp, #28]
 80033b0:	9a07      	ldr	r2, [sp, #28]
 80033b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80033b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d028      	beq.n	800340e <_dtoa_r+0xae6>
 80033bc:	4649      	mov	r1, r9
 80033be:	2300      	movs	r3, #0
 80033c0:	220a      	movs	r2, #10
 80033c2:	4658      	mov	r0, fp
 80033c4:	f000 f9d6 	bl	8003774 <__multadd>
 80033c8:	42af      	cmp	r7, r5
 80033ca:	4681      	mov	r9, r0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	f04f 020a 	mov.w	r2, #10
 80033d4:	4639      	mov	r1, r7
 80033d6:	4658      	mov	r0, fp
 80033d8:	d107      	bne.n	80033ea <_dtoa_r+0xac2>
 80033da:	f000 f9cb 	bl	8003774 <__multadd>
 80033de:	4607      	mov	r7, r0
 80033e0:	4605      	mov	r5, r0
 80033e2:	9b07      	ldr	r3, [sp, #28]
 80033e4:	3301      	adds	r3, #1
 80033e6:	9307      	str	r3, [sp, #28]
 80033e8:	e774      	b.n	80032d4 <_dtoa_r+0x9ac>
 80033ea:	f000 f9c3 	bl	8003774 <__multadd>
 80033ee:	4629      	mov	r1, r5
 80033f0:	4607      	mov	r7, r0
 80033f2:	2300      	movs	r3, #0
 80033f4:	220a      	movs	r2, #10
 80033f6:	4658      	mov	r0, fp
 80033f8:	f000 f9bc 	bl	8003774 <__multadd>
 80033fc:	4605      	mov	r5, r0
 80033fe:	e7f0      	b.n	80033e2 <_dtoa_r+0xaba>
 8003400:	9b00      	ldr	r3, [sp, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	bfcc      	ite	gt
 8003406:	461e      	movgt	r6, r3
 8003408:	2601      	movle	r6, #1
 800340a:	4456      	add	r6, sl
 800340c:	2700      	movs	r7, #0
 800340e:	4649      	mov	r1, r9
 8003410:	2201      	movs	r2, #1
 8003412:	4658      	mov	r0, fp
 8003414:	f000 fb5a 	bl	8003acc <__lshift>
 8003418:	4621      	mov	r1, r4
 800341a:	4681      	mov	r9, r0
 800341c:	f000 fbc2 	bl	8003ba4 <__mcmp>
 8003420:	2800      	cmp	r0, #0
 8003422:	dcb0      	bgt.n	8003386 <_dtoa_r+0xa5e>
 8003424:	d102      	bne.n	800342c <_dtoa_r+0xb04>
 8003426:	f018 0f01 	tst.w	r8, #1
 800342a:	d1ac      	bne.n	8003386 <_dtoa_r+0xa5e>
 800342c:	4633      	mov	r3, r6
 800342e:	461e      	mov	r6, r3
 8003430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003434:	2a30      	cmp	r2, #48	@ 0x30
 8003436:	d0fa      	beq.n	800342e <_dtoa_r+0xb06>
 8003438:	e5c2      	b.n	8002fc0 <_dtoa_r+0x698>
 800343a:	459a      	cmp	sl, r3
 800343c:	d1a4      	bne.n	8003388 <_dtoa_r+0xa60>
 800343e:	9b04      	ldr	r3, [sp, #16]
 8003440:	3301      	adds	r3, #1
 8003442:	9304      	str	r3, [sp, #16]
 8003444:	2331      	movs	r3, #49	@ 0x31
 8003446:	f88a 3000 	strb.w	r3, [sl]
 800344a:	e5b9      	b.n	8002fc0 <_dtoa_r+0x698>
 800344c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800344e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80034ac <_dtoa_r+0xb84>
 8003452:	b11b      	cbz	r3, 800345c <_dtoa_r+0xb34>
 8003454:	f10a 0308 	add.w	r3, sl, #8
 8003458:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4650      	mov	r0, sl
 800345e:	b019      	add	sp, #100	@ 0x64
 8003460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003466:	2b01      	cmp	r3, #1
 8003468:	f77f ae37 	ble.w	80030da <_dtoa_r+0x7b2>
 800346c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800346e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003470:	2001      	movs	r0, #1
 8003472:	e655      	b.n	8003120 <_dtoa_r+0x7f8>
 8003474:	9b00      	ldr	r3, [sp, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f77f aed6 	ble.w	8003228 <_dtoa_r+0x900>
 800347c:	4656      	mov	r6, sl
 800347e:	4621      	mov	r1, r4
 8003480:	4648      	mov	r0, r9
 8003482:	f7ff f9c8 	bl	8002816 <quorem>
 8003486:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800348a:	f806 8b01 	strb.w	r8, [r6], #1
 800348e:	9b00      	ldr	r3, [sp, #0]
 8003490:	eba6 020a 	sub.w	r2, r6, sl
 8003494:	4293      	cmp	r3, r2
 8003496:	ddb3      	ble.n	8003400 <_dtoa_r+0xad8>
 8003498:	4649      	mov	r1, r9
 800349a:	2300      	movs	r3, #0
 800349c:	220a      	movs	r2, #10
 800349e:	4658      	mov	r0, fp
 80034a0:	f000 f968 	bl	8003774 <__multadd>
 80034a4:	4681      	mov	r9, r0
 80034a6:	e7ea      	b.n	800347e <_dtoa_r+0xb56>
 80034a8:	08004608 	.word	0x08004608
 80034ac:	0800458c 	.word	0x0800458c

080034b0 <_free_r>:
 80034b0:	b538      	push	{r3, r4, r5, lr}
 80034b2:	4605      	mov	r5, r0
 80034b4:	2900      	cmp	r1, #0
 80034b6:	d041      	beq.n	800353c <_free_r+0x8c>
 80034b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034bc:	1f0c      	subs	r4, r1, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bfb8      	it	lt
 80034c2:	18e4      	addlt	r4, r4, r3
 80034c4:	f000 f8e8 	bl	8003698 <__malloc_lock>
 80034c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003540 <_free_r+0x90>)
 80034ca:	6813      	ldr	r3, [r2, #0]
 80034cc:	b933      	cbnz	r3, 80034dc <_free_r+0x2c>
 80034ce:	6063      	str	r3, [r4, #4]
 80034d0:	6014      	str	r4, [r2, #0]
 80034d2:	4628      	mov	r0, r5
 80034d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034d8:	f000 b8e4 	b.w	80036a4 <__malloc_unlock>
 80034dc:	42a3      	cmp	r3, r4
 80034de:	d908      	bls.n	80034f2 <_free_r+0x42>
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	1821      	adds	r1, r4, r0
 80034e4:	428b      	cmp	r3, r1
 80034e6:	bf01      	itttt	eq
 80034e8:	6819      	ldreq	r1, [r3, #0]
 80034ea:	685b      	ldreq	r3, [r3, #4]
 80034ec:	1809      	addeq	r1, r1, r0
 80034ee:	6021      	streq	r1, [r4, #0]
 80034f0:	e7ed      	b.n	80034ce <_free_r+0x1e>
 80034f2:	461a      	mov	r2, r3
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	b10b      	cbz	r3, 80034fc <_free_r+0x4c>
 80034f8:	42a3      	cmp	r3, r4
 80034fa:	d9fa      	bls.n	80034f2 <_free_r+0x42>
 80034fc:	6811      	ldr	r1, [r2, #0]
 80034fe:	1850      	adds	r0, r2, r1
 8003500:	42a0      	cmp	r0, r4
 8003502:	d10b      	bne.n	800351c <_free_r+0x6c>
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	4401      	add	r1, r0
 8003508:	1850      	adds	r0, r2, r1
 800350a:	4283      	cmp	r3, r0
 800350c:	6011      	str	r1, [r2, #0]
 800350e:	d1e0      	bne.n	80034d2 <_free_r+0x22>
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	6053      	str	r3, [r2, #4]
 8003516:	4408      	add	r0, r1
 8003518:	6010      	str	r0, [r2, #0]
 800351a:	e7da      	b.n	80034d2 <_free_r+0x22>
 800351c:	d902      	bls.n	8003524 <_free_r+0x74>
 800351e:	230c      	movs	r3, #12
 8003520:	602b      	str	r3, [r5, #0]
 8003522:	e7d6      	b.n	80034d2 <_free_r+0x22>
 8003524:	6820      	ldr	r0, [r4, #0]
 8003526:	1821      	adds	r1, r4, r0
 8003528:	428b      	cmp	r3, r1
 800352a:	bf04      	itt	eq
 800352c:	6819      	ldreq	r1, [r3, #0]
 800352e:	685b      	ldreq	r3, [r3, #4]
 8003530:	6063      	str	r3, [r4, #4]
 8003532:	bf04      	itt	eq
 8003534:	1809      	addeq	r1, r1, r0
 8003536:	6021      	streq	r1, [r4, #0]
 8003538:	6054      	str	r4, [r2, #4]
 800353a:	e7ca      	b.n	80034d2 <_free_r+0x22>
 800353c:	bd38      	pop	{r3, r4, r5, pc}
 800353e:	bf00      	nop
 8003540:	200004b8 	.word	0x200004b8

08003544 <malloc>:
 8003544:	4b02      	ldr	r3, [pc, #8]	@ (8003550 <malloc+0xc>)
 8003546:	4601      	mov	r1, r0
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	f000 b825 	b.w	8003598 <_malloc_r>
 800354e:	bf00      	nop
 8003550:	20000010 	.word	0x20000010

08003554 <sbrk_aligned>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	4e0f      	ldr	r6, [pc, #60]	@ (8003594 <sbrk_aligned+0x40>)
 8003558:	460c      	mov	r4, r1
 800355a:	6831      	ldr	r1, [r6, #0]
 800355c:	4605      	mov	r5, r0
 800355e:	b911      	cbnz	r1, 8003566 <sbrk_aligned+0x12>
 8003560:	f000 fcd4 	bl	8003f0c <_sbrk_r>
 8003564:	6030      	str	r0, [r6, #0]
 8003566:	4621      	mov	r1, r4
 8003568:	4628      	mov	r0, r5
 800356a:	f000 fccf 	bl	8003f0c <_sbrk_r>
 800356e:	1c43      	adds	r3, r0, #1
 8003570:	d103      	bne.n	800357a <sbrk_aligned+0x26>
 8003572:	f04f 34ff 	mov.w	r4, #4294967295
 8003576:	4620      	mov	r0, r4
 8003578:	bd70      	pop	{r4, r5, r6, pc}
 800357a:	1cc4      	adds	r4, r0, #3
 800357c:	f024 0403 	bic.w	r4, r4, #3
 8003580:	42a0      	cmp	r0, r4
 8003582:	d0f8      	beq.n	8003576 <sbrk_aligned+0x22>
 8003584:	1a21      	subs	r1, r4, r0
 8003586:	4628      	mov	r0, r5
 8003588:	f000 fcc0 	bl	8003f0c <_sbrk_r>
 800358c:	3001      	adds	r0, #1
 800358e:	d1f2      	bne.n	8003576 <sbrk_aligned+0x22>
 8003590:	e7ef      	b.n	8003572 <sbrk_aligned+0x1e>
 8003592:	bf00      	nop
 8003594:	200004b4 	.word	0x200004b4

08003598 <_malloc_r>:
 8003598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800359c:	1ccd      	adds	r5, r1, #3
 800359e:	f025 0503 	bic.w	r5, r5, #3
 80035a2:	3508      	adds	r5, #8
 80035a4:	2d0c      	cmp	r5, #12
 80035a6:	bf38      	it	cc
 80035a8:	250c      	movcc	r5, #12
 80035aa:	2d00      	cmp	r5, #0
 80035ac:	4606      	mov	r6, r0
 80035ae:	db01      	blt.n	80035b4 <_malloc_r+0x1c>
 80035b0:	42a9      	cmp	r1, r5
 80035b2:	d904      	bls.n	80035be <_malloc_r+0x26>
 80035b4:	230c      	movs	r3, #12
 80035b6:	6033      	str	r3, [r6, #0]
 80035b8:	2000      	movs	r0, #0
 80035ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003694 <_malloc_r+0xfc>
 80035c2:	f000 f869 	bl	8003698 <__malloc_lock>
 80035c6:	f8d8 3000 	ldr.w	r3, [r8]
 80035ca:	461c      	mov	r4, r3
 80035cc:	bb44      	cbnz	r4, 8003620 <_malloc_r+0x88>
 80035ce:	4629      	mov	r1, r5
 80035d0:	4630      	mov	r0, r6
 80035d2:	f7ff ffbf 	bl	8003554 <sbrk_aligned>
 80035d6:	1c43      	adds	r3, r0, #1
 80035d8:	4604      	mov	r4, r0
 80035da:	d158      	bne.n	800368e <_malloc_r+0xf6>
 80035dc:	f8d8 4000 	ldr.w	r4, [r8]
 80035e0:	4627      	mov	r7, r4
 80035e2:	2f00      	cmp	r7, #0
 80035e4:	d143      	bne.n	800366e <_malloc_r+0xd6>
 80035e6:	2c00      	cmp	r4, #0
 80035e8:	d04b      	beq.n	8003682 <_malloc_r+0xea>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	4639      	mov	r1, r7
 80035ee:	4630      	mov	r0, r6
 80035f0:	eb04 0903 	add.w	r9, r4, r3
 80035f4:	f000 fc8a 	bl	8003f0c <_sbrk_r>
 80035f8:	4581      	cmp	r9, r0
 80035fa:	d142      	bne.n	8003682 <_malloc_r+0xea>
 80035fc:	6821      	ldr	r1, [r4, #0]
 80035fe:	1a6d      	subs	r5, r5, r1
 8003600:	4629      	mov	r1, r5
 8003602:	4630      	mov	r0, r6
 8003604:	f7ff ffa6 	bl	8003554 <sbrk_aligned>
 8003608:	3001      	adds	r0, #1
 800360a:	d03a      	beq.n	8003682 <_malloc_r+0xea>
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	442b      	add	r3, r5
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	f8d8 3000 	ldr.w	r3, [r8]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	bb62      	cbnz	r2, 8003674 <_malloc_r+0xdc>
 800361a:	f8c8 7000 	str.w	r7, [r8]
 800361e:	e00f      	b.n	8003640 <_malloc_r+0xa8>
 8003620:	6822      	ldr	r2, [r4, #0]
 8003622:	1b52      	subs	r2, r2, r5
 8003624:	d420      	bmi.n	8003668 <_malloc_r+0xd0>
 8003626:	2a0b      	cmp	r2, #11
 8003628:	d917      	bls.n	800365a <_malloc_r+0xc2>
 800362a:	1961      	adds	r1, r4, r5
 800362c:	42a3      	cmp	r3, r4
 800362e:	6025      	str	r5, [r4, #0]
 8003630:	bf18      	it	ne
 8003632:	6059      	strne	r1, [r3, #4]
 8003634:	6863      	ldr	r3, [r4, #4]
 8003636:	bf08      	it	eq
 8003638:	f8c8 1000 	streq.w	r1, [r8]
 800363c:	5162      	str	r2, [r4, r5]
 800363e:	604b      	str	r3, [r1, #4]
 8003640:	4630      	mov	r0, r6
 8003642:	f000 f82f 	bl	80036a4 <__malloc_unlock>
 8003646:	f104 000b 	add.w	r0, r4, #11
 800364a:	1d23      	adds	r3, r4, #4
 800364c:	f020 0007 	bic.w	r0, r0, #7
 8003650:	1ac2      	subs	r2, r0, r3
 8003652:	bf1c      	itt	ne
 8003654:	1a1b      	subne	r3, r3, r0
 8003656:	50a3      	strne	r3, [r4, r2]
 8003658:	e7af      	b.n	80035ba <_malloc_r+0x22>
 800365a:	6862      	ldr	r2, [r4, #4]
 800365c:	42a3      	cmp	r3, r4
 800365e:	bf0c      	ite	eq
 8003660:	f8c8 2000 	streq.w	r2, [r8]
 8003664:	605a      	strne	r2, [r3, #4]
 8003666:	e7eb      	b.n	8003640 <_malloc_r+0xa8>
 8003668:	4623      	mov	r3, r4
 800366a:	6864      	ldr	r4, [r4, #4]
 800366c:	e7ae      	b.n	80035cc <_malloc_r+0x34>
 800366e:	463c      	mov	r4, r7
 8003670:	687f      	ldr	r7, [r7, #4]
 8003672:	e7b6      	b.n	80035e2 <_malloc_r+0x4a>
 8003674:	461a      	mov	r2, r3
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	42a3      	cmp	r3, r4
 800367a:	d1fb      	bne.n	8003674 <_malloc_r+0xdc>
 800367c:	2300      	movs	r3, #0
 800367e:	6053      	str	r3, [r2, #4]
 8003680:	e7de      	b.n	8003640 <_malloc_r+0xa8>
 8003682:	230c      	movs	r3, #12
 8003684:	6033      	str	r3, [r6, #0]
 8003686:	4630      	mov	r0, r6
 8003688:	f000 f80c 	bl	80036a4 <__malloc_unlock>
 800368c:	e794      	b.n	80035b8 <_malloc_r+0x20>
 800368e:	6005      	str	r5, [r0, #0]
 8003690:	e7d6      	b.n	8003640 <_malloc_r+0xa8>
 8003692:	bf00      	nop
 8003694:	200004b8 	.word	0x200004b8

08003698 <__malloc_lock>:
 8003698:	4801      	ldr	r0, [pc, #4]	@ (80036a0 <__malloc_lock+0x8>)
 800369a:	f7ff b8ac 	b.w	80027f6 <__retarget_lock_acquire_recursive>
 800369e:	bf00      	nop
 80036a0:	200004b0 	.word	0x200004b0

080036a4 <__malloc_unlock>:
 80036a4:	4801      	ldr	r0, [pc, #4]	@ (80036ac <__malloc_unlock+0x8>)
 80036a6:	f7ff b8a7 	b.w	80027f8 <__retarget_lock_release_recursive>
 80036aa:	bf00      	nop
 80036ac:	200004b0 	.word	0x200004b0

080036b0 <_Balloc>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	69c6      	ldr	r6, [r0, #28]
 80036b4:	4604      	mov	r4, r0
 80036b6:	460d      	mov	r5, r1
 80036b8:	b976      	cbnz	r6, 80036d8 <_Balloc+0x28>
 80036ba:	2010      	movs	r0, #16
 80036bc:	f7ff ff42 	bl	8003544 <malloc>
 80036c0:	4602      	mov	r2, r0
 80036c2:	61e0      	str	r0, [r4, #28]
 80036c4:	b920      	cbnz	r0, 80036d0 <_Balloc+0x20>
 80036c6:	4b18      	ldr	r3, [pc, #96]	@ (8003728 <_Balloc+0x78>)
 80036c8:	4818      	ldr	r0, [pc, #96]	@ (800372c <_Balloc+0x7c>)
 80036ca:	216b      	movs	r1, #107	@ 0x6b
 80036cc:	f000 fc2e 	bl	8003f2c <__assert_func>
 80036d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80036d4:	6006      	str	r6, [r0, #0]
 80036d6:	60c6      	str	r6, [r0, #12]
 80036d8:	69e6      	ldr	r6, [r4, #28]
 80036da:	68f3      	ldr	r3, [r6, #12]
 80036dc:	b183      	cbz	r3, 8003700 <_Balloc+0x50>
 80036de:	69e3      	ldr	r3, [r4, #28]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80036e6:	b9b8      	cbnz	r0, 8003718 <_Balloc+0x68>
 80036e8:	2101      	movs	r1, #1
 80036ea:	fa01 f605 	lsl.w	r6, r1, r5
 80036ee:	1d72      	adds	r2, r6, #5
 80036f0:	0092      	lsls	r2, r2, #2
 80036f2:	4620      	mov	r0, r4
 80036f4:	f000 fc38 	bl	8003f68 <_calloc_r>
 80036f8:	b160      	cbz	r0, 8003714 <_Balloc+0x64>
 80036fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80036fe:	e00e      	b.n	800371e <_Balloc+0x6e>
 8003700:	2221      	movs	r2, #33	@ 0x21
 8003702:	2104      	movs	r1, #4
 8003704:	4620      	mov	r0, r4
 8003706:	f000 fc2f 	bl	8003f68 <_calloc_r>
 800370a:	69e3      	ldr	r3, [r4, #28]
 800370c:	60f0      	str	r0, [r6, #12]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e4      	bne.n	80036de <_Balloc+0x2e>
 8003714:	2000      	movs	r0, #0
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	6802      	ldr	r2, [r0, #0]
 800371a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800371e:	2300      	movs	r3, #0
 8003720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003724:	e7f7      	b.n	8003716 <_Balloc+0x66>
 8003726:	bf00      	nop
 8003728:	08004599 	.word	0x08004599
 800372c:	08004619 	.word	0x08004619

08003730 <_Bfree>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	69c6      	ldr	r6, [r0, #28]
 8003734:	4605      	mov	r5, r0
 8003736:	460c      	mov	r4, r1
 8003738:	b976      	cbnz	r6, 8003758 <_Bfree+0x28>
 800373a:	2010      	movs	r0, #16
 800373c:	f7ff ff02 	bl	8003544 <malloc>
 8003740:	4602      	mov	r2, r0
 8003742:	61e8      	str	r0, [r5, #28]
 8003744:	b920      	cbnz	r0, 8003750 <_Bfree+0x20>
 8003746:	4b09      	ldr	r3, [pc, #36]	@ (800376c <_Bfree+0x3c>)
 8003748:	4809      	ldr	r0, [pc, #36]	@ (8003770 <_Bfree+0x40>)
 800374a:	218f      	movs	r1, #143	@ 0x8f
 800374c:	f000 fbee 	bl	8003f2c <__assert_func>
 8003750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003754:	6006      	str	r6, [r0, #0]
 8003756:	60c6      	str	r6, [r0, #12]
 8003758:	b13c      	cbz	r4, 800376a <_Bfree+0x3a>
 800375a:	69eb      	ldr	r3, [r5, #28]
 800375c:	6862      	ldr	r2, [r4, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003764:	6021      	str	r1, [r4, #0]
 8003766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	08004599 	.word	0x08004599
 8003770:	08004619 	.word	0x08004619

08003774 <__multadd>:
 8003774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003778:	690d      	ldr	r5, [r1, #16]
 800377a:	4607      	mov	r7, r0
 800377c:	460c      	mov	r4, r1
 800377e:	461e      	mov	r6, r3
 8003780:	f101 0c14 	add.w	ip, r1, #20
 8003784:	2000      	movs	r0, #0
 8003786:	f8dc 3000 	ldr.w	r3, [ip]
 800378a:	b299      	uxth	r1, r3
 800378c:	fb02 6101 	mla	r1, r2, r1, r6
 8003790:	0c1e      	lsrs	r6, r3, #16
 8003792:	0c0b      	lsrs	r3, r1, #16
 8003794:	fb02 3306 	mla	r3, r2, r6, r3
 8003798:	b289      	uxth	r1, r1
 800379a:	3001      	adds	r0, #1
 800379c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80037a0:	4285      	cmp	r5, r0
 80037a2:	f84c 1b04 	str.w	r1, [ip], #4
 80037a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80037aa:	dcec      	bgt.n	8003786 <__multadd+0x12>
 80037ac:	b30e      	cbz	r6, 80037f2 <__multadd+0x7e>
 80037ae:	68a3      	ldr	r3, [r4, #8]
 80037b0:	42ab      	cmp	r3, r5
 80037b2:	dc19      	bgt.n	80037e8 <__multadd+0x74>
 80037b4:	6861      	ldr	r1, [r4, #4]
 80037b6:	4638      	mov	r0, r7
 80037b8:	3101      	adds	r1, #1
 80037ba:	f7ff ff79 	bl	80036b0 <_Balloc>
 80037be:	4680      	mov	r8, r0
 80037c0:	b928      	cbnz	r0, 80037ce <__multadd+0x5a>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b0c      	ldr	r3, [pc, #48]	@ (80037f8 <__multadd+0x84>)
 80037c6:	480d      	ldr	r0, [pc, #52]	@ (80037fc <__multadd+0x88>)
 80037c8:	21ba      	movs	r1, #186	@ 0xba
 80037ca:	f000 fbaf 	bl	8003f2c <__assert_func>
 80037ce:	6922      	ldr	r2, [r4, #16]
 80037d0:	3202      	adds	r2, #2
 80037d2:	f104 010c 	add.w	r1, r4, #12
 80037d6:	0092      	lsls	r2, r2, #2
 80037d8:	300c      	adds	r0, #12
 80037da:	f7ff f80e 	bl	80027fa <memcpy>
 80037de:	4621      	mov	r1, r4
 80037e0:	4638      	mov	r0, r7
 80037e2:	f7ff ffa5 	bl	8003730 <_Bfree>
 80037e6:	4644      	mov	r4, r8
 80037e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80037ec:	3501      	adds	r5, #1
 80037ee:	615e      	str	r6, [r3, #20]
 80037f0:	6125      	str	r5, [r4, #16]
 80037f2:	4620      	mov	r0, r4
 80037f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037f8:	08004608 	.word	0x08004608
 80037fc:	08004619 	.word	0x08004619

08003800 <__hi0bits>:
 8003800:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003804:	4603      	mov	r3, r0
 8003806:	bf36      	itet	cc
 8003808:	0403      	lslcc	r3, r0, #16
 800380a:	2000      	movcs	r0, #0
 800380c:	2010      	movcc	r0, #16
 800380e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003812:	bf3c      	itt	cc
 8003814:	021b      	lslcc	r3, r3, #8
 8003816:	3008      	addcc	r0, #8
 8003818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800381c:	bf3c      	itt	cc
 800381e:	011b      	lslcc	r3, r3, #4
 8003820:	3004      	addcc	r0, #4
 8003822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003826:	bf3c      	itt	cc
 8003828:	009b      	lslcc	r3, r3, #2
 800382a:	3002      	addcc	r0, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	db05      	blt.n	800383c <__hi0bits+0x3c>
 8003830:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003834:	f100 0001 	add.w	r0, r0, #1
 8003838:	bf08      	it	eq
 800383a:	2020      	moveq	r0, #32
 800383c:	4770      	bx	lr

0800383e <__lo0bits>:
 800383e:	6803      	ldr	r3, [r0, #0]
 8003840:	4602      	mov	r2, r0
 8003842:	f013 0007 	ands.w	r0, r3, #7
 8003846:	d00b      	beq.n	8003860 <__lo0bits+0x22>
 8003848:	07d9      	lsls	r1, r3, #31
 800384a:	d421      	bmi.n	8003890 <__lo0bits+0x52>
 800384c:	0798      	lsls	r0, r3, #30
 800384e:	bf49      	itett	mi
 8003850:	085b      	lsrmi	r3, r3, #1
 8003852:	089b      	lsrpl	r3, r3, #2
 8003854:	2001      	movmi	r0, #1
 8003856:	6013      	strmi	r3, [r2, #0]
 8003858:	bf5c      	itt	pl
 800385a:	6013      	strpl	r3, [r2, #0]
 800385c:	2002      	movpl	r0, #2
 800385e:	4770      	bx	lr
 8003860:	b299      	uxth	r1, r3
 8003862:	b909      	cbnz	r1, 8003868 <__lo0bits+0x2a>
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	2010      	movs	r0, #16
 8003868:	b2d9      	uxtb	r1, r3
 800386a:	b909      	cbnz	r1, 8003870 <__lo0bits+0x32>
 800386c:	3008      	adds	r0, #8
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	0719      	lsls	r1, r3, #28
 8003872:	bf04      	itt	eq
 8003874:	091b      	lsreq	r3, r3, #4
 8003876:	3004      	addeq	r0, #4
 8003878:	0799      	lsls	r1, r3, #30
 800387a:	bf04      	itt	eq
 800387c:	089b      	lsreq	r3, r3, #2
 800387e:	3002      	addeq	r0, #2
 8003880:	07d9      	lsls	r1, r3, #31
 8003882:	d403      	bmi.n	800388c <__lo0bits+0x4e>
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	f100 0001 	add.w	r0, r0, #1
 800388a:	d003      	beq.n	8003894 <__lo0bits+0x56>
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	4770      	bx	lr
 8003890:	2000      	movs	r0, #0
 8003892:	4770      	bx	lr
 8003894:	2020      	movs	r0, #32
 8003896:	4770      	bx	lr

08003898 <__i2b>:
 8003898:	b510      	push	{r4, lr}
 800389a:	460c      	mov	r4, r1
 800389c:	2101      	movs	r1, #1
 800389e:	f7ff ff07 	bl	80036b0 <_Balloc>
 80038a2:	4602      	mov	r2, r0
 80038a4:	b928      	cbnz	r0, 80038b2 <__i2b+0x1a>
 80038a6:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <__i2b+0x24>)
 80038a8:	4805      	ldr	r0, [pc, #20]	@ (80038c0 <__i2b+0x28>)
 80038aa:	f240 1145 	movw	r1, #325	@ 0x145
 80038ae:	f000 fb3d 	bl	8003f2c <__assert_func>
 80038b2:	2301      	movs	r3, #1
 80038b4:	6144      	str	r4, [r0, #20]
 80038b6:	6103      	str	r3, [r0, #16]
 80038b8:	bd10      	pop	{r4, pc}
 80038ba:	bf00      	nop
 80038bc:	08004608 	.word	0x08004608
 80038c0:	08004619 	.word	0x08004619

080038c4 <__multiply>:
 80038c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c8:	4614      	mov	r4, r2
 80038ca:	690a      	ldr	r2, [r1, #16]
 80038cc:	6923      	ldr	r3, [r4, #16]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	bfa8      	it	ge
 80038d2:	4623      	movge	r3, r4
 80038d4:	460f      	mov	r7, r1
 80038d6:	bfa4      	itt	ge
 80038d8:	460c      	movge	r4, r1
 80038da:	461f      	movge	r7, r3
 80038dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80038e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80038e4:	68a3      	ldr	r3, [r4, #8]
 80038e6:	6861      	ldr	r1, [r4, #4]
 80038e8:	eb0a 0609 	add.w	r6, sl, r9
 80038ec:	42b3      	cmp	r3, r6
 80038ee:	b085      	sub	sp, #20
 80038f0:	bfb8      	it	lt
 80038f2:	3101      	addlt	r1, #1
 80038f4:	f7ff fedc 	bl	80036b0 <_Balloc>
 80038f8:	b930      	cbnz	r0, 8003908 <__multiply+0x44>
 80038fa:	4602      	mov	r2, r0
 80038fc:	4b44      	ldr	r3, [pc, #272]	@ (8003a10 <__multiply+0x14c>)
 80038fe:	4845      	ldr	r0, [pc, #276]	@ (8003a14 <__multiply+0x150>)
 8003900:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003904:	f000 fb12 	bl	8003f2c <__assert_func>
 8003908:	f100 0514 	add.w	r5, r0, #20
 800390c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003910:	462b      	mov	r3, r5
 8003912:	2200      	movs	r2, #0
 8003914:	4543      	cmp	r3, r8
 8003916:	d321      	bcc.n	800395c <__multiply+0x98>
 8003918:	f107 0114 	add.w	r1, r7, #20
 800391c:	f104 0214 	add.w	r2, r4, #20
 8003920:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8003924:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8003928:	9302      	str	r3, [sp, #8]
 800392a:	1b13      	subs	r3, r2, r4
 800392c:	3b15      	subs	r3, #21
 800392e:	f023 0303 	bic.w	r3, r3, #3
 8003932:	3304      	adds	r3, #4
 8003934:	f104 0715 	add.w	r7, r4, #21
 8003938:	42ba      	cmp	r2, r7
 800393a:	bf38      	it	cc
 800393c:	2304      	movcc	r3, #4
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	9b02      	ldr	r3, [sp, #8]
 8003942:	9103      	str	r1, [sp, #12]
 8003944:	428b      	cmp	r3, r1
 8003946:	d80c      	bhi.n	8003962 <__multiply+0x9e>
 8003948:	2e00      	cmp	r6, #0
 800394a:	dd03      	ble.n	8003954 <__multiply+0x90>
 800394c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003950:	2b00      	cmp	r3, #0
 8003952:	d05b      	beq.n	8003a0c <__multiply+0x148>
 8003954:	6106      	str	r6, [r0, #16]
 8003956:	b005      	add	sp, #20
 8003958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800395c:	f843 2b04 	str.w	r2, [r3], #4
 8003960:	e7d8      	b.n	8003914 <__multiply+0x50>
 8003962:	f8b1 a000 	ldrh.w	sl, [r1]
 8003966:	f1ba 0f00 	cmp.w	sl, #0
 800396a:	d024      	beq.n	80039b6 <__multiply+0xf2>
 800396c:	f104 0e14 	add.w	lr, r4, #20
 8003970:	46a9      	mov	r9, r5
 8003972:	f04f 0c00 	mov.w	ip, #0
 8003976:	f85e 7b04 	ldr.w	r7, [lr], #4
 800397a:	f8d9 3000 	ldr.w	r3, [r9]
 800397e:	fa1f fb87 	uxth.w	fp, r7
 8003982:	b29b      	uxth	r3, r3
 8003984:	fb0a 330b 	mla	r3, sl, fp, r3
 8003988:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800398c:	f8d9 7000 	ldr.w	r7, [r9]
 8003990:	4463      	add	r3, ip
 8003992:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003996:	fb0a c70b 	mla	r7, sl, fp, ip
 800399a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800399e:	b29b      	uxth	r3, r3
 80039a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80039a4:	4572      	cmp	r2, lr
 80039a6:	f849 3b04 	str.w	r3, [r9], #4
 80039aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80039ae:	d8e2      	bhi.n	8003976 <__multiply+0xb2>
 80039b0:	9b01      	ldr	r3, [sp, #4]
 80039b2:	f845 c003 	str.w	ip, [r5, r3]
 80039b6:	9b03      	ldr	r3, [sp, #12]
 80039b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80039bc:	3104      	adds	r1, #4
 80039be:	f1b9 0f00 	cmp.w	r9, #0
 80039c2:	d021      	beq.n	8003a08 <__multiply+0x144>
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	f104 0c14 	add.w	ip, r4, #20
 80039ca:	46ae      	mov	lr, r5
 80039cc:	f04f 0a00 	mov.w	sl, #0
 80039d0:	f8bc b000 	ldrh.w	fp, [ip]
 80039d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80039d8:	fb09 770b 	mla	r7, r9, fp, r7
 80039dc:	4457      	add	r7, sl
 80039de:	b29b      	uxth	r3, r3
 80039e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80039e4:	f84e 3b04 	str.w	r3, [lr], #4
 80039e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80039ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80039f0:	f8be 3000 	ldrh.w	r3, [lr]
 80039f4:	fb09 330a 	mla	r3, r9, sl, r3
 80039f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80039fc:	4562      	cmp	r2, ip
 80039fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a02:	d8e5      	bhi.n	80039d0 <__multiply+0x10c>
 8003a04:	9f01      	ldr	r7, [sp, #4]
 8003a06:	51eb      	str	r3, [r5, r7]
 8003a08:	3504      	adds	r5, #4
 8003a0a:	e799      	b.n	8003940 <__multiply+0x7c>
 8003a0c:	3e01      	subs	r6, #1
 8003a0e:	e79b      	b.n	8003948 <__multiply+0x84>
 8003a10:	08004608 	.word	0x08004608
 8003a14:	08004619 	.word	0x08004619

08003a18 <__pow5mult>:
 8003a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a1c:	4615      	mov	r5, r2
 8003a1e:	f012 0203 	ands.w	r2, r2, #3
 8003a22:	4607      	mov	r7, r0
 8003a24:	460e      	mov	r6, r1
 8003a26:	d007      	beq.n	8003a38 <__pow5mult+0x20>
 8003a28:	4c25      	ldr	r4, [pc, #148]	@ (8003ac0 <__pow5mult+0xa8>)
 8003a2a:	3a01      	subs	r2, #1
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003a32:	f7ff fe9f 	bl	8003774 <__multadd>
 8003a36:	4606      	mov	r6, r0
 8003a38:	10ad      	asrs	r5, r5, #2
 8003a3a:	d03d      	beq.n	8003ab8 <__pow5mult+0xa0>
 8003a3c:	69fc      	ldr	r4, [r7, #28]
 8003a3e:	b97c      	cbnz	r4, 8003a60 <__pow5mult+0x48>
 8003a40:	2010      	movs	r0, #16
 8003a42:	f7ff fd7f 	bl	8003544 <malloc>
 8003a46:	4602      	mov	r2, r0
 8003a48:	61f8      	str	r0, [r7, #28]
 8003a4a:	b928      	cbnz	r0, 8003a58 <__pow5mult+0x40>
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <__pow5mult+0xac>)
 8003a4e:	481e      	ldr	r0, [pc, #120]	@ (8003ac8 <__pow5mult+0xb0>)
 8003a50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003a54:	f000 fa6a 	bl	8003f2c <__assert_func>
 8003a58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003a5c:	6004      	str	r4, [r0, #0]
 8003a5e:	60c4      	str	r4, [r0, #12]
 8003a60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003a68:	b94c      	cbnz	r4, 8003a7e <__pow5mult+0x66>
 8003a6a:	f240 2171 	movw	r1, #625	@ 0x271
 8003a6e:	4638      	mov	r0, r7
 8003a70:	f7ff ff12 	bl	8003898 <__i2b>
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c8 0008 	str.w	r0, [r8, #8]
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	6003      	str	r3, [r0, #0]
 8003a7e:	f04f 0900 	mov.w	r9, #0
 8003a82:	07eb      	lsls	r3, r5, #31
 8003a84:	d50a      	bpl.n	8003a9c <__pow5mult+0x84>
 8003a86:	4631      	mov	r1, r6
 8003a88:	4622      	mov	r2, r4
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	f7ff ff1a 	bl	80038c4 <__multiply>
 8003a90:	4631      	mov	r1, r6
 8003a92:	4680      	mov	r8, r0
 8003a94:	4638      	mov	r0, r7
 8003a96:	f7ff fe4b 	bl	8003730 <_Bfree>
 8003a9a:	4646      	mov	r6, r8
 8003a9c:	106d      	asrs	r5, r5, #1
 8003a9e:	d00b      	beq.n	8003ab8 <__pow5mult+0xa0>
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	b938      	cbnz	r0, 8003ab4 <__pow5mult+0x9c>
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	4621      	mov	r1, r4
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	f7ff ff0b 	bl	80038c4 <__multiply>
 8003aae:	6020      	str	r0, [r4, #0]
 8003ab0:	f8c0 9000 	str.w	r9, [r0]
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	e7e4      	b.n	8003a82 <__pow5mult+0x6a>
 8003ab8:	4630      	mov	r0, r6
 8003aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003abe:	bf00      	nop
 8003ac0:	08004674 	.word	0x08004674
 8003ac4:	08004599 	.word	0x08004599
 8003ac8:	08004619 	.word	0x08004619

08003acc <__lshift>:
 8003acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	6849      	ldr	r1, [r1, #4]
 8003ad4:	6923      	ldr	r3, [r4, #16]
 8003ad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003ada:	68a3      	ldr	r3, [r4, #8]
 8003adc:	4607      	mov	r7, r0
 8003ade:	4691      	mov	r9, r2
 8003ae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003ae4:	f108 0601 	add.w	r6, r8, #1
 8003ae8:	42b3      	cmp	r3, r6
 8003aea:	db0b      	blt.n	8003b04 <__lshift+0x38>
 8003aec:	4638      	mov	r0, r7
 8003aee:	f7ff fddf 	bl	80036b0 <_Balloc>
 8003af2:	4605      	mov	r5, r0
 8003af4:	b948      	cbnz	r0, 8003b0a <__lshift+0x3e>
 8003af6:	4602      	mov	r2, r0
 8003af8:	4b28      	ldr	r3, [pc, #160]	@ (8003b9c <__lshift+0xd0>)
 8003afa:	4829      	ldr	r0, [pc, #164]	@ (8003ba0 <__lshift+0xd4>)
 8003afc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003b00:	f000 fa14 	bl	8003f2c <__assert_func>
 8003b04:	3101      	adds	r1, #1
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	e7ee      	b.n	8003ae8 <__lshift+0x1c>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f100 0114 	add.w	r1, r0, #20
 8003b10:	f100 0210 	add.w	r2, r0, #16
 8003b14:	4618      	mov	r0, r3
 8003b16:	4553      	cmp	r3, sl
 8003b18:	db33      	blt.n	8003b82 <__lshift+0xb6>
 8003b1a:	6920      	ldr	r0, [r4, #16]
 8003b1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003b20:	f104 0314 	add.w	r3, r4, #20
 8003b24:	f019 091f 	ands.w	r9, r9, #31
 8003b28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003b2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003b30:	d02b      	beq.n	8003b8a <__lshift+0xbe>
 8003b32:	f1c9 0e20 	rsb	lr, r9, #32
 8003b36:	468a      	mov	sl, r1
 8003b38:	2200      	movs	r2, #0
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	fa00 f009 	lsl.w	r0, r0, r9
 8003b40:	4310      	orrs	r0, r2
 8003b42:	f84a 0b04 	str.w	r0, [sl], #4
 8003b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b4a:	459c      	cmp	ip, r3
 8003b4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8003b50:	d8f3      	bhi.n	8003b3a <__lshift+0x6e>
 8003b52:	ebac 0304 	sub.w	r3, ip, r4
 8003b56:	3b15      	subs	r3, #21
 8003b58:	f023 0303 	bic.w	r3, r3, #3
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	f104 0015 	add.w	r0, r4, #21
 8003b62:	4584      	cmp	ip, r0
 8003b64:	bf38      	it	cc
 8003b66:	2304      	movcc	r3, #4
 8003b68:	50ca      	str	r2, [r1, r3]
 8003b6a:	b10a      	cbz	r2, 8003b70 <__lshift+0xa4>
 8003b6c:	f108 0602 	add.w	r6, r8, #2
 8003b70:	3e01      	subs	r6, #1
 8003b72:	4638      	mov	r0, r7
 8003b74:	612e      	str	r6, [r5, #16]
 8003b76:	4621      	mov	r1, r4
 8003b78:	f7ff fdda 	bl	8003730 <_Bfree>
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b82:	f842 0f04 	str.w	r0, [r2, #4]!
 8003b86:	3301      	adds	r3, #1
 8003b88:	e7c5      	b.n	8003b16 <__lshift+0x4a>
 8003b8a:	3904      	subs	r1, #4
 8003b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b90:	f841 2f04 	str.w	r2, [r1, #4]!
 8003b94:	459c      	cmp	ip, r3
 8003b96:	d8f9      	bhi.n	8003b8c <__lshift+0xc0>
 8003b98:	e7ea      	b.n	8003b70 <__lshift+0xa4>
 8003b9a:	bf00      	nop
 8003b9c:	08004608 	.word	0x08004608
 8003ba0:	08004619 	.word	0x08004619

08003ba4 <__mcmp>:
 8003ba4:	690a      	ldr	r2, [r1, #16]
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	6900      	ldr	r0, [r0, #16]
 8003baa:	1a80      	subs	r0, r0, r2
 8003bac:	b530      	push	{r4, r5, lr}
 8003bae:	d10e      	bne.n	8003bce <__mcmp+0x2a>
 8003bb0:	3314      	adds	r3, #20
 8003bb2:	3114      	adds	r1, #20
 8003bb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003bb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003bbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003bc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003bc4:	4295      	cmp	r5, r2
 8003bc6:	d003      	beq.n	8003bd0 <__mcmp+0x2c>
 8003bc8:	d205      	bcs.n	8003bd6 <__mcmp+0x32>
 8003bca:	f04f 30ff 	mov.w	r0, #4294967295
 8003bce:	bd30      	pop	{r4, r5, pc}
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	d3f3      	bcc.n	8003bbc <__mcmp+0x18>
 8003bd4:	e7fb      	b.n	8003bce <__mcmp+0x2a>
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	e7f9      	b.n	8003bce <__mcmp+0x2a>
	...

08003bdc <__mdiff>:
 8003bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be0:	4689      	mov	r9, r1
 8003be2:	4606      	mov	r6, r0
 8003be4:	4611      	mov	r1, r2
 8003be6:	4648      	mov	r0, r9
 8003be8:	4614      	mov	r4, r2
 8003bea:	f7ff ffdb 	bl	8003ba4 <__mcmp>
 8003bee:	1e05      	subs	r5, r0, #0
 8003bf0:	d112      	bne.n	8003c18 <__mdiff+0x3c>
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	f7ff fd5b 	bl	80036b0 <_Balloc>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	b928      	cbnz	r0, 8003c0a <__mdiff+0x2e>
 8003bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8003cfc <__mdiff+0x120>)
 8003c00:	f240 2137 	movw	r1, #567	@ 0x237
 8003c04:	483e      	ldr	r0, [pc, #248]	@ (8003d00 <__mdiff+0x124>)
 8003c06:	f000 f991 	bl	8003f2c <__assert_func>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003c10:	4610      	mov	r0, r2
 8003c12:	b003      	add	sp, #12
 8003c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c18:	bfbc      	itt	lt
 8003c1a:	464b      	movlt	r3, r9
 8003c1c:	46a1      	movlt	r9, r4
 8003c1e:	4630      	mov	r0, r6
 8003c20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003c24:	bfba      	itte	lt
 8003c26:	461c      	movlt	r4, r3
 8003c28:	2501      	movlt	r5, #1
 8003c2a:	2500      	movge	r5, #0
 8003c2c:	f7ff fd40 	bl	80036b0 <_Balloc>
 8003c30:	4602      	mov	r2, r0
 8003c32:	b918      	cbnz	r0, 8003c3c <__mdiff+0x60>
 8003c34:	4b31      	ldr	r3, [pc, #196]	@ (8003cfc <__mdiff+0x120>)
 8003c36:	f240 2145 	movw	r1, #581	@ 0x245
 8003c3a:	e7e3      	b.n	8003c04 <__mdiff+0x28>
 8003c3c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003c40:	6926      	ldr	r6, [r4, #16]
 8003c42:	60c5      	str	r5, [r0, #12]
 8003c44:	f109 0310 	add.w	r3, r9, #16
 8003c48:	f109 0514 	add.w	r5, r9, #20
 8003c4c:	f104 0e14 	add.w	lr, r4, #20
 8003c50:	f100 0b14 	add.w	fp, r0, #20
 8003c54:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8003c58:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	46d9      	mov	r9, fp
 8003c60:	f04f 0c00 	mov.w	ip, #0
 8003c64:	9b01      	ldr	r3, [sp, #4]
 8003c66:	f85e 0b04 	ldr.w	r0, [lr], #4
 8003c6a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	fa1f f38a 	uxth.w	r3, sl
 8003c74:	4619      	mov	r1, r3
 8003c76:	b283      	uxth	r3, r0
 8003c78:	1acb      	subs	r3, r1, r3
 8003c7a:	0c00      	lsrs	r0, r0, #16
 8003c7c:	4463      	add	r3, ip
 8003c7e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8003c82:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003c8c:	4576      	cmp	r6, lr
 8003c8e:	f849 3b04 	str.w	r3, [r9], #4
 8003c92:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003c96:	d8e5      	bhi.n	8003c64 <__mdiff+0x88>
 8003c98:	1b33      	subs	r3, r6, r4
 8003c9a:	3b15      	subs	r3, #21
 8003c9c:	f023 0303 	bic.w	r3, r3, #3
 8003ca0:	3415      	adds	r4, #21
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	42a6      	cmp	r6, r4
 8003ca6:	bf38      	it	cc
 8003ca8:	2304      	movcc	r3, #4
 8003caa:	441d      	add	r5, r3
 8003cac:	445b      	add	r3, fp
 8003cae:	461e      	mov	r6, r3
 8003cb0:	462c      	mov	r4, r5
 8003cb2:	4544      	cmp	r4, r8
 8003cb4:	d30e      	bcc.n	8003cd4 <__mdiff+0xf8>
 8003cb6:	f108 0103 	add.w	r1, r8, #3
 8003cba:	1b49      	subs	r1, r1, r5
 8003cbc:	f021 0103 	bic.w	r1, r1, #3
 8003cc0:	3d03      	subs	r5, #3
 8003cc2:	45a8      	cmp	r8, r5
 8003cc4:	bf38      	it	cc
 8003cc6:	2100      	movcc	r1, #0
 8003cc8:	440b      	add	r3, r1
 8003cca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003cce:	b191      	cbz	r1, 8003cf6 <__mdiff+0x11a>
 8003cd0:	6117      	str	r7, [r2, #16]
 8003cd2:	e79d      	b.n	8003c10 <__mdiff+0x34>
 8003cd4:	f854 1b04 	ldr.w	r1, [r4], #4
 8003cd8:	46e6      	mov	lr, ip
 8003cda:	0c08      	lsrs	r0, r1, #16
 8003cdc:	fa1c fc81 	uxtah	ip, ip, r1
 8003ce0:	4471      	add	r1, lr
 8003ce2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8003ce6:	b289      	uxth	r1, r1
 8003ce8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003cec:	f846 1b04 	str.w	r1, [r6], #4
 8003cf0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003cf4:	e7dd      	b.n	8003cb2 <__mdiff+0xd6>
 8003cf6:	3f01      	subs	r7, #1
 8003cf8:	e7e7      	b.n	8003cca <__mdiff+0xee>
 8003cfa:	bf00      	nop
 8003cfc:	08004608 	.word	0x08004608
 8003d00:	08004619 	.word	0x08004619

08003d04 <__d2b>:
 8003d04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d08:	460f      	mov	r7, r1
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	ec59 8b10 	vmov	r8, r9, d0
 8003d10:	4616      	mov	r6, r2
 8003d12:	f7ff fccd 	bl	80036b0 <_Balloc>
 8003d16:	4604      	mov	r4, r0
 8003d18:	b930      	cbnz	r0, 8003d28 <__d2b+0x24>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	4b23      	ldr	r3, [pc, #140]	@ (8003dac <__d2b+0xa8>)
 8003d1e:	4824      	ldr	r0, [pc, #144]	@ (8003db0 <__d2b+0xac>)
 8003d20:	f240 310f 	movw	r1, #783	@ 0x30f
 8003d24:	f000 f902 	bl	8003f2c <__assert_func>
 8003d28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003d2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d30:	b10d      	cbz	r5, 8003d36 <__d2b+0x32>
 8003d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	f1b8 0300 	subs.w	r3, r8, #0
 8003d3c:	d023      	beq.n	8003d86 <__d2b+0x82>
 8003d3e:	4668      	mov	r0, sp
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	f7ff fd7c 	bl	800383e <__lo0bits>
 8003d46:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003d4a:	b1d0      	cbz	r0, 8003d82 <__d2b+0x7e>
 8003d4c:	f1c0 0320 	rsb	r3, r0, #32
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	430b      	orrs	r3, r1
 8003d56:	40c2      	lsrs	r2, r0
 8003d58:	6163      	str	r3, [r4, #20]
 8003d5a:	9201      	str	r2, [sp, #4]
 8003d5c:	9b01      	ldr	r3, [sp, #4]
 8003d5e:	61a3      	str	r3, [r4, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2201      	moveq	r2, #1
 8003d66:	2202      	movne	r2, #2
 8003d68:	6122      	str	r2, [r4, #16]
 8003d6a:	b1a5      	cbz	r5, 8003d96 <__d2b+0x92>
 8003d6c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8003d70:	4405      	add	r5, r0
 8003d72:	603d      	str	r5, [r7, #0]
 8003d74:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8003d78:	6030      	str	r0, [r6, #0]
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	b003      	add	sp, #12
 8003d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d82:	6161      	str	r1, [r4, #20]
 8003d84:	e7ea      	b.n	8003d5c <__d2b+0x58>
 8003d86:	a801      	add	r0, sp, #4
 8003d88:	f7ff fd59 	bl	800383e <__lo0bits>
 8003d8c:	9b01      	ldr	r3, [sp, #4]
 8003d8e:	6163      	str	r3, [r4, #20]
 8003d90:	3020      	adds	r0, #32
 8003d92:	2201      	movs	r2, #1
 8003d94:	e7e8      	b.n	8003d68 <__d2b+0x64>
 8003d96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003d9a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8003d9e:	6038      	str	r0, [r7, #0]
 8003da0:	6918      	ldr	r0, [r3, #16]
 8003da2:	f7ff fd2d 	bl	8003800 <__hi0bits>
 8003da6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003daa:	e7e5      	b.n	8003d78 <__d2b+0x74>
 8003dac:	08004608 	.word	0x08004608
 8003db0:	08004619 	.word	0x08004619

08003db4 <__sflush_r>:
 8003db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dbc:	0716      	lsls	r6, r2, #28
 8003dbe:	4605      	mov	r5, r0
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	d454      	bmi.n	8003e6e <__sflush_r+0xba>
 8003dc4:	684b      	ldr	r3, [r1, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	dc02      	bgt.n	8003dd0 <__sflush_r+0x1c>
 8003dca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	dd48      	ble.n	8003e62 <__sflush_r+0xae>
 8003dd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003dd2:	2e00      	cmp	r6, #0
 8003dd4:	d045      	beq.n	8003e62 <__sflush_r+0xae>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ddc:	682f      	ldr	r7, [r5, #0]
 8003dde:	6a21      	ldr	r1, [r4, #32]
 8003de0:	602b      	str	r3, [r5, #0]
 8003de2:	d030      	beq.n	8003e46 <__sflush_r+0x92>
 8003de4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	0759      	lsls	r1, r3, #29
 8003dea:	d505      	bpl.n	8003df8 <__sflush_r+0x44>
 8003dec:	6863      	ldr	r3, [r4, #4]
 8003dee:	1ad2      	subs	r2, r2, r3
 8003df0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003df2:	b10b      	cbz	r3, 8003df8 <__sflush_r+0x44>
 8003df4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003df6:	1ad2      	subs	r2, r2, r3
 8003df8:	2300      	movs	r3, #0
 8003dfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003dfc:	6a21      	ldr	r1, [r4, #32]
 8003dfe:	4628      	mov	r0, r5
 8003e00:	47b0      	blx	r6
 8003e02:	1c43      	adds	r3, r0, #1
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	d106      	bne.n	8003e16 <__sflush_r+0x62>
 8003e08:	6829      	ldr	r1, [r5, #0]
 8003e0a:	291d      	cmp	r1, #29
 8003e0c:	d82b      	bhi.n	8003e66 <__sflush_r+0xb2>
 8003e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb8 <__sflush_r+0x104>)
 8003e10:	410a      	asrs	r2, r1
 8003e12:	07d6      	lsls	r6, r2, #31
 8003e14:	d427      	bmi.n	8003e66 <__sflush_r+0xb2>
 8003e16:	2200      	movs	r2, #0
 8003e18:	6062      	str	r2, [r4, #4]
 8003e1a:	04d9      	lsls	r1, r3, #19
 8003e1c:	6922      	ldr	r2, [r4, #16]
 8003e1e:	6022      	str	r2, [r4, #0]
 8003e20:	d504      	bpl.n	8003e2c <__sflush_r+0x78>
 8003e22:	1c42      	adds	r2, r0, #1
 8003e24:	d101      	bne.n	8003e2a <__sflush_r+0x76>
 8003e26:	682b      	ldr	r3, [r5, #0]
 8003e28:	b903      	cbnz	r3, 8003e2c <__sflush_r+0x78>
 8003e2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e2e:	602f      	str	r7, [r5, #0]
 8003e30:	b1b9      	cbz	r1, 8003e62 <__sflush_r+0xae>
 8003e32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e36:	4299      	cmp	r1, r3
 8003e38:	d002      	beq.n	8003e40 <__sflush_r+0x8c>
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f7ff fb38 	bl	80034b0 <_free_r>
 8003e40:	2300      	movs	r3, #0
 8003e42:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e44:	e00d      	b.n	8003e62 <__sflush_r+0xae>
 8003e46:	2301      	movs	r3, #1
 8003e48:	4628      	mov	r0, r5
 8003e4a:	47b0      	blx	r6
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	1c50      	adds	r0, r2, #1
 8003e50:	d1c9      	bne.n	8003de6 <__sflush_r+0x32>
 8003e52:	682b      	ldr	r3, [r5, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0c6      	beq.n	8003de6 <__sflush_r+0x32>
 8003e58:	2b1d      	cmp	r3, #29
 8003e5a:	d001      	beq.n	8003e60 <__sflush_r+0xac>
 8003e5c:	2b16      	cmp	r3, #22
 8003e5e:	d11e      	bne.n	8003e9e <__sflush_r+0xea>
 8003e60:	602f      	str	r7, [r5, #0]
 8003e62:	2000      	movs	r0, #0
 8003e64:	e022      	b.n	8003eac <__sflush_r+0xf8>
 8003e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e6a:	b21b      	sxth	r3, r3
 8003e6c:	e01b      	b.n	8003ea6 <__sflush_r+0xf2>
 8003e6e:	690f      	ldr	r7, [r1, #16]
 8003e70:	2f00      	cmp	r7, #0
 8003e72:	d0f6      	beq.n	8003e62 <__sflush_r+0xae>
 8003e74:	0793      	lsls	r3, r2, #30
 8003e76:	680e      	ldr	r6, [r1, #0]
 8003e78:	bf08      	it	eq
 8003e7a:	694b      	ldreq	r3, [r1, #20]
 8003e7c:	600f      	str	r7, [r1, #0]
 8003e7e:	bf18      	it	ne
 8003e80:	2300      	movne	r3, #0
 8003e82:	eba6 0807 	sub.w	r8, r6, r7
 8003e86:	608b      	str	r3, [r1, #8]
 8003e88:	f1b8 0f00 	cmp.w	r8, #0
 8003e8c:	dde9      	ble.n	8003e62 <__sflush_r+0xae>
 8003e8e:	6a21      	ldr	r1, [r4, #32]
 8003e90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003e92:	4643      	mov	r3, r8
 8003e94:	463a      	mov	r2, r7
 8003e96:	4628      	mov	r0, r5
 8003e98:	47b0      	blx	r6
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	dc08      	bgt.n	8003eb0 <__sflush_r+0xfc>
 8003e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ea6:	81a3      	strh	r3, [r4, #12]
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eb0:	4407      	add	r7, r0
 8003eb2:	eba8 0800 	sub.w	r8, r8, r0
 8003eb6:	e7e7      	b.n	8003e88 <__sflush_r+0xd4>
 8003eb8:	dfbffffe 	.word	0xdfbffffe

08003ebc <_fflush_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	690b      	ldr	r3, [r1, #16]
 8003ec0:	4605      	mov	r5, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	b913      	cbnz	r3, 8003ecc <_fflush_r+0x10>
 8003ec6:	2500      	movs	r5, #0
 8003ec8:	4628      	mov	r0, r5
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	b118      	cbz	r0, 8003ed6 <_fflush_r+0x1a>
 8003ece:	6a03      	ldr	r3, [r0, #32]
 8003ed0:	b90b      	cbnz	r3, 8003ed6 <_fflush_r+0x1a>
 8003ed2:	f7fe fb99 	bl	8002608 <__sinit>
 8003ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f3      	beq.n	8003ec6 <_fflush_r+0xa>
 8003ede:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ee0:	07d0      	lsls	r0, r2, #31
 8003ee2:	d404      	bmi.n	8003eee <_fflush_r+0x32>
 8003ee4:	0599      	lsls	r1, r3, #22
 8003ee6:	d402      	bmi.n	8003eee <_fflush_r+0x32>
 8003ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eea:	f7fe fc84 	bl	80027f6 <__retarget_lock_acquire_recursive>
 8003eee:	4628      	mov	r0, r5
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	f7ff ff5f 	bl	8003db4 <__sflush_r>
 8003ef6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ef8:	07da      	lsls	r2, r3, #31
 8003efa:	4605      	mov	r5, r0
 8003efc:	d4e4      	bmi.n	8003ec8 <_fflush_r+0xc>
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	059b      	lsls	r3, r3, #22
 8003f02:	d4e1      	bmi.n	8003ec8 <_fflush_r+0xc>
 8003f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f06:	f7fe fc77 	bl	80027f8 <__retarget_lock_release_recursive>
 8003f0a:	e7dd      	b.n	8003ec8 <_fflush_r+0xc>

08003f0c <_sbrk_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4d06      	ldr	r5, [pc, #24]	@ (8003f28 <_sbrk_r+0x1c>)
 8003f10:	2300      	movs	r3, #0
 8003f12:	4604      	mov	r4, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	602b      	str	r3, [r5, #0]
 8003f18:	f7fd fe22 	bl	8001b60 <_sbrk>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d102      	bne.n	8003f26 <_sbrk_r+0x1a>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	b103      	cbz	r3, 8003f26 <_sbrk_r+0x1a>
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	200004ac 	.word	0x200004ac

08003f2c <__assert_func>:
 8003f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f2e:	4614      	mov	r4, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <__assert_func+0x2c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4605      	mov	r5, r0
 8003f38:	68d8      	ldr	r0, [r3, #12]
 8003f3a:	b954      	cbnz	r4, 8003f52 <__assert_func+0x26>
 8003f3c:	4b07      	ldr	r3, [pc, #28]	@ (8003f5c <__assert_func+0x30>)
 8003f3e:	461c      	mov	r4, r3
 8003f40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f44:	9100      	str	r1, [sp, #0]
 8003f46:	462b      	mov	r3, r5
 8003f48:	4905      	ldr	r1, [pc, #20]	@ (8003f60 <__assert_func+0x34>)
 8003f4a:	f000 f841 	bl	8003fd0 <fiprintf>
 8003f4e:	f000 f851 	bl	8003ff4 <abort>
 8003f52:	4b04      	ldr	r3, [pc, #16]	@ (8003f64 <__assert_func+0x38>)
 8003f54:	e7f4      	b.n	8003f40 <__assert_func+0x14>
 8003f56:	bf00      	nop
 8003f58:	20000010 	.word	0x20000010
 8003f5c:	080047b5 	.word	0x080047b5
 8003f60:	08004787 	.word	0x08004787
 8003f64:	0800477a 	.word	0x0800477a

08003f68 <_calloc_r>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	fba1 5402 	umull	r5, r4, r1, r2
 8003f6e:	b93c      	cbnz	r4, 8003f80 <_calloc_r+0x18>
 8003f70:	4629      	mov	r1, r5
 8003f72:	f7ff fb11 	bl	8003598 <_malloc_r>
 8003f76:	4606      	mov	r6, r0
 8003f78:	b928      	cbnz	r0, 8003f86 <_calloc_r+0x1e>
 8003f7a:	2600      	movs	r6, #0
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	220c      	movs	r2, #12
 8003f82:	6002      	str	r2, [r0, #0]
 8003f84:	e7f9      	b.n	8003f7a <_calloc_r+0x12>
 8003f86:	462a      	mov	r2, r5
 8003f88:	4621      	mov	r1, r4
 8003f8a:	f7fe fbb6 	bl	80026fa <memset>
 8003f8e:	e7f5      	b.n	8003f7c <_calloc_r+0x14>

08003f90 <__ascii_mbtowc>:
 8003f90:	b082      	sub	sp, #8
 8003f92:	b901      	cbnz	r1, 8003f96 <__ascii_mbtowc+0x6>
 8003f94:	a901      	add	r1, sp, #4
 8003f96:	b142      	cbz	r2, 8003faa <__ascii_mbtowc+0x1a>
 8003f98:	b14b      	cbz	r3, 8003fae <__ascii_mbtowc+0x1e>
 8003f9a:	7813      	ldrb	r3, [r2, #0]
 8003f9c:	600b      	str	r3, [r1, #0]
 8003f9e:	7812      	ldrb	r2, [r2, #0]
 8003fa0:	1e10      	subs	r0, r2, #0
 8003fa2:	bf18      	it	ne
 8003fa4:	2001      	movne	r0, #1
 8003fa6:	b002      	add	sp, #8
 8003fa8:	4770      	bx	lr
 8003faa:	4610      	mov	r0, r2
 8003fac:	e7fb      	b.n	8003fa6 <__ascii_mbtowc+0x16>
 8003fae:	f06f 0001 	mvn.w	r0, #1
 8003fb2:	e7f8      	b.n	8003fa6 <__ascii_mbtowc+0x16>

08003fb4 <__ascii_wctomb>:
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4608      	mov	r0, r1
 8003fb8:	b141      	cbz	r1, 8003fcc <__ascii_wctomb+0x18>
 8003fba:	2aff      	cmp	r2, #255	@ 0xff
 8003fbc:	d904      	bls.n	8003fc8 <__ascii_wctomb+0x14>
 8003fbe:	228a      	movs	r2, #138	@ 0x8a
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc6:	4770      	bx	lr
 8003fc8:	700a      	strb	r2, [r1, #0]
 8003fca:	2001      	movs	r0, #1
 8003fcc:	4770      	bx	lr
	...

08003fd0 <fiprintf>:
 8003fd0:	b40e      	push	{r1, r2, r3}
 8003fd2:	b503      	push	{r0, r1, lr}
 8003fd4:	4601      	mov	r1, r0
 8003fd6:	ab03      	add	r3, sp, #12
 8003fd8:	4805      	ldr	r0, [pc, #20]	@ (8003ff0 <fiprintf+0x20>)
 8003fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fde:	6800      	ldr	r0, [r0, #0]
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	f000 f837 	bl	8004054 <_vfiprintf_r>
 8003fe6:	b002      	add	sp, #8
 8003fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fec:	b003      	add	sp, #12
 8003fee:	4770      	bx	lr
 8003ff0:	20000010 	.word	0x20000010

08003ff4 <abort>:
 8003ff4:	b508      	push	{r3, lr}
 8003ff6:	2006      	movs	r0, #6
 8003ff8:	f000 fa00 	bl	80043fc <raise>
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	f7fd fd36 	bl	8001a6e <_exit>

08004002 <__sfputc_r>:
 8004002:	6893      	ldr	r3, [r2, #8]
 8004004:	3b01      	subs	r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	b410      	push	{r4}
 800400a:	6093      	str	r3, [r2, #8]
 800400c:	da08      	bge.n	8004020 <__sfputc_r+0x1e>
 800400e:	6994      	ldr	r4, [r2, #24]
 8004010:	42a3      	cmp	r3, r4
 8004012:	db01      	blt.n	8004018 <__sfputc_r+0x16>
 8004014:	290a      	cmp	r1, #10
 8004016:	d103      	bne.n	8004020 <__sfputc_r+0x1e>
 8004018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800401c:	f000 b932 	b.w	8004284 <__swbuf_r>
 8004020:	6813      	ldr	r3, [r2, #0]
 8004022:	1c58      	adds	r0, r3, #1
 8004024:	6010      	str	r0, [r2, #0]
 8004026:	7019      	strb	r1, [r3, #0]
 8004028:	4608      	mov	r0, r1
 800402a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800402e:	4770      	bx	lr

08004030 <__sfputs_r>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	4606      	mov	r6, r0
 8004034:	460f      	mov	r7, r1
 8004036:	4614      	mov	r4, r2
 8004038:	18d5      	adds	r5, r2, r3
 800403a:	42ac      	cmp	r4, r5
 800403c:	d101      	bne.n	8004042 <__sfputs_r+0x12>
 800403e:	2000      	movs	r0, #0
 8004040:	e007      	b.n	8004052 <__sfputs_r+0x22>
 8004042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004046:	463a      	mov	r2, r7
 8004048:	4630      	mov	r0, r6
 800404a:	f7ff ffda 	bl	8004002 <__sfputc_r>
 800404e:	1c43      	adds	r3, r0, #1
 8004050:	d1f3      	bne.n	800403a <__sfputs_r+0xa>
 8004052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004054 <_vfiprintf_r>:
 8004054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004058:	460d      	mov	r5, r1
 800405a:	b09d      	sub	sp, #116	@ 0x74
 800405c:	4614      	mov	r4, r2
 800405e:	4698      	mov	r8, r3
 8004060:	4606      	mov	r6, r0
 8004062:	b118      	cbz	r0, 800406c <_vfiprintf_r+0x18>
 8004064:	6a03      	ldr	r3, [r0, #32]
 8004066:	b90b      	cbnz	r3, 800406c <_vfiprintf_r+0x18>
 8004068:	f7fe face 	bl	8002608 <__sinit>
 800406c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800406e:	07d9      	lsls	r1, r3, #31
 8004070:	d405      	bmi.n	800407e <_vfiprintf_r+0x2a>
 8004072:	89ab      	ldrh	r3, [r5, #12]
 8004074:	059a      	lsls	r2, r3, #22
 8004076:	d402      	bmi.n	800407e <_vfiprintf_r+0x2a>
 8004078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800407a:	f7fe fbbc 	bl	80027f6 <__retarget_lock_acquire_recursive>
 800407e:	89ab      	ldrh	r3, [r5, #12]
 8004080:	071b      	lsls	r3, r3, #28
 8004082:	d501      	bpl.n	8004088 <_vfiprintf_r+0x34>
 8004084:	692b      	ldr	r3, [r5, #16]
 8004086:	b99b      	cbnz	r3, 80040b0 <_vfiprintf_r+0x5c>
 8004088:	4629      	mov	r1, r5
 800408a:	4630      	mov	r0, r6
 800408c:	f000 f938 	bl	8004300 <__swsetup_r>
 8004090:	b170      	cbz	r0, 80040b0 <_vfiprintf_r+0x5c>
 8004092:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004094:	07dc      	lsls	r4, r3, #31
 8004096:	d504      	bpl.n	80040a2 <_vfiprintf_r+0x4e>
 8004098:	f04f 30ff 	mov.w	r0, #4294967295
 800409c:	b01d      	add	sp, #116	@ 0x74
 800409e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a2:	89ab      	ldrh	r3, [r5, #12]
 80040a4:	0598      	lsls	r0, r3, #22
 80040a6:	d4f7      	bmi.n	8004098 <_vfiprintf_r+0x44>
 80040a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040aa:	f7fe fba5 	bl	80027f8 <__retarget_lock_release_recursive>
 80040ae:	e7f3      	b.n	8004098 <_vfiprintf_r+0x44>
 80040b0:	2300      	movs	r3, #0
 80040b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80040b4:	2320      	movs	r3, #32
 80040b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80040be:	2330      	movs	r3, #48	@ 0x30
 80040c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004270 <_vfiprintf_r+0x21c>
 80040c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040c8:	f04f 0901 	mov.w	r9, #1
 80040cc:	4623      	mov	r3, r4
 80040ce:	469a      	mov	sl, r3
 80040d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040d4:	b10a      	cbz	r2, 80040da <_vfiprintf_r+0x86>
 80040d6:	2a25      	cmp	r2, #37	@ 0x25
 80040d8:	d1f9      	bne.n	80040ce <_vfiprintf_r+0x7a>
 80040da:	ebba 0b04 	subs.w	fp, sl, r4
 80040de:	d00b      	beq.n	80040f8 <_vfiprintf_r+0xa4>
 80040e0:	465b      	mov	r3, fp
 80040e2:	4622      	mov	r2, r4
 80040e4:	4629      	mov	r1, r5
 80040e6:	4630      	mov	r0, r6
 80040e8:	f7ff ffa2 	bl	8004030 <__sfputs_r>
 80040ec:	3001      	adds	r0, #1
 80040ee:	f000 80a7 	beq.w	8004240 <_vfiprintf_r+0x1ec>
 80040f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040f4:	445a      	add	r2, fp
 80040f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80040f8:	f89a 3000 	ldrb.w	r3, [sl]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 809f 	beq.w	8004240 <_vfiprintf_r+0x1ec>
 8004102:	2300      	movs	r3, #0
 8004104:	f04f 32ff 	mov.w	r2, #4294967295
 8004108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800410c:	f10a 0a01 	add.w	sl, sl, #1
 8004110:	9304      	str	r3, [sp, #16]
 8004112:	9307      	str	r3, [sp, #28]
 8004114:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004118:	931a      	str	r3, [sp, #104]	@ 0x68
 800411a:	4654      	mov	r4, sl
 800411c:	2205      	movs	r2, #5
 800411e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004122:	4853      	ldr	r0, [pc, #332]	@ (8004270 <_vfiprintf_r+0x21c>)
 8004124:	f7fc f85c 	bl	80001e0 <memchr>
 8004128:	9a04      	ldr	r2, [sp, #16]
 800412a:	b9d8      	cbnz	r0, 8004164 <_vfiprintf_r+0x110>
 800412c:	06d1      	lsls	r1, r2, #27
 800412e:	bf44      	itt	mi
 8004130:	2320      	movmi	r3, #32
 8004132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004136:	0713      	lsls	r3, r2, #28
 8004138:	bf44      	itt	mi
 800413a:	232b      	movmi	r3, #43	@ 0x2b
 800413c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004140:	f89a 3000 	ldrb.w	r3, [sl]
 8004144:	2b2a      	cmp	r3, #42	@ 0x2a
 8004146:	d015      	beq.n	8004174 <_vfiprintf_r+0x120>
 8004148:	9a07      	ldr	r2, [sp, #28]
 800414a:	4654      	mov	r4, sl
 800414c:	2000      	movs	r0, #0
 800414e:	f04f 0c0a 	mov.w	ip, #10
 8004152:	4621      	mov	r1, r4
 8004154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004158:	3b30      	subs	r3, #48	@ 0x30
 800415a:	2b09      	cmp	r3, #9
 800415c:	d94b      	bls.n	80041f6 <_vfiprintf_r+0x1a2>
 800415e:	b1b0      	cbz	r0, 800418e <_vfiprintf_r+0x13a>
 8004160:	9207      	str	r2, [sp, #28]
 8004162:	e014      	b.n	800418e <_vfiprintf_r+0x13a>
 8004164:	eba0 0308 	sub.w	r3, r0, r8
 8004168:	fa09 f303 	lsl.w	r3, r9, r3
 800416c:	4313      	orrs	r3, r2
 800416e:	9304      	str	r3, [sp, #16]
 8004170:	46a2      	mov	sl, r4
 8004172:	e7d2      	b.n	800411a <_vfiprintf_r+0xc6>
 8004174:	9b03      	ldr	r3, [sp, #12]
 8004176:	1d19      	adds	r1, r3, #4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	9103      	str	r1, [sp, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	bfbb      	ittet	lt
 8004180:	425b      	neglt	r3, r3
 8004182:	f042 0202 	orrlt.w	r2, r2, #2
 8004186:	9307      	strge	r3, [sp, #28]
 8004188:	9307      	strlt	r3, [sp, #28]
 800418a:	bfb8      	it	lt
 800418c:	9204      	strlt	r2, [sp, #16]
 800418e:	7823      	ldrb	r3, [r4, #0]
 8004190:	2b2e      	cmp	r3, #46	@ 0x2e
 8004192:	d10a      	bne.n	80041aa <_vfiprintf_r+0x156>
 8004194:	7863      	ldrb	r3, [r4, #1]
 8004196:	2b2a      	cmp	r3, #42	@ 0x2a
 8004198:	d132      	bne.n	8004200 <_vfiprintf_r+0x1ac>
 800419a:	9b03      	ldr	r3, [sp, #12]
 800419c:	1d1a      	adds	r2, r3, #4
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	9203      	str	r2, [sp, #12]
 80041a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041a6:	3402      	adds	r4, #2
 80041a8:	9305      	str	r3, [sp, #20]
 80041aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004280 <_vfiprintf_r+0x22c>
 80041ae:	7821      	ldrb	r1, [r4, #0]
 80041b0:	2203      	movs	r2, #3
 80041b2:	4650      	mov	r0, sl
 80041b4:	f7fc f814 	bl	80001e0 <memchr>
 80041b8:	b138      	cbz	r0, 80041ca <_vfiprintf_r+0x176>
 80041ba:	9b04      	ldr	r3, [sp, #16]
 80041bc:	eba0 000a 	sub.w	r0, r0, sl
 80041c0:	2240      	movs	r2, #64	@ 0x40
 80041c2:	4082      	lsls	r2, r0
 80041c4:	4313      	orrs	r3, r2
 80041c6:	3401      	adds	r4, #1
 80041c8:	9304      	str	r3, [sp, #16]
 80041ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ce:	4829      	ldr	r0, [pc, #164]	@ (8004274 <_vfiprintf_r+0x220>)
 80041d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041d4:	2206      	movs	r2, #6
 80041d6:	f7fc f803 	bl	80001e0 <memchr>
 80041da:	2800      	cmp	r0, #0
 80041dc:	d03f      	beq.n	800425e <_vfiprintf_r+0x20a>
 80041de:	4b26      	ldr	r3, [pc, #152]	@ (8004278 <_vfiprintf_r+0x224>)
 80041e0:	bb1b      	cbnz	r3, 800422a <_vfiprintf_r+0x1d6>
 80041e2:	9b03      	ldr	r3, [sp, #12]
 80041e4:	3307      	adds	r3, #7
 80041e6:	f023 0307 	bic.w	r3, r3, #7
 80041ea:	3308      	adds	r3, #8
 80041ec:	9303      	str	r3, [sp, #12]
 80041ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041f0:	443b      	add	r3, r7
 80041f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80041f4:	e76a      	b.n	80040cc <_vfiprintf_r+0x78>
 80041f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80041fa:	460c      	mov	r4, r1
 80041fc:	2001      	movs	r0, #1
 80041fe:	e7a8      	b.n	8004152 <_vfiprintf_r+0xfe>
 8004200:	2300      	movs	r3, #0
 8004202:	3401      	adds	r4, #1
 8004204:	9305      	str	r3, [sp, #20]
 8004206:	4619      	mov	r1, r3
 8004208:	f04f 0c0a 	mov.w	ip, #10
 800420c:	4620      	mov	r0, r4
 800420e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004212:	3a30      	subs	r2, #48	@ 0x30
 8004214:	2a09      	cmp	r2, #9
 8004216:	d903      	bls.n	8004220 <_vfiprintf_r+0x1cc>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0c6      	beq.n	80041aa <_vfiprintf_r+0x156>
 800421c:	9105      	str	r1, [sp, #20]
 800421e:	e7c4      	b.n	80041aa <_vfiprintf_r+0x156>
 8004220:	fb0c 2101 	mla	r1, ip, r1, r2
 8004224:	4604      	mov	r4, r0
 8004226:	2301      	movs	r3, #1
 8004228:	e7f0      	b.n	800420c <_vfiprintf_r+0x1b8>
 800422a:	ab03      	add	r3, sp, #12
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	462a      	mov	r2, r5
 8004230:	4b12      	ldr	r3, [pc, #72]	@ (800427c <_vfiprintf_r+0x228>)
 8004232:	a904      	add	r1, sp, #16
 8004234:	4630      	mov	r0, r6
 8004236:	f7fd fda3 	bl	8001d80 <_printf_float>
 800423a:	4607      	mov	r7, r0
 800423c:	1c78      	adds	r0, r7, #1
 800423e:	d1d6      	bne.n	80041ee <_vfiprintf_r+0x19a>
 8004240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004242:	07d9      	lsls	r1, r3, #31
 8004244:	d405      	bmi.n	8004252 <_vfiprintf_r+0x1fe>
 8004246:	89ab      	ldrh	r3, [r5, #12]
 8004248:	059a      	lsls	r2, r3, #22
 800424a:	d402      	bmi.n	8004252 <_vfiprintf_r+0x1fe>
 800424c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800424e:	f7fe fad3 	bl	80027f8 <__retarget_lock_release_recursive>
 8004252:	89ab      	ldrh	r3, [r5, #12]
 8004254:	065b      	lsls	r3, r3, #25
 8004256:	f53f af1f 	bmi.w	8004098 <_vfiprintf_r+0x44>
 800425a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800425c:	e71e      	b.n	800409c <_vfiprintf_r+0x48>
 800425e:	ab03      	add	r3, sp, #12
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	462a      	mov	r2, r5
 8004264:	4b05      	ldr	r3, [pc, #20]	@ (800427c <_vfiprintf_r+0x228>)
 8004266:	a904      	add	r1, sp, #16
 8004268:	4630      	mov	r0, r6
 800426a:	f7fe f821 	bl	80022b0 <_printf_i>
 800426e:	e7e4      	b.n	800423a <_vfiprintf_r+0x1e6>
 8004270:	080048b7 	.word	0x080048b7
 8004274:	080048c1 	.word	0x080048c1
 8004278:	08001d81 	.word	0x08001d81
 800427c:	08004031 	.word	0x08004031
 8004280:	080048bd 	.word	0x080048bd

08004284 <__swbuf_r>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	460e      	mov	r6, r1
 8004288:	4614      	mov	r4, r2
 800428a:	4605      	mov	r5, r0
 800428c:	b118      	cbz	r0, 8004296 <__swbuf_r+0x12>
 800428e:	6a03      	ldr	r3, [r0, #32]
 8004290:	b90b      	cbnz	r3, 8004296 <__swbuf_r+0x12>
 8004292:	f7fe f9b9 	bl	8002608 <__sinit>
 8004296:	69a3      	ldr	r3, [r4, #24]
 8004298:	60a3      	str	r3, [r4, #8]
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	071a      	lsls	r2, r3, #28
 800429e:	d501      	bpl.n	80042a4 <__swbuf_r+0x20>
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	b943      	cbnz	r3, 80042b6 <__swbuf_r+0x32>
 80042a4:	4621      	mov	r1, r4
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 f82a 	bl	8004300 <__swsetup_r>
 80042ac:	b118      	cbz	r0, 80042b6 <__swbuf_r+0x32>
 80042ae:	f04f 37ff 	mov.w	r7, #4294967295
 80042b2:	4638      	mov	r0, r7
 80042b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	6922      	ldr	r2, [r4, #16]
 80042ba:	1a98      	subs	r0, r3, r2
 80042bc:	6963      	ldr	r3, [r4, #20]
 80042be:	b2f6      	uxtb	r6, r6
 80042c0:	4283      	cmp	r3, r0
 80042c2:	4637      	mov	r7, r6
 80042c4:	dc05      	bgt.n	80042d2 <__swbuf_r+0x4e>
 80042c6:	4621      	mov	r1, r4
 80042c8:	4628      	mov	r0, r5
 80042ca:	f7ff fdf7 	bl	8003ebc <_fflush_r>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d1ed      	bne.n	80042ae <__swbuf_r+0x2a>
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	60a3      	str	r3, [r4, #8]
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	6022      	str	r2, [r4, #0]
 80042de:	701e      	strb	r6, [r3, #0]
 80042e0:	6962      	ldr	r2, [r4, #20]
 80042e2:	1c43      	adds	r3, r0, #1
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d004      	beq.n	80042f2 <__swbuf_r+0x6e>
 80042e8:	89a3      	ldrh	r3, [r4, #12]
 80042ea:	07db      	lsls	r3, r3, #31
 80042ec:	d5e1      	bpl.n	80042b2 <__swbuf_r+0x2e>
 80042ee:	2e0a      	cmp	r6, #10
 80042f0:	d1df      	bne.n	80042b2 <__swbuf_r+0x2e>
 80042f2:	4621      	mov	r1, r4
 80042f4:	4628      	mov	r0, r5
 80042f6:	f7ff fde1 	bl	8003ebc <_fflush_r>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d0d9      	beq.n	80042b2 <__swbuf_r+0x2e>
 80042fe:	e7d6      	b.n	80042ae <__swbuf_r+0x2a>

08004300 <__swsetup_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4b29      	ldr	r3, [pc, #164]	@ (80043a8 <__swsetup_r+0xa8>)
 8004304:	4605      	mov	r5, r0
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	460c      	mov	r4, r1
 800430a:	b118      	cbz	r0, 8004314 <__swsetup_r+0x14>
 800430c:	6a03      	ldr	r3, [r0, #32]
 800430e:	b90b      	cbnz	r3, 8004314 <__swsetup_r+0x14>
 8004310:	f7fe f97a 	bl	8002608 <__sinit>
 8004314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004318:	0719      	lsls	r1, r3, #28
 800431a:	d422      	bmi.n	8004362 <__swsetup_r+0x62>
 800431c:	06da      	lsls	r2, r3, #27
 800431e:	d407      	bmi.n	8004330 <__swsetup_r+0x30>
 8004320:	2209      	movs	r2, #9
 8004322:	602a      	str	r2, [r5, #0]
 8004324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004328:	81a3      	strh	r3, [r4, #12]
 800432a:	f04f 30ff 	mov.w	r0, #4294967295
 800432e:	e033      	b.n	8004398 <__swsetup_r+0x98>
 8004330:	0758      	lsls	r0, r3, #29
 8004332:	d512      	bpl.n	800435a <__swsetup_r+0x5a>
 8004334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004336:	b141      	cbz	r1, 800434a <__swsetup_r+0x4a>
 8004338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800433c:	4299      	cmp	r1, r3
 800433e:	d002      	beq.n	8004346 <__swsetup_r+0x46>
 8004340:	4628      	mov	r0, r5
 8004342:	f7ff f8b5 	bl	80034b0 <_free_r>
 8004346:	2300      	movs	r3, #0
 8004348:	6363      	str	r3, [r4, #52]	@ 0x34
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004350:	81a3      	strh	r3, [r4, #12]
 8004352:	2300      	movs	r3, #0
 8004354:	6063      	str	r3, [r4, #4]
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	89a3      	ldrh	r3, [r4, #12]
 800435c:	f043 0308 	orr.w	r3, r3, #8
 8004360:	81a3      	strh	r3, [r4, #12]
 8004362:	6923      	ldr	r3, [r4, #16]
 8004364:	b94b      	cbnz	r3, 800437a <__swsetup_r+0x7a>
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800436c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004370:	d003      	beq.n	800437a <__swsetup_r+0x7a>
 8004372:	4621      	mov	r1, r4
 8004374:	4628      	mov	r0, r5
 8004376:	f000 f883 	bl	8004480 <__smakebuf_r>
 800437a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800437e:	f013 0201 	ands.w	r2, r3, #1
 8004382:	d00a      	beq.n	800439a <__swsetup_r+0x9a>
 8004384:	2200      	movs	r2, #0
 8004386:	60a2      	str	r2, [r4, #8]
 8004388:	6962      	ldr	r2, [r4, #20]
 800438a:	4252      	negs	r2, r2
 800438c:	61a2      	str	r2, [r4, #24]
 800438e:	6922      	ldr	r2, [r4, #16]
 8004390:	b942      	cbnz	r2, 80043a4 <__swsetup_r+0xa4>
 8004392:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004396:	d1c5      	bne.n	8004324 <__swsetup_r+0x24>
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	0799      	lsls	r1, r3, #30
 800439c:	bf58      	it	pl
 800439e:	6962      	ldrpl	r2, [r4, #20]
 80043a0:	60a2      	str	r2, [r4, #8]
 80043a2:	e7f4      	b.n	800438e <__swsetup_r+0x8e>
 80043a4:	2000      	movs	r0, #0
 80043a6:	e7f7      	b.n	8004398 <__swsetup_r+0x98>
 80043a8:	20000010 	.word	0x20000010

080043ac <_raise_r>:
 80043ac:	291f      	cmp	r1, #31
 80043ae:	b538      	push	{r3, r4, r5, lr}
 80043b0:	4605      	mov	r5, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	d904      	bls.n	80043c0 <_raise_r+0x14>
 80043b6:	2316      	movs	r3, #22
 80043b8:	6003      	str	r3, [r0, #0]
 80043ba:	f04f 30ff 	mov.w	r0, #4294967295
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80043c2:	b112      	cbz	r2, 80043ca <_raise_r+0x1e>
 80043c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80043c8:	b94b      	cbnz	r3, 80043de <_raise_r+0x32>
 80043ca:	4628      	mov	r0, r5
 80043cc:	f000 f830 	bl	8004430 <_getpid_r>
 80043d0:	4622      	mov	r2, r4
 80043d2:	4601      	mov	r1, r0
 80043d4:	4628      	mov	r0, r5
 80043d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043da:	f000 b817 	b.w	800440c <_kill_r>
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d00a      	beq.n	80043f8 <_raise_r+0x4c>
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	d103      	bne.n	80043ee <_raise_r+0x42>
 80043e6:	2316      	movs	r3, #22
 80043e8:	6003      	str	r3, [r0, #0]
 80043ea:	2001      	movs	r0, #1
 80043ec:	e7e7      	b.n	80043be <_raise_r+0x12>
 80043ee:	2100      	movs	r1, #0
 80043f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80043f4:	4620      	mov	r0, r4
 80043f6:	4798      	blx	r3
 80043f8:	2000      	movs	r0, #0
 80043fa:	e7e0      	b.n	80043be <_raise_r+0x12>

080043fc <raise>:
 80043fc:	4b02      	ldr	r3, [pc, #8]	@ (8004408 <raise+0xc>)
 80043fe:	4601      	mov	r1, r0
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	f7ff bfd3 	b.w	80043ac <_raise_r>
 8004406:	bf00      	nop
 8004408:	20000010 	.word	0x20000010

0800440c <_kill_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4d07      	ldr	r5, [pc, #28]	@ (800442c <_kill_r+0x20>)
 8004410:	2300      	movs	r3, #0
 8004412:	4604      	mov	r4, r0
 8004414:	4608      	mov	r0, r1
 8004416:	4611      	mov	r1, r2
 8004418:	602b      	str	r3, [r5, #0]
 800441a:	f7fd fb18 	bl	8001a4e <_kill>
 800441e:	1c43      	adds	r3, r0, #1
 8004420:	d102      	bne.n	8004428 <_kill_r+0x1c>
 8004422:	682b      	ldr	r3, [r5, #0]
 8004424:	b103      	cbz	r3, 8004428 <_kill_r+0x1c>
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	bd38      	pop	{r3, r4, r5, pc}
 800442a:	bf00      	nop
 800442c:	200004ac 	.word	0x200004ac

08004430 <_getpid_r>:
 8004430:	f7fd bb05 	b.w	8001a3e <_getpid>

08004434 <__swhatbuf_r>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	460c      	mov	r4, r1
 8004438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800443c:	2900      	cmp	r1, #0
 800443e:	b096      	sub	sp, #88	@ 0x58
 8004440:	4615      	mov	r5, r2
 8004442:	461e      	mov	r6, r3
 8004444:	da0d      	bge.n	8004462 <__swhatbuf_r+0x2e>
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800444c:	f04f 0100 	mov.w	r1, #0
 8004450:	bf14      	ite	ne
 8004452:	2340      	movne	r3, #64	@ 0x40
 8004454:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004458:	2000      	movs	r0, #0
 800445a:	6031      	str	r1, [r6, #0]
 800445c:	602b      	str	r3, [r5, #0]
 800445e:	b016      	add	sp, #88	@ 0x58
 8004460:	bd70      	pop	{r4, r5, r6, pc}
 8004462:	466a      	mov	r2, sp
 8004464:	f000 f848 	bl	80044f8 <_fstat_r>
 8004468:	2800      	cmp	r0, #0
 800446a:	dbec      	blt.n	8004446 <__swhatbuf_r+0x12>
 800446c:	9901      	ldr	r1, [sp, #4]
 800446e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004472:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004476:	4259      	negs	r1, r3
 8004478:	4159      	adcs	r1, r3
 800447a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800447e:	e7eb      	b.n	8004458 <__swhatbuf_r+0x24>

08004480 <__smakebuf_r>:
 8004480:	898b      	ldrh	r3, [r1, #12]
 8004482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004484:	079d      	lsls	r5, r3, #30
 8004486:	4606      	mov	r6, r0
 8004488:	460c      	mov	r4, r1
 800448a:	d507      	bpl.n	800449c <__smakebuf_r+0x1c>
 800448c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	6123      	str	r3, [r4, #16]
 8004494:	2301      	movs	r3, #1
 8004496:	6163      	str	r3, [r4, #20]
 8004498:	b003      	add	sp, #12
 800449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800449c:	ab01      	add	r3, sp, #4
 800449e:	466a      	mov	r2, sp
 80044a0:	f7ff ffc8 	bl	8004434 <__swhatbuf_r>
 80044a4:	9f00      	ldr	r7, [sp, #0]
 80044a6:	4605      	mov	r5, r0
 80044a8:	4639      	mov	r1, r7
 80044aa:	4630      	mov	r0, r6
 80044ac:	f7ff f874 	bl	8003598 <_malloc_r>
 80044b0:	b948      	cbnz	r0, 80044c6 <__smakebuf_r+0x46>
 80044b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044b6:	059a      	lsls	r2, r3, #22
 80044b8:	d4ee      	bmi.n	8004498 <__smakebuf_r+0x18>
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	f043 0302 	orr.w	r3, r3, #2
 80044c2:	81a3      	strh	r3, [r4, #12]
 80044c4:	e7e2      	b.n	800448c <__smakebuf_r+0xc>
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	6020      	str	r0, [r4, #0]
 80044ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ce:	81a3      	strh	r3, [r4, #12]
 80044d0:	9b01      	ldr	r3, [sp, #4]
 80044d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80044d6:	b15b      	cbz	r3, 80044f0 <__smakebuf_r+0x70>
 80044d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044dc:	4630      	mov	r0, r6
 80044de:	f000 f81d 	bl	800451c <_isatty_r>
 80044e2:	b128      	cbz	r0, 80044f0 <__smakebuf_r+0x70>
 80044e4:	89a3      	ldrh	r3, [r4, #12]
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	431d      	orrs	r5, r3
 80044f4:	81a5      	strh	r5, [r4, #12]
 80044f6:	e7cf      	b.n	8004498 <__smakebuf_r+0x18>

080044f8 <_fstat_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4d07      	ldr	r5, [pc, #28]	@ (8004518 <_fstat_r+0x20>)
 80044fc:	2300      	movs	r3, #0
 80044fe:	4604      	mov	r4, r0
 8004500:	4608      	mov	r0, r1
 8004502:	4611      	mov	r1, r2
 8004504:	602b      	str	r3, [r5, #0]
 8004506:	f7fd fb02 	bl	8001b0e <_fstat>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	d102      	bne.n	8004514 <_fstat_r+0x1c>
 800450e:	682b      	ldr	r3, [r5, #0]
 8004510:	b103      	cbz	r3, 8004514 <_fstat_r+0x1c>
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	bd38      	pop	{r3, r4, r5, pc}
 8004516:	bf00      	nop
 8004518:	200004ac 	.word	0x200004ac

0800451c <_isatty_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	4d06      	ldr	r5, [pc, #24]	@ (8004538 <_isatty_r+0x1c>)
 8004520:	2300      	movs	r3, #0
 8004522:	4604      	mov	r4, r0
 8004524:	4608      	mov	r0, r1
 8004526:	602b      	str	r3, [r5, #0]
 8004528:	f7fd fb01 	bl	8001b2e <_isatty>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d102      	bne.n	8004536 <_isatty_r+0x1a>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	b103      	cbz	r3, 8004536 <_isatty_r+0x1a>
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	200004ac 	.word	0x200004ac

0800453c <_init>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr

08004548 <_fini>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr
