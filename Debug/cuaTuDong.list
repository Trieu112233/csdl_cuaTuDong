
cuaTuDong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08005e68  08005e68  00006e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d8  080061d8  000081cc  2**0
                  CONTENTS
  4 .ARM          00000008  080061d8  080061d8  000071d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061e0  080061e0  000081cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061e0  080061e0  000071e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061e4  080061e4  000071e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  080061e8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001cc  080063b4  000081cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  080063b4  00008530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ab0  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc2  00000000  00000000  0000dcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000608  00000000  00000000  0000f970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000433  00000000  00000000  0000ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000117ea  00000000  00000000  000103ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b389  00000000  00000000  00021b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872da  00000000  00000000  0002cf1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b41f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b8  00000000  00000000  000b423c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b64f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e4c 	.word	0x08005e4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d0 	.word	0x200001d0
 80001dc:	08005e4c 	.word	0x08005e4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <is_timeout>:

static void on_entry_error(void);
static void process_error(void);

// --- Hàm tiện ích kiểm tra Timeout (chống tràn GetTick) ---
static bool is_timeout(uint32_t start_tick, uint32_t timeout_ms) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
    uint32_t current_tick = GetTick();
 8000bc2:	f001 fbcf 	bl	8002364 <GetTick>
 8000bc6:	60f8      	str	r0, [r7, #12]
    if (current_tick >= start_tick) {
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d309      	bcc.n	8000be4 <is_timeout+0x2c>
        return (current_tick - start_tick) >= timeout_ms;
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	bf94      	ite	ls
 8000bdc:	2301      	movls	r3, #1
 8000bde:	2300      	movhi	r3, #0
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	e008      	b.n	8000bf6 <is_timeout+0x3e>
    } else { // Xử lý trường hợp GetTick() bị tràn số
        return (UINT32_MAX - start_tick + current_tick + 1) >= timeout_ms;
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	bf94      	ite	ls
 8000bf0:	2301      	movls	r3, #1
 8000bf2:	2300      	movhi	r3, #0
 8000bf4:	b2db      	uxtb	r3, r3
    }
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <change_door_state>:

// --- Hàm thay đổi trạng thái ---
static void change_door_state(DoorState_t new_state) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
    if (g_current_door_state == new_state) {
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <change_door_state+0x68>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	79fa      	ldrb	r2, [r7, #7]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d025      	beq.n	8000c60 <change_door_state+0x60>
    // switch (g_current_door_state) {
    //     case DOOR_STATE_OPENING: /* on_exit_opening(); */ break;
    //     // ...
    // }

    g_current_door_state = new_state;
 8000c14:	4a14      	ldr	r2, [pc, #80]	@ (8000c68 <change_door_state+0x68>)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	7013      	strb	r3, [r2, #0]

    // Gọi on_entry cho trạng thái mới
    switch (g_current_door_state) {
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <change_door_state+0x68>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d81b      	bhi.n	8000c5a <change_door_state+0x5a>
 8000c22:	a201      	add	r2, pc, #4	@ (adr r2, 8000c28 <change_door_state+0x28>)
 8000c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c28:	08000c3d 	.word	0x08000c3d
 8000c2c:	08000c43 	.word	0x08000c43
 8000c30:	08000c49 	.word	0x08000c49
 8000c34:	08000c4f 	.word	0x08000c4f
 8000c38:	08000c55 	.word	0x08000c55
        case DOOR_STATE_CLOSED:  on_entry_closed();  break;
 8000c3c:	f000 f816 	bl	8000c6c <on_entry_closed>
 8000c40:	e00f      	b.n	8000c62 <change_door_state+0x62>
        case DOOR_STATE_OPENING: on_entry_opening(); break;
 8000c42:	f000 f821 	bl	8000c88 <on_entry_opening>
 8000c46:	e00c      	b.n	8000c62 <change_door_state+0x62>
        case DOOR_STATE_OPEN:    on_entry_open();    break;
 8000c48:	f000 f852 	bl	8000cf0 <on_entry_open>
 8000c4c:	e009      	b.n	8000c62 <change_door_state+0x62>
        case DOOR_STATE_CLOSING: on_entry_closing(); break;
 8000c4e:	f000 f897 	bl	8000d80 <on_entry_closing>
 8000c52:	e006      	b.n	8000c62 <change_door_state+0x62>
        case DOOR_STATE_ERROR:   on_entry_error();   break;
 8000c54:	f000 f8c8 	bl	8000de8 <on_entry_error>
 8000c58:	e003      	b.n	8000c62 <change_door_state+0x62>
        default:
            // Trường hợp không mong muốn, có thể vào ERROR
            on_entry_error(); // Hoặc một trạng thái an toàn mặc định
 8000c5a:	f000 f8c5 	bl	8000de8 <on_entry_error>
            break;
 8000c5e:	e000      	b.n	8000c62 <change_door_state+0x62>
        return; // Không thay đổi nếu đã ở trạng thái đó
 8000c60:	bf00      	nop
    }
}
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200001e8 	.word	0x200001e8

08000c6c <on_entry_closed>:

// --- Định nghĩa các hàm on_entry và process ---

// CLOSED State
static void on_entry_closed(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    Motor_Stop();
 8000c70:	f002 f8e0 	bl	8002e34 <Motor_Stop>
    // Không cần timer ở trạng thái CLOSED, trừ khi có logic đặc biệt
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <process_closed>:
static void process_closed(void) {
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
    // Logic chuyển trạng thái từ CLOSED đã được xử lý ở phần kiểm tra mode/PIR trong DoorFSM_Process()
    // Nếu cửa bị kẹt ở CLOSED và limit switch không báo, có thể cần logic timeout ở đây để vào ERROR,
    // nhưng thường thì lỗi này sẽ được phát hiện khi cố gắng MỞ hoặc ĐÓNG không thành công.
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <on_entry_opening>:

// OPENING State
static void on_entry_opening(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    Motor_SetDirection(MOTOR_FORWARD);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f002 f87f 	bl	8002d90 <Motor_SetDirection>
    Motor_SetSpeed(motor_speed);
 8000c92:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <on_entry_opening+0x28>)
 8000c94:	edd3 7a00 	vldr	s15, [r3]
 8000c98:	eeb0 0a67 	vmov.f32	s0, s15
 8000c9c:	f002 f850 	bl	8002d40 <Motor_SetSpeed>
    g_state_timer_start_tick = GetTick(); // Bắt đầu timer cho thời gian di chuyển tối đa
 8000ca0:	f001 fb60 	bl	8002364 <GetTick>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a03      	ldr	r2, [pc, #12]	@ (8000cb4 <on_entry_opening+0x2c>)
 8000ca8:	6013      	str	r3, [r2, #0]
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	200001ec 	.word	0x200001ec

08000cb8 <process_opening>:
static void process_opening(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    if (LimitSwitchService_IsDoorFullyOpen()) {
 8000cbc:	f001 ffc0 	bl	8002c40 <LimitSwitchService_IsDoorFullyOpen>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <process_opening+0x16>
        change_door_state(DOOR_STATE_OPEN);
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f7ff ff9a 	bl	8000c00 <change_door_state>
        return; // Đã chuyển trạng thái, không xử lý gì thêm trong tick này
 8000ccc:	e00d      	b.n	8000cea <process_opening+0x32>
    }
    if (is_timeout(g_state_timer_start_tick, DOOR_MAX_TRAVEL_TIME_MS)) {
 8000cce:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <process_opening+0x34>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff6e 	bl	8000bb8 <is_timeout>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <process_opening+0x32>
        change_door_state(DOOR_STATE_ERROR);
 8000ce2:	2004      	movs	r0, #4
 8000ce4:	f7ff ff8c 	bl	8000c00 <change_door_state>
        return;
 8000ce8:	bf00      	nop
    }
    // Nếu đang mở mà có lệnh FORCE_CLOSE, logic trong DoorFSM_Process() sẽ xử lý
}
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200001ec 	.word	0x200001ec

08000cf0 <on_entry_open>:

// OPEN State
static void on_entry_open(void) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
    Motor_Stop();
 8000cf4:	f002 f89e 	bl	8002e34 <Motor_Stop>
    g_state_timer_start_tick = GetTick(); // Bắt đầu timer cho tự động đóng cửa
 8000cf8:	f001 fb34 	bl	8002364 <GetTick>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4a02      	ldr	r2, [pc, #8]	@ (8000d08 <on_entry_open+0x18>)
 8000d00:	6013      	str	r3, [r2, #0]
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200001ec 	.word	0x200001ec

08000d0c <process_open>:
static void process_open(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
    if (g_current_system_mode == SYSTEM_MODE_NORMAL) {
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <process_open+0x6c>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d12a      	bne.n	8000d70 <process_open+0x64>
        bool is_motion_detected = PIRService_IsMotionDetected(PIR_SENSOR_IN) ||
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f002 f922 	bl	8002f64 <PIRService_IsMotionDetected>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d105      	bne.n	8000d32 <process_open+0x26>
                                  PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f002 f91c 	bl	8002f64 <PIRService_IsMotionDetected>
 8000d2c:	4603      	mov	r3, r0
        bool is_motion_detected = PIRService_IsMotionDetected(PIR_SENSOR_IN) ||
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <process_open+0x2a>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <process_open+0x2c>
 8000d36:	2300      	movs	r3, #0
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	71fb      	strb	r3, [r7, #7]
        if (is_motion_detected) {
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d005      	beq.n	8000d54 <process_open+0x48>
            g_state_timer_start_tick = GetTick(); // Reset timer tự động đóng nếu có người
 8000d48:	f001 fb0c 	bl	8002364 <GetTick>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d7c <process_open+0x70>)
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e00d      	b.n	8000d70 <process_open+0x64>
        } else {
            if (is_timeout(g_state_timer_start_tick, DOOR_AUTO_CLOSE_TIMEOUT_MS)) {
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <process_open+0x70>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff2b 	bl	8000bb8 <is_timeout>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <process_open+0x64>
                change_door_state(DOOR_STATE_CLOSING);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f7ff ff49 	bl	8000c00 <change_door_state>
                return;
 8000d6e:	bf00      	nop
            }
        }
    }
    // Nếu đang mở mà có lệnh FORCE_CLOSE, logic trong DoorFSM_Process() sẽ xử lý
}
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200001e9 	.word	0x200001e9
 8000d7c:	200001ec 	.word	0x200001ec

08000d80 <on_entry_closing>:

// CLOSING State
static void on_entry_closing(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    Motor_SetDirection(MOTOR_REVERSE);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f002 f803 	bl	8002d90 <Motor_SetDirection>
    Motor_SetSpeed(motor_speed);
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <on_entry_closing+0x28>)
 8000d8c:	edd3 7a00 	vldr	s15, [r3]
 8000d90:	eeb0 0a67 	vmov.f32	s0, s15
 8000d94:	f001 ffd4 	bl	8002d40 <Motor_SetSpeed>
    g_state_timer_start_tick = GetTick(); // Bắt đầu timer cho thời gian di chuyển tối đa
 8000d98:	f001 fae4 	bl	8002364 <GetTick>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4a03      	ldr	r2, [pc, #12]	@ (8000dac <on_entry_closing+0x2c>)
 8000da0:	6013      	str	r3, [r2, #0]
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000000 	.word	0x20000000
 8000dac:	200001ec 	.word	0x200001ec

08000db0 <process_closing>:
static void process_closing(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
    // Nếu đang đóng mà có người (NORMAL mode), logic trong DoorFSM_Process() sẽ xử lý và chuyển sang OPENING
    if (LimitSwitchService_IsDoorFullyClosed()) {
 8000db4:	f001 ff58 	bl	8002c68 <LimitSwitchService_IsDoorFullyClosed>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <process_closing+0x16>
        change_door_state(DOOR_STATE_CLOSED);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff ff1e 	bl	8000c00 <change_door_state>
        return;
 8000dc4:	e00d      	b.n	8000de2 <process_closing+0x32>
    }
    if (is_timeout(g_state_timer_start_tick, DOOR_MAX_TRAVEL_TIME_MS)) {
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <process_closing+0x34>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fef2 	bl	8000bb8 <is_timeout>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <process_closing+0x32>
        change_door_state(DOOR_STATE_ERROR);
 8000dda:	2004      	movs	r0, #4
 8000ddc:	f7ff ff10 	bl	8000c00 <change_door_state>
        return;
 8000de0:	bf00      	nop
    }
    // Nếu đang đóng mà có lệnh FORCE_OPEN, logic trong DoorFSM_Process() sẽ xử lý
}
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200001ec 	.word	0x200001ec

08000de8 <on_entry_error>:

// ERROR State
static void on_entry_error(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
    Motor_Stop();
 8000dec:	f002 f822 	bl	8002e34 <Motor_Stop>
    // Có thể thông báo cho System Manager ở đây nếu cần
    // SystemManager_NotifyDoorError();
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <process_error>:
static void process_error(void) {
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
    // Ở trạng thái ERROR, chỉ có thể thoát ra bằng lệnh FORCE_OPEN hoặc FORCE_CLOSE
    // Logic này đã được xử lý trong DoorFSM_Process()
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <DoorFSM_Init>:


// --- Các hàm public của FSM ---
void DoorFSM_Init(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    // Xác định trạng thái ban đầu dựa trên công tắc hành trình
    // và gọi on_entry cho trạng thái đó.
    if (LimitSwitchService_IsDoorFullyClosed()) {
 8000e08:	f001 ff2e 	bl	8002c68 <LimitSwitchService_IsDoorFullyClosed>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d005      	beq.n	8000e1e <DoorFSM_Init+0x1a>
        g_current_door_state = DOOR_STATE_CLOSED; // Gán trước khi gọi on_entry
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <DoorFSM_Init+0x40>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
        on_entry_closed();
 8000e18:	f7ff ff28 	bl	8000c6c <on_entry_closed>
        // Hoặc:
        // g_current_door_state = DOOR_STATE_CLOSING;
        // on_entry_closing();
    }
    // g_state_timer_start_tick sẽ được thiết lập bởi các hàm on_entry tương ứng.
}
 8000e1c:	e00f      	b.n	8000e3e <DoorFSM_Init+0x3a>
    } else if (LimitSwitchService_IsDoorFullyOpen()) {
 8000e1e:	f001 ff0f 	bl	8002c40 <LimitSwitchService_IsDoorFullyOpen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <DoorFSM_Init+0x30>
        g_current_door_state = DOOR_STATE_OPEN;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <DoorFSM_Init+0x40>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	701a      	strb	r2, [r3, #0]
        on_entry_open();
 8000e2e:	f7ff ff5f 	bl	8000cf0 <on_entry_open>
}
 8000e32:	e004      	b.n	8000e3e <DoorFSM_Init+0x3a>
        g_current_door_state = DOOR_STATE_ERROR; // An toàn hơn là ERROR
 8000e34:	4b03      	ldr	r3, [pc, #12]	@ (8000e44 <DoorFSM_Init+0x40>)
 8000e36:	2204      	movs	r2, #4
 8000e38:	701a      	strb	r2, [r3, #0]
        on_entry_error();
 8000e3a:	f7ff ffd5 	bl	8000de8 <on_entry_error>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001e8 	.word	0x200001e8

08000e48 <DoorFSM_Process>:

void DoorFSM_Process(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
    // --- Xử lý các sự kiện toàn cục hoặc ưu tiên cao (System Mode, PIR) ---
    // Phần này có thể gọi change_door_state() để thay đổi trạng thái hiện tại.

    // 1. Xử lý System Mode (ưu tiên cao nhất, trừ khi đang ở ERROR và mode không phải FORCE)
    if (g_current_door_state != DOOR_STATE_ERROR) { // Nếu không lỗi, các FORCE mode có hiệu lực
 8000e4e:	4b46      	ldr	r3, [pc, #280]	@ (8000f68 <DoorFSM_Process+0x120>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	d01f      	beq.n	8000e96 <DoorFSM_Process+0x4e>
        if (g_current_system_mode == SYSTEM_MODE_FORCE_OPEN) {
 8000e56:	4b45      	ldr	r3, [pc, #276]	@ (8000f6c <DoorFSM_Process+0x124>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d10b      	bne.n	8000e76 <DoorFSM_Process+0x2e>
            if (g_current_door_state != DOOR_STATE_OPEN && g_current_door_state != DOOR_STATE_OPENING) {
 8000e5e:	4b42      	ldr	r3, [pc, #264]	@ (8000f68 <DoorFSM_Process+0x120>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d026      	beq.n	8000eb4 <DoorFSM_Process+0x6c>
 8000e66:	4b40      	ldr	r3, [pc, #256]	@ (8000f68 <DoorFSM_Process+0x120>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d022      	beq.n	8000eb4 <DoorFSM_Process+0x6c>
                change_door_state(DOOR_STATE_OPENING);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fec6 	bl	8000c00 <change_door_state>
 8000e74:	e01e      	b.n	8000eb4 <DoorFSM_Process+0x6c>
                // Khi change_door_state được gọi, on_entry của state mới đã chạy.
                // process_X của state mới sẽ chạy ở switch cuối hàm này.
            }
        } else if (g_current_system_mode == SYSTEM_MODE_FORCE_CLOSE) {
 8000e76:	4b3d      	ldr	r3, [pc, #244]	@ (8000f6c <DoorFSM_Process+0x124>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d11a      	bne.n	8000eb4 <DoorFSM_Process+0x6c>
            if (g_current_door_state != DOOR_STATE_CLOSED && g_current_door_state != DOOR_STATE_CLOSING) {
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f68 <DoorFSM_Process+0x120>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d016      	beq.n	8000eb4 <DoorFSM_Process+0x6c>
 8000e86:	4b38      	ldr	r3, [pc, #224]	@ (8000f68 <DoorFSM_Process+0x120>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d012      	beq.n	8000eb4 <DoorFSM_Process+0x6c>
                change_door_state(DOOR_STATE_CLOSING);
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f7ff feb6 	bl	8000c00 <change_door_state>
 8000e94:	e00e      	b.n	8000eb4 <DoorFSM_Process+0x6c>
            }
        }
        // Không cần 'else if (g_current_system_mode == SYSTEM_MODE_NORMAL)' ở đây cho PIR
        // vì logic PIR sẽ được xử lý trong từng process_state hoặc ngay sau đây nếu cần.
    } else { // Nếu đang ở DOOR_STATE_ERROR
        if (g_current_system_mode == SYSTEM_MODE_FORCE_OPEN) {
 8000e96:	4b35      	ldr	r3, [pc, #212]	@ (8000f6c <DoorFSM_Process+0x124>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d103      	bne.n	8000ea6 <DoorFSM_Process+0x5e>
            change_door_state(DOOR_STATE_OPENING);
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f7ff feae 	bl	8000c00 <change_door_state>
 8000ea4:	e006      	b.n	8000eb4 <DoorFSM_Process+0x6c>
        } else if (g_current_system_mode == SYSTEM_MODE_FORCE_CLOSE) {
 8000ea6:	4b31      	ldr	r3, [pc, #196]	@ (8000f6c <DoorFSM_Process+0x124>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d102      	bne.n	8000eb4 <DoorFSM_Process+0x6c>
            change_door_state(DOOR_STATE_CLOSING);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f7ff fea6 	bl	8000c00 <change_door_state>
        }
    }

    // 2. Xử lý PIR ở NORMAL mode (nếu chưa bị FORCE mode override)
    // Logic này có thể làm cửa đang ĐÓNG chuyển sang MỞ.
    if (g_current_system_mode == SYSTEM_MODE_NORMAL && g_current_door_state != DOOR_STATE_ERROR) {
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <DoorFSM_Process+0x124>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d129      	bne.n	8000f10 <DoorFSM_Process+0xc8>
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <DoorFSM_Process+0x120>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d025      	beq.n	8000f10 <DoorFSM_Process+0xc8>
        bool is_motion_detected = PIRService_IsMotionDetected(PIR_SENSOR_IN) ||
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f002 f84d 	bl	8002f64 <PIRService_IsMotionDetected>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d105      	bne.n	8000edc <DoorFSM_Process+0x94>
                                  PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f002 f847 	bl	8002f64 <PIRService_IsMotionDetected>
 8000ed6:	4603      	mov	r3, r0
        bool is_motion_detected = PIRService_IsMotionDetected(PIR_SENSOR_IN) ||
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <DoorFSM_Process+0x98>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <DoorFSM_Process+0x9a>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	71fb      	strb	r3, [r7, #7]
        if (is_motion_detected) {
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00e      	beq.n	8000f10 <DoorFSM_Process+0xc8>
            if (g_current_door_state == DOOR_STATE_CLOSED) {
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <DoorFSM_Process+0x120>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d103      	bne.n	8000f02 <DoorFSM_Process+0xba>
                change_door_state(DOOR_STATE_OPENING);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f7ff fe80 	bl	8000c00 <change_door_state>
 8000f00:	e006      	b.n	8000f10 <DoorFSM_Process+0xc8>
            } else if (g_current_door_state == DOOR_STATE_CLOSING) {
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <DoorFSM_Process+0x120>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d102      	bne.n	8000f10 <DoorFSM_Process+0xc8>
                // Nếu đang đóng mà phát hiện người, ưu tiên mở lại
                change_door_state(DOOR_STATE_OPENING);
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff fe78 	bl	8000c00 <change_door_state>
    }

    // --- Thực thi logic của trạng thái hiện tại ---
    // Sau các kiểm tra ưu tiên ở trên, trạng thái có thể đã thay đổi.
    // Luôn chạy process của trạng thái *hiện tại*.
    switch (g_current_door_state) {
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <DoorFSM_Process+0x120>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d81c      	bhi.n	8000f52 <DoorFSM_Process+0x10a>
 8000f18:	a201      	add	r2, pc, #4	@ (adr r2, 8000f20 <DoorFSM_Process+0xd8>)
 8000f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1e:	bf00      	nop
 8000f20:	08000f35 	.word	0x08000f35
 8000f24:	08000f3b 	.word	0x08000f3b
 8000f28:	08000f41 	.word	0x08000f41
 8000f2c:	08000f47 	.word	0x08000f47
 8000f30:	08000f4d 	.word	0x08000f4d
        case DOOR_STATE_CLOSED:  process_closed();  break;
 8000f34:	f7ff fea0 	bl	8000c78 <process_closed>
 8000f38:	e011      	b.n	8000f5e <DoorFSM_Process+0x116>
        case DOOR_STATE_OPENING: process_opening(); break;
 8000f3a:	f7ff febd 	bl	8000cb8 <process_opening>
 8000f3e:	e00e      	b.n	8000f5e <DoorFSM_Process+0x116>
        case DOOR_STATE_OPEN:    process_open();    break;
 8000f40:	f7ff fee4 	bl	8000d0c <process_open>
 8000f44:	e00b      	b.n	8000f5e <DoorFSM_Process+0x116>
        case DOOR_STATE_CLOSING: process_closing(); break;
 8000f46:	f7ff ff33 	bl	8000db0 <process_closing>
 8000f4a:	e008      	b.n	8000f5e <DoorFSM_Process+0x116>
        case DOOR_STATE_ERROR:   process_error();   break;
 8000f4c:	f7ff ff52 	bl	8000df4 <process_error>
 8000f50:	e005      	b.n	8000f5e <DoorFSM_Process+0x116>
        default:
            // Nên có một trạng thái mặc định an toàn nếu g_current_door_state không hợp lệ
            change_door_state(DOOR_STATE_ERROR); // Hoặc CLOSED
 8000f52:	2004      	movs	r0, #4
 8000f54:	f7ff fe54 	bl	8000c00 <change_door_state>
            process_error(); // Xử lý trạng thái lỗi ngay
 8000f58:	f7ff ff4c 	bl	8000df4 <process_error>
            break;
 8000f5c:	bf00      	nop
    }
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200001e8 	.word	0x200001e8
 8000f6c:	200001e9 	.word	0x200001e9

08000f70 <DoorFSM_GetState>:

DoorState_t DoorFSM_GetState(void) {
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
    return g_current_door_state;
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <DoorFSM_GetState+0x14>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	200001e8 	.word	0x200001e8

08000f88 <DoorFSM_NotifySystemModeChange>:

void DoorFSM_NotifySystemModeChange(SystemOpMode_t new_mode) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
    // Không cần kiểm tra if (g_current_system_mode != new_mode)
    // vì DoorFSM_Process sẽ luôn đọc giá trị mới nhất của g_current_system_mode
    // và phản ứng tương ứng. Việc gán trực tiếp đảm bảo FSM luôn có thông tin mode mới nhất.
    g_current_system_mode = new_mode;
 8000f92:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <DoorFSM_NotifySystemModeChange+0x1c>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	7013      	strb	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	200001e9 	.word	0x200001e9

08000fa8 <LightingLogic_Init>:

#include "lighting_logic.h"
#include "people_counter.h"
#include "light_control_service.h"

void LightingLogic_Init(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    // Trạng thái ban đầu của đèn sẽ được quyết định bởi PeopleCounter_GetCount()
    // và được LightService_TurnOn/Off xử lý.
    // Gọi Process một lần để đảm bảo trạng thái đèn đúng sau khi các module khác đã Init.
    LightingLogic_Process();
 8000fac:	f000 f802 	bl	8000fb4 <LightingLogic_Process>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <LightingLogic_Process>:

void LightingLogic_Process(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
    uint8_t current_person_count = PeopleCounter_GetCount();
 8000fba:	f000 f94d 	bl	8001258 <PeopleCounter_GetCount>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
    bool is_light_currently_on_hw = LightService_GetState(); // Lấy trạng thái thực tế của đèn từ service
 8000fc2:	f001 fd21 	bl	8002a08 <LightService_GetState>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71bb      	strb	r3, [r7, #6]

    if (current_person_count > 0) {
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d008      	beq.n	8000fe2 <LightingLogic_Process+0x2e>
        if (!is_light_currently_on_hw) {
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	f083 0301 	eor.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d007      	beq.n	8000fec <LightingLogic_Process+0x38>
            LightService_TurnOn();
 8000fdc:	f001 fce0 	bl	80029a0 <LightService_TurnOn>
    } else {
        if (is_light_currently_on_hw) {
            LightService_TurnOff();
        }
    }
}
 8000fe0:	e004      	b.n	8000fec <LightingLogic_Process+0x38>
        if (is_light_currently_on_hw) {
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <LightingLogic_Process+0x38>
            LightService_TurnOff();
 8000fe8:	f001 fcf4 	bl	80029d4 <LightService_TurnOff>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <LightingLogic_IsLightIntendedToBeOn>:

// Hàm trả về trạng thái logic mà module này muốn đèn có.
bool LightingLogic_IsLightIntendedToBeOn(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    // Logic này có thể phức tạp hơn trong tương lai,
    // ví dụ: dựa trên cảm biến ánh sáng môi trường, thời gian trong ngày, etc.
    // Hiện tại, nó chỉ dựa vào số người.
    if (PeopleCounter_GetCount() > 0) {
 8000ff8:	f000 f92e 	bl	8001258 <PeopleCounter_GetCount>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <LightingLogic_IsLightIntendedToBeOn+0x12>
        return true;
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <LightingLogic_IsLightIntendedToBeOn+0x14>
    } else {
        return false;
 8001006:	2300      	movs	r3, #0
    }
}
 8001008:	4618      	mov	r0, r3
 800100a:	bd80      	pop	{r7, pc}

0800100c <is_timeout_pc>:

static bool g_pir_outside_last_state = false;
static bool g_pir_inside_last_state = false;

// Hàm kiểm tra timeout an toàn (chống tràn GetTick)
static bool is_timeout_pc(uint32_t start_tick, uint32_t timeout_ms) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    uint32_t current_tick = GetTick();
 8001016:	f001 f9a5 	bl	8002364 <GetTick>
 800101a:	60f8      	str	r0, [r7, #12]
    if (start_tick == 0) return false; // Nếu timer chưa bắt đầu, không timeout
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <is_timeout_pc+0x1a>
 8001022:	2300      	movs	r3, #0
 8001024:	e016      	b.n	8001054 <is_timeout_pc+0x48>

    if (current_tick >= start_tick) {
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	d309      	bcc.n	8001042 <is_timeout_pc+0x36>
        return (current_tick - start_tick) >= timeout_ms;
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	bf94      	ite	ls
 800103a:	2301      	movls	r3, #1
 800103c:	2300      	movhi	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	e008      	b.n	8001054 <is_timeout_pc+0x48>
    } else { // Xử lý trường hợp GetTick() bị tràn số
        return (UINT32_MAX - start_tick + current_tick + 1) >= timeout_ms;
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	bf94      	ite	ls
 800104e:	2301      	movls	r3, #1
 8001050:	2300      	movhi	r3, #0
 8001052:	b2db      	uxtb	r3, r3
    }
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <PeopleCounter_Init>:

void PeopleCounter_Init(void) { // Không còn tham số callback
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    g_person_count = 0;
 8001060:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <PeopleCounter_Init+0x3c>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
    g_detection_state = DETECTION_STATE_IDLE;
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <PeopleCounter_Init+0x40>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
    g_first_pir_activation_tick = 0;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <PeopleCounter_Init+0x44>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
    g_last_detection_time = 0;
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <PeopleCounter_Init+0x48>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]

    // Đọc trạng thái PIR ban đầu
    g_pir_outside_last_state = PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 8001078:	2001      	movs	r0, #1
 800107a:	f001 ff73 	bl	8002f64 <PIRService_IsMotionDetected>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <PeopleCounter_Init+0x4c>)
 8001084:	701a      	strb	r2, [r3, #0]
    g_pir_inside_last_state = PIRService_IsMotionDetected(PIR_SENSOR_IN);
 8001086:	2000      	movs	r0, #0
 8001088:	f001 ff6c 	bl	8002f64 <PIRService_IsMotionDetected>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <PeopleCounter_Init+0x50>)
 8001092:	701a      	strb	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200001f0 	.word	0x200001f0
 800109c:	200001f1 	.word	0x200001f1
 80010a0:	200001f4 	.word	0x200001f4
 80010a4:	200001f8 	.word	0x200001f8
 80010a8:	200001fc 	.word	0x200001fc
 80010ac:	200001fd 	.word	0x200001fd

080010b0 <PeopleCounter_Process>:

void PeopleCounter_Process(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
    bool pir_outside_current_state = PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f001 ff54 	bl	8002f64 <PIRService_IsMotionDetected>
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]
    bool pir_inside_current_state = PIRService_IsMotionDetected(PIR_SENSOR_IN);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f001 ff4f 	bl	8002f64 <PIRService_IsMotionDetected>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73bb      	strb	r3, [r7, #14]
    uint32_t current_tick = GetTick();
 80010ca:	f001 f94b 	bl	8002364 <GetTick>
 80010ce:	60b8      	str	r0, [r7, #8]

    bool pir_outside_triggered = (pir_outside_current_state && !g_pir_outside_last_state);
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <PeopleCounter_Process+0x38>
 80010d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001240 <PeopleCounter_Process+0x190>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	f083 0301 	eor.w	r3, r3, #1
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <PeopleCounter_Process+0x38>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <PeopleCounter_Process+0x3a>
 80010e8:	2300      	movs	r3, #0
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	71fb      	strb	r3, [r7, #7]
    bool pir_inside_triggered = (pir_inside_current_state && !g_pir_inside_last_state);
 80010f4:	7bbb      	ldrb	r3, [r7, #14]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d008      	beq.n	800110c <PeopleCounter_Process+0x5c>
 80010fa:	4b52      	ldr	r3, [pc, #328]	@ (8001244 <PeopleCounter_Process+0x194>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	f083 0301 	eor.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <PeopleCounter_Process+0x5c>
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <PeopleCounter_Process+0x5e>
 800110c:	2300      	movs	r3, #0
 800110e:	71bb      	strb	r3, [r7, #6]
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	71bb      	strb	r3, [r7, #6]

    // Cooldown
    if (g_last_detection_time != 0 && !is_timeout_pc(g_last_detection_time, PERSON_COUNTER_COOLDOWN_MS)) {
 8001118:	4b4b      	ldr	r3, [pc, #300]	@ (8001248 <PeopleCounter_Process+0x198>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <PeopleCounter_Process+0x98>
 8001120:	4b49      	ldr	r3, [pc, #292]	@ (8001248 <PeopleCounter_Process+0x198>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff6f 	bl	800100c <is_timeout_pc>
 800112e:	4603      	mov	r3, r0
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <PeopleCounter_Process+0x98>
        g_pir_outside_last_state = pir_outside_current_state;
 800113a:	4a41      	ldr	r2, [pc, #260]	@ (8001240 <PeopleCounter_Process+0x190>)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	7013      	strb	r3, [r2, #0]
        g_pir_inside_last_state = pir_inside_current_state;
 8001140:	4a40      	ldr	r2, [pc, #256]	@ (8001244 <PeopleCounter_Process+0x194>)
 8001142:	7bbb      	ldrb	r3, [r7, #14]
 8001144:	7013      	strb	r3, [r2, #0]
        return;
 8001146:	e078      	b.n	800123a <PeopleCounter_Process+0x18a>
    }

    switch (g_detection_state) {
 8001148:	4b40      	ldr	r3, [pc, #256]	@ (800124c <PeopleCounter_Process+0x19c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d03f      	beq.n	80011d0 <PeopleCounter_Process+0x120>
 8001150:	2b02      	cmp	r3, #2
 8001152:	dc6c      	bgt.n	800122e <PeopleCounter_Process+0x17e>
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <PeopleCounter_Process+0xae>
 8001158:	2b01      	cmp	r3, #1
 800115a:	d014      	beq.n	8001186 <PeopleCounter_Process+0xd6>
 800115c:	e067      	b.n	800122e <PeopleCounter_Process+0x17e>
        case DETECTION_STATE_IDLE:
            if (pir_outside_triggered) {
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <PeopleCounter_Process+0xc2>
                g_detection_state = DETECTION_STATE_EXPECTING_PIR_INSIDE;
 8001164:	4b39      	ldr	r3, [pc, #228]	@ (800124c <PeopleCounter_Process+0x19c>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
                g_first_pir_activation_tick = current_tick;
 800116a:	4a39      	ldr	r2, [pc, #228]	@ (8001250 <PeopleCounter_Process+0x1a0>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	6013      	str	r3, [r2, #0]
            } else if (pir_inside_triggered) {
                g_detection_state = DETECTION_STATE_EXPECTING_PIR_OUTSIDE;
                g_first_pir_activation_tick = current_tick;
            }
            break;
 8001170:	e058      	b.n	8001224 <PeopleCounter_Process+0x174>
            } else if (pir_inside_triggered) {
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d055      	beq.n	8001224 <PeopleCounter_Process+0x174>
                g_detection_state = DETECTION_STATE_EXPECTING_PIR_OUTSIDE;
 8001178:	4b34      	ldr	r3, [pc, #208]	@ (800124c <PeopleCounter_Process+0x19c>)
 800117a:	2202      	movs	r2, #2
 800117c:	701a      	strb	r2, [r3, #0]
                g_first_pir_activation_tick = current_tick;
 800117e:	4a34      	ldr	r2, [pc, #208]	@ (8001250 <PeopleCounter_Process+0x1a0>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	6013      	str	r3, [r2, #0]
            break;
 8001184:	e04e      	b.n	8001224 <PeopleCounter_Process+0x174>

        case DETECTION_STATE_EXPECTING_PIR_INSIDE: // Chờ PIR_INSIDE sau khi PIR_OUTSIDE active
            if (pir_inside_triggered) {
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d010      	beq.n	80011ae <PeopleCounter_Process+0xfe>
                g_person_count++;
 800118c:	4b31      	ldr	r3, [pc, #196]	@ (8001254 <PeopleCounter_Process+0x1a4>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	3301      	adds	r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <PeopleCounter_Process+0x1a4>)
 8001198:	701a      	strb	r2, [r3, #0]
                // Callback đã bị loại bỏ
                g_detection_state = DETECTION_STATE_IDLE;
 800119a:	4b2c      	ldr	r3, [pc, #176]	@ (800124c <PeopleCounter_Process+0x19c>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
                g_last_detection_time = current_tick;
 80011a0:	4a29      	ldr	r2, [pc, #164]	@ (8001248 <PeopleCounter_Process+0x198>)
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	6013      	str	r3, [r2, #0]
                g_first_pir_activation_tick = 0;
 80011a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <PeopleCounter_Process+0x1a0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
            } else if (is_timeout_pc(g_first_pir_activation_tick, PERSON_COUNTER_MAX_TRANSITION_TIME_MS)) {
                g_detection_state = DETECTION_STATE_IDLE;
                g_first_pir_activation_tick = 0;
            }
            break;
 80011ac:	e03c      	b.n	8001228 <PeopleCounter_Process+0x178>
            } else if (is_timeout_pc(g_first_pir_activation_tick, PERSON_COUNTER_MAX_TRANSITION_TIME_MS)) {
 80011ae:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <PeopleCounter_Process+0x1a0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff28 	bl	800100c <is_timeout_pc>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d032      	beq.n	8001228 <PeopleCounter_Process+0x178>
                g_detection_state = DETECTION_STATE_IDLE;
 80011c2:	4b22      	ldr	r3, [pc, #136]	@ (800124c <PeopleCounter_Process+0x19c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
                g_first_pir_activation_tick = 0;
 80011c8:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <PeopleCounter_Process+0x1a0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
            break;
 80011ce:	e02b      	b.n	8001228 <PeopleCounter_Process+0x178>

        case DETECTION_STATE_EXPECTING_PIR_OUTSIDE: // Chờ PIR_OUTSIDE sau khi PIR_INSIDE active
            if (pir_outside_triggered) {
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d015      	beq.n	8001202 <PeopleCounter_Process+0x152>
                if (g_person_count > 0) {
 80011d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <PeopleCounter_Process+0x1a4>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <PeopleCounter_Process+0x13e>
                    g_person_count--;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <PeopleCounter_Process+0x1a4>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	3b01      	subs	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <PeopleCounter_Process+0x1a4>)
 80011ec:	701a      	strb	r2, [r3, #0]
                }
                // Callback đã bị loại bỏ
                g_detection_state = DETECTION_STATE_IDLE;
 80011ee:	4b17      	ldr	r3, [pc, #92]	@ (800124c <PeopleCounter_Process+0x19c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
                g_last_detection_time = current_tick;
 80011f4:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <PeopleCounter_Process+0x198>)
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	6013      	str	r3, [r2, #0]
                g_first_pir_activation_tick = 0;
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <PeopleCounter_Process+0x1a0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
            } else if (is_timeout_pc(g_first_pir_activation_tick, PERSON_COUNTER_MAX_TRANSITION_TIME_MS)) {
                g_detection_state = DETECTION_STATE_IDLE;
                g_first_pir_activation_tick = 0;
            }
            break;
 8001200:	e014      	b.n	800122c <PeopleCounter_Process+0x17c>
            } else if (is_timeout_pc(g_first_pir_activation_tick, PERSON_COUNTER_MAX_TRANSITION_TIME_MS)) {
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <PeopleCounter_Process+0x1a0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f242 7110 	movw	r1, #10000	@ 0x2710
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fefe 	bl	800100c <is_timeout_pc>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00a      	beq.n	800122c <PeopleCounter_Process+0x17c>
                g_detection_state = DETECTION_STATE_IDLE;
 8001216:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <PeopleCounter_Process+0x19c>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
                g_first_pir_activation_tick = 0;
 800121c:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <PeopleCounter_Process+0x1a0>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
            break;
 8001222:	e003      	b.n	800122c <PeopleCounter_Process+0x17c>
            break;
 8001224:	bf00      	nop
 8001226:	e002      	b.n	800122e <PeopleCounter_Process+0x17e>
            break;
 8001228:	bf00      	nop
 800122a:	e000      	b.n	800122e <PeopleCounter_Process+0x17e>
            break;
 800122c:	bf00      	nop
    }

    g_pir_outside_last_state = pir_outside_current_state;
 800122e:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <PeopleCounter_Process+0x190>)
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	7013      	strb	r3, [r2, #0]
    g_pir_inside_last_state = pir_inside_current_state;
 8001234:	4a03      	ldr	r2, [pc, #12]	@ (8001244 <PeopleCounter_Process+0x194>)
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	7013      	strb	r3, [r2, #0]
}
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200001fc 	.word	0x200001fc
 8001244:	200001fd 	.word	0x200001fd
 8001248:	200001f8 	.word	0x200001f8
 800124c:	200001f1 	.word	0x200001f1
 8001250:	200001f4 	.word	0x200001f4
 8001254:	200001f0 	.word	0x200001f0

08001258 <PeopleCounter_GetCount>:

uint8_t PeopleCounter_GetCount(void) {
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
    return g_person_count;
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <PeopleCounter_GetCount+0x14>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
}
 8001262:	4618      	mov	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	200001f0 	.word	0x200001f0

08001270 <PeopleCounter_Reset>:

void PeopleCounter_Reset(void) {
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
    __disable_irq();
    g_person_count = 0;
 8001278:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <PeopleCounter_Reset+0x30>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
    g_detection_state = DETECTION_STATE_IDLE;
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <PeopleCounter_Reset+0x34>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    g_first_pir_activation_tick = 0;
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <PeopleCounter_Reset+0x38>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
    g_last_detection_time = 0; // Reset cooldown, cho phép đếm ngay
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <PeopleCounter_Reset+0x3c>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001290:	b662      	cpsie	i
}
 8001292:	bf00      	nop
    __enable_irq();
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200001f0 	.word	0x200001f0
 80012a4:	200001f1 	.word	0x200001f1
 80012a8:	200001f4 	.word	0x200001f4
 80012ac:	200001f8 	.word	0x200001f8

080012b0 <is_timeout_sm>:
static DoorState_t g_current_door_state;

static uint32_t g_periodic_snapshot_timer_start_tick;

// Hàm kiểm tra timeout an toàn (chống tràn GetTick)
static bool is_timeout_sm(uint32_t start_tick, uint32_t timeout_ms) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
    uint32_t current_tick = GetTick();
 80012ba:	f001 f853 	bl	8002364 <GetTick>
 80012be:	60f8      	str	r0, [r7, #12]
    if (current_tick >= start_tick) {
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d309      	bcc.n	80012dc <is_timeout_sm+0x2c>
        return (current_tick - start_tick) >= timeout_ms;
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	bf94      	ite	ls
 80012d4:	2301      	movls	r3, #1
 80012d6:	2300      	movhi	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	e008      	b.n	80012ee <is_timeout_sm+0x3e>
    } else { // Xử lý trường hợp GetTick() bị tràn số
        return (UINT32_MAX - start_tick + current_tick + 1) >= timeout_ms;
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	bf94      	ite	ls
 80012e8:	2301      	movls	r3, #1
 80012ea:	2300      	movhi	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
    }
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <SendFrameToLabVIEWProcess>:

void SendFrameToLabVIEWProcess(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
    // Gửi trạng thái cửa nếu thay đổi
    if (g_current_door_state != g_prev_door_state)  {
 80012fe:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <SendFrameToLabVIEWProcess+0x9c>)
 8001300:	781a      	ldrb	r2, [r3, #0]
 8001302:	4b25      	ldr	r3, [pc, #148]	@ (8001398 <SendFrameToLabVIEWProcess+0xa0>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d00c      	beq.n	8001324 <SendFrameToLabVIEWProcess+0x2c>
        uint8_t door_state_payload = (uint8_t)g_current_door_state;
 800130a:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <SendFrameToLabVIEWProcess+0x9c>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
        UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_DOOR_STATE, // Sửa FRAME ID
 8001310:	1dfa      	adds	r2, r7, #7
 8001312:	2301      	movs	r3, #1
 8001314:	2101      	movs	r1, #1
 8001316:	2001      	movs	r0, #1
 8001318:	f001 feaa 	bl	8003070 <UARTProto_SendFrame>
                                    &door_state_payload, 1);
        g_prev_door_state = g_current_door_state;
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <SendFrameToLabVIEWProcess+0x9c>)
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <SendFrameToLabVIEWProcess+0xa0>)
 8001322:	701a      	strb	r2, [r3, #0]
    } 

    // Gửi số người nếu thay đổi
    if (g_cur_perCnt != g_prev_perCnt) {
 8001324:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <SendFrameToLabVIEWProcess+0xa4>)
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <SendFrameToLabVIEWProcess+0xa8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d009      	beq.n	8001344 <SendFrameToLabVIEWProcess+0x4c>
        // g_cur_perCnt đã là uint8_t
        UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_PERSON_COUNT,
 8001330:	2301      	movs	r3, #1
 8001332:	4a1a      	ldr	r2, [pc, #104]	@ (800139c <SendFrameToLabVIEWProcess+0xa4>)
 8001334:	2103      	movs	r1, #3
 8001336:	2001      	movs	r0, #1
 8001338:	f001 fe9a 	bl	8003070 <UARTProto_SendFrame>
                            &g_cur_perCnt, 1);
        g_prev_perCnt = g_cur_perCnt;
 800133c:	4b17      	ldr	r3, [pc, #92]	@ (800139c <SendFrameToLabVIEWProcess+0xa4>)
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <SendFrameToLabVIEWProcess+0xa8>)
 8001342:	701a      	strb	r2, [r3, #0]
    }

    // Gửi trạng thái đèn nếu thay đổi
    // g_cur_light_state_payload đã là payload (PAYLOAD_LIGHT_ON/OFF)
    if (g_cur_light_state_payload != g_prev_light_state_payload) {
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <SendFrameToLabVIEWProcess+0xac>)
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <SendFrameToLabVIEWProcess+0xb0>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d009      	beq.n	8001364 <SendFrameToLabVIEWProcess+0x6c>
        UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_LIGHT_STATE, 
 8001350:	2301      	movs	r3, #1
 8001352:	4a14      	ldr	r2, [pc, #80]	@ (80013a4 <SendFrameToLabVIEWProcess+0xac>)
 8001354:	2102      	movs	r1, #2
 8001356:	2001      	movs	r0, #1
 8001358:	f001 fe8a 	bl	8003070 <UARTProto_SendFrame>
                            &g_cur_light_state_payload, 1);
        g_prev_light_state_payload = g_cur_light_state_payload;
 800135c:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <SendFrameToLabVIEWProcess+0xac>)
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <SendFrameToLabVIEWProcess+0xb0>)
 8001362:	701a      	strb	r2, [r3, #0]
    }

    // Gửi chế độ hệ thống nếu thay đổi
    if (g_cur_system_op_mode != g_prev_system_op_mode) {
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <SendFrameToLabVIEWProcess+0xb4>)
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <SendFrameToLabVIEWProcess+0xb8>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d00c      	beq.n	800138a <SendFrameToLabVIEWProcess+0x92>
        uint8_t mode_payload = (uint8_t)g_cur_system_op_mode;
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <SendFrameToLabVIEWProcess+0xb4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	71bb      	strb	r3, [r7, #6]
        UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_SYSTEM_MODE, 
 8001376:	1dba      	adds	r2, r7, #6
 8001378:	2301      	movs	r3, #1
 800137a:	2104      	movs	r1, #4
 800137c:	2001      	movs	r0, #1
 800137e:	f001 fe77 	bl	8003070 <UARTProto_SendFrame>
                            &mode_payload, 1);
        g_prev_system_op_mode = g_cur_system_op_mode;
 8001382:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <SendFrameToLabVIEWProcess+0xb4>)
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <SendFrameToLabVIEWProcess+0xb8>)
 8001388:	701a      	strb	r2, [r3, #0]
    }
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000205 	.word	0x20000205
 8001398:	20000204 	.word	0x20000204
 800139c:	20000201 	.word	0x20000201
 80013a0:	20000200 	.word	0x20000200
 80013a4:	20000203 	.word	0x20000203
 80013a8:	20000202 	.word	0x20000202
 80013ac:	200001ff 	.word	0x200001ff
 80013b0:	200001fe 	.word	0x200001fe

080013b4 <SystemManager_Init>:

void SystemManager_Init(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af02      	add	r7, sp, #8
    // Khởi tạo các services và drivers trước
    UARTProto_Init(SystemManager_HandleLabVIEWCommand);
 80013ba:	4834      	ldr	r0, [pc, #208]	@ (800148c <SystemManager_Init+0xd8>)
 80013bc:	f001 fde8 	bl	8002f90 <UARTProto_Init>
    PIRService_Init(PIR_IN_PORT, PIR_IN_PIN, PIR_OUT_PORT, PIR_OUT_PIN, PIR_IRQ_PRIO);
 80013c0:	230a      	movs	r3, #10
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2301      	movs	r3, #1
 80013c6:	4a32      	ldr	r2, [pc, #200]	@ (8001490 <SystemManager_Init+0xdc>)
 80013c8:	2102      	movs	r1, #2
 80013ca:	4831      	ldr	r0, [pc, #196]	@ (8001490 <SystemManager_Init+0xdc>)
 80013cc:	f001 fd88 	bl	8002ee0 <PIRService_Init>
    LimitSwitchService_Init(LS_OPEN_PORT, LS_OPEN_PIN, LS_CLOSED_PORT, LS_CLOSED_PIN, LS_IRQ_PRIO);
 80013d0:	230b      	movs	r3, #11
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2305      	movs	r3, #5
 80013d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001490 <SystemManager_Init+0xdc>)
 80013d8:	2104      	movs	r1, #4
 80013da:	482d      	ldr	r0, [pc, #180]	@ (8001490 <SystemManager_Init+0xdc>)
 80013dc:	f001 fb74 	bl	8002ac8 <LimitSwitchService_Init>
    Motor_Init(MOTOR_DIR1_PORT, MOTOR_DIR1_PIN, MOTOR_DIR2_PORT, MOTOR_DIR2_PIN); // Giả sử PWM được cấu hình bên trong nếu cần
 80013e0:	2309      	movs	r3, #9
 80013e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001490 <SystemManager_Init+0xdc>)
 80013e4:	2108      	movs	r1, #8
 80013e6:	482a      	ldr	r0, [pc, #168]	@ (8001490 <SystemManager_Init+0xdc>)
 80013e8:	f001 fc52 	bl	8002c90 <Motor_Init>
    LightService_Init(LIGHT_RELAY_PORT, LIGHT_RELAY_PIN);
 80013ec:	2109      	movs	r1, #9
 80013ee:	4829      	ldr	r0, [pc, #164]	@ (8001494 <SystemManager_Init+0xe0>)
 80013f0:	f001 fa9c 	bl	800292c <LightService_Init>

    // Khởi tạo các modules ứng dụng
    PeopleCounter_Init();
 80013f4:	f7ff fe32 	bl	800105c <PeopleCounter_Init>
    DoorFSM_Init(); // Phải sau LimitSwitchService_Init
 80013f8:	f7ff fd04 	bl	8000e04 <DoorFSM_Init>
    LightingLogic_Init(); // Phải sau PeopleCounter_Init và LightService_Init
 80013fc:	f7ff fdd4 	bl	8000fa8 <LightingLogic_Init>

    // Thiết lập trạng thái ban đầu cho System Manager
    g_cur_system_op_mode = SYSTEM_MODE_NORMAL;
 8001400:	4b25      	ldr	r3, [pc, #148]	@ (8001498 <SystemManager_Init+0xe4>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
    g_prev_system_op_mode = g_cur_system_op_mode;
 8001406:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <SystemManager_Init+0xe4>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b24      	ldr	r3, [pc, #144]	@ (800149c <SystemManager_Init+0xe8>)
 800140c:	701a      	strb	r2, [r3, #0]
    DoorFSM_NotifySystemModeChange(g_cur_system_op_mode);
 800140e:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <SystemManager_Init+0xe4>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fdb8 	bl	8000f88 <DoorFSM_NotifySystemModeChange>

    g_cur_perCnt = PeopleCounter_GetCount();
 8001418:	f7ff ff1e 	bl	8001258 <PeopleCounter_GetCount>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <SystemManager_Init+0xec>)
 8001422:	701a      	strb	r2, [r3, #0]
    g_prev_perCnt = g_cur_perCnt;
 8001424:	4b1e      	ldr	r3, [pc, #120]	@ (80014a0 <SystemManager_Init+0xec>)
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <SystemManager_Init+0xf0>)
 800142a:	701a      	strb	r2, [r3, #0]

    g_cur_light_state_payload = LightingLogic_IsLightIntendedToBeOn() ? PAYLOAD_LIGHT_ON : PAYLOAD_LIGHT_OFF;
 800142c:	f7ff fde2 	bl	8000ff4 <LightingLogic_IsLightIntendedToBeOn>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <SystemManager_Init+0xf4>)
 8001436:	701a      	strb	r2, [r3, #0]
    g_prev_light_state_payload = g_cur_light_state_payload;
 8001438:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <SystemManager_Init+0xf4>)
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <SystemManager_Init+0xf8>)
 800143e:	701a      	strb	r2, [r3, #0]

    g_current_door_state = DoorFSM_GetState();
 8001440:	f7ff fd96 	bl	8000f70 <DoorFSM_GetState>
 8001444:	4603      	mov	r3, r0
 8001446:	461a      	mov	r2, r3
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <SystemManager_Init+0xfc>)
 800144a:	701a      	strb	r2, [r3, #0]
    g_prev_door_state = g_current_door_state;
 800144c:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <SystemManager_Init+0xfc>)
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <SystemManager_Init+0x100>)
 8001452:	701a      	strb	r2, [r3, #0]

    // Gửi trạng thái ban đầu của hệ thống
    uint8_t initial_status_payload[4];
    initial_status_payload[0] = (uint8_t) g_cur_system_op_mode;
 8001454:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <SystemManager_Init+0xe4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	713b      	strb	r3, [r7, #4]
    initial_status_payload[1] = (uint8_t) g_current_door_state;
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <SystemManager_Init+0xfc>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	717b      	strb	r3, [r7, #5]
    initial_status_payload[2] = g_cur_perCnt;
 8001460:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <SystemManager_Init+0xec>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	71bb      	strb	r3, [r7, #6]
    initial_status_payload[3] = g_cur_light_state_payload;
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <SystemManager_Init+0xf4>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
    UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_FULL_SNAPSHOT, initial_status_payload, 4);
 800146c:	1d3a      	adds	r2, r7, #4
 800146e:	2304      	movs	r3, #4
 8001470:	2105      	movs	r1, #5
 8001472:	2001      	movs	r0, #1
 8001474:	f001 fdfc 	bl	8003070 <UARTProto_SendFrame>

    g_periodic_snapshot_timer_start_tick = GetTick();
 8001478:	f000 ff74 	bl	8002364 <GetTick>
 800147c:	4603      	mov	r3, r0
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <SystemManager_Init+0x104>)
 8001480:	6013      	str	r3, [r2, #0]
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800155d 	.word	0x0800155d
 8001490:	40020400 	.word	0x40020400
 8001494:	40020000 	.word	0x40020000
 8001498:	200001ff 	.word	0x200001ff
 800149c:	200001fe 	.word	0x200001fe
 80014a0:	20000201 	.word	0x20000201
 80014a4:	20000200 	.word	0x20000200
 80014a8:	20000203 	.word	0x20000203
 80014ac:	20000202 	.word	0x20000202
 80014b0:	20000205 	.word	0x20000205
 80014b4:	20000204 	.word	0x20000204
 80014b8:	20000208 	.word	0x20000208

080014bc <SystemManager_Process>:

void SystemManager_Process(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
    // Xử lý input và các tác vụ nền của services
    UARTProto_Process(); // Xử lý byte nhận được, gọi SystemManager_HandleLabVIEWCommand nếu có frame hoàn chỉnh
 80014c2:	f001 fe39 	bl	8003138 <UARTProto_Process>
    LimitSwitchService_ProcessDebounce(); // Xử lý debounce cho công tắc hành trình
 80014c6:	f001 fb85 	bl	8002bd4 <LimitSwitchService_ProcessDebounce>

    // Xử lý logic của các modules ứng dụng
    PeopleCounter_Process();
 80014ca:	f7ff fdf1 	bl	80010b0 <PeopleCounter_Process>
    DoorFSM_Process();       // FSM cửa dựa trên mode, PIR, limit switch, timers
 80014ce:	f7ff fcbb 	bl	8000e48 <DoorFSM_Process>
    LightingLogic_Process(); // Logic đèn dựa trên số người
 80014d2:	f7ff fd6f 	bl	8000fb4 <LightingLogic_Process>

    // Cập nhật trạng thái hiện tại từ các modules
    g_cur_perCnt = PeopleCounter_GetCount();
 80014d6:	f7ff febf 	bl	8001258 <PeopleCounter_GetCount>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <SystemManager_Process+0x8c>)
 80014e0:	701a      	strb	r2, [r3, #0]
    g_cur_light_state_payload = LightingLogic_IsLightIntendedToBeOn() ? PAYLOAD_LIGHT_ON : PAYLOAD_LIGHT_OFF;
 80014e2:	f7ff fd87 	bl	8000ff4 <LightingLogic_IsLightIntendedToBeOn>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <SystemManager_Process+0x90>)
 80014ec:	701a      	strb	r2, [r3, #0]
    g_current_door_state = DoorFSM_GetState();
 80014ee:	f7ff fd3f 	bl	8000f70 <DoorFSM_GetState>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <SystemManager_Process+0x94>)
 80014f8:	701a      	strb	r2, [r3, #0]
    // g_cur_system_op_mode được cập nhật bởi HandleLabVIEWCommand hoặc giữ nguyên

    // Gửi các thay đổi trạng thái lên LabVIEW
    SendFrameToLabVIEWProcess();
 80014fa:	f7ff fefd 	bl	80012f8 <SendFrameToLabVIEWProcess>

    // Gửi full snapshot định kỳ
    if (is_timeout_sm(g_periodic_snapshot_timer_start_tick, STATUS_UPDATE_INTERVAL_MS)) {
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <SystemManager_Process+0x98>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fed2 	bl	80012b0 <is_timeout_sm>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d016      	beq.n	8001540 <SystemManager_Process+0x84>
        uint8_t snapshot_payload[4];
        snapshot_payload[0] = (uint8_t) g_cur_system_op_mode;
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <SystemManager_Process+0x9c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	713b      	strb	r3, [r7, #4]
        snapshot_payload[1] = (uint8_t) g_current_door_state;
 8001518:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <SystemManager_Process+0x94>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	717b      	strb	r3, [r7, #5]
        snapshot_payload[2] = g_cur_perCnt;
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <SystemManager_Process+0x8c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	71bb      	strb	r3, [r7, #6]
        snapshot_payload[3] = g_cur_light_state_payload;
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <SystemManager_Process+0x90>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	71fb      	strb	r3, [r7, #7]

        UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_FULL_SNAPSHOT, snapshot_payload, 4);
 800152a:	1d3a      	adds	r2, r7, #4
 800152c:	2304      	movs	r3, #4
 800152e:	2105      	movs	r1, #5
 8001530:	2001      	movs	r0, #1
 8001532:	f001 fd9d 	bl	8003070 <UARTProto_SendFrame>
        g_periodic_snapshot_timer_start_tick = GetTick(); // Reset timer
 8001536:	f000 ff15 	bl	8002364 <GetTick>
 800153a:	4603      	mov	r3, r0
 800153c:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <SystemManager_Process+0x98>)
 800153e:	6013      	str	r3, [r2, #0]
    }
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000201 	.word	0x20000201
 800154c:	20000203 	.word	0x20000203
 8001550:	20000205 	.word	0x20000205
 8001554:	20000208 	.word	0x20000208
 8001558:	200001ff 	.word	0x200001ff

0800155c <SystemManager_HandleLabVIEWCommand>:

bool SystemManager_HandleLabVIEWCommand(const ParsedFrame_t* frame) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
    if (frame->type != FRAME_TYPE_LABVIEW_TO_STM) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d001      	beq.n	8001570 <SystemManager_HandleLabVIEWCommand+0x14>
        return false; // Không phải frame lệnh cho STM
 800156c:	2300      	movs	r3, #0
 800156e:	e040      	b.n	80015f2 <SystemManager_HandleLabVIEWCommand+0x96>
    }

    uint8_t command_id_for_ack_nack = frame->id; // Dùng để gửi lại trong payload của ACK/NACK
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	785b      	ldrb	r3, [r3, #1]
 8001574:	73bb      	strb	r3, [r7, #14]

    switch (frame->id) {
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	785b      	ldrb	r3, [r3, #1]
 800157a:	2b10      	cmp	r3, #16
 800157c:	d002      	beq.n	8001584 <SystemManager_HandleLabVIEWCommand+0x28>
 800157e:	2b13      	cmp	r3, #19
 8001580:	d025      	beq.n	80015ce <SystemManager_HandleLabVIEWCommand+0x72>
 8001582:	e035      	b.n	80015f0 <SystemManager_HandleLabVIEWCommand+0x94>
        case FRAME_ID_LABVIEW_SET_MODE:
            if (frame->length == 1) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	799b      	ldrb	r3, [r3, #6]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d11e      	bne.n	80015ca <SystemManager_HandleLabVIEWCommand+0x6e>
                SystemOpMode_t requested_mode = (SystemOpMode_t)frame->payload[0];
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	789b      	ldrb	r3, [r3, #2]
 8001590:	73fb      	strb	r3, [r7, #15]
                if (requested_mode == SYSTEM_MODE_NORMAL ||
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <SystemManager_HandleLabVIEWCommand+0x48>
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d002      	beq.n	80015a4 <SystemManager_HandleLabVIEWCommand+0x48>
                    requested_mode == SYSTEM_MODE_FORCE_OPEN ||
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d110      	bne.n	80015c6 <SystemManager_HandleLabVIEWCommand+0x6a>
                    requested_mode == SYSTEM_MODE_FORCE_CLOSE) {
                    
                    g_cur_system_op_mode = requested_mode; // Cập nhật mode trước
 80015a4:	4a15      	ldr	r2, [pc, #84]	@ (80015fc <SystemManager_HandleLabVIEWCommand+0xa0>)
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	7013      	strb	r3, [r2, #0]
                    DoorFSM_NotifySystemModeChange(g_cur_system_op_mode); // Thông báo cho FSM
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <SystemManager_HandleLabVIEWCommand+0xa0>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fcea 	bl	8000f88 <DoorFSM_NotifySystemModeChange>
                    // Hoặc có thể gửi ngay nếu muốn phản hồi tức thì về việc mode đã thay đổi
                    // uint8_t mode_payload = (uint8_t)g_cur_system_op_mode;
                    // UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_SYSTEM_MODE, &mode_payload, 1);
                    // g_prev_system_op_mode = g_cur_system_op_mode; // Cập nhật prev nếu gửi ngay

                    UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_COMMAND_ACK, &command_id_for_ack_nack, 1);
 80015b4:	f107 020e 	add.w	r2, r7, #14
 80015b8:	2301      	movs	r3, #1
 80015ba:	2100      	movs	r1, #0
 80015bc:	2001      	movs	r0, #1
 80015be:	f001 fd57 	bl	8003070 <UARTProto_SendFrame>
                    return true;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e015      	b.n	80015f2 <SystemManager_HandleLabVIEWCommand+0x96>
                } else {
                    return false;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e013      	b.n	80015f2 <SystemManager_HandleLabVIEWCommand+0x96>
                }
            } else {
                return false;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e011      	b.n	80015f2 <SystemManager_HandleLabVIEWCommand+0x96>
            }
            // break; // Không cần thiết vì đã return

        case FRAME_ID_LABVIEW_RESET_COUNT:
            if (frame->length == 0) {
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	799b      	ldrb	r3, [r3, #6]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10a      	bne.n	80015ec <SystemManager_HandleLabVIEWCommand+0x90>
                PeopleCounter_Reset();
 80015d6:	f7ff fe4b 	bl	8001270 <PeopleCounter_Reset>
                // g_cur_perCnt sẽ được cập nhật ở SystemManager_Process tiếp theo
                // và SendFrameToLabVIEWProcess sẽ gửi đi nếu có thay đổi.
                UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_COMMAND_ACK, &command_id_for_ack_nack, 1);
 80015da:	f107 020e 	add.w	r2, r7, #14
 80015de:	2301      	movs	r3, #1
 80015e0:	2100      	movs	r1, #0
 80015e2:	2001      	movs	r0, #1
 80015e4:	f001 fd44 	bl	8003070 <UARTProto_SendFrame>
                return true;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e002      	b.n	80015f2 <SystemManager_HandleLabVIEWCommand+0x96>
            } else {
                return false;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e000      	b.n	80015f2 <SystemManager_HandleLabVIEWCommand+0x96>
            }
            // break; // Không cần thiết

        default:
            return false;
 80015f0:	2300      	movs	r3, #0
    }
    // return false; // Mặc định nếu không rơi vào case nào (không nên xảy ra nếu switch đầy đủ)
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200001ff 	.word	0x200001ff

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4907      	ldr	r1, [pc, #28]	@ (8001638 <__NVIC_EnableIRQ+0x38>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	@ (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	@ (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <get_gpio_port_source>:

// Mảng lưu trữ các callback cho từng EXTI line (0-15)
static exti_callback_t g_exti_callbacks[16] = {NULL};

// Helper function để lấy port source cho SYSCFG_EXTICR
static uint8_t get_gpio_port_source(GPIO_TypeDef* GPIOx) {
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    if (GPIOx == GPIOA) return 0x00U;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a15      	ldr	r2, [pc, #84]	@ (80016f0 <get_gpio_port_source+0x60>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d101      	bne.n	80016a4 <get_gpio_port_source+0x14>
 80016a0:	2300      	movs	r3, #0
 80016a2:	e01e      	b.n	80016e2 <get_gpio_port_source+0x52>
    if (GPIOx == GPIOB) return 0x01U;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a13      	ldr	r2, [pc, #76]	@ (80016f4 <get_gpio_port_source+0x64>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <get_gpio_port_source+0x20>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e018      	b.n	80016e2 <get_gpio_port_source+0x52>
    if (GPIOx == GPIOC) return 0x02U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a11      	ldr	r2, [pc, #68]	@ (80016f8 <get_gpio_port_source+0x68>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d101      	bne.n	80016bc <get_gpio_port_source+0x2c>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e012      	b.n	80016e2 <get_gpio_port_source+0x52>
    if (GPIOx == GPIOD) return 0x03U;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a0f      	ldr	r2, [pc, #60]	@ (80016fc <get_gpio_port_source+0x6c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d101      	bne.n	80016c8 <get_gpio_port_source+0x38>
 80016c4:	2303      	movs	r3, #3
 80016c6:	e00c      	b.n	80016e2 <get_gpio_port_source+0x52>
    if (GPIOx == GPIOE) return 0x04U;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <get_gpio_port_source+0x70>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d101      	bne.n	80016d4 <get_gpio_port_source+0x44>
 80016d0:	2304      	movs	r3, #4
 80016d2:	e006      	b.n	80016e2 <get_gpio_port_source+0x52>
    if (GPIOx == GPIOH) return 0x07U; // GPIOH là 0b111
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <get_gpio_port_source+0x74>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d101      	bne.n	80016e0 <get_gpio_port_source+0x50>
 80016dc:	2307      	movs	r3, #7
 80016de:	e000      	b.n	80016e2 <get_gpio_port_source+0x52>
    return 0xFFU; // Lỗi
 80016e0:	23ff      	movs	r3, #255	@ 0xff
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020400 	.word	0x40020400
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020c00 	.word	0x40020c00
 8001700:	40021000 	.word	0x40021000
 8001704:	40021c00 	.word	0x40021c00

08001708 <EXTI_InitPin>:

void EXTI_InitPin(GPIO_TypeDef* GPIOx, uint8_t pin_number, uint8_t trigger_type,
                  uint8_t priority, exti_callback_t callback) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af04      	add	r7, sp, #16
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	70fb      	strb	r3, [r7, #3]
 800171a:	460b      	mov	r3, r1
 800171c:	70bb      	strb	r3, [r7, #2]
 800171e:	4613      	mov	r3, r2
 8001720:	707b      	strb	r3, [r7, #1]
    if (pin_number > 15) return; // Chỉ hỗ trợ pin 0-15
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	f200 80aa 	bhi.w	800187e <EXTI_InitPin+0x176>

    // 1. Cấu hình chân GPIO làm input (thường có pull-up hoặc pull-down)
    // Giả sử người dùng đã bật clock cho GPIOx hoặc GPIO_InitPin sẽ làm điều đó.
    // Ví dụ, cấu hình input với pull-up:
    GPIO_InitPin(GPIOx, (1U << pin_number), GPIO_MODE_INPUT, GPIO_PULL_UP,
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	2201      	movs	r2, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	b299      	uxth	r1, r3
 8001734:	2300      	movs	r3, #0
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	2300      	movs	r3, #0
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	2300      	movs	r3, #0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2301      	movs	r3, #1
 8001742:	2200      	movs	r2, #0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f9c5 	bl	8001ad4 <GPIO_InitPin>
                 GPIO_SPEED_LOW, 0, 0); // otype và alt_func không dùng cho input thường

    // 2. Bật clock cho SYSCFG
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800174a:	4b50      	ldr	r3, [pc, #320]	@ (800188c <EXTI_InitPin+0x184>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	4a4f      	ldr	r2, [pc, #316]	@ (800188c <EXTI_InitPin+0x184>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001754:	6453      	str	r3, [r2, #68]	@ 0x44

    // 3. Kết nối EXTI Line với chân GPIO thông qua SYSCFG
    // SYSCFG_EXTICRx có 4 trường, mỗi trường 4 bit, cho 4 EXTI line.
    // EXTICR[0] cho lines 0-3, EXTICR[1] cho lines 4-7, ...
    uint8_t exti_cr_index = pin_number / 4; // 0, 1, 2, 3
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	73bb      	strb	r3, [r7, #14]
    uint8_t exti_cr_pos = (pin_number % 4) * 4; // 0, 4, 8, 12
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	737b      	strb	r3, [r7, #13]
    uint8_t port_source = get_gpio_port_source(GPIOx);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff91 	bl	8001690 <get_gpio_port_source>
 800176e:	4603      	mov	r3, r0
 8001770:	733b      	strb	r3, [r7, #12]

    if (port_source == 0xFFU) return; // Port không hợp lệ
 8001772:	7b3b      	ldrb	r3, [r7, #12]
 8001774:	2bff      	cmp	r3, #255	@ 0xff
 8001776:	f000 8084 	beq.w	8001882 <EXTI_InitPin+0x17a>

    // Xóa các bit cũ và set port source mới
    SYSCFG->EXTICR[exti_cr_index] &= ~(0x0FU << exti_cr_pos);
 800177a:	4a45      	ldr	r2, [pc, #276]	@ (8001890 <EXTI_InitPin+0x188>)
 800177c:	7bbb      	ldrb	r3, [r7, #14]
 800177e:	3302      	adds	r3, #2
 8001780:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001784:	7b7b      	ldrb	r3, [r7, #13]
 8001786:	220f      	movs	r2, #15
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43da      	mvns	r2, r3
 800178e:	4840      	ldr	r0, [pc, #256]	@ (8001890 <EXTI_InitPin+0x188>)
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	400a      	ands	r2, r1
 8001794:	3302      	adds	r3, #2
 8001796:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    SYSCFG->EXTICR[exti_cr_index] |= (port_source << exti_cr_pos);
 800179a:	4a3d      	ldr	r2, [pc, #244]	@ (8001890 <EXTI_InitPin+0x188>)
 800179c:	7bbb      	ldrb	r3, [r7, #14]
 800179e:	3302      	adds	r3, #2
 80017a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017a4:	7b39      	ldrb	r1, [r7, #12]
 80017a6:	7b7b      	ldrb	r3, [r7, #13]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	4938      	ldr	r1, [pc, #224]	@ (8001890 <EXTI_InitPin+0x188>)
 80017b0:	7bbb      	ldrb	r3, [r7, #14]
 80017b2:	4302      	orrs	r2, r0
 80017b4:	3302      	adds	r3, #2
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // 4. Cấu hình EXTI Line
    // Bỏ mask ngắt (cho phép ngắt)
    EXTI->IMR |= (1U << pin_number);
 80017ba:	4b36      	ldr	r3, [pc, #216]	@ (8001894 <EXTI_InitPin+0x18c>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	2101      	movs	r1, #1
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	4933      	ldr	r1, [pc, #204]	@ (8001894 <EXTI_InitPin+0x18c>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
    // Không dùng event mask ở đây
    // EXTI->EMR &= ~(1U << pin_number);

    // Cấu hình trigger type
    if (trigger_type == EXTI_TRIGGER_RISING || trigger_type == EXTI_TRIGGER_BOTH) {
 80017cc:	78bb      	ldrb	r3, [r7, #2]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d002      	beq.n	80017d8 <EXTI_InitPin+0xd0>
 80017d2:	78bb      	ldrb	r3, [r7, #2]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d109      	bne.n	80017ec <EXTI_InitPin+0xe4>
        EXTI->RTSR |= (1U << pin_number);
 80017d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001894 <EXTI_InitPin+0x18c>)
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	492b      	ldr	r1, [pc, #172]	@ (8001894 <EXTI_InitPin+0x18c>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
 80017ea:	e009      	b.n	8001800 <EXTI_InitPin+0xf8>
    } else {
        EXTI->RTSR &= ~(1U << pin_number); // Clear nếu không phải rising
 80017ec:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <EXTI_InitPin+0x18c>)
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4926      	ldr	r1, [pc, #152]	@ (8001894 <EXTI_InitPin+0x18c>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]
    }

    if (trigger_type == EXTI_TRIGGER_FALLING || trigger_type == EXTI_TRIGGER_BOTH) {
 8001800:	78bb      	ldrb	r3, [r7, #2]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d002      	beq.n	800180c <EXTI_InitPin+0x104>
 8001806:	78bb      	ldrb	r3, [r7, #2]
 8001808:	2b03      	cmp	r3, #3
 800180a:	d109      	bne.n	8001820 <EXTI_InitPin+0x118>
        EXTI->FTSR |= (1U << pin_number);
 800180c:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <EXTI_InitPin+0x18c>)
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	491e      	ldr	r1, [pc, #120]	@ (8001894 <EXTI_InitPin+0x18c>)
 800181a:	4313      	orrs	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]
 800181e:	e009      	b.n	8001834 <EXTI_InitPin+0x12c>
    } else {
        EXTI->FTSR &= ~(1U << pin_number); // Clear nếu không phải falling
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <EXTI_InitPin+0x18c>)
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	2101      	movs	r1, #1
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	4919      	ldr	r1, [pc, #100]	@ (8001894 <EXTI_InitPin+0x18c>)
 8001830:	4013      	ands	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
    }

    // 5. Đăng ký callback
    if (pin_number < 16) {
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	2b0f      	cmp	r3, #15
 8001838:	d804      	bhi.n	8001844 <EXTI_InitPin+0x13c>
        g_exti_callbacks[pin_number] = callback;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	4916      	ldr	r1, [pc, #88]	@ (8001898 <EXTI_InitPin+0x190>)
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    // 6. Cấu hình và kích hoạt ngắt trong NVIC
    IRQn_Type irq_number;
    if (pin_number <= 4) { // EXTI0 đến EXTI4
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	2b04      	cmp	r3, #4
 8001848:	d804      	bhi.n	8001854 <EXTI_InitPin+0x14c>
        irq_number = (IRQn_Type)(EXTI0_IRQn + pin_number);
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	3306      	adds	r3, #6
 800184e:	b2db      	uxtb	r3, r3
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	e007      	b.n	8001864 <EXTI_InitPin+0x15c>
    } else if (pin_number <= 9) { // EXTI5 đến EXTI9
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	2b09      	cmp	r3, #9
 8001858:	d802      	bhi.n	8001860 <EXTI_InitPin+0x158>
        irq_number = EXTI9_5_IRQn;
 800185a:	2317      	movs	r3, #23
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	e001      	b.n	8001864 <EXTI_InitPin+0x15c>
    } else { // EXTI10 đến EXTI15
        irq_number = EXTI15_10_IRQn;
 8001860:	2328      	movs	r3, #40	@ 0x28
 8001862:	73fb      	strb	r3, [r7, #15]
    }

    NVIC_SetPriority(irq_number, priority);
 8001864:	787a      	ldrb	r2, [r7, #1]
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fee5 	bl	800163c <__NVIC_SetPriority>
    NVIC_EnableIRQ(irq_number);
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fec2 	bl	8001600 <__NVIC_EnableIRQ>
 800187c:	e002      	b.n	8001884 <EXTI_InitPin+0x17c>
    if (pin_number > 15) return; // Chỉ hỗ trợ pin 0-15
 800187e:	bf00      	nop
 8001880:	e000      	b.n	8001884 <EXTI_InitPin+0x17c>
    if (port_source == 0xFFU) return; // Port không hợp lệ
 8001882:	bf00      	nop
}
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40013800 	.word	0x40013800
 8001894:	40013c00 	.word	0x40013c00
 8001898:	2000020c 	.word	0x2000020c

0800189c <EXTI_ClearPendingBit>:

void EXTI_ClearPendingBit(uint8_t exti_line) {
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
    if (exti_line > 15) return;
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d806      	bhi.n	80018ba <EXTI_ClearPendingBit+0x1e>
    // Ghi 1 vào bit tương ứng trong Pending Register để xóa nó
    EXTI->PR = (1U << exti_line);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4a06      	ldr	r2, [pc, #24]	@ (80018c8 <EXTI_ClearPendingBit+0x2c>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	6153      	str	r3, [r2, #20]
 80018b8:	e000      	b.n	80018bc <EXTI_ClearPendingBit+0x20>
    if (exti_line > 15) return;
 80018ba:	bf00      	nop
}
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40013c00 	.word	0x40013c00

080018cc <EXTI_IRQHandler_Helper>:
// --- Trình xử lý ngắt (ISRs) ---
// Các hàm này cần được định nghĩa với tên chính xác như trong vector ngắt.
// Chúng sẽ kiểm tra cờ pending và gọi callback tương ứng.

// Helper function để xử lý logic chung trong ISR
static void EXTI_IRQHandler_Helper(uint8_t exti_line_start, uint8_t exti_line_end) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	460a      	mov	r2, r1
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	4613      	mov	r3, r2
 80018da:	71bb      	strb	r3, [r7, #6]
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e01c      	b.n	800191c <EXTI_IRQHandler_Helper+0x50>
        // Kiểm tra cờ Pending Bit cho từng line
        if ((EXTI->PR & (1U << line)) != 0) {
 80018e2:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <EXTI_IRQHandler_Helper+0x64>)
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d010      	beq.n	8001916 <EXTI_IRQHandler_Helper+0x4a>
            // Xóa Pending Bit trước khi gọi callback (quan trọng!)
            EXTI_ClearPendingBit(line);
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ffd0 	bl	800189c <EXTI_ClearPendingBit>

            // Gọi callback nếu có
            if (g_exti_callbacks[line] != NULL) {
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <EXTI_IRQHandler_Helper+0x68>)
 8001900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <EXTI_IRQHandler_Helper+0x4a>
                g_exti_callbacks[line](line);
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <EXTI_IRQHandler_Helper+0x68>)
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	4610      	mov	r0, r2
 8001914:	4798      	blx	r3
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	3301      	adds	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	79bb      	ldrb	r3, [r7, #6]
 8001920:	429a      	cmp	r2, r3
 8001922:	d9de      	bls.n	80018e2 <EXTI_IRQHandler_Helper+0x16>
            }
        }
    }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40013c00 	.word	0x40013c00
 8001934:	2000020c 	.word	0x2000020c

08001938 <EXTI0_IRQHandler>:

// ISR cho EXTI Line 0
void EXTI0_IRQHandler(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(0, 0);
 800193c:	2100      	movs	r1, #0
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff ffc4 	bl	80018cc <EXTI_IRQHandler_Helper>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <EXTI1_IRQHandler>:

// ISR cho EXTI Line 1
void EXTI1_IRQHandler(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(1, 1);
 800194c:	2101      	movs	r1, #1
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff ffbc 	bl	80018cc <EXTI_IRQHandler_Helper>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <EXTI2_IRQHandler>:

// ISR cho EXTI Line 2
void EXTI2_IRQHandler(void) {
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(2, 2);
 800195c:	2102      	movs	r1, #2
 800195e:	2002      	movs	r0, #2
 8001960:	f7ff ffb4 	bl	80018cc <EXTI_IRQHandler_Helper>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <EXTI3_IRQHandler>:

// ISR cho EXTI Line 3
void EXTI3_IRQHandler(void) {
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(3, 3);
 800196c:	2103      	movs	r1, #3
 800196e:	2003      	movs	r0, #3
 8001970:	f7ff ffac 	bl	80018cc <EXTI_IRQHandler_Helper>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <EXTI4_IRQHandler>:

// ISR cho EXTI Line 4
void EXTI4_IRQHandler(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(4, 4);
 800197c:	2104      	movs	r1, #4
 800197e:	2004      	movs	r0, #4
 8001980:	f7ff ffa4 	bl	80018cc <EXTI_IRQHandler_Helper>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <EXTI9_5_IRQHandler>:

// ISR cho EXTI Lines 5 đến 9
void EXTI9_5_IRQHandler(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(5, 9);
 800198c:	2109      	movs	r1, #9
 800198e:	2005      	movs	r0, #5
 8001990:	f7ff ff9c 	bl	80018cc <EXTI_IRQHandler_Helper>
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <EXTI15_10_IRQHandler>:

// ISR cho EXTI Lines 10 đến 15
void EXTI15_10_IRQHandler(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(10, 15);
 800199c:	210f      	movs	r1, #15
 800199e:	200a      	movs	r0, #10
 80019a0:	f7ff ff94 	bl	80018cc <EXTI_IRQHandler_Helper>
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <GPIO_ClockCmd>:
 */

#include "gpio_driver.h"

// Helper function to enable/disable clock for GPIO port
void GPIO_ClockCmd(GPIO_TypeDef* GPIOx, uint8_t NewState) {
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	70fb      	strb	r3, [r7, #3]
    if (NewState == CLOCK_CMD_ENABLE) {
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d141      	bne.n	8001a3e <GPIO_ClockCmd+0x96>
        if (GPIOx == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a3e      	ldr	r2, [pc, #248]	@ (8001ab8 <GPIO_ClockCmd+0x110>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d106      	bne.n	80019d0 <GPIO_ClockCmd+0x28>
 80019c2:	4b3e      	ldr	r3, [pc, #248]	@ (8001abc <GPIO_ClockCmd+0x114>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a3d      	ldr	r2, [pc, #244]	@ (8001abc <GPIO_ClockCmd+0x114>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
        // ...
    }
}
 80019ce:	e06c      	b.n	8001aaa <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ac0 <GPIO_ClockCmd+0x118>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d106      	bne.n	80019e6 <GPIO_ClockCmd+0x3e>
 80019d8:	4b38      	ldr	r3, [pc, #224]	@ (8001abc <GPIO_ClockCmd+0x114>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	4a37      	ldr	r2, [pc, #220]	@ (8001abc <GPIO_ClockCmd+0x114>)
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80019e4:	e061      	b.n	8001aaa <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a36      	ldr	r2, [pc, #216]	@ (8001ac4 <GPIO_ClockCmd+0x11c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d106      	bne.n	80019fc <GPIO_ClockCmd+0x54>
 80019ee:	4b33      	ldr	r3, [pc, #204]	@ (8001abc <GPIO_ClockCmd+0x114>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a32      	ldr	r2, [pc, #200]	@ (8001abc <GPIO_ClockCmd+0x114>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80019fa:	e056      	b.n	8001aaa <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a32      	ldr	r2, [pc, #200]	@ (8001ac8 <GPIO_ClockCmd+0x120>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d106      	bne.n	8001a12 <GPIO_ClockCmd+0x6a>
 8001a04:	4b2d      	ldr	r3, [pc, #180]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a08:	4a2c      	ldr	r2, [pc, #176]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a10:	e04b      	b.n	8001aaa <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a2d      	ldr	r2, [pc, #180]	@ (8001acc <GPIO_ClockCmd+0x124>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d106      	bne.n	8001a28 <GPIO_ClockCmd+0x80>
 8001a1a:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a27      	ldr	r2, [pc, #156]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a20:	f043 0310 	orr.w	r3, r3, #16
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a26:	e040      	b.n	8001aaa <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a29      	ldr	r2, [pc, #164]	@ (8001ad0 <GPIO_ClockCmd+0x128>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d13c      	bne.n	8001aaa <GPIO_ClockCmd+0x102>
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a34:	4a21      	ldr	r2, [pc, #132]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a3a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a3c:	e035      	b.n	8001aaa <GPIO_ClockCmd+0x102>
        if (GPIOx == GPIOA) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab8 <GPIO_ClockCmd+0x110>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d106      	bne.n	8001a54 <GPIO_ClockCmd+0xac>
 8001a46:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a52:	e02a      	b.n	8001aaa <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOBEN;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac0 <GPIO_ClockCmd+0x118>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d106      	bne.n	8001a6a <GPIO_ClockCmd+0xc2>
 8001a5c:	4b17      	ldr	r3, [pc, #92]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	4a16      	ldr	r2, [pc, #88]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a62:	f023 0302 	bic.w	r3, r3, #2
 8001a66:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a68:	e01f      	b.n	8001aaa <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a15      	ldr	r2, [pc, #84]	@ (8001ac4 <GPIO_ClockCmd+0x11c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d106      	bne.n	8001a80 <GPIO_ClockCmd+0xd8>
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a11      	ldr	r2, [pc, #68]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a7e:	e014      	b.n	8001aaa <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a11      	ldr	r2, [pc, #68]	@ (8001ac8 <GPIO_ClockCmd+0x120>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d106      	bne.n	8001a96 <GPIO_ClockCmd+0xee>
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001a8e:	f023 0308 	bic.w	r3, r3, #8
 8001a92:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a94:	e009      	b.n	8001aaa <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a0c      	ldr	r2, [pc, #48]	@ (8001acc <GPIO_ClockCmd+0x124>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d105      	bne.n	8001aaa <GPIO_ClockCmd+0x102>
 8001a9e:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a06      	ldr	r2, [pc, #24]	@ (8001abc <GPIO_ClockCmd+0x114>)
 8001aa4:	f023 0310 	bic.w	r3, r3, #16
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40021c00 	.word	0x40021c00

08001ad4 <GPIO_InitPin>:


void GPIO_InitPin(GPIO_TypeDef* GPIOx, uint16_t pin, uint32_t mode, uint32_t pull,
                  uint32_t speed, uint32_t otype, uint32_t alt_func) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	817b      	strh	r3, [r7, #10]
    uint32_t position;
    uint32_t iocurrent;
    uint32_t temp;

    // Enable clock for the GPIO port
    GPIO_ClockCmd(GPIOx, CLOCK_CMD_ENABLE);
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7ff ff5e 	bl	80019a8 <GPIO_ClockCmd>

    for (position = 0; position < 16; position++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	e0a4      	b.n	8001c3c <GPIO_InitPin+0x168>
        iocurrent = (0x1U << position); // Mask for current pin
 8001af2:	2201      	movs	r2, #1
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	61bb      	str	r3, [r7, #24]
        if (pin & iocurrent) {          // If this pin is selected
 8001afc:	897a      	ldrh	r2, [r7, #10]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8097 	beq.w	8001c36 <GPIO_InitPin+0x162>
            // 1. Configure Mode (Input, Output, AF, Analog)
            temp = GPIOx->MODER;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2)); // Clear mode bits for this pin
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
            temp |= (mode << (position * 2));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
            GPIOx->MODER = temp;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	601a      	str	r2, [r3, #0]

            if ((mode == GPIO_MODE_OUTPUT) || (mode == GPIO_MODE_AF)) {
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d002      	beq.n	8001b42 <GPIO_InitPin+0x6e>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d12b      	bne.n	8001b9a <GPIO_InitPin+0xc6>
                // 2. Configure Speed
                temp = GPIOx->OSPEEDR;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	617b      	str	r3, [r7, #20]
                temp &= ~(0x03U << (position * 2));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	4013      	ands	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
                temp |= (speed << (position * 2));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
                GPIOx->OSPEEDR = temp;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	609a      	str	r2, [r3, #8]

                // 3. Configure Output Type (Push-Pull or Open-Drain)
                temp = GPIOx->OTYPER;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	617b      	str	r3, [r7, #20]
                temp &= ~(0x01U << position);
 8001b76:	2201      	movs	r2, #1
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4013      	ands	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]
                temp |= (otype << position);
 8001b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
                GPIOx->OTYPER = temp;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	605a      	str	r2, [r3, #4]
            }

            // 4. Configure Pull-up/Pull-down
            temp = GPIOx->PUPDR;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]
            temp |= (pull << (position * 2));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
            GPIOx->PUPDR = temp;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	60da      	str	r2, [r3, #12]

            // 5. Configure Alternate Function (if AF mode)
            if (mode == GPIO_MODE_AF) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d133      	bne.n	8001c36 <GPIO_InitPin+0x162>
                if (position < 8) { // AFR[0] for pins 0-7
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	2b07      	cmp	r3, #7
 8001bd2:	d817      	bhi.n	8001c04 <GPIO_InitPin+0x130>
                    temp = GPIOx->AFR[0];
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << (position * 4));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4013      	ands	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << (position * 4));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[0] = temp;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	621a      	str	r2, [r3, #32]
 8001c02:	e018      	b.n	8001c36 <GPIO_InitPin+0x162>
                } else { // AFR[1] for pins 8-15
                    temp = GPIOx->AFR[1];
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << ((position - 8) * 4));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b08      	subs	r3, #8
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << ((position - 8) * 4));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b08      	subs	r3, #8
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[1] = temp;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	625a      	str	r2, [r3, #36]	@ 0x24
    for (position = 0; position < 16; position++) {
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b0f      	cmp	r3, #15
 8001c40:	f67f af57 	bls.w	8001af2 <GPIO_InitPin+0x1e>
                }
            }
        }
    }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <GPIO_ReadPin>:

uint8_t GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t pin) {
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	807b      	strh	r3, [r7, #2]
    if ((GPIOx->IDR & pin) != 0x00U) {
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <GPIO_ReadPin+0x1c>
        return GPIO_PIN_SET;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <GPIO_ReadPin+0x1e>
    } else {
        return GPIO_PIN_RESET;
 8001c6a:	2300      	movs	r3, #0
    }
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t pin, uint8_t state) {
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
    if (state == GPIO_PIN_SET) {
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d103      	bne.n	8001c96 <GPIO_WritePin+0x1e>
        GPIOx->BSRR = (uint32_t)pin; // Set bit
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
    }
}
 8001c94:	e003      	b.n	8001c9e <GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	041a      	lsls	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	619a      	str	r2, [r3, #24]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <get_timer_peripheral>:

#include "pwm_driver.h"
#include <stdio.h>

// Helper function để lấy con trỏ đến Timer dựa trên enum
static TIM_TypeDef* get_timer_peripheral(PWM_TimerInstance_e timer_instance) {
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
    switch (timer_instance) {
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d814      	bhi.n	8001ce6 <get_timer_peripheral+0x3a>
 8001cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc4 <get_timer_peripheral+0x18>)
 8001cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc2:	bf00      	nop
 8001cc4:	08001cd5 	.word	0x08001cd5
 8001cc8:	08001cdb 	.word	0x08001cdb
 8001ccc:	08001cdf 	.word	0x08001cdf
 8001cd0:	08001ce3 	.word	0x08001ce3
        case PWM_TIMER2: return TIM2;
 8001cd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001cd8:	e006      	b.n	8001ce8 <get_timer_peripheral+0x3c>
        case PWM_TIMER3: return TIM3;
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <get_timer_peripheral+0x48>)
 8001cdc:	e004      	b.n	8001ce8 <get_timer_peripheral+0x3c>
        case PWM_TIMER4: return TIM4;
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <get_timer_peripheral+0x4c>)
 8001ce0:	e002      	b.n	8001ce8 <get_timer_peripheral+0x3c>
        case PWM_TIMER5: return TIM5;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <get_timer_peripheral+0x50>)
 8001ce4:	e000      	b.n	8001ce8 <get_timer_peripheral+0x3c>
        default: return NULL;
 8001ce6:	2300      	movs	r3, #0
    }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	40000800 	.word	0x40000800
 8001cfc:	40000c00 	.word	0x40000c00

08001d00 <pwm_timer_clock_cmd>:

// Helper function để bật clock cho Timer
static void pwm_timer_clock_cmd(PWM_TimerInstance_e timer_instance, uint8_t enable_disable) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	460a      	mov	r2, r1
 8001d0a:	71fb      	strb	r3, [r7, #7]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	71bb      	strb	r3, [r7, #6]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ffca 	bl	8001cac <get_timer_peripheral>
 8001d18:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL) return;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01f      	beq.n	8001d60 <pwm_timer_clock_cmd+0x60>

    if (enable_disable == CLOCK_CMD_ENABLE) { // Giả sử CLOCK_CMD_ENABLE = 1
 8001d20:	79bb      	ldrb	r3, [r7, #6]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d11d      	bne.n	8001d62 <pwm_timer_clock_cmd+0x62>
        if (TIMx == TIM2 || TIMx == TIM3 || TIMx == TIM4 || TIMx == TIM5) {
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d2c:	d00b      	beq.n	8001d46 <pwm_timer_clock_cmd+0x46>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <pwm_timer_clock_cmd+0x68>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <pwm_timer_clock_cmd+0x46>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a0c      	ldr	r2, [pc, #48]	@ (8001d6c <pwm_timer_clock_cmd+0x6c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d003      	beq.n	8001d46 <pwm_timer_clock_cmd+0x46>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4a0b      	ldr	r2, [pc, #44]	@ (8001d70 <pwm_timer_clock_cmd+0x70>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d10d      	bne.n	8001d62 <pwm_timer_clock_cmd+0x62>
            RCC->APB1ENR |= (1U << ( ( (uint32_t)TIMx - APB1PERIPH_BASE ) / 0x400UL) );
 8001d46:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <pwm_timer_clock_cmd+0x74>)
 8001d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8001d50:	0a9b      	lsrs	r3, r3, #10
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	4906      	ldr	r1, [pc, #24]	@ (8001d74 <pwm_timer_clock_cmd+0x74>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	640b      	str	r3, [r1, #64]	@ 0x40
 8001d5e:	e000      	b.n	8001d62 <pwm_timer_clock_cmd+0x62>
    if (TIMx == NULL) return;
 8001d60:	bf00      	nop
        }
        // Thêm cho các timer trên APB2 nếu cần (TIM1, TIM8, TIM9, TIM10, TIM11)
    } else {
        // Logic để tắt clock (ít dùng hơn)
    }
}
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40000800 	.word	0x40000800
 8001d70:	40000c00 	.word	0x40000c00
 8001d74:	40023800 	.word	0x40023800

08001d78 <PWM_InitChannel>:
// Cần khởi tạo các giá trị này trong PWM_InitChannel
static uint32_t g_timer_arr_values[4] = {0}; // TIM2, TIM3, TIM4, TIM5

int8_t PWM_InitChannel(PWM_TimerInstance_e timer_instance, PWM_TimerChannel_e channel,
                       uint32_t pwm_frequency_hz,
                       GPIO_TypeDef* gpio_port, uint8_t gpio_pin_number, uint8_t gpio_af_mode) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b090      	sub	sp, #64	@ 0x40
 8001d7c:	af04      	add	r7, sp, #16
 8001d7e:	60ba      	str	r2, [r7, #8]
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4603      	mov	r3, r0
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	460b      	mov	r3, r1
 8001d88:	73bb      	strb	r3, [r7, #14]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff8d 	bl	8001cac <get_timer_peripheral>
 8001d92:	61b8      	str	r0, [r7, #24]
    if (TIMx == NULL || channel < PWM_CHANNEL_1 || channel > PWM_CHANNEL_4 || pwm_frequency_hz == 0) {
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <PWM_InitChannel+0x34>
 8001d9a:	7bbb      	ldrb	r3, [r7, #14]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <PWM_InitChannel+0x34>
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d802      	bhi.n	8001dac <PWM_InitChannel+0x34>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <PWM_InitChannel+0x3a>
        return -1; // Tham số không hợp lệ
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	e117      	b.n	8001fe2 <PWM_InitChannel+0x26a>
    }

    // 1. Bật clock cho Timer và GPIO Port
    pwm_timer_clock_cmd(timer_instance, CLOCK_CMD_ENABLE);
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	2101      	movs	r1, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ffa2 	bl	8001d00 <pwm_timer_clock_cmd>
    GPIO_ClockCmd(gpio_port, CLOCK_CMD_ENABLE); // Giả sử hàm này tồn tại và hoạt động
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff fdf2 	bl	80019a8 <GPIO_ClockCmd>

    // 2. Cấu hình chân GPIO ở chế độ Alternate Function
    GPIO_InitPin(gpio_port, (1U << gpio_pin_number), GPIO_MODE_AF, GPIO_PULL_NO,
 8001dc4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001dc8:	2201      	movs	r2, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	b299      	uxth	r1, r3
 8001dd0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001dd4:	9302      	str	r3, [sp, #8]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	2202      	movs	r2, #2
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fe76 	bl	8001ad4 <GPIO_InitPin>

    // 3. Tính toán Prescaler (PSC) và Auto-Reload Register (ARR)
    // Tần số clock của Timer (ví dụ PCLK1 cho TIM2/3/4/5)
    // Nếu Prescaler của APB1 khác 1, PCLK1_TIMER_CLOCK = PCLK1_FREQUENCY_HZ * 2
    uint32_t timer_clock_hz;
    if (TIMx == TIM2 || TIMx == TIM3 || TIMx == TIM4 || TIMx == TIM5) { // Thuộc APB1
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dee:	d00b      	beq.n	8001e08 <PWM_InitChannel+0x90>
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fec <PWM_InitChannel+0x274>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d007      	beq.n	8001e08 <PWM_InitChannel+0x90>
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	4a7d      	ldr	r2, [pc, #500]	@ (8001ff0 <PWM_InitChannel+0x278>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d003      	beq.n	8001e08 <PWM_InitChannel+0x90>
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	4a7c      	ldr	r2, [pc, #496]	@ (8001ff4 <PWM_InitChannel+0x27c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d10b      	bne.n	8001e20 <PWM_InitChannel+0xa8>
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 8001e08:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff8 <PWM_InitChannel+0x280>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <PWM_InitChannel+0xa2>
            timer_clock_hz = PCLK1_FREQUENCY_HZ;
 8001e14:	4b79      	ldr	r3, [pc, #484]	@ (8001ffc <PWM_InitChannel+0x284>)
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 8001e18:	e005      	b.n	8001e26 <PWM_InitChannel+0xae>
        } else { // APB1 Prescaler > 1
            timer_clock_hz = PCLK1_FREQUENCY_HZ * 2;
 8001e1a:	4b79      	ldr	r3, [pc, #484]	@ (8002000 <PWM_InitChannel+0x288>)
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 8001e1e:	e002      	b.n	8001e26 <PWM_InitChannel+0xae>
        }
    } else {
        // Thêm logic cho timer trên APB2 (ví dụ TIM1)
        // if ((RCC->CFGR & RCC_CFGR_PPRE2) == RCC_CFGR_PPRE2_DIV1) { ... }
        return -1; // Timer không được hỗ trợ
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
 8001e24:	e0dd      	b.n	8001fe2 <PWM_InitChannel+0x26a>
    }

    // Tìm PSC và ARR. Ưu tiên ARR lớn để có độ phân giải duty cycle tốt hơn.
    // pwm_frequency = timer_clock_hz / ((PSC + 1) * (ARR + 1))
    // Giả sử ARR khoảng 1000-65535. PSC = (timer_clock_hz / (pwm_frequency * (ARR+1))) - 1
    uint32_t arr_val = (timer_clock_hz / pwm_frequency_hz) / 1000U; // Thử ARR ~1000
 8001e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4a75      	ldr	r2, [pc, #468]	@ (8002004 <PWM_InitChannel+0x28c>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	099b      	lsrs	r3, r3, #6
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val > 0xFFFFU) arr_val = 0xFFFFU; // Giới hạn ARR
 8001e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e3e:	d302      	bcc.n	8001e46 <PWM_InitChannel+0xce>
 8001e40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val < 100U && pwm_frequency_hz < 1000) arr_val = 999; // Tăng ARR nếu tần số PWM thấp
 8001e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e48:	2b63      	cmp	r3, #99	@ 0x63
 8001e4a:	d806      	bhi.n	8001e5a <PWM_InitChannel+0xe2>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e52:	d202      	bcs.n	8001e5a <PWM_InitChannel+0xe2>
 8001e54:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001e58:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val == 0) arr_val = 1; // Tránh chia cho 0
 8001e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <PWM_InitChannel+0xec>
 8001e60:	2301      	movs	r3, #1
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint32_t psc_val = (timer_clock_hz / (pwm_frequency_hz * (arr_val + 1))) -1;
 8001e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e66:	3301      	adds	r3, #1
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24
    if (psc_val > 0xFFFFU) psc_val = 0xFFFFU;
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7e:	d302      	bcc.n	8001e86 <PWM_InitChannel+0x10e>
 8001e80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24


    g_timer_arr_values[timer_instance] = arr_val; // Lưu lại ARR
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	495f      	ldr	r1, [pc, #380]	@ (8002008 <PWM_InitChannel+0x290>)
 8001e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // 4. Cấu hình Timer cơ bản
    TIMx->PSC = (uint16_t)psc_val;
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->ARR = (uint16_t)arr_val;
 8001e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIMx->CNT = 0; // Reset bộ đếm
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24
    // 5. Cấu hình kênh Output Compare cho PWM
    volatile uint16_t* ccmr_reg;
    volatile uint16_t* ccer_reg;
    volatile uint32_t* ccr_reg; // CCRx là 32-bit nhưng chỉ dùng 16-bit thấp

    if (channel == PWM_CHANNEL_1 || channel == PWM_CHANNEL_2) {
 8001eaa:	7bbb      	ldrb	r3, [r7, #14]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d002      	beq.n	8001eb6 <PWM_InitChannel+0x13e>
 8001eb0:	7bbb      	ldrb	r3, [r7, #14]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d103      	bne.n	8001ebe <PWM_InitChannel+0x146>
        ccmr_reg = (volatile uint16_t*)&(TIMx->CCMR1);
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	3318      	adds	r3, #24
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	e002      	b.n	8001ec4 <PWM_InitChannel+0x14c>
    } else { // Kênh 3 hoặc 4
        ccmr_reg = (volatile uint16_t*)&(TIMx->CCMR2);
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	331c      	adds	r3, #28
 8001ec2:	623b      	str	r3, [r7, #32]
    }
    ccer_reg = (volatile uint16_t*)&(TIMx->CCER);
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	3320      	adds	r3, #32
 8001ec8:	617b      	str	r3, [r7, #20]

    switch (channel) {
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d81a      	bhi.n	8001f08 <PWM_InitChannel+0x190>
 8001ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed8 <PWM_InitChannel+0x160>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001ee9 	.word	0x08001ee9
 8001edc:	08001ef1 	.word	0x08001ef1
 8001ee0:	08001ef9 	.word	0x08001ef9
 8001ee4:	08001f01 	.word	0x08001f01
        case PWM_CHANNEL_1: ccr_reg = &(TIMx->CCR1); break;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	3334      	adds	r3, #52	@ 0x34
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e00e      	b.n	8001f0e <PWM_InitChannel+0x196>
        case PWM_CHANNEL_2: ccr_reg = &(TIMx->CCR2); break;
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	3338      	adds	r3, #56	@ 0x38
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e00a      	b.n	8001f0e <PWM_InitChannel+0x196>
        case PWM_CHANNEL_3: ccr_reg = &(TIMx->CCR3); break;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	333c      	adds	r3, #60	@ 0x3c
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e006      	b.n	8001f0e <PWM_InitChannel+0x196>
        case PWM_CHANNEL_4: ccr_reg = &(TIMx->CCR4); break;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	3340      	adds	r3, #64	@ 0x40
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e002      	b.n	8001f0e <PWM_InitChannel+0x196>
        default: return -1; // Should not happen
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	e069      	b.n	8001fe2 <PWM_InitChannel+0x26a>
    }

    // Cấu hình PWM Mode 1 (OCxM = 110) và bật Preload Enable (OCxPE = 1)
    // Preload cho phép cập nhật CCRx một cách an toàn vào cuối mỗi chu kỳ PWM
    uint16_t oc_mode_bits = TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1PE;
 8001f0e:	2368      	movs	r3, #104	@ 0x68
 8001f10:	827b      	strh	r3, [r7, #18]
    uint16_t ccer_enable_bit = TIM_CCER_CC1E << ((channel - 1) * 4);
 8001f12:	7bbb      	ldrb	r3, [r7, #14]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	2201      	movs	r2, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	823b      	strh	r3, [r7, #16]

    if (channel == PWM_CHANNEL_1 || channel == PWM_CHANNEL_3) { // Kênh 1 và 3 dùng 8 bit thấp của CCMRx
 8001f20:	7bbb      	ldrb	r3, [r7, #14]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d002      	beq.n	8001f2c <PWM_InitChannel+0x1b4>
 8001f26:	7bbb      	ldrb	r3, [r7, #14]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d121      	bne.n	8001f70 <PWM_InitChannel+0x1f8>
        *ccmr_reg &= ~(0xFFU << ((channel == PWM_CHANNEL_3) ? 8 : 0)); // Xóa bit cũ (OCxM, OCxPE, OCxFE, CCxS)
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	7bba      	ldrb	r2, [r7, #14]
 8001f34:	2a03      	cmp	r2, #3
 8001f36:	d101      	bne.n	8001f3c <PWM_InitChannel+0x1c4>
 8001f38:	22ff      	movs	r2, #255	@ 0xff
 8001f3a:	e001      	b.n	8001f40 <PWM_InitChannel+0x1c8>
 8001f3c:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001f40:	4013      	ands	r3, r2
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	801a      	strh	r2, [r3, #0]
        *ccmr_reg |= (oc_mode_bits << ((channel == PWM_CHANNEL_3) ? 8 : 0));
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	b21a      	sxth	r2, r3
 8001f50:	8a79      	ldrh	r1, [r7, #18]
 8001f52:	7bbb      	ldrb	r3, [r7, #14]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d101      	bne.n	8001f5c <PWM_InitChannel+0x1e4>
 8001f58:	2308      	movs	r3, #8
 8001f5a:	e000      	b.n	8001f5e <PWM_InitChannel+0x1e6>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	4313      	orrs	r3, r2
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	e020      	b.n	8001fb2 <PWM_InitChannel+0x23a>
    } else { // Kênh 2 và 4 dùng 8 bit cao của CCMRx
        *ccmr_reg &= ~(0xFF00U >> ((channel == PWM_CHANNEL_4) ? 0 : 8)); // Xóa bit cũ
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	7bba      	ldrb	r2, [r7, #14]
 8001f78:	2a04      	cmp	r2, #4
 8001f7a:	d101      	bne.n	8001f80 <PWM_InitChannel+0x208>
 8001f7c:	22ff      	movs	r2, #255	@ 0xff
 8001f7e:	e001      	b.n	8001f84 <PWM_InitChannel+0x20c>
 8001f80:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001f84:	4013      	ands	r3, r2
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	801a      	strh	r2, [r3, #0]
        *ccmr_reg |= (oc_mode_bits << ((channel == PWM_CHANNEL_4) ? 8 : 0));
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	8a79      	ldrh	r1, [r7, #18]
 8001f96:	7bbb      	ldrb	r3, [r7, #14]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d101      	bne.n	8001fa0 <PWM_InitChannel+0x228>
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	e000      	b.n	8001fa2 <PWM_InitChannel+0x22a>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	801a      	strh	r2, [r3, #0]
    }

    // Bật output cho kênh
    *ccer_reg |= ccer_enable_bit;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	8a3b      	ldrh	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	801a      	strh	r2, [r3, #0]

    // Đặt duty cycle ban đầu là 0%
    *ccr_reg = 0;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

    // Bật bit ARPE (Auto-Reload Preload Enable) trong CR1 để ARR được buffer
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	601a      	str	r2, [r3, #0]

    // Tạo một update event để nạp các giá trị preload vào shadow registers
    TIMx->EGR |= TIM_EGR_UG;
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	615a      	str	r2, [r3, #20]

    return 0;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3730      	adds	r7, #48	@ 0x30
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40000800 	.word	0x40000800
 8001ff4:	40000c00 	.word	0x40000c00
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	0280de80 	.word	0x0280de80
 8002000:	0501bd00 	.word	0x0501bd00
 8002004:	10624dd3 	.word	0x10624dd3
 8002008:	2000024c 	.word	0x2000024c

0800200c <PWM_SetDutyCycle>:

int8_t PWM_SetDutyCycle(PWM_TimerInstance_e timer_instance, PWM_TimerChannel_e channel, float duty_cycle_percent) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	460a      	mov	r2, r1
 8002016:	ed87 0a00 	vstr	s0, [r7]
 800201a:	71fb      	strb	r3, [r7, #7]
 800201c:	4613      	mov	r3, r2
 800201e:	71bb      	strb	r3, [r7, #6]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fe42 	bl	8001cac <get_timer_peripheral>
 8002028:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL || channel < PWM_CHANNEL_1 || channel > PWM_CHANNEL_4) {
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <PWM_SetDutyCycle+0x30>
 8002030:	79bb      	ldrb	r3, [r7, #6]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <PWM_SetDutyCycle+0x30>
 8002036:	79bb      	ldrb	r3, [r7, #6]
 8002038:	2b04      	cmp	r3, #4
 800203a:	d902      	bls.n	8002042 <PWM_SetDutyCycle+0x36>
        return -1;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
 8002040:	e05f      	b.n	8002102 <PWM_SetDutyCycle+0xf6>
    }

    if (duty_cycle_percent < 0.0f) duty_cycle_percent = 0.0f;
 8002042:	edd7 7a00 	vldr	s15, [r7]
 8002046:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204e:	d502      	bpl.n	8002056 <PWM_SetDutyCycle+0x4a>
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
    if (duty_cycle_percent > 100.0f) duty_cycle_percent = 100.0f;
 8002056:	edd7 7a00 	vldr	s15, [r7]
 800205a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800210c <PWM_SetDutyCycle+0x100>
 800205e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	dd01      	ble.n	800206c <PWM_SetDutyCycle+0x60>
 8002068:	4b29      	ldr	r3, [pc, #164]	@ (8002110 <PWM_SetDutyCycle+0x104>)
 800206a:	603b      	str	r3, [r7, #0]

    uint32_t arr_val = g_timer_arr_values[timer_instance];
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	4a29      	ldr	r2, [pc, #164]	@ (8002114 <PWM_SetDutyCycle+0x108>)
 8002070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002074:	60bb      	str	r3, [r7, #8]
    if (arr_val == 0) return -1; // Timer chưa được init đúng cách
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <PWM_SetDutyCycle+0x76>
 800207c:	f04f 33ff 	mov.w	r3, #4294967295
 8002080:	e03f      	b.n	8002102 <PWM_SetDutyCycle+0xf6>

    uint32_t ccr_val = (uint32_t)((duty_cycle_percent / 100.0f) * (float)(arr_val +1));
 8002082:	edd7 7a00 	vldr	s15, [r7]
 8002086:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800210c <PWM_SetDutyCycle+0x100>
 800208a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3301      	adds	r3, #1
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a2:	ee17 3a90 	vmov	r3, s15
 80020a6:	617b      	str	r3, [r7, #20]
    // arr_val+1 vì duty cycle 100% ứng với CCR = ARR+1 (hoặc ARR nếu dùng PWM mode khác)
    // Với PWM Mode 1 (đếm lên): 0% -> CCR=0; 100% -> CCR = ARR+1 (hoặc lớn hơn ARR)
    // nếu CCR > ARR, thì nó sẽ là 100% duty.

    if (ccr_val > arr_val) ccr_val = arr_val +1; // Đảm bảo 100% là CCR > ARR
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d902      	bls.n	80020b6 <PWM_SetDutyCycle+0xaa>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	3301      	adds	r3, #1
 80020b4:	617b      	str	r3, [r7, #20]

    volatile uint32_t* ccr_reg;
    switch (channel) {
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d81a      	bhi.n	80020f4 <PWM_SetDutyCycle+0xe8>
 80020be:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <PWM_SetDutyCycle+0xb8>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080020dd 	.word	0x080020dd
 80020cc:	080020e5 	.word	0x080020e5
 80020d0:	080020ed 	.word	0x080020ed
        case PWM_CHANNEL_1: ccr_reg = &(TIMx->CCR1); break;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3334      	adds	r3, #52	@ 0x34
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	e00e      	b.n	80020fa <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_2: ccr_reg = &(TIMx->CCR2); break;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3338      	adds	r3, #56	@ 0x38
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	e00a      	b.n	80020fa <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_3: ccr_reg = &(TIMx->CCR3); break;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	333c      	adds	r3, #60	@ 0x3c
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e006      	b.n	80020fa <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_4: ccr_reg = &(TIMx->CCR4); break;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3340      	adds	r3, #64	@ 0x40
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	e002      	b.n	80020fa <PWM_SetDutyCycle+0xee>
        default: return -1;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
 80020f8:	e003      	b.n	8002102 <PWM_SetDutyCycle+0xf6>
    }

    *ccr_reg = ccr_val;
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	601a      	str	r2, [r3, #0]
    return 0;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	42c80000 	.word	0x42c80000
 8002110:	42c80000 	.word	0x42c80000
 8002114:	2000024c 	.word	0x2000024c

08002118 <PWM_Start>:

int8_t PWM_Start(PWM_TimerInstance_e timer_instance) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fdc1 	bl	8001cac <get_timer_peripheral>
 800212a:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL) return -1;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <PWM_Start+0x20>
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e006      	b.n	8002146 <PWM_Start+0x2e>

    // Bật bộ đếm
    TIMx->CR1 |= TIM_CR1_CEN;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f043 0201 	orr.w	r2, r3, #1
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	601a      	str	r2, [r3, #0]
    return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <SystemClock_Config>:
  #define PLL_P_REG_VAL 0x03U
#else
  #error "Invalid PLL_P_VAL. Must be 2, 4, 6, or 8."
#endif

void SystemClock_Config(void) {
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
    uint32_t temp_reg; // Biến tạm, tránh warning unused nếu không có MODIFY_REG

    // 1. Bật HSE và đợi nó ổn định (nếu dùng HSE là nguồn PLL)
    RCC->CR |= RCC_CR_HSEON;
 8002156:	4b47      	ldr	r3, [pc, #284]	@ (8002274 <SystemClock_Config+0x124>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a46      	ldr	r2, [pc, #280]	@ (8002274 <SystemClock_Config+0x124>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002160:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8002162:	bf00      	nop
 8002164:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <SystemClock_Config+0x124>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f9      	beq.n	8002164 <SystemClock_Config+0x14>

    // 2. Cấu hình Power Control Register
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002170:	4b40      	ldr	r3, [pc, #256]	@ (8002274 <SystemClock_Config+0x124>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	4a3f      	ldr	r2, [pc, #252]	@ (8002274 <SystemClock_Config+0x124>)
 8002176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217a:	6413      	str	r3, [r2, #64]	@ 0x40
    temp_reg = PWR->CR;
 800217c:	4b3e      	ldr	r3, [pc, #248]	@ (8002278 <SystemClock_Config+0x128>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	607b      	str	r3, [r7, #4]
    temp_reg &= ~PWR_CR_VOS;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002188:	607b      	str	r3, [r7, #4]
    temp_reg |= PWR_CR_VOS_1; // Scale 2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002190:	607b      	str	r3, [r7, #4]
    PWR->CR = temp_reg;
 8002192:	4a39      	ldr	r2, [pc, #228]	@ (8002278 <SystemClock_Config+0x128>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6013      	str	r3, [r2, #0]

    // 3. Cấu hình các hệ số chia cho HCLK, PCLK1, PCLK2
    temp_reg = RCC->CFGR;
 8002198:	4b36      	ldr	r3, [pc, #216]	@ (8002274 <SystemClock_Config+0x124>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_HPRE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021a4:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_HPRE_DIV1;
    RCC->CFGR = temp_reg;
 80021a6:	4a33      	ldr	r2, [pc, #204]	@ (8002274 <SystemClock_Config+0x124>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 80021ac:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <SystemClock_Config+0x124>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80021b8:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE1_DIV2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021c0:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 80021c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002274 <SystemClock_Config+0x124>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 80021c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002274 <SystemClock_Config+0x124>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE2;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80021d4:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE2_DIV1;
    RCC->CFGR = temp_reg;
 80021d6:	4a27      	ldr	r2, [pc, #156]	@ (8002274 <SystemClock_Config+0x124>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6093      	str	r3, [r2, #8]

    // 4. Cấu hình PLL
    RCC->CR &= ~RCC_CR_PLLON;
 80021dc:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <SystemClock_Config+0x124>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a24      	ldr	r2, [pc, #144]	@ (8002274 <SystemClock_Config+0x124>)
 80021e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021e6:	6013      	str	r3, [r2, #0]
    while(RCC->CR & RCC_CR_PLLRDY);
 80021e8:	bf00      	nop
 80021ea:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <SystemClock_Config+0x124>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <SystemClock_Config+0x9a>

    RCC->PLLCFGR = (PLL_Q_VAL << RCC_PLLCFGR_PLLQ_Pos) |
 80021f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <SystemClock_Config+0x124>)
 80021f8:	4a20      	ldr	r2, [pc, #128]	@ (800227c <SystemClock_Config+0x12c>)
 80021fa:	605a      	str	r2, [r3, #4]
                   (PLL_P_REG_VAL << RCC_PLLCFGR_PLLP_Pos)|
                   (PLL_N_VAL << RCC_PLLCFGR_PLLN_Pos) |
                   (PLL_M_VAL << RCC_PLLCFGR_PLLM_Pos);

    // 5. Bật PLL và đợi nó ổn định
    RCC->CR |= RCC_CR_PLLON;
 80021fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <SystemClock_Config+0x124>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1c      	ldr	r2, [pc, #112]	@ (8002274 <SystemClock_Config+0x124>)
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002206:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8002208:	bf00      	nop
 800220a:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <SystemClock_Config+0x124>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f9      	beq.n	800220a <SystemClock_Config+0xba>

    // 6. Cấu hình Flash latency
    temp_reg = FLASH->ACR;
 8002216:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <SystemClock_Config+0x130>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	607b      	str	r3, [r7, #4]
    temp_reg &= ~FLASH_ACR_LATENCY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f023 0307 	bic.w	r3, r3, #7
 8002222:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_LATENCY_2WS;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_PRFTEN;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002232:	607b      	str	r3, [r7, #4]
    FLASH->ACR = temp_reg;
 8002234:	4a12      	ldr	r2, [pc, #72]	@ (8002280 <SystemClock_Config+0x130>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]

    // 7. Chọn PLL làm nguồn SYSCLK
    temp_reg = RCC->CFGR;
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <SystemClock_Config+0x124>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_SW;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f023 0303 	bic.w	r3, r3, #3
 8002246:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_SW_PLL;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 8002250:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <SystemClock_Config+0x124>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8002256:	bf00      	nop
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <SystemClock_Config+0x124>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d1f9      	bne.n	8002258 <SystemClock_Config+0x108>
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40007000 	.word	0x40007000
 800227c:	07415408 	.word	0x07415408
 8002280:	40023c00 	.word	0x40023c00

08002284 <__NVIC_SetPriority>:
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	@ (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	@ (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <SysTick_Init>:
#include "stm32f401xe.h"
#include "rcc_config.h"

static volatile uint32_t g_sysTickCounter = 0;

void SysTick_Init(void){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
	// 1. Tính toán giá trị nạp cho SysTick để có tick mỗi 1ms
	// (HCLK / 1000) - 1 vì SysTick đếm từ LOAD_VAL về 0 (LOAD_VAL + 1 chu kỳ)
	uint32_t reload_value = (HCLK_FREQUENCY_HZ / 1000U) - 1U;
 80022de:	4b13      	ldr	r3, [pc, #76]	@ (800232c <SysTick_Init+0x54>)
 80022e0:	607b      	str	r3, [r7, #4]

	// 2. Cấu hình SysTick
    // Vô hiệu hóa SysTick trước khi cấu hình
    SysTick->CTRL = 0;
 80022e2:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <SysTick_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

    // Nạp giá trị reload
    SysTick->LOAD = reload_value;
 80022e8:	4a11      	ldr	r2, [pc, #68]	@ (8002330 <SysTick_Init+0x58>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6053      	str	r3, [r2, #4]

    // Đặt ưu tiên ngắt SysTick cho Cortex-M4 (4 bit ưu tiên)
    NVIC_SetPriority(SysTick_IRQn, 15); // Mức ưu tiên 15 (thấp nhất nếu 4 bit prio)
 80022ee:	210f      	movs	r1, #15
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f7ff ffc6 	bl	8002284 <__NVIC_SetPriority>

    // Reset bộ đếm SysTick hiện tại
    SysTick->VAL = 0;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <SysTick_Init+0x58>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]

    // Kích hoạt SysTick với nguồn clock là HCLK và bật ngắt
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // CLKSOURCE = AHB clock
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <SysTick_Init+0x58>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a0b      	ldr	r2, [pc, #44]	@ (8002330 <SysTick_Init+0x58>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;   // Enable SysTick interrupt
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <SysTick_Init+0x58>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a08      	ldr	r2, [pc, #32]	@ (8002330 <SysTick_Init+0x58>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;    // Enable SysTick
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <SysTick_Init+0x58>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <SysTick_Init+0x58>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6013      	str	r3, [r2, #0]
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	0001481f 	.word	0x0001481f
 8002330:	e000e010 	.word	0xe000e010

08002334 <Delay_ms>:

void Delay_ms(volatile uint32_t ms){
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	uint32_t start_tick = g_sysTickCounter;
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <Delay_ms+0x2c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
	while ((g_sysTickCounter - start_tick) < ms){
 8002342:	bf00      	nop
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <Delay_ms+0x2c>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad2      	subs	r2, r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d3f8      	bcc.n	8002344 <Delay_ms+0x10>

	}
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	2000025c 	.word	0x2000025c

08002364 <GetTick>:

uint32_t GetTick(void){
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
	return g_sysTickCounter;
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <GetTick+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	2000025c 	.word	0x2000025c

0800237c <IncTick>:

void IncTick(void){
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
	g_sysTickCounter ++;
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <IncTick+0x18>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	4a03      	ldr	r2, [pc, #12]	@ (8002394 <IncTick+0x18>)
 8002388:	6013      	str	r3, [r2, #0]
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	2000025c 	.word	0x2000025c

08002398 <SysTick_Handler>:

void SysTick_Handler(void){
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	IncTick();
 800239c:	f7ff ffee 	bl	800237c <IncTick>
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <__NVIC_EnableIRQ>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4907      	ldr	r1, [pc, #28]	@ (80023dc <__NVIC_EnableIRQ+0x38>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <__NVIC_DisableIRQ>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db12      	blt.n	8002418 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	490a      	ldr	r1, [pc, #40]	@ (8002424 <__NVIC_DisableIRQ+0x44>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	3320      	adds	r3, #32
 8002408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800240c:	f3bf 8f4f 	dsb	sy
}
 8002410:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002412:	f3bf 8f6f 	isb	sy
}
 8002416:	bf00      	nop
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_SetPriority>:
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	db0a      	blt.n	8002452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	490c      	ldr	r1, [pc, #48]	@ (8002474 <__NVIC_SetPriority+0x4c>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	440b      	add	r3, r1
 800244c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002450:	e00a      	b.n	8002468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2da      	uxtb	r2, r3
 8002456:	4908      	ldr	r1, [pc, #32]	@ (8002478 <__NVIC_SetPriority+0x50>)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3b04      	subs	r3, #4
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	440b      	add	r3, r1
 8002466:	761a      	strb	r2, [r3, #24]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <UART2_Init>:
static uart_tx_complete_callback_t g_uart2_tx_complete_callback = NULL;

// Thêm biến theo dõi lỗi UART
static volatile uint8_t g_uart2_error_flags = 0;

void UART2_Init(uint32_t baudrate, uint32_t word_length, uint32_t parity, uint32_t stop_bits) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b08c      	sub	sp, #48	@ 0x30
 8002480:	af04      	add	r7, sp, #16
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
    // 1. Bật clock cho USART2 và GPIOA
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800248a:	4b51      	ldr	r3, [pc, #324]	@ (80025d0 <UART2_Init+0x154>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	4a50      	ldr	r2, [pc, #320]	@ (80025d0 <UART2_Init+0x154>)
 8002490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002494:	6413      	str	r3, [r2, #64]	@ 0x40
    GPIO_ClockCmd(GPIOA, CLOCK_CMD_ENABLE);
 8002496:	2101      	movs	r1, #1
 8002498:	484e      	ldr	r0, [pc, #312]	@ (80025d4 <UART2_Init+0x158>)
 800249a:	f7ff fa85 	bl	80019a8 <GPIO_ClockCmd>

    // 2. Cấu hình chân GPIOA PA2 (TX) và PA3 (RX) cho AF7 (USART2)
    GPIO_InitPin(GPIOA, (1U << 2), GPIO_MODE_AF, GPIO_PULL_UP, GPIO_SPEED_HIGH, GPIO_OTYPE_PUSHPULL, 7); // PA2 TX
 800249e:	2307      	movs	r3, #7
 80024a0:	9302      	str	r3, [sp, #8]
 80024a2:	2300      	movs	r3, #0
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	2302      	movs	r3, #2
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2301      	movs	r3, #1
 80024ac:	2202      	movs	r2, #2
 80024ae:	2104      	movs	r1, #4
 80024b0:	4848      	ldr	r0, [pc, #288]	@ (80025d4 <UART2_Init+0x158>)
 80024b2:	f7ff fb0f 	bl	8001ad4 <GPIO_InitPin>
    GPIO_InitPin(GPIOA, (1U << 3), GPIO_MODE_AF, GPIO_PULL_UP, GPIO_SPEED_HIGH, GPIO_OTYPE_PUSHPULL, 7); // PA3 RX
 80024b6:	2307      	movs	r3, #7
 80024b8:	9302      	str	r3, [sp, #8]
 80024ba:	2300      	movs	r3, #0
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	2302      	movs	r3, #2
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2301      	movs	r3, #1
 80024c4:	2202      	movs	r2, #2
 80024c6:	2108      	movs	r1, #8
 80024c8:	4842      	ldr	r0, [pc, #264]	@ (80025d4 <UART2_Init+0x158>)
 80024ca:	f7ff fb03 	bl	8001ad4 <GPIO_InitPin>

    // 3. Vô hiệu hóa UART trước khi cấu hình
    USART2->CR1 &= ~USART_CR1_UE;
 80024ce:	4b42      	ldr	r3, [pc, #264]	@ (80025d8 <UART2_Init+0x15c>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a41      	ldr	r2, [pc, #260]	@ (80025d8 <UART2_Init+0x15c>)
 80024d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024d8:	60d3      	str	r3, [r2, #12]

    // 4. Cấu hình Word Length, Parity
    USART2->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS);
 80024da:	4b3f      	ldr	r3, [pc, #252]	@ (80025d8 <UART2_Init+0x15c>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	4a3e      	ldr	r2, [pc, #248]	@ (80025d8 <UART2_Init+0x15c>)
 80024e0:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80024e4:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= word_length;
 80024e6:	4b3c      	ldr	r3, [pc, #240]	@ (80025d8 <UART2_Init+0x15c>)
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	493b      	ldr	r1, [pc, #236]	@ (80025d8 <UART2_Init+0x15c>)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60cb      	str	r3, [r1, #12]
    USART2->CR1 |= parity;
 80024f2:	4b39      	ldr	r3, [pc, #228]	@ (80025d8 <UART2_Init+0x15c>)
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	4938      	ldr	r1, [pc, #224]	@ (80025d8 <UART2_Init+0x15c>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]

    // 5. Cấu hình Stop Bits
    USART2->CR2 &= ~USART_CR2_STOP;
 80024fe:	4b36      	ldr	r3, [pc, #216]	@ (80025d8 <UART2_Init+0x15c>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	4a35      	ldr	r2, [pc, #212]	@ (80025d8 <UART2_Init+0x15c>)
 8002504:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002508:	6113      	str	r3, [r2, #16]
    USART2->CR2 |= stop_bits;
 800250a:	4b33      	ldr	r3, [pc, #204]	@ (80025d8 <UART2_Init+0x15c>)
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	4932      	ldr	r1, [pc, #200]	@ (80025d8 <UART2_Init+0x15c>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	610b      	str	r3, [r1, #16]

    // 6. Cấu hình Baud Rate với độ chính xác cao hơn
    uint32_t pclk1_freq = PCLK1_FREQUENCY_HZ; // Lấy từ rcc_config.h
 8002516:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <UART2_Init+0x160>)
 8002518:	617b      	str	r3, [r7, #20]
    // Tính toán USARTDIV với độ chính xác cao hơn
    uint32_t integer_div = (25 * pclk1_freq) / (4 * baudrate);
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	009a      	lsls	r2, r3, #2
 8002524:	441a      	add	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	613b      	str	r3, [r7, #16]
    uint32_t mantissa = integer_div / 100;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4a2b      	ldr	r2, [pc, #172]	@ (80025e0 <UART2_Init+0x164>)
 8002534:	fba2 2303 	umull	r2, r3, r2, r3
 8002538:	095b      	lsrs	r3, r3, #5
 800253a:	61fb      	str	r3, [r7, #28]
    uint32_t fraction = ((integer_div - (mantissa * 100)) * 16 + 50) / 100;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2264      	movs	r2, #100	@ 0x64
 8002540:	fb02 f303 	mul.w	r3, r2, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	3332      	adds	r3, #50	@ 0x32
 800254c:	4a24      	ldr	r2, [pc, #144]	@ (80025e0 <UART2_Init+0x164>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	61bb      	str	r3, [r7, #24]
        
    // Xử lý trường hợp fraction = 16
    if (fraction == 16) {
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b10      	cmp	r3, #16
 800255a:	d104      	bne.n	8002566 <UART2_Init+0xea>
        mantissa++;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	3301      	adds	r3, #1
 8002560:	61fb      	str	r3, [r7, #28]
        fraction = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
    }
        
    USART2->BRR = (mantissa << 4) | (fraction & 0xFU);
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	011a      	lsls	r2, r3, #4
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	4919      	ldr	r1, [pc, #100]	@ (80025d8 <UART2_Init+0x15c>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]

    // 7. Cấu hình Control Register: Bật TX, RX và RXNE Interrupt
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 8002576:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <UART2_Init+0x15c>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <UART2_Init+0x15c>)
 800257c:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 8002580:	60d3      	str	r3, [r2, #12]

    // 8. Reset trạng thái buffer
    g_uart2_rx_buffer_head = 0;
 8002582:	4b18      	ldr	r3, [pc, #96]	@ (80025e4 <UART2_Init+0x168>)
 8002584:	2200      	movs	r2, #0
 8002586:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_tail = 0;
 8002588:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <UART2_Init+0x16c>)
 800258a:	2200      	movs	r2, #0
 800258c:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_count = 0;
 800258e:	4b17      	ldr	r3, [pc, #92]	@ (80025ec <UART2_Init+0x170>)
 8002590:	2200      	movs	r2, #0
 8002592:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_head = 0;
 8002594:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <UART2_Init+0x174>)
 8002596:	2200      	movs	r2, #0
 8002598:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_tail = 0;
 800259a:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <UART2_Init+0x178>)
 800259c:	2200      	movs	r2, #0
 800259e:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_count = 0;
 80025a0:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <UART2_Init+0x17c>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_busy = false;
 80025a6:	4b15      	ldr	r3, [pc, #84]	@ (80025fc <UART2_Init+0x180>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]

    // 9. Cấu hình ngắt trong NVIC
    NVIC_SetPriority(USART2_IRQn, 14); // Đặt mức ưu tiên
 80025ac:	210e      	movs	r1, #14
 80025ae:	2026      	movs	r0, #38	@ 0x26
 80025b0:	f7ff ff3a 	bl	8002428 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 80025b4:	2026      	movs	r0, #38	@ 0x26
 80025b6:	f7ff fef5 	bl	80023a4 <__NVIC_EnableIRQ>

    // 10. Bật UART
    USART2->CR1 |= USART_CR1_UE;
 80025ba:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <UART2_Init+0x15c>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	4a06      	ldr	r2, [pc, #24]	@ (80025d8 <UART2_Init+0x15c>)
 80025c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025c4:	60d3      	str	r3, [r2, #12]
}
 80025c6:	bf00      	nop
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40004400 	.word	0x40004400
 80025dc:	0280de80 	.word	0x0280de80
 80025e0:	51eb851f 	.word	0x51eb851f
 80025e4:	200002e0 	.word	0x200002e0
 80025e8:	200002e2 	.word	0x200002e2
 80025ec:	200002e4 	.word	0x200002e4
 80025f0:	20000368 	.word	0x20000368
 80025f4:	2000036a 	.word	0x2000036a
 80025f8:	2000036c 	.word	0x2000036c
 80025fc:	2000036e 	.word	0x2000036e

08002600 <UART2_SendBuffer_IT>:

bool UART2_SendBuffer_IT(const uint8_t* buffer, uint16_t length) {
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
    if (length == 0) return true;
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <UART2_SendBuffer_IT+0x16>
 8002612:	2301      	movs	r3, #1
 8002614:	e04b      	b.n	80026ae <UART2_SendBuffer_IT+0xae>
    if (g_uart2_tx_busy || (UART2_TX_BUFFER_SIZE - g_uart2_tx_buffer_count) < length) {
 8002616:	4b29      	ldr	r3, [pc, #164]	@ (80026bc <UART2_SendBuffer_IT+0xbc>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <UART2_SendBuffer_IT+0x30>
 8002620:	4b27      	ldr	r3, [pc, #156]	@ (80026c0 <UART2_SendBuffer_IT+0xc0>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	f1c3 0280 	rsb	r2, r3, #128	@ 0x80
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	429a      	cmp	r2, r3
 800262e:	da01      	bge.n	8002634 <UART2_SendBuffer_IT+0x34>
        return false;
 8002630:	2300      	movs	r3, #0
 8002632:	e03c      	b.n	80026ae <UART2_SendBuffer_IT+0xae>
    }

    // Tạm thời vô hiệu hóa ngắt TXE để cập nhật buffer an toàn
    USART2->CR1 &= ~USART_CR1_TXEIE;
 8002634:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <UART2_SendBuffer_IT+0xc4>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4a22      	ldr	r2, [pc, #136]	@ (80026c4 <UART2_SendBuffer_IT+0xc4>)
 800263a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800263e:	60d3      	str	r3, [r2, #12]

    for (uint16_t i = 0; i < length; i++) {
 8002640:	2300      	movs	r3, #0
 8002642:	81fb      	strh	r3, [r7, #14]
 8002644:	e019      	b.n	800267a <UART2_SendBuffer_IT+0x7a>
        g_uart2_tx_buffer[g_uart2_tx_buffer_tail] = buffer[i];
 8002646:	89fb      	ldrh	r3, [r7, #14]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	4a1e      	ldr	r2, [pc, #120]	@ (80026c8 <UART2_SendBuffer_IT+0xc8>)
 800264e:	8812      	ldrh	r2, [r2, #0]
 8002650:	b292      	uxth	r2, r2
 8002652:	7819      	ldrb	r1, [r3, #0]
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <UART2_SendBuffer_IT+0xcc>)
 8002656:	5499      	strb	r1, [r3, r2]
        g_uart2_tx_buffer_tail = (g_uart2_tx_buffer_tail + 1) % UART2_TX_BUFFER_SIZE;
 8002658:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <UART2_SendBuffer_IT+0xc8>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	3301      	adds	r3, #1
 8002660:	425a      	negs	r2, r3
 8002662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002666:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800266a:	bf58      	it	pl
 800266c:	4253      	negpl	r3, r2
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <UART2_SendBuffer_IT+0xc8>)
 8002672:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 8002674:	89fb      	ldrh	r3, [r7, #14]
 8002676:	3301      	adds	r3, #1
 8002678:	81fb      	strh	r3, [r7, #14]
 800267a:	89fa      	ldrh	r2, [r7, #14]
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	429a      	cmp	r2, r3
 8002680:	d3e1      	bcc.n	8002646 <UART2_SendBuffer_IT+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8002682:	b672      	cpsid	i
}
 8002684:	bf00      	nop
    }
    // đảm bảo critical section
    __disable_irq(); // Critical section
    g_uart2_tx_buffer_count += length;
 8002686:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <UART2_SendBuffer_IT+0xc0>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29a      	uxth	r2, r3
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	4413      	add	r3, r2
 8002690:	b29a      	uxth	r2, r3
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <UART2_SendBuffer_IT+0xc0>)
 8002694:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_busy = true;
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <UART2_SendBuffer_IT+0xbc>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800269c:	b662      	cpsie	i
}
 800269e:	bf00      	nop
    __enable_irq();  // End critical section

    // Kích hoạt ngắt TXE để bắt đầu gửi byte đầu tiên từ ISR
    USART2->CR1 |= USART_CR1_TXEIE;
 80026a0:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <UART2_SendBuffer_IT+0xc4>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a07      	ldr	r2, [pc, #28]	@ (80026c4 <UART2_SendBuffer_IT+0xc4>)
 80026a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026aa:	60d3      	str	r3, [r2, #12]

    return true;
 80026ac:	2301      	movs	r3, #1
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	2000036e 	.word	0x2000036e
 80026c0:	2000036c 	.word	0x2000036c
 80026c4:	40004400 	.word	0x40004400
 80026c8:	2000036a 	.word	0x2000036a
 80026cc:	200002e8 	.word	0x200002e8

080026d0 <UART2_ReadByte_FromBuffer>:

bool UART2_IsTxBusy(void) {
    return g_uart2_tx_busy;
}

bool UART2_ReadByte_FromBuffer(uint8_t* data) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
    if (g_uart2_rx_buffer_count == 0) {
 80026d8:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <UART2_ReadByte_FromBuffer+0x68>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <UART2_ReadByte_FromBuffer+0x16>
        return false; // Buffer rỗng
 80026e2:	2300      	movs	r3, #0
 80026e4:	e024      	b.n	8002730 <UART2_ReadByte_FromBuffer+0x60>
    }

    // Vô hiệu hóa chỉ ngắt UART2 thay vì tất cả các ngắt
    NVIC_DisableIRQ(USART2_IRQn);
 80026e6:	2026      	movs	r0, #38	@ 0x26
 80026e8:	f7ff fe7a 	bl	80023e0 <__NVIC_DisableIRQ>
    
    *data = g_uart2_rx_buffer[g_uart2_rx_buffer_head];
 80026ec:	4b13      	ldr	r3, [pc, #76]	@ (800273c <UART2_ReadByte_FromBuffer+0x6c>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <UART2_ReadByte_FromBuffer+0x70>)
 80026f6:	5c9b      	ldrb	r3, [r3, r2]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	701a      	strb	r2, [r3, #0]
    g_uart2_rx_buffer_head = (g_uart2_rx_buffer_head + 1) % UART2_RX_BUFFER_SIZE;
 80026fe:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <UART2_ReadByte_FromBuffer+0x6c>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	425a      	negs	r2, r3
 8002708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800270c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002710:	bf58      	it	pl
 8002712:	4253      	negpl	r3, r2
 8002714:	b29a      	uxth	r2, r3
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <UART2_ReadByte_FromBuffer+0x6c>)
 8002718:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_count--;
 800271a:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <UART2_ReadByte_FromBuffer+0x68>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <UART2_ReadByte_FromBuffer+0x68>)
 8002726:	801a      	strh	r2, [r3, #0]
    
    // Kích hoạt lại ngắt UART2
    NVIC_EnableIRQ(USART2_IRQn);
 8002728:	2026      	movs	r0, #38	@ 0x26
 800272a:	f7ff fe3b 	bl	80023a4 <__NVIC_EnableIRQ>

    return true;
 800272e:	2301      	movs	r3, #1
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	200002e4 	.word	0x200002e4
 800273c:	200002e0 	.word	0x200002e0
 8002740:	20000260 	.word	0x20000260

08002744 <USART2_IRQHandler>:
    __disable_irq();
    g_uart2_error_flags &= ~flags;
    __enable_irq();
}

void USART2_IRQHandler(void) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
    uint32_t sr_reg = USART2->SR; // Đọc thanh ghi SR một lần
 800274a:	4b6e      	ldr	r3, [pc, #440]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]

    // --- Xử lý ngắt RXNE (Receive Data Register Not Empty) ---
    if ((sr_reg & USART_SR_RXNE) && (USART2->CR1 & USART_CR1_RXNEIE)) {
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d032      	beq.n	80027c0 <USART2_IRQHandler+0x7c>
 800275a:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	d02c      	beq.n	80027c0 <USART2_IRQHandler+0x7c>
        uint8_t received_byte = (uint8_t)(USART2->DR & 0xFFU);
 8002766:	4b67      	ldr	r3, [pc, #412]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	72fb      	strb	r3, [r7, #11]

        if (g_uart2_rx_buffer_count < UART2_RX_BUFFER_SIZE) {
 800276c:	4b66      	ldr	r3, [pc, #408]	@ (8002908 <USART2_IRQHandler+0x1c4>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b7f      	cmp	r3, #127	@ 0x7f
 8002774:	d81c      	bhi.n	80027b0 <USART2_IRQHandler+0x6c>
            g_uart2_rx_buffer[g_uart2_rx_buffer_tail] = received_byte;
 8002776:	4b65      	ldr	r3, [pc, #404]	@ (800290c <USART2_IRQHandler+0x1c8>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	4a64      	ldr	r2, [pc, #400]	@ (8002910 <USART2_IRQHandler+0x1cc>)
 8002780:	7afb      	ldrb	r3, [r7, #11]
 8002782:	5453      	strb	r3, [r2, r1]
            g_uart2_rx_buffer_tail = (g_uart2_rx_buffer_tail + 1) % UART2_RX_BUFFER_SIZE;
 8002784:	4b61      	ldr	r3, [pc, #388]	@ (800290c <USART2_IRQHandler+0x1c8>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	3301      	adds	r3, #1
 800278c:	425a      	negs	r2, r3
 800278e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002792:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002796:	bf58      	it	pl
 8002798:	4253      	negpl	r3, r2
 800279a:	b29a      	uxth	r2, r3
 800279c:	4b5b      	ldr	r3, [pc, #364]	@ (800290c <USART2_IRQHandler+0x1c8>)
 800279e:	801a      	strh	r2, [r3, #0]
            g_uart2_rx_buffer_count++;
 80027a0:	4b59      	ldr	r3, [pc, #356]	@ (8002908 <USART2_IRQHandler+0x1c4>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	4b57      	ldr	r3, [pc, #348]	@ (8002908 <USART2_IRQHandler+0x1c4>)
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	e007      	b.n	80027c0 <USART2_IRQHandler+0x7c>
        } else {
            // Buffer RX đầy, đánh dấu lỗi bằng cách thêm cờ
            g_uart2_error_flags |= UART_ERROR_BUFFER_FULL;
 80027b0:	4b58      	ldr	r3, [pc, #352]	@ (8002914 <USART2_IRQHandler+0x1d0>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f043 0310 	orr.w	r3, r3, #16
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	4b55      	ldr	r3, [pc, #340]	@ (8002914 <USART2_IRQHandler+0x1d0>)
 80027be:	701a      	strb	r2, [r3, #0]
        }
        // Cờ RXNE tự xóa khi đọc DR.
    }

    // --- Xử lý ngắt TXE (Transmit Data Register Empty) ---
    if ((sr_reg & USART_SR_TXE) && (USART2->CR1 & USART_CR1_TXEIE)) {
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d039      	beq.n	800283e <USART2_IRQHandler+0xfa>
 80027ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d033      	beq.n	800283e <USART2_IRQHandler+0xfa>
        if (g_uart2_tx_buffer_count > 0) {
 80027d6:	4b50      	ldr	r3, [pc, #320]	@ (8002918 <USART2_IRQHandler+0x1d4>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d02e      	beq.n	800283e <USART2_IRQHandler+0xfa>
            USART2->DR = g_uart2_tx_buffer[g_uart2_tx_buffer_head];
 80027e0:	4b4e      	ldr	r3, [pc, #312]	@ (800291c <USART2_IRQHandler+0x1d8>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002920 <USART2_IRQHandler+0x1dc>)
 80027ea:	5c9b      	ldrb	r3, [r3, r2]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4b45      	ldr	r3, [pc, #276]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 80027f0:	605a      	str	r2, [r3, #4]
            g_uart2_tx_buffer_head = (g_uart2_tx_buffer_head + 1) % UART2_TX_BUFFER_SIZE;
 80027f2:	4b4a      	ldr	r3, [pc, #296]	@ (800291c <USART2_IRQHandler+0x1d8>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3301      	adds	r3, #1
 80027fa:	425a      	negs	r2, r3
 80027fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002800:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002804:	bf58      	it	pl
 8002806:	4253      	negpl	r3, r2
 8002808:	b29a      	uxth	r2, r3
 800280a:	4b44      	ldr	r3, [pc, #272]	@ (800291c <USART2_IRQHandler+0x1d8>)
 800280c:	801a      	strh	r2, [r3, #0]
            g_uart2_tx_buffer_count--;
 800280e:	4b42      	ldr	r3, [pc, #264]	@ (8002918 <USART2_IRQHandler+0x1d4>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	4b3f      	ldr	r3, [pc, #252]	@ (8002918 <USART2_IRQHandler+0x1d4>)
 800281a:	801a      	strh	r2, [r3, #0]

            if (g_uart2_tx_buffer_count == 0) {
 800281c:	4b3e      	ldr	r3, [pc, #248]	@ (8002918 <USART2_IRQHandler+0x1d4>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10b      	bne.n	800283e <USART2_IRQHandler+0xfa>
                // Đã gửi hết buffer, tắt ngắt TXE
                USART2->CR1 &= ~USART_CR1_TXEIE;
 8002826:	4b37      	ldr	r3, [pc, #220]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	4a36      	ldr	r2, [pc, #216]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 800282c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002830:	60d3      	str	r3, [r2, #12]
                // Bật ngắt TC (Transmission Complete) để biết khi nào byte cuối cùng thực sự ra khỏi shift register
                USART2->CR1 |= USART_CR1_TCIE;
 8002832:	4b34      	ldr	r3, [pc, #208]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a33      	ldr	r2, [pc, #204]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 8002838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800283c:	60d3      	str	r3, [r2, #12]
        }
        // Cờ TXE tự xóa khi ghi vào DR.
    }

    // --- Xử lý ngắt TC (Transmission Complete) ---
    if ((sr_reg & USART_SR_TC) && (USART2->CR1 & USART_CR1_TCIE)) {
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01b      	beq.n	8002880 <USART2_IRQHandler+0x13c>
 8002848:	4b2e      	ldr	r3, [pc, #184]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <USART2_IRQHandler+0x13c>
        // Byte cuối cùng đã được gửi hoàn toàn
        USART2->CR1 &= ~USART_CR1_TCIE; // Tắt ngắt TC
 8002854:	4b2b      	ldr	r3, [pc, #172]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a2a      	ldr	r2, [pc, #168]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 800285a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800285e:	60d3      	str	r3, [r2, #12]
        g_uart2_tx_busy = false;      // Đánh dấu  không còn bận gửi
 8002860:	4b30      	ldr	r3, [pc, #192]	@ (8002924 <USART2_IRQHandler+0x1e0>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]

        if (g_uart2_tx_complete_callback != NULL) {
 8002866:	4b30      	ldr	r3, [pc, #192]	@ (8002928 <USART2_IRQHandler+0x1e4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <USART2_IRQHandler+0x130>
            g_uart2_tx_complete_callback();
 800286e:	4b2e      	ldr	r3, [pc, #184]	@ (8002928 <USART2_IRQHandler+0x1e4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4798      	blx	r3
        }
        // Cờ TC được xóa bằng cách ghi 0 vào nó (hoặc đọc SR rồi ghi vào DR - nhưng ở đây đã xong TX)
        USART2->SR &= ~USART_SR_TC; // Xóa cờ TC
 8002874:	4b23      	ldr	r3, [pc, #140]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a22      	ldr	r2, [pc, #136]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 800287a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800287e:	6013      	str	r3, [r2, #0]
    }


    // --- Xử lý các cờ lỗi (Overrun, Noise, Framing, Parity) ---
    if (sr_reg & (USART_SR_ORE | USART_SR_NE | USART_SR_FE | USART_SR_PE)) {
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	2b00      	cmp	r3, #0
 8002888:	d037      	beq.n	80028fa <USART2_IRQHandler+0x1b6>
        // Lưu lại lỗi để ứng dụng có thể kiểm tra
        if (sr_reg & USART_SR_ORE) g_uart2_error_flags |= UART_ERROR_OVERRUN;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <USART2_IRQHandler+0x160>
 8002894:	4b1f      	ldr	r3, [pc, #124]	@ (8002914 <USART2_IRQHandler+0x1d0>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002914 <USART2_IRQHandler+0x1d0>)
 80028a2:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_NE) g_uart2_error_flags |= UART_ERROR_NOISE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <USART2_IRQHandler+0x17a>
 80028ae:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <USART2_IRQHandler+0x1d0>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4b16      	ldr	r3, [pc, #88]	@ (8002914 <USART2_IRQHandler+0x1d0>)
 80028bc:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_FE) g_uart2_error_flags |= UART_ERROR_FRAMING;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <USART2_IRQHandler+0x194>
 80028c8:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <USART2_IRQHandler+0x1d0>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <USART2_IRQHandler+0x1d0>)
 80028d6:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_PE) g_uart2_error_flags |= UART_ERROR_PARITY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <USART2_IRQHandler+0x1ae>
 80028e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <USART2_IRQHandler+0x1d0>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f043 0308 	orr.w	r3, r3, #8
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <USART2_IRQHandler+0x1d0>)
 80028f0:	701a      	strb	r2, [r3, #0]
        
        // Đọc DR để xóa cờ lỗi
        volatile uint32_t temp_dr = USART2->DR;
 80028f2:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <USART2_IRQHandler+0x1c0>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	607b      	str	r3, [r7, #4]
        (void)temp_dr; // Tránh warning
 80028f8:	687b      	ldr	r3, [r7, #4]
    }
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40004400 	.word	0x40004400
 8002908:	200002e4 	.word	0x200002e4
 800290c:	200002e2 	.word	0x200002e2
 8002910:	20000260 	.word	0x20000260
 8002914:	20000374 	.word	0x20000374
 8002918:	2000036c 	.word	0x2000036c
 800291c:	20000368 	.word	0x20000368
 8002920:	200002e8 	.word	0x200002e8
 8002924:	2000036e 	.word	0x2000036e
 8002928:	20000370 	.word	0x20000370

0800292c <LightService_Init>:
// --- Biến nội bộ lưu trữ thông tin chân GPIO và trạng thái đèn ---
static GPIO_TypeDef* g_light_relay_port = NULL;
static uint16_t      g_light_relay_pin_mask = 0;  // Sẽ là (1U << pin_number)
static bool          g_is_light_on = false;     // Trạng thái hiện tại của đèn

void LightService_Init(GPIO_TypeDef* light_relay_port, uint8_t light_relay_pin_number) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af04      	add	r7, sp, #16
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
    if (light_relay_port == NULL || light_relay_pin_number > 15) {
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d026      	beq.n	800298c <LightService_Init+0x60>
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d823      	bhi.n	800298c <LightService_Init+0x60>
        return;
    }

    g_light_relay_port = light_relay_port;
 8002944:	4a13      	ldr	r2, [pc, #76]	@ (8002994 <LightService_Init+0x68>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6013      	str	r3, [r2, #0]
    g_light_relay_pin_mask = (1U << light_relay_pin_number);
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	2201      	movs	r2, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <LightService_Init+0x6c>)
 8002956:	801a      	strh	r2, [r3, #0]

    // Cấu hình chân GPIO làm output, push-pull, không pull, tốc độ thấp
    // GPIO_ClockCmd sẽ được gọi bên trong GPIO_InitPin
    GPIO_InitPin(g_light_relay_port, g_light_relay_pin_mask,
 8002958:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <LightService_Init+0x68>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <LightService_Init+0x6c>)
 800295e:	8819      	ldrh	r1, [r3, #0]
 8002960:	2300      	movs	r3, #0
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	2300      	movs	r3, #0
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	2300      	movs	r3, #0
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2300      	movs	r3, #0
 800296e:	2201      	movs	r2, #1
 8002970:	f7ff f8b0 	bl	8001ad4 <GPIO_InitPin>
                 GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW,
                 GPIO_OTYPE_PUSHPULL, 0); // AF không dùng

    // Đặt trạng thái ban đầu cho relay
    GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_INACTIVE_LEVEL);
 8002974:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <LightService_Init+0x68>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a07      	ldr	r2, [pc, #28]	@ (8002998 <LightService_Init+0x6c>)
 800297a:	8811      	ldrh	r1, [r2, #0]
 800297c:	2200      	movs	r2, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff f97a 	bl	8001c78 <GPIO_WritePin>
    g_is_light_on = false;
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <LightService_Init+0x70>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e000      	b.n	800298e <LightService_Init+0x62>
        return;
 800298c:	bf00      	nop
}
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000378 	.word	0x20000378
 8002998:	2000037c 	.word	0x2000037c
 800299c:	2000037e 	.word	0x2000037e

080029a0 <LightService_TurnOn>:

void LightService_TurnOn(void) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
    if (g_light_relay_port != NULL) {
 80029a4:	4b08      	ldr	r3, [pc, #32]	@ (80029c8 <LightService_TurnOn+0x28>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <LightService_TurnOn+0x22>
        GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_ACTIVE_LEVEL);
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <LightService_TurnOn+0x28>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a06      	ldr	r2, [pc, #24]	@ (80029cc <LightService_TurnOn+0x2c>)
 80029b2:	8811      	ldrh	r1, [r2, #0]
 80029b4:	2201      	movs	r2, #1
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f95e 	bl	8001c78 <GPIO_WritePin>
        g_is_light_on = true;
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <LightService_TurnOn+0x30>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
    }
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000378 	.word	0x20000378
 80029cc:	2000037c 	.word	0x2000037c
 80029d0:	2000037e 	.word	0x2000037e

080029d4 <LightService_TurnOff>:

void LightService_TurnOff(void) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
    if (g_light_relay_port != NULL) {
 80029d8:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <LightService_TurnOff+0x28>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <LightService_TurnOff+0x22>
        GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_INACTIVE_LEVEL);
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <LightService_TurnOff+0x28>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a06      	ldr	r2, [pc, #24]	@ (8002a00 <LightService_TurnOff+0x2c>)
 80029e6:	8811      	ldrh	r1, [r2, #0]
 80029e8:	2200      	movs	r2, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f944 	bl	8001c78 <GPIO_WritePin>
        g_is_light_on = false;
 80029f0:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <LightService_TurnOff+0x30>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
    }
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000378 	.word	0x20000378
 8002a00:	2000037c 	.word	0x2000037c
 8002a04:	2000037e 	.word	0x2000037e

08002a08 <LightService_GetState>:

bool LightService_GetState(void) {
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
    return g_is_light_on;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	@ (8002a1c <LightService_GetState+0x14>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000037e 	.word	0x2000037e

08002a20 <ls_open_exti_handler>:

// Giả định: Công tắc là ACTIVE LOW (khi nhấn thì nối với GND, dùng PULL_UP nội)
#define LIMIT_SWITCH_ACTIVE_LEVEL GPIO_PIN_RESET // 0

// Callback cho công tắc "Cửa Mở Hoàn Toàn"
static void ls_open_exti_handler(uint8_t exti_line) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
    (void)exti_line; // Tránh warning
    LimitSwitch_Internal_t* ls = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN];
 8002a2a:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <ls_open_exti_handler+0x50>)
 8002a2c:	60fb      	str	r3, [r7, #12]

    // Đọc trạng thái thô của pin ngay lập tức
    ls->last_raw_pin_state = GPIO_ReadPin(ls->port, (1U << ls->pin_number));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	791b      	ldrb	r3, [r3, #4]
 8002a36:	4619      	mov	r1, r3
 8002a38:	2301      	movs	r3, #1
 8002a3a:	408b      	lsls	r3, r1
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f7ff f904 	bl	8001c4e <GPIO_ReadPin>
 8002a46:	4603      	mov	r3, r0
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	731a      	strb	r2, [r3, #12]

    // Nếu đang IDLE (chưa debounce), bắt đầu quá trình debounce
    if (ls->debounce_state == DEBOUNCE_STATE_IDLE) {
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	79db      	ldrb	r3, [r3, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d107      	bne.n	8002a66 <ls_open_exti_handler+0x46>
        ls->debounce_state = DEBOUNCE_STATE_WAITING;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	71da      	strb	r2, [r3, #7]
        ls->debounce_start_tick = GetTick();
 8002a5c:	f7ff fc82 	bl	8002364 <GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	609a      	str	r2, [r3, #8]
    }
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000380 	.word	0x20000380

08002a74 <ls_closed_exti_handler>:

// Callback cho công tắc "Cửa Đóng Hoàn Toàn"
static void ls_closed_exti_handler(uint8_t exti_line) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
    (void)exti_line;
    LimitSwitch_Internal_t* ls = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED];
 8002a7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <ls_closed_exti_handler+0x50>)
 8002a80:	60fb      	str	r3, [r7, #12]
    ls->last_raw_pin_state = GPIO_ReadPin(ls->port, (1U << ls->pin_number));
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	791b      	ldrb	r3, [r3, #4]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	408b      	lsls	r3, r1
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	4619      	mov	r1, r3
 8002a94:	4610      	mov	r0, r2
 8002a96:	f7ff f8da 	bl	8001c4e <GPIO_ReadPin>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	731a      	strb	r2, [r3, #12]
    if (ls->debounce_state == DEBOUNCE_STATE_IDLE) {
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	79db      	ldrb	r3, [r3, #7]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d107      	bne.n	8002aba <ls_closed_exti_handler+0x46>
        ls->debounce_state = DEBOUNCE_STATE_WAITING;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	71da      	strb	r2, [r3, #7]
        ls->debounce_start_tick = GetTick();
 8002ab0:	f7ff fc58 	bl	8002364 <GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	609a      	str	r2, [r3, #8]
    }
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000390 	.word	0x20000390

08002ac8 <LimitSwitchService_Init>:

void LimitSwitchService_Init(GPIO_TypeDef* open_ls_port, uint8_t open_ls_pin_number,
                             GPIO_TypeDef* closed_ls_port, uint8_t closed_ls_pin_number,
                             uint8_t nvic_priority) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	72fb      	strb	r3, [r7, #11]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	72bb      	strb	r3, [r7, #10]
    // --- Cấu hình cho Công tắc Cửa Mở ---
    LimitSwitch_Internal_t* ls_open = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN];
 8002adc:	4b39      	ldr	r3, [pc, #228]	@ (8002bc4 <LimitSwitchService_Init+0xfc>)
 8002ade:	617b      	str	r3, [r7, #20]
    ls_open->port = open_ls_port;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	601a      	str	r2, [r3, #0]
    ls_open->pin_number = open_ls_pin_number;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	7afa      	ldrb	r2, [r7, #11]
 8002aea:	711a      	strb	r2, [r3, #4]
    ls_open->exti_line = open_ls_pin_number; // EXTI line thường trùng pin_number
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	7afa      	ldrb	r2, [r7, #11]
 8002af0:	715a      	strb	r2, [r3, #5]
    ls_open->current_stable_state = (GPIO_ReadPin(ls_open->port, (1U << ls_open->pin_number)) == LIMIT_SWITCH_ACTIVE_LEVEL); // Đọc trạng thái ban đầu
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	791b      	ldrb	r3, [r3, #4]
 8002afa:	4619      	mov	r1, r3
 8002afc:	2301      	movs	r3, #1
 8002afe:	408b      	lsls	r3, r1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f7ff f8a2 	bl	8001c4e <GPIO_ReadPin>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	719a      	strb	r2, [r3, #6]
    ls_open->debounce_state = DEBOUNCE_STATE_IDLE;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	71da      	strb	r2, [r3, #7]
    ls_open->debounce_start_tick = 0;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
    ls_open->last_raw_pin_state = (ls_open->current_stable_state ? LIMIT_SWITCH_ACTIVE_LEVEL : !LIMIT_SWITCH_ACTIVE_LEVEL);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	799b      	ldrb	r3, [r3, #6]
 8002b2a:	f083 0301 	eor.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	731a      	strb	r2, [r3, #12]

    // EXTI_InitPin sẽ cấu hình GPIO là input, PULL_UP vì công tắc active LOW.
    // Trigger trên cả hai sườn để bắt đầu debounce khi có bất kỳ thay đổi nào.
    EXTI_InitPin(ls_open->port, ls_open->pin_number, EXTI_TRIGGER_BOTH,
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	7919      	ldrb	r1, [r3, #4]
 8002b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b42:	4a21      	ldr	r2, [pc, #132]	@ (8002bc8 <LimitSwitchService_Init+0x100>)
 8002b44:	9200      	str	r2, [sp, #0]
 8002b46:	2203      	movs	r2, #3
 8002b48:	f7fe fdde 	bl	8001708 <EXTI_InitPin>
                 nvic_priority, ls_open_exti_handler);


    // --- Cấu hình cho Công tắc Cửa Đóng ---
    LimitSwitch_Internal_t* ls_closed = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED];
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bcc <LimitSwitchService_Init+0x104>)
 8002b4e:	613b      	str	r3, [r7, #16]
    ls_closed->port = closed_ls_port;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
    ls_closed->pin_number = closed_ls_pin_number;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	7aba      	ldrb	r2, [r7, #10]
 8002b5a:	711a      	strb	r2, [r3, #4]
    ls_closed->exti_line = closed_ls_pin_number;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	7aba      	ldrb	r2, [r7, #10]
 8002b60:	715a      	strb	r2, [r3, #5]
    ls_closed->current_stable_state = (GPIO_ReadPin(ls_closed->port, (1U << ls_closed->pin_number)) == LIMIT_SWITCH_ACTIVE_LEVEL);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	791b      	ldrb	r3, [r3, #4]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	408b      	lsls	r3, r1
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f7ff f86a 	bl	8001c4e <GPIO_ReadPin>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	719a      	strb	r2, [r3, #6]
    ls_closed->debounce_state = DEBOUNCE_STATE_IDLE;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	71da      	strb	r2, [r3, #7]
    ls_closed->debounce_start_tick = 0;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
    ls_closed->last_raw_pin_state = (ls_closed->current_stable_state ? LIMIT_SWITCH_ACTIVE_LEVEL : !LIMIT_SWITCH_ACTIVE_LEVEL);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	799b      	ldrb	r3, [r3, #6]
 8002b9a:	f083 0301 	eor.w	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	731a      	strb	r2, [r3, #12]

    EXTI_InitPin(ls_closed->port, ls_closed->pin_number, EXTI_TRIGGER_BOTH,
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	7919      	ldrb	r1, [r3, #4]
 8002bae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bb2:	4a07      	ldr	r2, [pc, #28]	@ (8002bd0 <LimitSwitchService_Init+0x108>)
 8002bb4:	9200      	str	r2, [sp, #0]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	f7fe fda6 	bl	8001708 <EXTI_InitPin>
                 nvic_priority, ls_closed_exti_handler);
}
 8002bbc:	bf00      	nop
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000380 	.word	0x20000380
 8002bc8:	08002a21 	.word	0x08002a21
 8002bcc:	20000390 	.word	0x20000390
 8002bd0:	08002a75 	.word	0x08002a75

08002bd4 <LimitSwitchService_ProcessDebounce>:

void LimitSwitchService_ProcessDebounce(void) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
    for (int i = 0; i < LIMIT_SWITCH_COUNT; ++i) {
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e025      	b.n	8002c2c <LimitSwitchService_ProcessDebounce+0x58>
        LimitSwitch_Internal_t* ls = &g_limit_switches[i];
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	4a15      	ldr	r2, [pc, #84]	@ (8002c3c <LimitSwitchService_ProcessDebounce+0x68>)
 8002be6:	4413      	add	r3, r2
 8002be8:	60bb      	str	r3, [r7, #8]

        if (ls->debounce_state == DEBOUNCE_STATE_WAITING) {
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	79db      	ldrb	r3, [r3, #7]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d119      	bne.n	8002c26 <LimitSwitchService_ProcessDebounce+0x52>
            if ((GetTick() - ls->debounce_start_tick) >= DEBOUNCE_TIME_MS) {
 8002bf2:	f7ff fbb7 	bl	8002364 <GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b31      	cmp	r3, #49	@ 0x31
 8002c00:	d911      	bls.n	8002c26 <LimitSwitchService_ProcessDebounce+0x52>
                // Thời gian debounce đã hết.
                // Sử dụng trạng thái pin cuối cùng được ghi nhận bởi ISR.
                // ISR đã cập nhật ls->last_raw_pin_state với mỗi lần trigger ngắt.
                // Vì vậy, sau DEBOUNCE_TIME_MS, ls->last_raw_pin_state
                // sẽ giữ trạng thái của lần trigger cuối cùng trong khoảng thời gian đó.
                bool new_stable_state = (ls->last_raw_pin_state == LIMIT_SWITCH_ACTIVE_LEVEL);
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	7b1b      	ldrb	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bf0c      	ite	eq
 8002c0a:	2301      	moveq	r3, #1
 8002c0c:	2300      	movne	r3, #0
 8002c0e:	71fb      	strb	r3, [r7, #7]

                if (ls->current_stable_state != new_stable_state) {
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	799b      	ldrb	r3, [r3, #6]
 8002c14:	79fa      	ldrb	r2, [r7, #7]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d002      	beq.n	8002c20 <LimitSwitchService_ProcessDebounce+0x4c>
                    ls->current_stable_state = new_stable_state;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	79fa      	ldrb	r2, [r7, #7]
 8002c1e:	719a      	strb	r2, [r3, #6]
                    // TODO: Có thể gọi một callback ở đây để báo cho Application biết
                    // trạng thái công tắc đã thay đổi ổn định.
                    // Ví dụ: if (ls_state_change_callback[i]) ls_state_change_callback[i](ls->current_stable_state);
                }
                ls->debounce_state = DEBOUNCE_STATE_IDLE; // Quay lại chờ ngắt tiếp theo
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	71da      	strb	r2, [r3, #7]
    for (int i = 0; i < LIMIT_SWITCH_COUNT; ++i) {
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	ddd6      	ble.n	8002be0 <LimitSwitchService_ProcessDebounce+0xc>
            }
        }
    }
}
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000380 	.word	0x20000380

08002c40 <LimitSwitchService_IsDoorFullyOpen>:

bool LimitSwitchService_IsDoorFullyOpen(void) {
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c46:	b672      	cpsid	i
}
 8002c48:	bf00      	nop
    bool state;
    __disable_irq(); // critical section
    state = g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN].current_stable_state;
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <LimitSwitchService_IsDoorFullyOpen+0x24>)
 8002c4c:	799b      	ldrb	r3, [r3, #6]
 8002c4e:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c50:	b662      	cpsie	i
}
 8002c52:	bf00      	nop
    __enable_irq();
    return state;
 8002c54:	79fb      	ldrb	r3, [r7, #7]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000380 	.word	0x20000380

08002c68 <LimitSwitchService_IsDoorFullyClosed>:

bool LimitSwitchService_IsDoorFullyClosed(void) {
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c6e:	b672      	cpsid	i
}
 8002c70:	bf00      	nop
    bool state;
    __disable_irq();
    state = g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED].current_stable_state;
 8002c72:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <LimitSwitchService_IsDoorFullyClosed+0x24>)
 8002c74:	7d9b      	ldrb	r3, [r3, #22]
 8002c76:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c78:	b662      	cpsie	i
}
 8002c7a:	bf00      	nop
    __enable_irq();
    return state;
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000380 	.word	0x20000380

08002c90 <Motor_Init>:
static uint16_t      g_motor_dir1_pin_mask = 0;
static GPIO_TypeDef* g_motor_dir2_port = NULL;
static uint16_t      g_motor_dir2_pin_mask = 0;

void Motor_Init(GPIO_TypeDef* dir_1_port, uint8_t dir_1_pin_number,
                GPIO_TypeDef* dir_2_port, uint8_t dir_2_pin_number) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af04      	add	r7, sp, #16
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	72fb      	strb	r3, [r7, #11]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	72bb      	strb	r3, [r7, #10]
    // Lưu thông tin chân điều khiển hướng
    g_motor_dir1_port = dir_1_port;
 8002ca4:	4a21      	ldr	r2, [pc, #132]	@ (8002d2c <Motor_Init+0x9c>)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6013      	str	r3, [r2, #0]
    g_motor_dir1_pin_mask = (1U << dir_1_pin_number);
 8002caa:	7afb      	ldrb	r3, [r7, #11]
 8002cac:	2201      	movs	r2, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d30 <Motor_Init+0xa0>)
 8002cb6:	801a      	strh	r2, [r3, #0]
    g_motor_dir2_port = dir_2_port;
 8002cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d34 <Motor_Init+0xa4>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6013      	str	r3, [r2, #0]
    g_motor_dir2_pin_mask = (1U << dir_2_pin_number);
 8002cbe:	7abb      	ldrb	r3, [r7, #10]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <Motor_Init+0xa8>)
 8002cca:	801a      	strh	r2, [r3, #0]

    // Khởi tạo chân PWM
    PWM_InitChannel(MOTOR_PWM_TIMER, MOTOR_PWM_CHANNEL, MOTOR_PWM_FREQ_HZ,
 8002ccc:	2302      	movs	r3, #2
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	2306      	movs	r3, #6
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <Motor_Init+0xac>)
 8002cd6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002cda:	2101      	movs	r1, #1
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f7ff f84b 	bl	8001d78 <PWM_InitChannel>
                    MOTOR_PWM_GPIO_PORT, MOTOR_PWM_GPIO_PIN, MOTOR_PWM_AF);
    
    // Khởi tạo các chân điều khiển hướng là output
    GPIO_InitPin(g_motor_dir1_port, g_motor_dir1_pin_mask,
 8002ce2:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <Motor_Init+0x9c>)
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <Motor_Init+0xa0>)
 8002ce8:	8819      	ldrh	r1, [r3, #0]
 8002cea:	2300      	movs	r3, #0
 8002cec:	9302      	str	r3, [sp, #8]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f7fe feeb 	bl	8001ad4 <GPIO_InitPin>
                 GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW,
                 GPIO_OTYPE_PUSHPULL, 0);
    GPIO_InitPin(g_motor_dir2_port, g_motor_dir2_pin_mask,
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002d34 <Motor_Init+0xa4>)
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	4b0d      	ldr	r3, [pc, #52]	@ (8002d38 <Motor_Init+0xa8>)
 8002d04:	8819      	ldrh	r1, [r3, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	9302      	str	r3, [sp, #8]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	2300      	movs	r3, #0
 8002d14:	2201      	movs	r2, #1
 8002d16:	f7fe fedd 	bl	8001ad4 <GPIO_InitPin>
                 GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW,
                 GPIO_OTYPE_PUSHPULL, 0);

    Motor_Stop(); // Đặt trạng thái ban đầu là dừng và coast
 8002d1a:	f000 f88b 	bl	8002e34 <Motor_Stop>
    PWM_Start(MOTOR_PWM_TIMER);
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f7ff f9fa 	bl	8002118 <PWM_Start>
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200003a0 	.word	0x200003a0
 8002d30:	200003a4 	.word	0x200003a4
 8002d34:	200003a8 	.word	0x200003a8
 8002d38:	200003ac 	.word	0x200003ac
 8002d3c:	40020000 	.word	0x40020000

08002d40 <Motor_SetSpeed>:

void Motor_SetSpeed(float percent) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	ed87 0a01 	vstr	s0, [r7, #4]
    if (percent < 0.0f) percent = 0.0f;
 8002d4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d56:	d502      	bpl.n	8002d5e <Motor_SetSpeed+0x1e>
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
    if (percent > 100.0f) percent = 100.0f;
 8002d5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d62:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002d88 <Motor_SetSpeed+0x48>
 8002d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	dd01      	ble.n	8002d74 <Motor_SetSpeed+0x34>
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <Motor_SetSpeed+0x4c>)
 8002d72:	607b      	str	r3, [r7, #4]
    PWM_SetDutyCycle(MOTOR_PWM_TIMER, MOTOR_PWM_CHANNEL, percent);
 8002d74:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f7ff f946 	bl	800200c <PWM_SetDutyCycle>
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	42c80000 	.word	0x42c80000
 8002d8c:	42c80000 	.word	0x42c80000

08002d90 <Motor_SetDirection>:

void Motor_SetDirection(MotorDirection_t direction) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
    if (g_motor_dir1_port == NULL || g_motor_dir2_port == NULL) return;
 8002d9a:	4b22      	ldr	r3, [pc, #136]	@ (8002e24 <Motor_SetDirection+0x94>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03c      	beq.n	8002e1c <Motor_SetDirection+0x8c>
 8002da2:	4b21      	ldr	r3, [pc, #132]	@ (8002e28 <Motor_SetDirection+0x98>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d038      	beq.n	8002e1c <Motor_SetDirection+0x8c>

    switch (direction) {
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <Motor_SetDirection+0x26>
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d011      	beq.n	8002dd8 <Motor_SetDirection+0x48>
 8002db4:	e021      	b.n	8002dfa <Motor_SetDirection+0x6a>
        case MOTOR_FORWARD:
            GPIO_WritePin(g_motor_dir1_port, g_motor_dir1_pin_mask, GPIO_PIN_SET);
 8002db6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <Motor_SetDirection+0x94>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1c      	ldr	r2, [pc, #112]	@ (8002e2c <Motor_SetDirection+0x9c>)
 8002dbc:	8811      	ldrh	r1, [r2, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fe ff59 	bl	8001c78 <GPIO_WritePin>
            GPIO_WritePin(g_motor_dir2_port, g_motor_dir2_pin_mask, GPIO_PIN_RESET);
 8002dc6:	4b18      	ldr	r3, [pc, #96]	@ (8002e28 <Motor_SetDirection+0x98>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a19      	ldr	r2, [pc, #100]	@ (8002e30 <Motor_SetDirection+0xa0>)
 8002dcc:	8811      	ldrh	r1, [r2, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe ff51 	bl	8001c78 <GPIO_WritePin>
            break;
 8002dd6:	e022      	b.n	8002e1e <Motor_SetDirection+0x8e>
        case MOTOR_REVERSE:
            GPIO_WritePin(g_motor_dir1_port, g_motor_dir1_pin_mask, GPIO_PIN_RESET);
 8002dd8:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <Motor_SetDirection+0x94>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a13      	ldr	r2, [pc, #76]	@ (8002e2c <Motor_SetDirection+0x9c>)
 8002dde:	8811      	ldrh	r1, [r2, #0]
 8002de0:	2200      	movs	r2, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe ff48 	bl	8001c78 <GPIO_WritePin>
            GPIO_WritePin(g_motor_dir2_port, g_motor_dir2_pin_mask, GPIO_PIN_SET);
 8002de8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e28 <Motor_SetDirection+0x98>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a10      	ldr	r2, [pc, #64]	@ (8002e30 <Motor_SetDirection+0xa0>)
 8002dee:	8811      	ldrh	r1, [r2, #0]
 8002df0:	2201      	movs	r2, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe ff40 	bl	8001c78 <GPIO_WritePin>
            break;
 8002df8:	e011      	b.n	8002e1e <Motor_SetDirection+0x8e>
        case MOTOR_COAST:
        default:
            GPIO_WritePin(g_motor_dir1_port, g_motor_dir1_pin_mask, GPIO_PIN_RESET);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <Motor_SetDirection+0x94>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8002e2c <Motor_SetDirection+0x9c>)
 8002e00:	8811      	ldrh	r1, [r2, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe ff37 	bl	8001c78 <GPIO_WritePin>
            GPIO_WritePin(g_motor_dir2_port, g_motor_dir2_pin_mask, GPIO_PIN_RESET);
 8002e0a:	4b07      	ldr	r3, [pc, #28]	@ (8002e28 <Motor_SetDirection+0x98>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a08      	ldr	r2, [pc, #32]	@ (8002e30 <Motor_SetDirection+0xa0>)
 8002e10:	8811      	ldrh	r1, [r2, #0]
 8002e12:	2200      	movs	r2, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe ff2f 	bl	8001c78 <GPIO_WritePin>
            break;
 8002e1a:	e000      	b.n	8002e1e <Motor_SetDirection+0x8e>
    if (g_motor_dir1_port == NULL || g_motor_dir2_port == NULL) return;
 8002e1c:	bf00      	nop
    }
}
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	200003a0 	.word	0x200003a0
 8002e28:	200003a8 	.word	0x200003a8
 8002e2c:	200003a4 	.word	0x200003a4
 8002e30:	200003ac 	.word	0x200003ac

08002e34 <Motor_Stop>:

void Motor_Stop(void) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
    Motor_SetSpeed(0.0f);
 8002e38:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8002e4c <Motor_Stop+0x18>
 8002e3c:	f7ff ff80 	bl	8002d40 <Motor_SetSpeed>
    Motor_SetDirection(MOTOR_COAST); // Đưa về trạng thái coast khi dừng
 8002e40:	2002      	movs	r0, #2
 8002e42:	f7ff ffa5 	bl	8002d90 <Motor_SetDirection>
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	00000000 	.word	0x00000000

08002e50 <pir1_exti_event_handler>:
} PIR_GpioConfig_t;

static PIR_GpioConfig_t g_pir_configs[PIR_SENSOR_COUNT];

// Callback cho PIR 1
static void pir1_exti_event_handler(uint8_t exti_line) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]

    if (GPIO_ReadPin(g_pir_configs[PIR_SENSOR_IN].port, (1U << g_pir_configs[PIR_SENSOR_IN].pin_number)) == GPIO_PIN_SET) {
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <pir1_exti_event_handler+0x40>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e90 <pir1_exti_event_handler+0x40>)
 8002e60:	7912      	ldrb	r2, [r2, #4]
 8002e62:	4611      	mov	r1, r2
 8002e64:	2201      	movs	r2, #1
 8002e66:	408a      	lsls	r2, r1
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe feee 	bl	8001c4e <GPIO_ReadPin>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d103      	bne.n	8002e80 <pir1_exti_event_handler+0x30>
        g_pir_motion_detected_state[PIR_SENSOR_IN] = true;
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <pir1_exti_event_handler+0x44>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	701a      	strb	r2, [r3, #0]
    } else {
        g_pir_motion_detected_state[PIR_SENSOR_IN] = false;
    }
}
 8002e7e:	e002      	b.n	8002e86 <pir1_exti_event_handler+0x36>
        g_pir_motion_detected_state[PIR_SENSOR_IN] = false;
 8002e80:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <pir1_exti_event_handler+0x44>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200003b4 	.word	0x200003b4
 8002e94:	200003b0 	.word	0x200003b0

08002e98 <pir2_exti_event_handler>:

// Callback cho PIR 2
static void pir2_exti_event_handler(uint8_t exti_line) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
    if (GPIO_ReadPin(g_pir_configs[PIR_SENSOR_OUT].port, (1U << g_pir_configs[PIR_SENSOR_OUT].pin_number)) == GPIO_PIN_SET) {
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <pir2_exti_event_handler+0x40>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed8 <pir2_exti_event_handler+0x40>)
 8002ea8:	7b12      	ldrb	r2, [r2, #12]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	2201      	movs	r2, #1
 8002eae:	408a      	lsls	r2, r1
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe feca 	bl	8001c4e <GPIO_ReadPin>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d103      	bne.n	8002ec8 <pir2_exti_event_handler+0x30>
        g_pir_motion_detected_state[PIR_SENSOR_OUT] = true;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <pir2_exti_event_handler+0x44>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	705a      	strb	r2, [r3, #1]
    } else {
        g_pir_motion_detected_state[PIR_SENSOR_OUT] = false;
    }
}
 8002ec6:	e002      	b.n	8002ece <pir2_exti_event_handler+0x36>
        g_pir_motion_detected_state[PIR_SENSOR_OUT] = false;
 8002ec8:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <pir2_exti_event_handler+0x44>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	705a      	strb	r2, [r3, #1]
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200003b4 	.word	0x200003b4
 8002edc:	200003b0 	.word	0x200003b0

08002ee0 <PIRService_Init>:

void PIRService_Init(GPIO_TypeDef* pir_in_port, uint8_t pir_in_pin_number,
                     GPIO_TypeDef* pir_out_port, uint8_t pir_out_pin_number,
                     uint8_t nvic_priority) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	460b      	mov	r3, r1
 8002eee:	72fb      	strb	r3, [r7, #11]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	72bb      	strb	r3, [r7, #10]
    // Lưu cấu hình chân
    g_pir_configs[PIR_SENSOR_IN].port = pir_in_port;
 8002ef4:	4a17      	ldr	r2, [pc, #92]	@ (8002f54 <PIRService_Init+0x74>)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6013      	str	r3, [r2, #0]
    g_pir_configs[PIR_SENSOR_IN].pin_number = pir_in_pin_number;
 8002efa:	4a16      	ldr	r2, [pc, #88]	@ (8002f54 <PIRService_Init+0x74>)
 8002efc:	7afb      	ldrb	r3, [r7, #11]
 8002efe:	7113      	strb	r3, [r2, #4]
    g_pir_configs[PIR_SENSOR_IN].exti_line = pir_in_pin_number; // EXTI line thường trùng pin_number
 8002f00:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <PIRService_Init+0x74>)
 8002f02:	7afb      	ldrb	r3, [r7, #11]
 8002f04:	7153      	strb	r3, [r2, #5]

    g_pir_configs[PIR_SENSOR_OUT].port = pir_out_port;
 8002f06:	4a13      	ldr	r2, [pc, #76]	@ (8002f54 <PIRService_Init+0x74>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6093      	str	r3, [r2, #8]
    g_pir_configs[PIR_SENSOR_OUT].pin_number = pir_out_pin_number;
 8002f0c:	4a11      	ldr	r2, [pc, #68]	@ (8002f54 <PIRService_Init+0x74>)
 8002f0e:	7abb      	ldrb	r3, [r7, #10]
 8002f10:	7313      	strb	r3, [r2, #12]
    g_pir_configs[PIR_SENSOR_OUT].exti_line = pir_out_pin_number;
 8002f12:	4a10      	ldr	r2, [pc, #64]	@ (8002f54 <PIRService_Init+0x74>)
 8002f14:	7abb      	ldrb	r3, [r7, #10]
 8002f16:	7353      	strb	r3, [r2, #13]

    // Reset trạng thái ban đầu
    g_pir_motion_detected_state[PIR_SENSOR_IN] = false;
 8002f18:	4b0f      	ldr	r3, [pc, #60]	@ (8002f58 <PIRService_Init+0x78>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
    g_pir_motion_detected_state[PIR_SENSOR_OUT] = false;
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <PIRService_Init+0x78>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	705a      	strb	r2, [r3, #1]

    // Chân GPIO sẽ được EXTI_InitPin cấu hình là input (pull-up là lựa chọn an toàn).
    EXTI_InitPin(g_pir_configs[PIR_SENSOR_IN].port,
 8002f24:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <PIRService_Init+0x74>)
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <PIRService_Init+0x74>)
 8002f2a:	7919      	ldrb	r1, [r3, #4]
 8002f2c:	7e3b      	ldrb	r3, [r7, #24]
 8002f2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002f5c <PIRService_Init+0x7c>)
 8002f30:	9200      	str	r2, [sp, #0]
 8002f32:	2203      	movs	r2, #3
 8002f34:	f7fe fbe8 	bl	8001708 <EXTI_InitPin>
                 EXTI_TRIGGER_BOTH, // <<<< Sườn lên và xuống
                 nvic_priority,
                 pir1_exti_event_handler);

    // Khởi tạo EXTI cho PIR2
    EXTI_InitPin(g_pir_configs[PIR_SENSOR_OUT].port,
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <PIRService_Init+0x74>)
 8002f3a:	6898      	ldr	r0, [r3, #8]
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <PIRService_Init+0x74>)
 8002f3e:	7b19      	ldrb	r1, [r3, #12]
 8002f40:	7e3b      	ldrb	r3, [r7, #24]
 8002f42:	4a07      	ldr	r2, [pc, #28]	@ (8002f60 <PIRService_Init+0x80>)
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	2203      	movs	r2, #3
 8002f48:	f7fe fbde 	bl	8001708 <EXTI_InitPin>
                 g_pir_configs[PIR_SENSOR_OUT].pin_number,
                 EXTI_TRIGGER_BOTH, // <<<< Sườn lên và xuống
                 nvic_priority,     // Có thể dùng cùng priority hoặc khác
                 pir2_exti_event_handler);
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	200003b4 	.word	0x200003b4
 8002f58:	200003b0 	.word	0x200003b0
 8002f5c:	08002e51 	.word	0x08002e51
 8002f60:	08002e99 	.word	0x08002e99

08002f64 <PIRService_IsMotionDetected>:

bool PIRService_IsMotionDetected(PIR_SensorID_t sensor_id) {
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
    if (sensor_id < PIR_SENSOR_COUNT) {
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d804      	bhi.n	8002f7e <PIRService_IsMotionDetected+0x1a>
        return g_pir_motion_detected_state[sensor_id];
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	4a05      	ldr	r2, [pc, #20]	@ (8002f8c <PIRService_IsMotionDetected+0x28>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	e000      	b.n	8002f80 <PIRService_IsMotionDetected+0x1c>
    }
    return false; // ID không hợp lệ
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	200003b0 	.word	0x200003b0

08002f90 <UARTProto_Init>:
// Forward declarations of static helper functions
static void reset_rx_parser(void);
static void process_received_frame_logic(void);
static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length);

void UARTProto_Init(uart_command_handler_callback_t command_callback) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	g_app_command_callback = command_callback;
 8002f98:	4a07      	ldr	r2, [pc, #28]	@ (8002fb8 <UARTProto_Init+0x28>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6013      	str	r3, [r2, #0]
    reset_rx_parser();
 8002f9e:	f000 f883 	bl	80030a8 <reset_rx_parser>
    UART2_Init(115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8002fac:	f7ff fa66 	bl	800247c <UART2_Init>
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	200003dc 	.word	0x200003dc

08002fbc <actually_send_frame>:

static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	603a      	str	r2, [r7, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	71bb      	strb	r3, [r7, #6]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	717b      	strb	r3, [r7, #5]
    if (length > MAX_PAYLOAD_LENGTH) {
 8002fd2:	797b      	ldrb	r3, [r7, #5]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d901      	bls.n	8002fdc <actually_send_frame+0x20>
        return false;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e045      	b.n	8003068 <actually_send_frame+0xac>
    }

    uint8_t frame_buffer[MAX_FRAME_LENGTH];
    uint8_t frame_idx = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	75fb      	strb	r3, [r7, #23]

    frame_buffer[frame_idx++] = FRAME_START_BYTE;
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	75fa      	strb	r2, [r7, #23]
 8002fe6:	3318      	adds	r3, #24
 8002fe8:	443b      	add	r3, r7
 8002fea:	227e      	movs	r2, #126	@ 0x7e
 8002fec:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = (uint8_t)type;
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	75fa      	strb	r2, [r7, #23]
 8002ff6:	3318      	adds	r3, #24
 8002ff8:	443b      	add	r3, r7
 8002ffa:	79fa      	ldrb	r2, [r7, #7]
 8002ffc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = id;
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	75fa      	strb	r2, [r7, #23]
 8003006:	3318      	adds	r3, #24
 8003008:	443b      	add	r3, r7
 800300a:	79ba      	ldrb	r2, [r7, #6]
 800300c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = length;
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	75fa      	strb	r2, [r7, #23]
 8003016:	3318      	adds	r3, #24
 8003018:	443b      	add	r3, r7
 800301a:	797a      	ldrb	r2, [r7, #5]
 800301c:	f803 2c0c 	strb.w	r2, [r3, #-12]

    if (length > 0 && payload != NULL) {
 8003020:	797b      	ldrb	r3, [r7, #5]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00f      	beq.n	8003046 <actually_send_frame+0x8a>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00c      	beq.n	8003046 <actually_send_frame+0x8a>
        memcpy(&frame_buffer[frame_idx], payload, length);
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	f107 020c 	add.w	r2, r7, #12
 8003032:	4413      	add	r3, r2
 8003034:	797a      	ldrb	r2, [r7, #5]
 8003036:	6839      	ldr	r1, [r7, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f001 f866 	bl	800410a <memcpy>
        frame_idx += length;
 800303e:	7dfa      	ldrb	r2, [r7, #23]
 8003040:	797b      	ldrb	r3, [r7, #5]
 8003042:	4413      	add	r3, r2
 8003044:	75fb      	strb	r3, [r7, #23]
    }
    frame_buffer[frame_idx++] = FRAME_END_BYTE;
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	75fa      	strb	r2, [r7, #23]
 800304c:	3318      	adds	r3, #24
 800304e:	443b      	add	r3, r7
 8003050:	227f      	movs	r2, #127	@ 0x7f
 8003052:	f803 2c0c 	strb.w	r2, [r3, #-12]

    return UART2_SendBuffer_IT(frame_buffer, frame_idx);
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	b29a      	uxth	r2, r3
 800305a:	f107 030c 	add.w	r3, r7, #12
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff facd 	bl	8002600 <UART2_SendBuffer_IT>
 8003066:	4603      	mov	r3, r0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UARTProto_SendFrame>:

bool UARTProto_SendFrame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	603a      	str	r2, [r7, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
 800307e:	460b      	mov	r3, r1
 8003080:	71bb      	strb	r3, [r7, #6]
 8003082:	4613      	mov	r3, r2
 8003084:	717b      	strb	r3, [r7, #5]
    if (length > MAX_PAYLOAD_LENGTH) {
 8003086:	797b      	ldrb	r3, [r7, #5]
 8003088:	2b04      	cmp	r3, #4
 800308a:	d901      	bls.n	8003090 <UARTProto_SendFrame+0x20>
        return false; // Payload too long
 800308c:	2300      	movs	r3, #0
 800308e:	e006      	b.n	800309e <UARTProto_SendFrame+0x2e>
    }
    return actually_send_frame(type, id, payload, length);
 8003090:	797b      	ldrb	r3, [r7, #5]
 8003092:	79b9      	ldrb	r1, [r7, #6]
 8003094:	79f8      	ldrb	r0, [r7, #7]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	f7ff ff90 	bl	8002fbc <actually_send_frame>
 800309c:	4603      	mov	r3, r0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <reset_rx_parser>:

static void reset_rx_parser(void) {
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
    g_rx_state = STATE_WAIT_START;
 80030ac:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <reset_rx_parser+0x20>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
    g_rx_buffer_idx = 0;
 80030b2:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <reset_rx_parser+0x24>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
    g_expected_payload_len = 0;
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <reset_rx_parser+0x28>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	200003c4 	.word	0x200003c4
 80030cc:	200003d1 	.word	0x200003d1
 80030d0:	200003db 	.word	0x200003db

080030d4 <process_received_frame_logic>:

static void process_received_frame_logic(void) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
    // This function is called when a complete, structurally valid frame
    // of type FRAME_TYPE_LABVIEW_TO_STM has been received.
    // Frame data is in g_current_rx_frame.

    // Only expect to process commands from LabVIEW.
    if (g_current_rx_frame.type != FRAME_TYPE_LABVIEW_TO_STM) {
 80030d8:	4b15      	ldr	r3, [pc, #84]	@ (8003130 <process_received_frame_logic+0x5c>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d120      	bne.n	8003122 <process_received_frame_logic+0x4e>
        return; 
    }

    switch (g_current_rx_frame.id) {
 80030e0:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <process_received_frame_logic+0x5c>)
 80030e2:	785b      	ldrb	r3, [r3, #1]
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d002      	beq.n	80030ee <process_received_frame_logic+0x1a>
 80030e8:	2b13      	cmp	r3, #19
 80030ea:	d00d      	beq.n	8003108 <process_received_frame_logic+0x34>
            }
            break;

        default:
            // Unknown command ID received from LabVIEW. Silently ignore or log.
            break;
 80030ec:	e01e      	b.n	800312c <process_received_frame_logic+0x58>
            if (g_current_rx_frame.length == 1) {
 80030ee:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <process_received_frame_logic+0x5c>)
 80030f0:	799b      	ldrb	r3, [r3, #6]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d117      	bne.n	8003126 <process_received_frame_logic+0x52>
                if (g_app_command_callback != NULL) {
 80030f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <process_received_frame_logic+0x60>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d013      	beq.n	8003126 <process_received_frame_logic+0x52>
                    g_app_command_callback(&g_current_rx_frame);
 80030fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <process_received_frame_logic+0x60>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	480b      	ldr	r0, [pc, #44]	@ (8003130 <process_received_frame_logic+0x5c>)
 8003104:	4798      	blx	r3
            break;
 8003106:	e00e      	b.n	8003126 <process_received_frame_logic+0x52>
            if (g_current_rx_frame.length == 0) {
 8003108:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <process_received_frame_logic+0x5c>)
 800310a:	799b      	ldrb	r3, [r3, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10c      	bne.n	800312a <process_received_frame_logic+0x56>
                if (g_app_command_callback != NULL) {
 8003110:	4b08      	ldr	r3, [pc, #32]	@ (8003134 <process_received_frame_logic+0x60>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <process_received_frame_logic+0x56>
                    g_app_command_callback(&g_current_rx_frame);
 8003118:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <process_received_frame_logic+0x60>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4804      	ldr	r0, [pc, #16]	@ (8003130 <process_received_frame_logic+0x5c>)
 800311e:	4798      	blx	r3
            break;
 8003120:	e003      	b.n	800312a <process_received_frame_logic+0x56>
        return; 
 8003122:	bf00      	nop
 8003124:	e002      	b.n	800312c <process_received_frame_logic+0x58>
            break;
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <process_received_frame_logic+0x58>
            break;
 800312a:	bf00      	nop
    }
}
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200003d4 	.word	0x200003d4
 8003134:	200003dc 	.word	0x200003dc

08003138 <UARTProto_Process>:

void UARTProto_Process(void) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
    uint8_t byte;
    while (UART2_ReadByte_FromBuffer(&byte)) {
 800313e:	e0b8      	b.n	80032b2 <UARTProto_Process+0x17a>
        // Prevent buffer overflow if a malformed frame is too long
        if (g_rx_state != STATE_WAIT_START && g_rx_buffer_idx >= MAX_FRAME_LENGTH) {
 8003140:	4b62      	ldr	r3, [pc, #392]	@ (80032cc <UARTProto_Process+0x194>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <UARTProto_Process+0x1c>
 8003148:	4b61      	ldr	r3, [pc, #388]	@ (80032d0 <UARTProto_Process+0x198>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d901      	bls.n	8003154 <UARTProto_Process+0x1c>
            reset_rx_parser();
 8003150:	f7ff ffaa 	bl	80030a8 <reset_rx_parser>
            // After reset, the current 'byte' might be a START_BYTE
        }

        switch (g_rx_state) {
 8003154:	4b5d      	ldr	r3, [pc, #372]	@ (80032cc <UARTProto_Process+0x194>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b05      	cmp	r3, #5
 800315a:	f200 80a4 	bhi.w	80032a6 <UARTProto_Process+0x16e>
 800315e:	a201      	add	r2, pc, #4	@ (adr r2, 8003164 <UARTProto_Process+0x2c>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	0800317d 	.word	0x0800317d
 8003168:	080031a1 	.word	0x080031a1
 800316c:	080031d1 	.word	0x080031d1
 8003170:	080031f3 	.word	0x080031f3
 8003174:	08003237 	.word	0x08003237
 8003178:	08003279 	.word	0x08003279
            case STATE_WAIT_START:
                if (byte == FRAME_START_BYTE) {
 800317c:	79bb      	ldrb	r3, [r7, #6]
 800317e:	2b7e      	cmp	r3, #126	@ 0x7e
 8003180:	f040 8094 	bne.w	80032ac <UARTProto_Process+0x174>
                    // g_rx_buffer_idx is 0 due to reset_rx_parser()
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 8003184:	4b52      	ldr	r3, [pc, #328]	@ (80032d0 <UARTProto_Process+0x198>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	b2d1      	uxtb	r1, r2
 800318c:	4a50      	ldr	r2, [pc, #320]	@ (80032d0 <UARTProto_Process+0x198>)
 800318e:	7011      	strb	r1, [r2, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	79b9      	ldrb	r1, [r7, #6]
 8003194:	4b4f      	ldr	r3, [pc, #316]	@ (80032d4 <UARTProto_Process+0x19c>)
 8003196:	5499      	strb	r1, [r3, r2]
                    g_rx_state = STATE_WAIT_TYPE;
 8003198:	4b4c      	ldr	r3, [pc, #304]	@ (80032cc <UARTProto_Process+0x194>)
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
                }
                break;
 800319e:	e085      	b.n	80032ac <UARTProto_Process+0x174>

            case STATE_WAIT_TYPE:
                g_current_rx_frame.type = (FrameType_t)byte;
 80031a0:	79ba      	ldrb	r2, [r7, #6]
 80031a2:	4b4d      	ldr	r3, [pc, #308]	@ (80032d8 <UARTProto_Process+0x1a0>)
 80031a4:	701a      	strb	r2, [r3, #0]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 80031a6:	4b4a      	ldr	r3, [pc, #296]	@ (80032d0 <UARTProto_Process+0x198>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	b2d1      	uxtb	r1, r2
 80031ae:	4a48      	ldr	r2, [pc, #288]	@ (80032d0 <UARTProto_Process+0x198>)
 80031b0:	7011      	strb	r1, [r2, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	79b9      	ldrb	r1, [r7, #6]
 80031b6:	4b47      	ldr	r3, [pc, #284]	@ (80032d4 <UARTProto_Process+0x19c>)
 80031b8:	5499      	strb	r1, [r3, r2]
                if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 80031ba:	4b47      	ldr	r3, [pc, #284]	@ (80032d8 <UARTProto_Process+0x1a0>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d103      	bne.n	80031ca <UARTProto_Process+0x92>
                    g_rx_state = STATE_WAIT_ID;
 80031c2:	4b42      	ldr	r3, [pc, #264]	@ (80032cc <UARTProto_Process+0x194>)
 80031c4:	2202      	movs	r2, #2
 80031c6:	701a      	strb	r2, [r3, #0]
                } else {
                    // Received an unexpected frame type (e.g., STM_TO_LABVIEW type, or invalid)
                    reset_rx_parser();
                }
                break;
 80031c8:	e073      	b.n	80032b2 <UARTProto_Process+0x17a>
                    reset_rx_parser();
 80031ca:	f7ff ff6d 	bl	80030a8 <reset_rx_parser>
                break;
 80031ce:	e070      	b.n	80032b2 <UARTProto_Process+0x17a>

            case STATE_WAIT_ID:
                g_current_rx_frame.id = byte;
 80031d0:	79ba      	ldrb	r2, [r7, #6]
 80031d2:	4b41      	ldr	r3, [pc, #260]	@ (80032d8 <UARTProto_Process+0x1a0>)
 80031d4:	705a      	strb	r2, [r3, #1]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 80031d6:	4b3e      	ldr	r3, [pc, #248]	@ (80032d0 <UARTProto_Process+0x198>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	b2d1      	uxtb	r1, r2
 80031de:	4a3c      	ldr	r2, [pc, #240]	@ (80032d0 <UARTProto_Process+0x198>)
 80031e0:	7011      	strb	r1, [r2, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	79b9      	ldrb	r1, [r7, #6]
 80031e6:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <UARTProto_Process+0x19c>)
 80031e8:	5499      	strb	r1, [r3, r2]
                g_rx_state = STATE_WAIT_LENGTH;
 80031ea:	4b38      	ldr	r3, [pc, #224]	@ (80032cc <UARTProto_Process+0x194>)
 80031ec:	2203      	movs	r2, #3
 80031ee:	701a      	strb	r2, [r3, #0]
                break;
 80031f0:	e05f      	b.n	80032b2 <UARTProto_Process+0x17a>

            case STATE_WAIT_LENGTH:
                if (byte > MAX_PAYLOAD_LENGTH) {
 80031f2:	79bb      	ldrb	r3, [r7, #6]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d902      	bls.n	80031fe <UARTProto_Process+0xc6>
                    reset_rx_parser(); // Error: payload length field is too large
 80031f8:	f7ff ff56 	bl	80030a8 <reset_rx_parser>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
                    } else {
                        g_rx_state = STATE_WAIT_PAYLOAD;
                    }
                }
                break;
 80031fc:	e059      	b.n	80032b2 <UARTProto_Process+0x17a>
                    g_current_rx_frame.length = byte;
 80031fe:	79ba      	ldrb	r2, [r7, #6]
 8003200:	4b35      	ldr	r3, [pc, #212]	@ (80032d8 <UARTProto_Process+0x1a0>)
 8003202:	719a      	strb	r2, [r3, #6]
                    g_expected_payload_len = byte;
 8003204:	79ba      	ldrb	r2, [r7, #6]
 8003206:	4b35      	ldr	r3, [pc, #212]	@ (80032dc <UARTProto_Process+0x1a4>)
 8003208:	701a      	strb	r2, [r3, #0]
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 800320a:	4b31      	ldr	r3, [pc, #196]	@ (80032d0 <UARTProto_Process+0x198>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	b2d1      	uxtb	r1, r2
 8003212:	4a2f      	ldr	r2, [pc, #188]	@ (80032d0 <UARTProto_Process+0x198>)
 8003214:	7011      	strb	r1, [r2, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	79b9      	ldrb	r1, [r7, #6]
 800321a:	4b2e      	ldr	r3, [pc, #184]	@ (80032d4 <UARTProto_Process+0x19c>)
 800321c:	5499      	strb	r1, [r3, r2]
                    if (g_expected_payload_len == 0) {
 800321e:	4b2f      	ldr	r3, [pc, #188]	@ (80032dc <UARTProto_Process+0x1a4>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <UARTProto_Process+0xf6>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
 8003226:	4b29      	ldr	r3, [pc, #164]	@ (80032cc <UARTProto_Process+0x194>)
 8003228:	2205      	movs	r2, #5
 800322a:	701a      	strb	r2, [r3, #0]
                break;
 800322c:	e041      	b.n	80032b2 <UARTProto_Process+0x17a>
                        g_rx_state = STATE_WAIT_PAYLOAD;
 800322e:	4b27      	ldr	r3, [pc, #156]	@ (80032cc <UARTProto_Process+0x194>)
 8003230:	2204      	movs	r2, #4
 8003232:	701a      	strb	r2, [r3, #0]
                break;
 8003234:	e03d      	b.n	80032b2 <UARTProto_Process+0x17a>

            case STATE_WAIT_PAYLOAD:
                // Current payload byte's 0-based index in the payload array.
                // Header (START,TYPE,ID,LENGTH) is 4 bytes.
                // g_rx_buffer_idx is count of bytes in g_rx_buffer *before* adding current 'byte'.
                uint8_t payload_byte_index = g_rx_buffer_idx - 4;
 8003236:	4b26      	ldr	r3, [pc, #152]	@ (80032d0 <UARTProto_Process+0x198>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	3b04      	subs	r3, #4
 800323c:	71fb      	strb	r3, [r7, #7]

                if (payload_byte_index < MAX_PAYLOAD_LENGTH) {
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d805      	bhi.n	8003250 <UARTProto_Process+0x118>
                     g_current_rx_frame.payload[payload_byte_index] = byte;
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	79b9      	ldrb	r1, [r7, #6]
 8003248:	4a23      	ldr	r2, [pc, #140]	@ (80032d8 <UARTProto_Process+0x1a0>)
 800324a:	4413      	add	r3, r2
 800324c:	460a      	mov	r2, r1
 800324e:	709a      	strb	r2, [r3, #2]
                }
                g_rx_buffer[g_rx_buffer_idx++] = byte; // Store current payload byte in raw buffer
 8003250:	4b1f      	ldr	r3, [pc, #124]	@ (80032d0 <UARTProto_Process+0x198>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	b2d1      	uxtb	r1, r2
 8003258:	4a1d      	ldr	r2, [pc, #116]	@ (80032d0 <UARTProto_Process+0x198>)
 800325a:	7011      	strb	r1, [r2, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	79b9      	ldrb	r1, [r7, #6]
 8003260:	4b1c      	ldr	r3, [pc, #112]	@ (80032d4 <UARTProto_Process+0x19c>)
 8003262:	5499      	strb	r1, [r3, r2]

                if ((payload_byte_index + 1) >= g_expected_payload_len) {
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	3301      	adds	r3, #1
 8003268:	4a1c      	ldr	r2, [pc, #112]	@ (80032dc <UARTProto_Process+0x1a4>)
 800326a:	7812      	ldrb	r2, [r2, #0]
 800326c:	4293      	cmp	r3, r2
 800326e:	db1f      	blt.n	80032b0 <UARTProto_Process+0x178>
                    g_rx_state = STATE_WAIT_END; // All expected payload bytes received
 8003270:	4b16      	ldr	r3, [pc, #88]	@ (80032cc <UARTProto_Process+0x194>)
 8003272:	2205      	movs	r2, #5
 8003274:	701a      	strb	r2, [r3, #0]
                }
                break;
 8003276:	e01b      	b.n	80032b0 <UARTProto_Process+0x178>

            case STATE_WAIT_END:
                if (byte == FRAME_END_BYTE) {
 8003278:	79bb      	ldrb	r3, [r7, #6]
 800327a:	2b7f      	cmp	r3, #127	@ 0x7f
 800327c:	d110      	bne.n	80032a0 <UARTProto_Process+0x168>
                    // Frame is structurally complete.
                    // g_rx_buffer_idx is count of (START,TYPE,ID,LENGTH,PAYLOAD bytes).
                    // Expected count = 4 + g_current_rx_frame.length.
                    if (g_rx_buffer_idx == (4 + g_current_rx_frame.length)) {
 800327e:	4b14      	ldr	r3, [pc, #80]	@ (80032d0 <UARTProto_Process+0x198>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <UARTProto_Process+0x1a0>)
 8003286:	799b      	ldrb	r3, [r3, #6]
 8003288:	3304      	adds	r3, #4
 800328a:	429a      	cmp	r2, r3
 800328c:	d106      	bne.n	800329c <UARTProto_Process+0x164>
                        // Only process if it's a command from LabVIEW (already checked at TYPE stage)
                        if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 800328e:	4b12      	ldr	r3, [pc, #72]	@ (80032d8 <UARTProto_Process+0x1a0>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d104      	bne.n	80032a0 <UARTProto_Process+0x168>
                            process_received_frame_logic();
 8003296:	f7ff ff1d 	bl	80030d4 <process_received_frame_logic>
 800329a:	e001      	b.n	80032a0 <UARTProto_Process+0x168>
                        }
                    } else {
                        // Error: Frame length mismatch. Reset parser.
                        reset_rx_parser();
 800329c:	f7ff ff04 	bl	80030a8 <reset_rx_parser>
                    }
                } else {
                    // Error: Expected FRAME_END_BYTE but received something else.
                }
                reset_rx_parser(); // Always reset for the next frame, regardless of END byte correctness.
 80032a0:	f7ff ff02 	bl	80030a8 <reset_rx_parser>
                break;
 80032a4:	e005      	b.n	80032b2 <UARTProto_Process+0x17a>

            default: 
                reset_rx_parser();
 80032a6:	f7ff feff 	bl	80030a8 <reset_rx_parser>
                break;
 80032aa:	e002      	b.n	80032b2 <UARTProto_Process+0x17a>
                break;
 80032ac:	bf00      	nop
 80032ae:	e000      	b.n	80032b2 <UARTProto_Process+0x17a>
                break;
 80032b0:	bf00      	nop
    while (UART2_ReadByte_FromBuffer(&byte)) {
 80032b2:	1dbb      	adds	r3, r7, #6
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fa0b 	bl	80026d0 <UART2_ReadByte_FromBuffer>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f47f af3f 	bne.w	8003140 <UARTProto_Process+0x8>
        }
    }
}
 80032c2:	bf00      	nop
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	200003c4 	.word	0x200003c4
 80032d0:	200003d1 	.word	0x200003d1
 80032d4:	200003c8 	.word	0x200003c8
 80032d8:	200003d4 	.word	0x200003d4
 80032dc:	200003db 	.word	0x200003db

080032e0 <main>:
#include "system_manager.h"       // Module điều phối chính
#include "people_counter.h"
#include "door_fsm.h"
#include "lighting_logic.h"

int main(void) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
   // Khởi tạo hệ thống
   SystemClock_Config();
 80032e4:	f7fe ff34 	bl	8002150 <SystemClock_Config>
   SysTick_Init();
 80032e8:	f7fe fff6 	bl	80022d8 <SysTick_Init>
   SystemManager_Init();
 80032ec:	f7fe f862 	bl	80013b4 <SystemManager_Init>

   // Vòng lặp chính
   while (1) {
       SystemManager_Process();
 80032f0:	f7fe f8e4 	bl	80014bc <SystemManager_Process>
       Delay_ms(200);
 80032f4:	20c8      	movs	r0, #200	@ 0xc8
 80032f6:	f7ff f81d 	bl	8002334 <Delay_ms>
       SystemManager_Process();
 80032fa:	bf00      	nop
 80032fc:	e7f8      	b.n	80032f0 <main+0x10>

080032fe <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003302:	bf00      	nop
 8003304:	e7fd      	b.n	8003302 <NMI_Handler+0x4>

08003306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800330a:	bf00      	nop
 800330c:	e7fd      	b.n	800330a <HardFault_Handler+0x4>

0800330e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800330e:	b480      	push	{r7}
 8003310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003312:	bf00      	nop
 8003314:	e7fd      	b.n	8003312 <MemManage_Handler+0x4>

08003316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800331a:	bf00      	nop
 800331c:	e7fd      	b.n	800331a <BusFault_Handler+0x4>

0800331e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003322:	bf00      	nop
 8003324:	e7fd      	b.n	8003322 <UsageFault_Handler+0x4>

08003326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003326:	b480      	push	{r7}
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return 1;
 8003354:	2301      	movs	r3, #1
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <_kill>:

int _kill(int pid, int sig)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800336a:	f000 fea1 	bl	80040b0 <__errno>
 800336e:	4603      	mov	r3, r0
 8003370:	2216      	movs	r2, #22
 8003372:	601a      	str	r2, [r3, #0]
  return -1;
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_exit>:

void _exit (int status)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ffe7 	bl	8003360 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003392:	bf00      	nop
 8003394:	e7fd      	b.n	8003392 <_exit+0x12>

08003396 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e00a      	b.n	80033be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033a8:	f3af 8000 	nop.w
 80033ac:	4601      	mov	r1, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	60ba      	str	r2, [r7, #8]
 80033b4:	b2ca      	uxtb	r2, r1
 80033b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	3301      	adds	r3, #1
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	dbf0      	blt.n	80033a8 <_read+0x12>
  }

  return len;
 80033c6:	687b      	ldr	r3, [r7, #4]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	e009      	b.n	80033f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	60ba      	str	r2, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3301      	adds	r3, #1
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	dbf1      	blt.n	80033e2 <_write+0x12>
  }
  return len;
 80033fe:	687b      	ldr	r3, [r7, #4]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <_close>:

int _close(int file)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003430:	605a      	str	r2, [r3, #4]
  return 0;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <_isatty>:

int _isatty(int file)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003448:	2301      	movs	r3, #1
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003478:	4a14      	ldr	r2, [pc, #80]	@ (80034cc <_sbrk+0x5c>)
 800347a:	4b15      	ldr	r3, [pc, #84]	@ (80034d0 <_sbrk+0x60>)
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003484:	4b13      	ldr	r3, [pc, #76]	@ (80034d4 <_sbrk+0x64>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800348c:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <_sbrk+0x64>)
 800348e:	4a12      	ldr	r2, [pc, #72]	@ (80034d8 <_sbrk+0x68>)
 8003490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003492:	4b10      	ldr	r3, [pc, #64]	@ (80034d4 <_sbrk+0x64>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034a0:	f000 fe06 	bl	80040b0 <__errno>
 80034a4:	4603      	mov	r3, r0
 80034a6:	220c      	movs	r2, #12
 80034a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295
 80034ae:	e009      	b.n	80034c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034b0:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034b6:	4b07      	ldr	r3, [pc, #28]	@ (80034d4 <_sbrk+0x64>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	4a05      	ldr	r2, [pc, #20]	@ (80034d4 <_sbrk+0x64>)
 80034c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034c2:	68fb      	ldr	r3, [r7, #12]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20018000 	.word	0x20018000
 80034d0:	00000400 	.word	0x00000400
 80034d4:	200003e0 	.word	0x200003e0
 80034d8:	20000530 	.word	0x20000530

080034dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034e0:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <SystemInit+0x20>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e6:	4a05      	ldr	r2, [pc, #20]	@ (80034fc <SystemInit+0x20>)
 80034e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000ed00 	.word	0xe000ed00

08003500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003538 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003504:	f7ff ffea 	bl	80034dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003508:	480c      	ldr	r0, [pc, #48]	@ (800353c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800350a:	490d      	ldr	r1, [pc, #52]	@ (8003540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800350c:	4a0d      	ldr	r2, [pc, #52]	@ (8003544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800350e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003510:	e002      	b.n	8003518 <LoopCopyDataInit>

08003512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003516:	3304      	adds	r3, #4

08003518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800351a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800351c:	d3f9      	bcc.n	8003512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800351e:	4a0a      	ldr	r2, [pc, #40]	@ (8003548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003520:	4c0a      	ldr	r4, [pc, #40]	@ (800354c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003524:	e001      	b.n	800352a <LoopFillZerobss>

08003526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003528:	3204      	adds	r2, #4

0800352a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800352a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800352c:	d3fb      	bcc.n	8003526 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800352e:	f000 fdc5 	bl	80040bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003532:	f7ff fed5 	bl	80032e0 <main>
  bx  lr    
 8003536:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003538:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800353c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003540:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8003544:	080061e8 	.word	0x080061e8
  ldr r2, =_sbss
 8003548:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800354c:	20000530 	.word	0x20000530

08003550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003550:	e7fe      	b.n	8003550 <ADC_IRQHandler>

08003552 <__cvt>:
 8003552:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003556:	ec57 6b10 	vmov	r6, r7, d0
 800355a:	2f00      	cmp	r7, #0
 800355c:	460c      	mov	r4, r1
 800355e:	4619      	mov	r1, r3
 8003560:	463b      	mov	r3, r7
 8003562:	bfbb      	ittet	lt
 8003564:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003568:	461f      	movlt	r7, r3
 800356a:	2300      	movge	r3, #0
 800356c:	232d      	movlt	r3, #45	@ 0x2d
 800356e:	700b      	strb	r3, [r1, #0]
 8003570:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003572:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003576:	4691      	mov	r9, r2
 8003578:	f023 0820 	bic.w	r8, r3, #32
 800357c:	bfbc      	itt	lt
 800357e:	4632      	movlt	r2, r6
 8003580:	4616      	movlt	r6, r2
 8003582:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003586:	d005      	beq.n	8003594 <__cvt+0x42>
 8003588:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800358c:	d100      	bne.n	8003590 <__cvt+0x3e>
 800358e:	3401      	adds	r4, #1
 8003590:	2102      	movs	r1, #2
 8003592:	e000      	b.n	8003596 <__cvt+0x44>
 8003594:	2103      	movs	r1, #3
 8003596:	ab03      	add	r3, sp, #12
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	ab02      	add	r3, sp, #8
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	ec47 6b10 	vmov	d0, r6, r7
 80035a2:	4653      	mov	r3, sl
 80035a4:	4622      	mov	r2, r4
 80035a6:	f000 fe47 	bl	8004238 <_dtoa_r>
 80035aa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80035ae:	4605      	mov	r5, r0
 80035b0:	d119      	bne.n	80035e6 <__cvt+0x94>
 80035b2:	f019 0f01 	tst.w	r9, #1
 80035b6:	d00e      	beq.n	80035d6 <__cvt+0x84>
 80035b8:	eb00 0904 	add.w	r9, r0, r4
 80035bc:	2200      	movs	r2, #0
 80035be:	2300      	movs	r3, #0
 80035c0:	4630      	mov	r0, r6
 80035c2:	4639      	mov	r1, r7
 80035c4:	f7fd fa88 	bl	8000ad8 <__aeabi_dcmpeq>
 80035c8:	b108      	cbz	r0, 80035ce <__cvt+0x7c>
 80035ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80035ce:	2230      	movs	r2, #48	@ 0x30
 80035d0:	9b03      	ldr	r3, [sp, #12]
 80035d2:	454b      	cmp	r3, r9
 80035d4:	d31e      	bcc.n	8003614 <__cvt+0xc2>
 80035d6:	9b03      	ldr	r3, [sp, #12]
 80035d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80035da:	1b5b      	subs	r3, r3, r5
 80035dc:	4628      	mov	r0, r5
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	b004      	add	sp, #16
 80035e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80035ea:	eb00 0904 	add.w	r9, r0, r4
 80035ee:	d1e5      	bne.n	80035bc <__cvt+0x6a>
 80035f0:	7803      	ldrb	r3, [r0, #0]
 80035f2:	2b30      	cmp	r3, #48	@ 0x30
 80035f4:	d10a      	bne.n	800360c <__cvt+0xba>
 80035f6:	2200      	movs	r2, #0
 80035f8:	2300      	movs	r3, #0
 80035fa:	4630      	mov	r0, r6
 80035fc:	4639      	mov	r1, r7
 80035fe:	f7fd fa6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003602:	b918      	cbnz	r0, 800360c <__cvt+0xba>
 8003604:	f1c4 0401 	rsb	r4, r4, #1
 8003608:	f8ca 4000 	str.w	r4, [sl]
 800360c:	f8da 3000 	ldr.w	r3, [sl]
 8003610:	4499      	add	r9, r3
 8003612:	e7d3      	b.n	80035bc <__cvt+0x6a>
 8003614:	1c59      	adds	r1, r3, #1
 8003616:	9103      	str	r1, [sp, #12]
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e7d9      	b.n	80035d0 <__cvt+0x7e>

0800361c <__exponent>:
 800361c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800361e:	2900      	cmp	r1, #0
 8003620:	bfba      	itte	lt
 8003622:	4249      	neglt	r1, r1
 8003624:	232d      	movlt	r3, #45	@ 0x2d
 8003626:	232b      	movge	r3, #43	@ 0x2b
 8003628:	2909      	cmp	r1, #9
 800362a:	7002      	strb	r2, [r0, #0]
 800362c:	7043      	strb	r3, [r0, #1]
 800362e:	dd29      	ble.n	8003684 <__exponent+0x68>
 8003630:	f10d 0307 	add.w	r3, sp, #7
 8003634:	461d      	mov	r5, r3
 8003636:	270a      	movs	r7, #10
 8003638:	461a      	mov	r2, r3
 800363a:	fbb1 f6f7 	udiv	r6, r1, r7
 800363e:	fb07 1416 	mls	r4, r7, r6, r1
 8003642:	3430      	adds	r4, #48	@ 0x30
 8003644:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003648:	460c      	mov	r4, r1
 800364a:	2c63      	cmp	r4, #99	@ 0x63
 800364c:	f103 33ff 	add.w	r3, r3, #4294967295
 8003650:	4631      	mov	r1, r6
 8003652:	dcf1      	bgt.n	8003638 <__exponent+0x1c>
 8003654:	3130      	adds	r1, #48	@ 0x30
 8003656:	1e94      	subs	r4, r2, #2
 8003658:	f803 1c01 	strb.w	r1, [r3, #-1]
 800365c:	1c41      	adds	r1, r0, #1
 800365e:	4623      	mov	r3, r4
 8003660:	42ab      	cmp	r3, r5
 8003662:	d30a      	bcc.n	800367a <__exponent+0x5e>
 8003664:	f10d 0309 	add.w	r3, sp, #9
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	42ac      	cmp	r4, r5
 800366c:	bf88      	it	hi
 800366e:	2300      	movhi	r3, #0
 8003670:	3302      	adds	r3, #2
 8003672:	4403      	add	r3, r0
 8003674:	1a18      	subs	r0, r3, r0
 8003676:	b003      	add	sp, #12
 8003678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800367a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800367e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003682:	e7ed      	b.n	8003660 <__exponent+0x44>
 8003684:	2330      	movs	r3, #48	@ 0x30
 8003686:	3130      	adds	r1, #48	@ 0x30
 8003688:	7083      	strb	r3, [r0, #2]
 800368a:	70c1      	strb	r1, [r0, #3]
 800368c:	1d03      	adds	r3, r0, #4
 800368e:	e7f1      	b.n	8003674 <__exponent+0x58>

08003690 <_printf_float>:
 8003690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003694:	b08d      	sub	sp, #52	@ 0x34
 8003696:	460c      	mov	r4, r1
 8003698:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800369c:	4616      	mov	r6, r2
 800369e:	461f      	mov	r7, r3
 80036a0:	4605      	mov	r5, r0
 80036a2:	f000 fcbb 	bl	800401c <_localeconv_r>
 80036a6:	6803      	ldr	r3, [r0, #0]
 80036a8:	9304      	str	r3, [sp, #16]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fc fde8 	bl	8000280 <strlen>
 80036b0:	2300      	movs	r3, #0
 80036b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80036b4:	f8d8 3000 	ldr.w	r3, [r8]
 80036b8:	9005      	str	r0, [sp, #20]
 80036ba:	3307      	adds	r3, #7
 80036bc:	f023 0307 	bic.w	r3, r3, #7
 80036c0:	f103 0208 	add.w	r2, r3, #8
 80036c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80036c8:	f8d4 b000 	ldr.w	fp, [r4]
 80036cc:	f8c8 2000 	str.w	r2, [r8]
 80036d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80036d8:	9307      	str	r3, [sp, #28]
 80036da:	f8cd 8018 	str.w	r8, [sp, #24]
 80036de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80036e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036e6:	4b9c      	ldr	r3, [pc, #624]	@ (8003958 <_printf_float+0x2c8>)
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	f7fd fa26 	bl	8000b3c <__aeabi_dcmpun>
 80036f0:	bb70      	cbnz	r0, 8003750 <_printf_float+0xc0>
 80036f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036f6:	4b98      	ldr	r3, [pc, #608]	@ (8003958 <_printf_float+0x2c8>)
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	f7fd fa00 	bl	8000b00 <__aeabi_dcmple>
 8003700:	bb30      	cbnz	r0, 8003750 <_printf_float+0xc0>
 8003702:	2200      	movs	r2, #0
 8003704:	2300      	movs	r3, #0
 8003706:	4640      	mov	r0, r8
 8003708:	4649      	mov	r1, r9
 800370a:	f7fd f9ef 	bl	8000aec <__aeabi_dcmplt>
 800370e:	b110      	cbz	r0, 8003716 <_printf_float+0x86>
 8003710:	232d      	movs	r3, #45	@ 0x2d
 8003712:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003716:	4a91      	ldr	r2, [pc, #580]	@ (800395c <_printf_float+0x2cc>)
 8003718:	4b91      	ldr	r3, [pc, #580]	@ (8003960 <_printf_float+0x2d0>)
 800371a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800371e:	bf94      	ite	ls
 8003720:	4690      	movls	r8, r2
 8003722:	4698      	movhi	r8, r3
 8003724:	2303      	movs	r3, #3
 8003726:	6123      	str	r3, [r4, #16]
 8003728:	f02b 0304 	bic.w	r3, fp, #4
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	f04f 0900 	mov.w	r9, #0
 8003732:	9700      	str	r7, [sp, #0]
 8003734:	4633      	mov	r3, r6
 8003736:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003738:	4621      	mov	r1, r4
 800373a:	4628      	mov	r0, r5
 800373c:	f000 f9d2 	bl	8003ae4 <_printf_common>
 8003740:	3001      	adds	r0, #1
 8003742:	f040 808d 	bne.w	8003860 <_printf_float+0x1d0>
 8003746:	f04f 30ff 	mov.w	r0, #4294967295
 800374a:	b00d      	add	sp, #52	@ 0x34
 800374c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003750:	4642      	mov	r2, r8
 8003752:	464b      	mov	r3, r9
 8003754:	4640      	mov	r0, r8
 8003756:	4649      	mov	r1, r9
 8003758:	f7fd f9f0 	bl	8000b3c <__aeabi_dcmpun>
 800375c:	b140      	cbz	r0, 8003770 <_printf_float+0xe0>
 800375e:	464b      	mov	r3, r9
 8003760:	2b00      	cmp	r3, #0
 8003762:	bfbc      	itt	lt
 8003764:	232d      	movlt	r3, #45	@ 0x2d
 8003766:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800376a:	4a7e      	ldr	r2, [pc, #504]	@ (8003964 <_printf_float+0x2d4>)
 800376c:	4b7e      	ldr	r3, [pc, #504]	@ (8003968 <_printf_float+0x2d8>)
 800376e:	e7d4      	b.n	800371a <_printf_float+0x8a>
 8003770:	6863      	ldr	r3, [r4, #4]
 8003772:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003776:	9206      	str	r2, [sp, #24]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	d13b      	bne.n	80037f4 <_printf_float+0x164>
 800377c:	2306      	movs	r3, #6
 800377e:	6063      	str	r3, [r4, #4]
 8003780:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003784:	2300      	movs	r3, #0
 8003786:	6022      	str	r2, [r4, #0]
 8003788:	9303      	str	r3, [sp, #12]
 800378a:	ab0a      	add	r3, sp, #40	@ 0x28
 800378c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003790:	ab09      	add	r3, sp, #36	@ 0x24
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	6861      	ldr	r1, [r4, #4]
 8003796:	ec49 8b10 	vmov	d0, r8, r9
 800379a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800379e:	4628      	mov	r0, r5
 80037a0:	f7ff fed7 	bl	8003552 <__cvt>
 80037a4:	9b06      	ldr	r3, [sp, #24]
 80037a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80037a8:	2b47      	cmp	r3, #71	@ 0x47
 80037aa:	4680      	mov	r8, r0
 80037ac:	d129      	bne.n	8003802 <_printf_float+0x172>
 80037ae:	1cc8      	adds	r0, r1, #3
 80037b0:	db02      	blt.n	80037b8 <_printf_float+0x128>
 80037b2:	6863      	ldr	r3, [r4, #4]
 80037b4:	4299      	cmp	r1, r3
 80037b6:	dd41      	ble.n	800383c <_printf_float+0x1ac>
 80037b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80037bc:	fa5f fa8a 	uxtb.w	sl, sl
 80037c0:	3901      	subs	r1, #1
 80037c2:	4652      	mov	r2, sl
 80037c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80037c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80037ca:	f7ff ff27 	bl	800361c <__exponent>
 80037ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80037d0:	1813      	adds	r3, r2, r0
 80037d2:	2a01      	cmp	r2, #1
 80037d4:	4681      	mov	r9, r0
 80037d6:	6123      	str	r3, [r4, #16]
 80037d8:	dc02      	bgt.n	80037e0 <_printf_float+0x150>
 80037da:	6822      	ldr	r2, [r4, #0]
 80037dc:	07d2      	lsls	r2, r2, #31
 80037de:	d501      	bpl.n	80037e4 <_printf_float+0x154>
 80037e0:	3301      	adds	r3, #1
 80037e2:	6123      	str	r3, [r4, #16]
 80037e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0a2      	beq.n	8003732 <_printf_float+0xa2>
 80037ec:	232d      	movs	r3, #45	@ 0x2d
 80037ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037f2:	e79e      	b.n	8003732 <_printf_float+0xa2>
 80037f4:	9a06      	ldr	r2, [sp, #24]
 80037f6:	2a47      	cmp	r2, #71	@ 0x47
 80037f8:	d1c2      	bne.n	8003780 <_printf_float+0xf0>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1c0      	bne.n	8003780 <_printf_float+0xf0>
 80037fe:	2301      	movs	r3, #1
 8003800:	e7bd      	b.n	800377e <_printf_float+0xee>
 8003802:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003806:	d9db      	bls.n	80037c0 <_printf_float+0x130>
 8003808:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800380c:	d118      	bne.n	8003840 <_printf_float+0x1b0>
 800380e:	2900      	cmp	r1, #0
 8003810:	6863      	ldr	r3, [r4, #4]
 8003812:	dd0b      	ble.n	800382c <_printf_float+0x19c>
 8003814:	6121      	str	r1, [r4, #16]
 8003816:	b913      	cbnz	r3, 800381e <_printf_float+0x18e>
 8003818:	6822      	ldr	r2, [r4, #0]
 800381a:	07d0      	lsls	r0, r2, #31
 800381c:	d502      	bpl.n	8003824 <_printf_float+0x194>
 800381e:	3301      	adds	r3, #1
 8003820:	440b      	add	r3, r1
 8003822:	6123      	str	r3, [r4, #16]
 8003824:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003826:	f04f 0900 	mov.w	r9, #0
 800382a:	e7db      	b.n	80037e4 <_printf_float+0x154>
 800382c:	b913      	cbnz	r3, 8003834 <_printf_float+0x1a4>
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	07d2      	lsls	r2, r2, #31
 8003832:	d501      	bpl.n	8003838 <_printf_float+0x1a8>
 8003834:	3302      	adds	r3, #2
 8003836:	e7f4      	b.n	8003822 <_printf_float+0x192>
 8003838:	2301      	movs	r3, #1
 800383a:	e7f2      	b.n	8003822 <_printf_float+0x192>
 800383c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003842:	4299      	cmp	r1, r3
 8003844:	db05      	blt.n	8003852 <_printf_float+0x1c2>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	6121      	str	r1, [r4, #16]
 800384a:	07d8      	lsls	r0, r3, #31
 800384c:	d5ea      	bpl.n	8003824 <_printf_float+0x194>
 800384e:	1c4b      	adds	r3, r1, #1
 8003850:	e7e7      	b.n	8003822 <_printf_float+0x192>
 8003852:	2900      	cmp	r1, #0
 8003854:	bfd4      	ite	le
 8003856:	f1c1 0202 	rsble	r2, r1, #2
 800385a:	2201      	movgt	r2, #1
 800385c:	4413      	add	r3, r2
 800385e:	e7e0      	b.n	8003822 <_printf_float+0x192>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	055a      	lsls	r2, r3, #21
 8003864:	d407      	bmi.n	8003876 <_printf_float+0x1e6>
 8003866:	6923      	ldr	r3, [r4, #16]
 8003868:	4642      	mov	r2, r8
 800386a:	4631      	mov	r1, r6
 800386c:	4628      	mov	r0, r5
 800386e:	47b8      	blx	r7
 8003870:	3001      	adds	r0, #1
 8003872:	d12b      	bne.n	80038cc <_printf_float+0x23c>
 8003874:	e767      	b.n	8003746 <_printf_float+0xb6>
 8003876:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800387a:	f240 80dd 	bls.w	8003a38 <_printf_float+0x3a8>
 800387e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003882:	2200      	movs	r2, #0
 8003884:	2300      	movs	r3, #0
 8003886:	f7fd f927 	bl	8000ad8 <__aeabi_dcmpeq>
 800388a:	2800      	cmp	r0, #0
 800388c:	d033      	beq.n	80038f6 <_printf_float+0x266>
 800388e:	4a37      	ldr	r2, [pc, #220]	@ (800396c <_printf_float+0x2dc>)
 8003890:	2301      	movs	r3, #1
 8003892:	4631      	mov	r1, r6
 8003894:	4628      	mov	r0, r5
 8003896:	47b8      	blx	r7
 8003898:	3001      	adds	r0, #1
 800389a:	f43f af54 	beq.w	8003746 <_printf_float+0xb6>
 800389e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80038a2:	4543      	cmp	r3, r8
 80038a4:	db02      	blt.n	80038ac <_printf_float+0x21c>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	07d8      	lsls	r0, r3, #31
 80038aa:	d50f      	bpl.n	80038cc <_printf_float+0x23c>
 80038ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038b0:	4631      	mov	r1, r6
 80038b2:	4628      	mov	r0, r5
 80038b4:	47b8      	blx	r7
 80038b6:	3001      	adds	r0, #1
 80038b8:	f43f af45 	beq.w	8003746 <_printf_float+0xb6>
 80038bc:	f04f 0900 	mov.w	r9, #0
 80038c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80038c4:	f104 0a1a 	add.w	sl, r4, #26
 80038c8:	45c8      	cmp	r8, r9
 80038ca:	dc09      	bgt.n	80038e0 <_printf_float+0x250>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	079b      	lsls	r3, r3, #30
 80038d0:	f100 8103 	bmi.w	8003ada <_printf_float+0x44a>
 80038d4:	68e0      	ldr	r0, [r4, #12]
 80038d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80038d8:	4298      	cmp	r0, r3
 80038da:	bfb8      	it	lt
 80038dc:	4618      	movlt	r0, r3
 80038de:	e734      	b.n	800374a <_printf_float+0xba>
 80038e0:	2301      	movs	r3, #1
 80038e2:	4652      	mov	r2, sl
 80038e4:	4631      	mov	r1, r6
 80038e6:	4628      	mov	r0, r5
 80038e8:	47b8      	blx	r7
 80038ea:	3001      	adds	r0, #1
 80038ec:	f43f af2b 	beq.w	8003746 <_printf_float+0xb6>
 80038f0:	f109 0901 	add.w	r9, r9, #1
 80038f4:	e7e8      	b.n	80038c8 <_printf_float+0x238>
 80038f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	dc39      	bgt.n	8003970 <_printf_float+0x2e0>
 80038fc:	4a1b      	ldr	r2, [pc, #108]	@ (800396c <_printf_float+0x2dc>)
 80038fe:	2301      	movs	r3, #1
 8003900:	4631      	mov	r1, r6
 8003902:	4628      	mov	r0, r5
 8003904:	47b8      	blx	r7
 8003906:	3001      	adds	r0, #1
 8003908:	f43f af1d 	beq.w	8003746 <_printf_float+0xb6>
 800390c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003910:	ea59 0303 	orrs.w	r3, r9, r3
 8003914:	d102      	bne.n	800391c <_printf_float+0x28c>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	07d9      	lsls	r1, r3, #31
 800391a:	d5d7      	bpl.n	80038cc <_printf_float+0x23c>
 800391c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003920:	4631      	mov	r1, r6
 8003922:	4628      	mov	r0, r5
 8003924:	47b8      	blx	r7
 8003926:	3001      	adds	r0, #1
 8003928:	f43f af0d 	beq.w	8003746 <_printf_float+0xb6>
 800392c:	f04f 0a00 	mov.w	sl, #0
 8003930:	f104 0b1a 	add.w	fp, r4, #26
 8003934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003936:	425b      	negs	r3, r3
 8003938:	4553      	cmp	r3, sl
 800393a:	dc01      	bgt.n	8003940 <_printf_float+0x2b0>
 800393c:	464b      	mov	r3, r9
 800393e:	e793      	b.n	8003868 <_printf_float+0x1d8>
 8003940:	2301      	movs	r3, #1
 8003942:	465a      	mov	r2, fp
 8003944:	4631      	mov	r1, r6
 8003946:	4628      	mov	r0, r5
 8003948:	47b8      	blx	r7
 800394a:	3001      	adds	r0, #1
 800394c:	f43f aefb 	beq.w	8003746 <_printf_float+0xb6>
 8003950:	f10a 0a01 	add.w	sl, sl, #1
 8003954:	e7ee      	b.n	8003934 <_printf_float+0x2a4>
 8003956:	bf00      	nop
 8003958:	7fefffff 	.word	0x7fefffff
 800395c:	08005e68 	.word	0x08005e68
 8003960:	08005e6c 	.word	0x08005e6c
 8003964:	08005e70 	.word	0x08005e70
 8003968:	08005e74 	.word	0x08005e74
 800396c:	08005e78 	.word	0x08005e78
 8003970:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003972:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003976:	4553      	cmp	r3, sl
 8003978:	bfa8      	it	ge
 800397a:	4653      	movge	r3, sl
 800397c:	2b00      	cmp	r3, #0
 800397e:	4699      	mov	r9, r3
 8003980:	dc36      	bgt.n	80039f0 <_printf_float+0x360>
 8003982:	f04f 0b00 	mov.w	fp, #0
 8003986:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800398a:	f104 021a 	add.w	r2, r4, #26
 800398e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003990:	9306      	str	r3, [sp, #24]
 8003992:	eba3 0309 	sub.w	r3, r3, r9
 8003996:	455b      	cmp	r3, fp
 8003998:	dc31      	bgt.n	80039fe <_printf_float+0x36e>
 800399a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800399c:	459a      	cmp	sl, r3
 800399e:	dc3a      	bgt.n	8003a16 <_printf_float+0x386>
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	07da      	lsls	r2, r3, #31
 80039a4:	d437      	bmi.n	8003a16 <_printf_float+0x386>
 80039a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039a8:	ebaa 0903 	sub.w	r9, sl, r3
 80039ac:	9b06      	ldr	r3, [sp, #24]
 80039ae:	ebaa 0303 	sub.w	r3, sl, r3
 80039b2:	4599      	cmp	r9, r3
 80039b4:	bfa8      	it	ge
 80039b6:	4699      	movge	r9, r3
 80039b8:	f1b9 0f00 	cmp.w	r9, #0
 80039bc:	dc33      	bgt.n	8003a26 <_printf_float+0x396>
 80039be:	f04f 0800 	mov.w	r8, #0
 80039c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039c6:	f104 0b1a 	add.w	fp, r4, #26
 80039ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039cc:	ebaa 0303 	sub.w	r3, sl, r3
 80039d0:	eba3 0309 	sub.w	r3, r3, r9
 80039d4:	4543      	cmp	r3, r8
 80039d6:	f77f af79 	ble.w	80038cc <_printf_float+0x23c>
 80039da:	2301      	movs	r3, #1
 80039dc:	465a      	mov	r2, fp
 80039de:	4631      	mov	r1, r6
 80039e0:	4628      	mov	r0, r5
 80039e2:	47b8      	blx	r7
 80039e4:	3001      	adds	r0, #1
 80039e6:	f43f aeae 	beq.w	8003746 <_printf_float+0xb6>
 80039ea:	f108 0801 	add.w	r8, r8, #1
 80039ee:	e7ec      	b.n	80039ca <_printf_float+0x33a>
 80039f0:	4642      	mov	r2, r8
 80039f2:	4631      	mov	r1, r6
 80039f4:	4628      	mov	r0, r5
 80039f6:	47b8      	blx	r7
 80039f8:	3001      	adds	r0, #1
 80039fa:	d1c2      	bne.n	8003982 <_printf_float+0x2f2>
 80039fc:	e6a3      	b.n	8003746 <_printf_float+0xb6>
 80039fe:	2301      	movs	r3, #1
 8003a00:	4631      	mov	r1, r6
 8003a02:	4628      	mov	r0, r5
 8003a04:	9206      	str	r2, [sp, #24]
 8003a06:	47b8      	blx	r7
 8003a08:	3001      	adds	r0, #1
 8003a0a:	f43f ae9c 	beq.w	8003746 <_printf_float+0xb6>
 8003a0e:	9a06      	ldr	r2, [sp, #24]
 8003a10:	f10b 0b01 	add.w	fp, fp, #1
 8003a14:	e7bb      	b.n	800398e <_printf_float+0x2fe>
 8003a16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a1a:	4631      	mov	r1, r6
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	47b8      	blx	r7
 8003a20:	3001      	adds	r0, #1
 8003a22:	d1c0      	bne.n	80039a6 <_printf_float+0x316>
 8003a24:	e68f      	b.n	8003746 <_printf_float+0xb6>
 8003a26:	9a06      	ldr	r2, [sp, #24]
 8003a28:	464b      	mov	r3, r9
 8003a2a:	4442      	add	r2, r8
 8003a2c:	4631      	mov	r1, r6
 8003a2e:	4628      	mov	r0, r5
 8003a30:	47b8      	blx	r7
 8003a32:	3001      	adds	r0, #1
 8003a34:	d1c3      	bne.n	80039be <_printf_float+0x32e>
 8003a36:	e686      	b.n	8003746 <_printf_float+0xb6>
 8003a38:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003a3c:	f1ba 0f01 	cmp.w	sl, #1
 8003a40:	dc01      	bgt.n	8003a46 <_printf_float+0x3b6>
 8003a42:	07db      	lsls	r3, r3, #31
 8003a44:	d536      	bpl.n	8003ab4 <_printf_float+0x424>
 8003a46:	2301      	movs	r3, #1
 8003a48:	4642      	mov	r2, r8
 8003a4a:	4631      	mov	r1, r6
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	47b8      	blx	r7
 8003a50:	3001      	adds	r0, #1
 8003a52:	f43f ae78 	beq.w	8003746 <_printf_float+0xb6>
 8003a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	47b8      	blx	r7
 8003a60:	3001      	adds	r0, #1
 8003a62:	f43f ae70 	beq.w	8003746 <_printf_float+0xb6>
 8003a66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a72:	f7fd f831 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a76:	b9c0      	cbnz	r0, 8003aaa <_printf_float+0x41a>
 8003a78:	4653      	mov	r3, sl
 8003a7a:	f108 0201 	add.w	r2, r8, #1
 8003a7e:	4631      	mov	r1, r6
 8003a80:	4628      	mov	r0, r5
 8003a82:	47b8      	blx	r7
 8003a84:	3001      	adds	r0, #1
 8003a86:	d10c      	bne.n	8003aa2 <_printf_float+0x412>
 8003a88:	e65d      	b.n	8003746 <_printf_float+0xb6>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	465a      	mov	r2, fp
 8003a8e:	4631      	mov	r1, r6
 8003a90:	4628      	mov	r0, r5
 8003a92:	47b8      	blx	r7
 8003a94:	3001      	adds	r0, #1
 8003a96:	f43f ae56 	beq.w	8003746 <_printf_float+0xb6>
 8003a9a:	f108 0801 	add.w	r8, r8, #1
 8003a9e:	45d0      	cmp	r8, sl
 8003aa0:	dbf3      	blt.n	8003a8a <_printf_float+0x3fa>
 8003aa2:	464b      	mov	r3, r9
 8003aa4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003aa8:	e6df      	b.n	800386a <_printf_float+0x1da>
 8003aaa:	f04f 0800 	mov.w	r8, #0
 8003aae:	f104 0b1a 	add.w	fp, r4, #26
 8003ab2:	e7f4      	b.n	8003a9e <_printf_float+0x40e>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	4642      	mov	r2, r8
 8003ab8:	e7e1      	b.n	8003a7e <_printf_float+0x3ee>
 8003aba:	2301      	movs	r3, #1
 8003abc:	464a      	mov	r2, r9
 8003abe:	4631      	mov	r1, r6
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	47b8      	blx	r7
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	f43f ae3e 	beq.w	8003746 <_printf_float+0xb6>
 8003aca:	f108 0801 	add.w	r8, r8, #1
 8003ace:	68e3      	ldr	r3, [r4, #12]
 8003ad0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003ad2:	1a5b      	subs	r3, r3, r1
 8003ad4:	4543      	cmp	r3, r8
 8003ad6:	dcf0      	bgt.n	8003aba <_printf_float+0x42a>
 8003ad8:	e6fc      	b.n	80038d4 <_printf_float+0x244>
 8003ada:	f04f 0800 	mov.w	r8, #0
 8003ade:	f104 0919 	add.w	r9, r4, #25
 8003ae2:	e7f4      	b.n	8003ace <_printf_float+0x43e>

08003ae4 <_printf_common>:
 8003ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	4616      	mov	r6, r2
 8003aea:	4698      	mov	r8, r3
 8003aec:	688a      	ldr	r2, [r1, #8]
 8003aee:	690b      	ldr	r3, [r1, #16]
 8003af0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bfb8      	it	lt
 8003af8:	4613      	movlt	r3, r2
 8003afa:	6033      	str	r3, [r6, #0]
 8003afc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b00:	4607      	mov	r7, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	b10a      	cbz	r2, 8003b0a <_printf_common+0x26>
 8003b06:	3301      	adds	r3, #1
 8003b08:	6033      	str	r3, [r6, #0]
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	0699      	lsls	r1, r3, #26
 8003b0e:	bf42      	ittt	mi
 8003b10:	6833      	ldrmi	r3, [r6, #0]
 8003b12:	3302      	addmi	r3, #2
 8003b14:	6033      	strmi	r3, [r6, #0]
 8003b16:	6825      	ldr	r5, [r4, #0]
 8003b18:	f015 0506 	ands.w	r5, r5, #6
 8003b1c:	d106      	bne.n	8003b2c <_printf_common+0x48>
 8003b1e:	f104 0a19 	add.w	sl, r4, #25
 8003b22:	68e3      	ldr	r3, [r4, #12]
 8003b24:	6832      	ldr	r2, [r6, #0]
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	42ab      	cmp	r3, r5
 8003b2a:	dc26      	bgt.n	8003b7a <_printf_common+0x96>
 8003b2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	3b00      	subs	r3, #0
 8003b34:	bf18      	it	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	0692      	lsls	r2, r2, #26
 8003b3a:	d42b      	bmi.n	8003b94 <_printf_common+0xb0>
 8003b3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b40:	4641      	mov	r1, r8
 8003b42:	4638      	mov	r0, r7
 8003b44:	47c8      	blx	r9
 8003b46:	3001      	adds	r0, #1
 8003b48:	d01e      	beq.n	8003b88 <_printf_common+0xa4>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	6922      	ldr	r2, [r4, #16]
 8003b4e:	f003 0306 	and.w	r3, r3, #6
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf02      	ittt	eq
 8003b56:	68e5      	ldreq	r5, [r4, #12]
 8003b58:	6833      	ldreq	r3, [r6, #0]
 8003b5a:	1aed      	subeq	r5, r5, r3
 8003b5c:	68a3      	ldr	r3, [r4, #8]
 8003b5e:	bf0c      	ite	eq
 8003b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b64:	2500      	movne	r5, #0
 8003b66:	4293      	cmp	r3, r2
 8003b68:	bfc4      	itt	gt
 8003b6a:	1a9b      	subgt	r3, r3, r2
 8003b6c:	18ed      	addgt	r5, r5, r3
 8003b6e:	2600      	movs	r6, #0
 8003b70:	341a      	adds	r4, #26
 8003b72:	42b5      	cmp	r5, r6
 8003b74:	d11a      	bne.n	8003bac <_printf_common+0xc8>
 8003b76:	2000      	movs	r0, #0
 8003b78:	e008      	b.n	8003b8c <_printf_common+0xa8>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4652      	mov	r2, sl
 8003b7e:	4641      	mov	r1, r8
 8003b80:	4638      	mov	r0, r7
 8003b82:	47c8      	blx	r9
 8003b84:	3001      	adds	r0, #1
 8003b86:	d103      	bne.n	8003b90 <_printf_common+0xac>
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b90:	3501      	adds	r5, #1
 8003b92:	e7c6      	b.n	8003b22 <_printf_common+0x3e>
 8003b94:	18e1      	adds	r1, r4, r3
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	2030      	movs	r0, #48	@ 0x30
 8003b9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b9e:	4422      	add	r2, r4
 8003ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ba4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ba8:	3302      	adds	r3, #2
 8003baa:	e7c7      	b.n	8003b3c <_printf_common+0x58>
 8003bac:	2301      	movs	r3, #1
 8003bae:	4622      	mov	r2, r4
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	47c8      	blx	r9
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d0e6      	beq.n	8003b88 <_printf_common+0xa4>
 8003bba:	3601      	adds	r6, #1
 8003bbc:	e7d9      	b.n	8003b72 <_printf_common+0x8e>
	...

08003bc0 <_printf_i>:
 8003bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc4:	7e0f      	ldrb	r7, [r1, #24]
 8003bc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bc8:	2f78      	cmp	r7, #120	@ 0x78
 8003bca:	4691      	mov	r9, r2
 8003bcc:	4680      	mov	r8, r0
 8003bce:	460c      	mov	r4, r1
 8003bd0:	469a      	mov	sl, r3
 8003bd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bd6:	d807      	bhi.n	8003be8 <_printf_i+0x28>
 8003bd8:	2f62      	cmp	r7, #98	@ 0x62
 8003bda:	d80a      	bhi.n	8003bf2 <_printf_i+0x32>
 8003bdc:	2f00      	cmp	r7, #0
 8003bde:	f000 80d2 	beq.w	8003d86 <_printf_i+0x1c6>
 8003be2:	2f58      	cmp	r7, #88	@ 0x58
 8003be4:	f000 80b9 	beq.w	8003d5a <_printf_i+0x19a>
 8003be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bf0:	e03a      	b.n	8003c68 <_printf_i+0xa8>
 8003bf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bf6:	2b15      	cmp	r3, #21
 8003bf8:	d8f6      	bhi.n	8003be8 <_printf_i+0x28>
 8003bfa:	a101      	add	r1, pc, #4	@ (adr r1, 8003c00 <_printf_i+0x40>)
 8003bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c00:	08003c59 	.word	0x08003c59
 8003c04:	08003c6d 	.word	0x08003c6d
 8003c08:	08003be9 	.word	0x08003be9
 8003c0c:	08003be9 	.word	0x08003be9
 8003c10:	08003be9 	.word	0x08003be9
 8003c14:	08003be9 	.word	0x08003be9
 8003c18:	08003c6d 	.word	0x08003c6d
 8003c1c:	08003be9 	.word	0x08003be9
 8003c20:	08003be9 	.word	0x08003be9
 8003c24:	08003be9 	.word	0x08003be9
 8003c28:	08003be9 	.word	0x08003be9
 8003c2c:	08003d6d 	.word	0x08003d6d
 8003c30:	08003c97 	.word	0x08003c97
 8003c34:	08003d27 	.word	0x08003d27
 8003c38:	08003be9 	.word	0x08003be9
 8003c3c:	08003be9 	.word	0x08003be9
 8003c40:	08003d8f 	.word	0x08003d8f
 8003c44:	08003be9 	.word	0x08003be9
 8003c48:	08003c97 	.word	0x08003c97
 8003c4c:	08003be9 	.word	0x08003be9
 8003c50:	08003be9 	.word	0x08003be9
 8003c54:	08003d2f 	.word	0x08003d2f
 8003c58:	6833      	ldr	r3, [r6, #0]
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6032      	str	r2, [r6, #0]
 8003c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e09d      	b.n	8003da8 <_printf_i+0x1e8>
 8003c6c:	6833      	ldr	r3, [r6, #0]
 8003c6e:	6820      	ldr	r0, [r4, #0]
 8003c70:	1d19      	adds	r1, r3, #4
 8003c72:	6031      	str	r1, [r6, #0]
 8003c74:	0606      	lsls	r6, r0, #24
 8003c76:	d501      	bpl.n	8003c7c <_printf_i+0xbc>
 8003c78:	681d      	ldr	r5, [r3, #0]
 8003c7a:	e003      	b.n	8003c84 <_printf_i+0xc4>
 8003c7c:	0645      	lsls	r5, r0, #25
 8003c7e:	d5fb      	bpl.n	8003c78 <_printf_i+0xb8>
 8003c80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c84:	2d00      	cmp	r5, #0
 8003c86:	da03      	bge.n	8003c90 <_printf_i+0xd0>
 8003c88:	232d      	movs	r3, #45	@ 0x2d
 8003c8a:	426d      	negs	r5, r5
 8003c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c90:	4859      	ldr	r0, [pc, #356]	@ (8003df8 <_printf_i+0x238>)
 8003c92:	230a      	movs	r3, #10
 8003c94:	e011      	b.n	8003cba <_printf_i+0xfa>
 8003c96:	6821      	ldr	r1, [r4, #0]
 8003c98:	6833      	ldr	r3, [r6, #0]
 8003c9a:	0608      	lsls	r0, r1, #24
 8003c9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ca0:	d402      	bmi.n	8003ca8 <_printf_i+0xe8>
 8003ca2:	0649      	lsls	r1, r1, #25
 8003ca4:	bf48      	it	mi
 8003ca6:	b2ad      	uxthmi	r5, r5
 8003ca8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003caa:	4853      	ldr	r0, [pc, #332]	@ (8003df8 <_printf_i+0x238>)
 8003cac:	6033      	str	r3, [r6, #0]
 8003cae:	bf14      	ite	ne
 8003cb0:	230a      	movne	r3, #10
 8003cb2:	2308      	moveq	r3, #8
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cba:	6866      	ldr	r6, [r4, #4]
 8003cbc:	60a6      	str	r6, [r4, #8]
 8003cbe:	2e00      	cmp	r6, #0
 8003cc0:	bfa2      	ittt	ge
 8003cc2:	6821      	ldrge	r1, [r4, #0]
 8003cc4:	f021 0104 	bicge.w	r1, r1, #4
 8003cc8:	6021      	strge	r1, [r4, #0]
 8003cca:	b90d      	cbnz	r5, 8003cd0 <_printf_i+0x110>
 8003ccc:	2e00      	cmp	r6, #0
 8003cce:	d04b      	beq.n	8003d68 <_printf_i+0x1a8>
 8003cd0:	4616      	mov	r6, r2
 8003cd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cd6:	fb03 5711 	mls	r7, r3, r1, r5
 8003cda:	5dc7      	ldrb	r7, [r0, r7]
 8003cdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ce0:	462f      	mov	r7, r5
 8003ce2:	42bb      	cmp	r3, r7
 8003ce4:	460d      	mov	r5, r1
 8003ce6:	d9f4      	bls.n	8003cd2 <_printf_i+0x112>
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d10b      	bne.n	8003d04 <_printf_i+0x144>
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	07df      	lsls	r7, r3, #31
 8003cf0:	d508      	bpl.n	8003d04 <_printf_i+0x144>
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	6861      	ldr	r1, [r4, #4]
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	bfde      	ittt	le
 8003cfa:	2330      	movle	r3, #48	@ 0x30
 8003cfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d04:	1b92      	subs	r2, r2, r6
 8003d06:	6122      	str	r2, [r4, #16]
 8003d08:	f8cd a000 	str.w	sl, [sp]
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	aa03      	add	r2, sp, #12
 8003d10:	4621      	mov	r1, r4
 8003d12:	4640      	mov	r0, r8
 8003d14:	f7ff fee6 	bl	8003ae4 <_printf_common>
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d14a      	bne.n	8003db2 <_printf_i+0x1f2>
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	b004      	add	sp, #16
 8003d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	f043 0320 	orr.w	r3, r3, #32
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	4833      	ldr	r0, [pc, #204]	@ (8003dfc <_printf_i+0x23c>)
 8003d30:	2778      	movs	r7, #120	@ 0x78
 8003d32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	6831      	ldr	r1, [r6, #0]
 8003d3a:	061f      	lsls	r7, r3, #24
 8003d3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d40:	d402      	bmi.n	8003d48 <_printf_i+0x188>
 8003d42:	065f      	lsls	r7, r3, #25
 8003d44:	bf48      	it	mi
 8003d46:	b2ad      	uxthmi	r5, r5
 8003d48:	6031      	str	r1, [r6, #0]
 8003d4a:	07d9      	lsls	r1, r3, #31
 8003d4c:	bf44      	itt	mi
 8003d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d52:	6023      	strmi	r3, [r4, #0]
 8003d54:	b11d      	cbz	r5, 8003d5e <_printf_i+0x19e>
 8003d56:	2310      	movs	r3, #16
 8003d58:	e7ac      	b.n	8003cb4 <_printf_i+0xf4>
 8003d5a:	4827      	ldr	r0, [pc, #156]	@ (8003df8 <_printf_i+0x238>)
 8003d5c:	e7e9      	b.n	8003d32 <_printf_i+0x172>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	f023 0320 	bic.w	r3, r3, #32
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	e7f6      	b.n	8003d56 <_printf_i+0x196>
 8003d68:	4616      	mov	r6, r2
 8003d6a:	e7bd      	b.n	8003ce8 <_printf_i+0x128>
 8003d6c:	6833      	ldr	r3, [r6, #0]
 8003d6e:	6825      	ldr	r5, [r4, #0]
 8003d70:	6961      	ldr	r1, [r4, #20]
 8003d72:	1d18      	adds	r0, r3, #4
 8003d74:	6030      	str	r0, [r6, #0]
 8003d76:	062e      	lsls	r6, r5, #24
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	d501      	bpl.n	8003d80 <_printf_i+0x1c0>
 8003d7c:	6019      	str	r1, [r3, #0]
 8003d7e:	e002      	b.n	8003d86 <_printf_i+0x1c6>
 8003d80:	0668      	lsls	r0, r5, #25
 8003d82:	d5fb      	bpl.n	8003d7c <_printf_i+0x1bc>
 8003d84:	8019      	strh	r1, [r3, #0]
 8003d86:	2300      	movs	r3, #0
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	4616      	mov	r6, r2
 8003d8c:	e7bc      	b.n	8003d08 <_printf_i+0x148>
 8003d8e:	6833      	ldr	r3, [r6, #0]
 8003d90:	1d1a      	adds	r2, r3, #4
 8003d92:	6032      	str	r2, [r6, #0]
 8003d94:	681e      	ldr	r6, [r3, #0]
 8003d96:	6862      	ldr	r2, [r4, #4]
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	f7fc fa20 	bl	80001e0 <memchr>
 8003da0:	b108      	cbz	r0, 8003da6 <_printf_i+0x1e6>
 8003da2:	1b80      	subs	r0, r0, r6
 8003da4:	6060      	str	r0, [r4, #4]
 8003da6:	6863      	ldr	r3, [r4, #4]
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	2300      	movs	r3, #0
 8003dac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db0:	e7aa      	b.n	8003d08 <_printf_i+0x148>
 8003db2:	6923      	ldr	r3, [r4, #16]
 8003db4:	4632      	mov	r2, r6
 8003db6:	4649      	mov	r1, r9
 8003db8:	4640      	mov	r0, r8
 8003dba:	47d0      	blx	sl
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d0ad      	beq.n	8003d1c <_printf_i+0x15c>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	079b      	lsls	r3, r3, #30
 8003dc4:	d413      	bmi.n	8003dee <_printf_i+0x22e>
 8003dc6:	68e0      	ldr	r0, [r4, #12]
 8003dc8:	9b03      	ldr	r3, [sp, #12]
 8003dca:	4298      	cmp	r0, r3
 8003dcc:	bfb8      	it	lt
 8003dce:	4618      	movlt	r0, r3
 8003dd0:	e7a6      	b.n	8003d20 <_printf_i+0x160>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4632      	mov	r2, r6
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4640      	mov	r0, r8
 8003dda:	47d0      	blx	sl
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d09d      	beq.n	8003d1c <_printf_i+0x15c>
 8003de0:	3501      	adds	r5, #1
 8003de2:	68e3      	ldr	r3, [r4, #12]
 8003de4:	9903      	ldr	r1, [sp, #12]
 8003de6:	1a5b      	subs	r3, r3, r1
 8003de8:	42ab      	cmp	r3, r5
 8003dea:	dcf2      	bgt.n	8003dd2 <_printf_i+0x212>
 8003dec:	e7eb      	b.n	8003dc6 <_printf_i+0x206>
 8003dee:	2500      	movs	r5, #0
 8003df0:	f104 0619 	add.w	r6, r4, #25
 8003df4:	e7f5      	b.n	8003de2 <_printf_i+0x222>
 8003df6:	bf00      	nop
 8003df8:	08005e7a 	.word	0x08005e7a
 8003dfc:	08005e8b 	.word	0x08005e8b

08003e00 <std>:
 8003e00:	2300      	movs	r3, #0
 8003e02:	b510      	push	{r4, lr}
 8003e04:	4604      	mov	r4, r0
 8003e06:	e9c0 3300 	strd	r3, r3, [r0]
 8003e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e0e:	6083      	str	r3, [r0, #8]
 8003e10:	8181      	strh	r1, [r0, #12]
 8003e12:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e14:	81c2      	strh	r2, [r0, #14]
 8003e16:	6183      	str	r3, [r0, #24]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	305c      	adds	r0, #92	@ 0x5c
 8003e1e:	f000 f8f4 	bl	800400a <memset>
 8003e22:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <std+0x58>)
 8003e24:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <std+0x5c>)
 8003e28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <std+0x60>)
 8003e2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e64 <std+0x64>)
 8003e30:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e32:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <std+0x68>)
 8003e34:	6224      	str	r4, [r4, #32]
 8003e36:	429c      	cmp	r4, r3
 8003e38:	d006      	beq.n	8003e48 <std+0x48>
 8003e3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e3e:	4294      	cmp	r4, r2
 8003e40:	d002      	beq.n	8003e48 <std+0x48>
 8003e42:	33d0      	adds	r3, #208	@ 0xd0
 8003e44:	429c      	cmp	r4, r3
 8003e46:	d105      	bne.n	8003e54 <std+0x54>
 8003e48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e50:	f000 b958 	b.w	8004104 <__retarget_lock_init_recursive>
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	bf00      	nop
 8003e58:	08003f85 	.word	0x08003f85
 8003e5c:	08003fa7 	.word	0x08003fa7
 8003e60:	08003fdf 	.word	0x08003fdf
 8003e64:	08004003 	.word	0x08004003
 8003e68:	200003e4 	.word	0x200003e4

08003e6c <stdio_exit_handler>:
 8003e6c:	4a02      	ldr	r2, [pc, #8]	@ (8003e78 <stdio_exit_handler+0xc>)
 8003e6e:	4903      	ldr	r1, [pc, #12]	@ (8003e7c <stdio_exit_handler+0x10>)
 8003e70:	4803      	ldr	r0, [pc, #12]	@ (8003e80 <stdio_exit_handler+0x14>)
 8003e72:	f000 b869 	b.w	8003f48 <_fwalk_sglue>
 8003e76:	bf00      	nop
 8003e78:	20000004 	.word	0x20000004
 8003e7c:	080057cd 	.word	0x080057cd
 8003e80:	20000014 	.word	0x20000014

08003e84 <cleanup_stdio>:
 8003e84:	6841      	ldr	r1, [r0, #4]
 8003e86:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb8 <cleanup_stdio+0x34>)
 8003e88:	4299      	cmp	r1, r3
 8003e8a:	b510      	push	{r4, lr}
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	d001      	beq.n	8003e94 <cleanup_stdio+0x10>
 8003e90:	f001 fc9c 	bl	80057cc <_fflush_r>
 8003e94:	68a1      	ldr	r1, [r4, #8]
 8003e96:	4b09      	ldr	r3, [pc, #36]	@ (8003ebc <cleanup_stdio+0x38>)
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	d002      	beq.n	8003ea2 <cleanup_stdio+0x1e>
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f001 fc95 	bl	80057cc <_fflush_r>
 8003ea2:	68e1      	ldr	r1, [r4, #12]
 8003ea4:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <cleanup_stdio+0x3c>)
 8003ea6:	4299      	cmp	r1, r3
 8003ea8:	d004      	beq.n	8003eb4 <cleanup_stdio+0x30>
 8003eaa:	4620      	mov	r0, r4
 8003eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb0:	f001 bc8c 	b.w	80057cc <_fflush_r>
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	bf00      	nop
 8003eb8:	200003e4 	.word	0x200003e4
 8003ebc:	2000044c 	.word	0x2000044c
 8003ec0:	200004b4 	.word	0x200004b4

08003ec4 <global_stdio_init.part.0>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <global_stdio_init.part.0+0x30>)
 8003ec8:	4c0b      	ldr	r4, [pc, #44]	@ (8003ef8 <global_stdio_init.part.0+0x34>)
 8003eca:	4a0c      	ldr	r2, [pc, #48]	@ (8003efc <global_stdio_init.part.0+0x38>)
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	4620      	mov	r0, r4
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	f7ff ff94 	bl	8003e00 <std>
 8003ed8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003edc:	2201      	movs	r2, #1
 8003ede:	2109      	movs	r1, #9
 8003ee0:	f7ff ff8e 	bl	8003e00 <std>
 8003ee4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ee8:	2202      	movs	r2, #2
 8003eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eee:	2112      	movs	r1, #18
 8003ef0:	f7ff bf86 	b.w	8003e00 <std>
 8003ef4:	2000051c 	.word	0x2000051c
 8003ef8:	200003e4 	.word	0x200003e4
 8003efc:	08003e6d 	.word	0x08003e6d

08003f00 <__sfp_lock_acquire>:
 8003f00:	4801      	ldr	r0, [pc, #4]	@ (8003f08 <__sfp_lock_acquire+0x8>)
 8003f02:	f000 b900 	b.w	8004106 <__retarget_lock_acquire_recursive>
 8003f06:	bf00      	nop
 8003f08:	20000525 	.word	0x20000525

08003f0c <__sfp_lock_release>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	@ (8003f14 <__sfp_lock_release+0x8>)
 8003f0e:	f000 b8fb 	b.w	8004108 <__retarget_lock_release_recursive>
 8003f12:	bf00      	nop
 8003f14:	20000525 	.word	0x20000525

08003f18 <__sinit>:
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	f7ff fff0 	bl	8003f00 <__sfp_lock_acquire>
 8003f20:	6a23      	ldr	r3, [r4, #32]
 8003f22:	b11b      	cbz	r3, 8003f2c <__sinit+0x14>
 8003f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f28:	f7ff bff0 	b.w	8003f0c <__sfp_lock_release>
 8003f2c:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <__sinit+0x28>)
 8003f2e:	6223      	str	r3, [r4, #32]
 8003f30:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <__sinit+0x2c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f5      	bne.n	8003f24 <__sinit+0xc>
 8003f38:	f7ff ffc4 	bl	8003ec4 <global_stdio_init.part.0>
 8003f3c:	e7f2      	b.n	8003f24 <__sinit+0xc>
 8003f3e:	bf00      	nop
 8003f40:	08003e85 	.word	0x08003e85
 8003f44:	2000051c 	.word	0x2000051c

08003f48 <_fwalk_sglue>:
 8003f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	4688      	mov	r8, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	2600      	movs	r6, #0
 8003f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f58:	f1b9 0901 	subs.w	r9, r9, #1
 8003f5c:	d505      	bpl.n	8003f6a <_fwalk_sglue+0x22>
 8003f5e:	6824      	ldr	r4, [r4, #0]
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	d1f7      	bne.n	8003f54 <_fwalk_sglue+0xc>
 8003f64:	4630      	mov	r0, r6
 8003f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f6a:	89ab      	ldrh	r3, [r5, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d907      	bls.n	8003f80 <_fwalk_sglue+0x38>
 8003f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f74:	3301      	adds	r3, #1
 8003f76:	d003      	beq.n	8003f80 <_fwalk_sglue+0x38>
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c0      	blx	r8
 8003f7e:	4306      	orrs	r6, r0
 8003f80:	3568      	adds	r5, #104	@ 0x68
 8003f82:	e7e9      	b.n	8003f58 <_fwalk_sglue+0x10>

08003f84 <__sread>:
 8003f84:	b510      	push	{r4, lr}
 8003f86:	460c      	mov	r4, r1
 8003f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8c:	f000 f86c 	bl	8004068 <_read_r>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	bfab      	itete	ge
 8003f94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f96:	89a3      	ldrhlt	r3, [r4, #12]
 8003f98:	181b      	addge	r3, r3, r0
 8003f9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f9e:	bfac      	ite	ge
 8003fa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003fa2:	81a3      	strhlt	r3, [r4, #12]
 8003fa4:	bd10      	pop	{r4, pc}

08003fa6 <__swrite>:
 8003fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003faa:	461f      	mov	r7, r3
 8003fac:	898b      	ldrh	r3, [r1, #12]
 8003fae:	05db      	lsls	r3, r3, #23
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	d505      	bpl.n	8003fc4 <__swrite+0x1e>
 8003fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f000 f840 	bl	8004044 <_lseek_r>
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fce:	81a3      	strh	r3, [r4, #12]
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	463b      	mov	r3, r7
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fda:	f000 b857 	b.w	800408c <_write_r>

08003fde <__sseek>:
 8003fde:	b510      	push	{r4, lr}
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe6:	f000 f82d 	bl	8004044 <_lseek_r>
 8003fea:	1c43      	adds	r3, r0, #1
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	bf15      	itete	ne
 8003ff0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ff2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ff6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ffa:	81a3      	strheq	r3, [r4, #12]
 8003ffc:	bf18      	it	ne
 8003ffe:	81a3      	strhne	r3, [r4, #12]
 8004000:	bd10      	pop	{r4, pc}

08004002 <__sclose>:
 8004002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004006:	f000 b80d 	b.w	8004024 <_close_r>

0800400a <memset>:
 800400a:	4402      	add	r2, r0
 800400c:	4603      	mov	r3, r0
 800400e:	4293      	cmp	r3, r2
 8004010:	d100      	bne.n	8004014 <memset+0xa>
 8004012:	4770      	bx	lr
 8004014:	f803 1b01 	strb.w	r1, [r3], #1
 8004018:	e7f9      	b.n	800400e <memset+0x4>
	...

0800401c <_localeconv_r>:
 800401c:	4800      	ldr	r0, [pc, #0]	@ (8004020 <_localeconv_r+0x4>)
 800401e:	4770      	bx	lr
 8004020:	20000150 	.word	0x20000150

08004024 <_close_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4d06      	ldr	r5, [pc, #24]	@ (8004040 <_close_r+0x1c>)
 8004028:	2300      	movs	r3, #0
 800402a:	4604      	mov	r4, r0
 800402c:	4608      	mov	r0, r1
 800402e:	602b      	str	r3, [r5, #0]
 8004030:	f7ff f9ea 	bl	8003408 <_close>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_close_r+0x1a>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_close_r+0x1a>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	20000520 	.word	0x20000520

08004044 <_lseek_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4d07      	ldr	r5, [pc, #28]	@ (8004064 <_lseek_r+0x20>)
 8004048:	4604      	mov	r4, r0
 800404a:	4608      	mov	r0, r1
 800404c:	4611      	mov	r1, r2
 800404e:	2200      	movs	r2, #0
 8004050:	602a      	str	r2, [r5, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	f7ff f9ff 	bl	8003456 <_lseek>
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	d102      	bne.n	8004062 <_lseek_r+0x1e>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	b103      	cbz	r3, 8004062 <_lseek_r+0x1e>
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	bd38      	pop	{r3, r4, r5, pc}
 8004064:	20000520 	.word	0x20000520

08004068 <_read_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4d07      	ldr	r5, [pc, #28]	@ (8004088 <_read_r+0x20>)
 800406c:	4604      	mov	r4, r0
 800406e:	4608      	mov	r0, r1
 8004070:	4611      	mov	r1, r2
 8004072:	2200      	movs	r2, #0
 8004074:	602a      	str	r2, [r5, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	f7ff f98d 	bl	8003396 <_read>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d102      	bne.n	8004086 <_read_r+0x1e>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b103      	cbz	r3, 8004086 <_read_r+0x1e>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	20000520 	.word	0x20000520

0800408c <_write_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4d07      	ldr	r5, [pc, #28]	@ (80040ac <_write_r+0x20>)
 8004090:	4604      	mov	r4, r0
 8004092:	4608      	mov	r0, r1
 8004094:	4611      	mov	r1, r2
 8004096:	2200      	movs	r2, #0
 8004098:	602a      	str	r2, [r5, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	f7ff f998 	bl	80033d0 <_write>
 80040a0:	1c43      	adds	r3, r0, #1
 80040a2:	d102      	bne.n	80040aa <_write_r+0x1e>
 80040a4:	682b      	ldr	r3, [r5, #0]
 80040a6:	b103      	cbz	r3, 80040aa <_write_r+0x1e>
 80040a8:	6023      	str	r3, [r4, #0]
 80040aa:	bd38      	pop	{r3, r4, r5, pc}
 80040ac:	20000520 	.word	0x20000520

080040b0 <__errno>:
 80040b0:	4b01      	ldr	r3, [pc, #4]	@ (80040b8 <__errno+0x8>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000010 	.word	0x20000010

080040bc <__libc_init_array>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4d0d      	ldr	r5, [pc, #52]	@ (80040f4 <__libc_init_array+0x38>)
 80040c0:	4c0d      	ldr	r4, [pc, #52]	@ (80040f8 <__libc_init_array+0x3c>)
 80040c2:	1b64      	subs	r4, r4, r5
 80040c4:	10a4      	asrs	r4, r4, #2
 80040c6:	2600      	movs	r6, #0
 80040c8:	42a6      	cmp	r6, r4
 80040ca:	d109      	bne.n	80040e0 <__libc_init_array+0x24>
 80040cc:	4d0b      	ldr	r5, [pc, #44]	@ (80040fc <__libc_init_array+0x40>)
 80040ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004100 <__libc_init_array+0x44>)
 80040d0:	f001 febc 	bl	8005e4c <_init>
 80040d4:	1b64      	subs	r4, r4, r5
 80040d6:	10a4      	asrs	r4, r4, #2
 80040d8:	2600      	movs	r6, #0
 80040da:	42a6      	cmp	r6, r4
 80040dc:	d105      	bne.n	80040ea <__libc_init_array+0x2e>
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e4:	4798      	blx	r3
 80040e6:	3601      	adds	r6, #1
 80040e8:	e7ee      	b.n	80040c8 <__libc_init_array+0xc>
 80040ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ee:	4798      	blx	r3
 80040f0:	3601      	adds	r6, #1
 80040f2:	e7f2      	b.n	80040da <__libc_init_array+0x1e>
 80040f4:	080061e0 	.word	0x080061e0
 80040f8:	080061e0 	.word	0x080061e0
 80040fc:	080061e0 	.word	0x080061e0
 8004100:	080061e4 	.word	0x080061e4

08004104 <__retarget_lock_init_recursive>:
 8004104:	4770      	bx	lr

08004106 <__retarget_lock_acquire_recursive>:
 8004106:	4770      	bx	lr

08004108 <__retarget_lock_release_recursive>:
 8004108:	4770      	bx	lr

0800410a <memcpy>:
 800410a:	440a      	add	r2, r1
 800410c:	4291      	cmp	r1, r2
 800410e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004112:	d100      	bne.n	8004116 <memcpy+0xc>
 8004114:	4770      	bx	lr
 8004116:	b510      	push	{r4, lr}
 8004118:	f811 4b01 	ldrb.w	r4, [r1], #1
 800411c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004120:	4291      	cmp	r1, r2
 8004122:	d1f9      	bne.n	8004118 <memcpy+0xe>
 8004124:	bd10      	pop	{r4, pc}

08004126 <quorem>:
 8004126:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412a:	6903      	ldr	r3, [r0, #16]
 800412c:	690c      	ldr	r4, [r1, #16]
 800412e:	42a3      	cmp	r3, r4
 8004130:	4607      	mov	r7, r0
 8004132:	db7e      	blt.n	8004232 <quorem+0x10c>
 8004134:	3c01      	subs	r4, #1
 8004136:	f101 0814 	add.w	r8, r1, #20
 800413a:	00a3      	lsls	r3, r4, #2
 800413c:	f100 0514 	add.w	r5, r0, #20
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800414c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004150:	3301      	adds	r3, #1
 8004152:	429a      	cmp	r2, r3
 8004154:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004158:	fbb2 f6f3 	udiv	r6, r2, r3
 800415c:	d32e      	bcc.n	80041bc <quorem+0x96>
 800415e:	f04f 0a00 	mov.w	sl, #0
 8004162:	46c4      	mov	ip, r8
 8004164:	46ae      	mov	lr, r5
 8004166:	46d3      	mov	fp, sl
 8004168:	f85c 3b04 	ldr.w	r3, [ip], #4
 800416c:	b298      	uxth	r0, r3
 800416e:	fb06 a000 	mla	r0, r6, r0, sl
 8004172:	0c02      	lsrs	r2, r0, #16
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	fb06 2303 	mla	r3, r6, r3, r2
 800417a:	f8de 2000 	ldr.w	r2, [lr]
 800417e:	b280      	uxth	r0, r0
 8004180:	b292      	uxth	r2, r2
 8004182:	1a12      	subs	r2, r2, r0
 8004184:	445a      	add	r2, fp
 8004186:	f8de 0000 	ldr.w	r0, [lr]
 800418a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800418e:	b29b      	uxth	r3, r3
 8004190:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004194:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004198:	b292      	uxth	r2, r2
 800419a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800419e:	45e1      	cmp	r9, ip
 80041a0:	f84e 2b04 	str.w	r2, [lr], #4
 80041a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80041a8:	d2de      	bcs.n	8004168 <quorem+0x42>
 80041aa:	9b00      	ldr	r3, [sp, #0]
 80041ac:	58eb      	ldr	r3, [r5, r3]
 80041ae:	b92b      	cbnz	r3, 80041bc <quorem+0x96>
 80041b0:	9b01      	ldr	r3, [sp, #4]
 80041b2:	3b04      	subs	r3, #4
 80041b4:	429d      	cmp	r5, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	d32f      	bcc.n	800421a <quorem+0xf4>
 80041ba:	613c      	str	r4, [r7, #16]
 80041bc:	4638      	mov	r0, r7
 80041be:	f001 f979 	bl	80054b4 <__mcmp>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	db25      	blt.n	8004212 <quorem+0xec>
 80041c6:	4629      	mov	r1, r5
 80041c8:	2000      	movs	r0, #0
 80041ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80041ce:	f8d1 c000 	ldr.w	ip, [r1]
 80041d2:	fa1f fe82 	uxth.w	lr, r2
 80041d6:	fa1f f38c 	uxth.w	r3, ip
 80041da:	eba3 030e 	sub.w	r3, r3, lr
 80041de:	4403      	add	r3, r0
 80041e0:	0c12      	lsrs	r2, r2, #16
 80041e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80041e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041f0:	45c1      	cmp	r9, r8
 80041f2:	f841 3b04 	str.w	r3, [r1], #4
 80041f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80041fa:	d2e6      	bcs.n	80041ca <quorem+0xa4>
 80041fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004200:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004204:	b922      	cbnz	r2, 8004210 <quorem+0xea>
 8004206:	3b04      	subs	r3, #4
 8004208:	429d      	cmp	r5, r3
 800420a:	461a      	mov	r2, r3
 800420c:	d30b      	bcc.n	8004226 <quorem+0x100>
 800420e:	613c      	str	r4, [r7, #16]
 8004210:	3601      	adds	r6, #1
 8004212:	4630      	mov	r0, r6
 8004214:	b003      	add	sp, #12
 8004216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	3b04      	subs	r3, #4
 800421e:	2a00      	cmp	r2, #0
 8004220:	d1cb      	bne.n	80041ba <quorem+0x94>
 8004222:	3c01      	subs	r4, #1
 8004224:	e7c6      	b.n	80041b4 <quorem+0x8e>
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	3b04      	subs	r3, #4
 800422a:	2a00      	cmp	r2, #0
 800422c:	d1ef      	bne.n	800420e <quorem+0xe8>
 800422e:	3c01      	subs	r4, #1
 8004230:	e7ea      	b.n	8004208 <quorem+0xe2>
 8004232:	2000      	movs	r0, #0
 8004234:	e7ee      	b.n	8004214 <quorem+0xee>
	...

08004238 <_dtoa_r>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	69c7      	ldr	r7, [r0, #28]
 800423e:	b099      	sub	sp, #100	@ 0x64
 8004240:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004244:	ec55 4b10 	vmov	r4, r5, d0
 8004248:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800424a:	9109      	str	r1, [sp, #36]	@ 0x24
 800424c:	4683      	mov	fp, r0
 800424e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004250:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004252:	b97f      	cbnz	r7, 8004274 <_dtoa_r+0x3c>
 8004254:	2010      	movs	r0, #16
 8004256:	f000 fdfd 	bl	8004e54 <malloc>
 800425a:	4602      	mov	r2, r0
 800425c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004260:	b920      	cbnz	r0, 800426c <_dtoa_r+0x34>
 8004262:	4ba7      	ldr	r3, [pc, #668]	@ (8004500 <_dtoa_r+0x2c8>)
 8004264:	21ef      	movs	r1, #239	@ 0xef
 8004266:	48a7      	ldr	r0, [pc, #668]	@ (8004504 <_dtoa_r+0x2cc>)
 8004268:	f001 fae8 	bl	800583c <__assert_func>
 800426c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004270:	6007      	str	r7, [r0, #0]
 8004272:	60c7      	str	r7, [r0, #12]
 8004274:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004278:	6819      	ldr	r1, [r3, #0]
 800427a:	b159      	cbz	r1, 8004294 <_dtoa_r+0x5c>
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	604a      	str	r2, [r1, #4]
 8004280:	2301      	movs	r3, #1
 8004282:	4093      	lsls	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
 8004286:	4658      	mov	r0, fp
 8004288:	f000 feda 	bl	8005040 <_Bfree>
 800428c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	1e2b      	subs	r3, r5, #0
 8004296:	bfb9      	ittee	lt
 8004298:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800429c:	9303      	strlt	r3, [sp, #12]
 800429e:	2300      	movge	r3, #0
 80042a0:	6033      	strge	r3, [r6, #0]
 80042a2:	9f03      	ldr	r7, [sp, #12]
 80042a4:	4b98      	ldr	r3, [pc, #608]	@ (8004508 <_dtoa_r+0x2d0>)
 80042a6:	bfbc      	itt	lt
 80042a8:	2201      	movlt	r2, #1
 80042aa:	6032      	strlt	r2, [r6, #0]
 80042ac:	43bb      	bics	r3, r7
 80042ae:	d112      	bne.n	80042d6 <_dtoa_r+0x9e>
 80042b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80042b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80042bc:	4323      	orrs	r3, r4
 80042be:	f000 854d 	beq.w	8004d5c <_dtoa_r+0xb24>
 80042c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80042c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800451c <_dtoa_r+0x2e4>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 854f 	beq.w	8004d6c <_dtoa_r+0xb34>
 80042ce:	f10a 0303 	add.w	r3, sl, #3
 80042d2:	f000 bd49 	b.w	8004d68 <_dtoa_r+0xb30>
 80042d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80042da:	2200      	movs	r2, #0
 80042dc:	ec51 0b17 	vmov	r0, r1, d7
 80042e0:	2300      	movs	r3, #0
 80042e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80042e6:	f7fc fbf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80042ea:	4680      	mov	r8, r0
 80042ec:	b158      	cbz	r0, 8004306 <_dtoa_r+0xce>
 80042ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80042f0:	2301      	movs	r3, #1
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80042f6:	b113      	cbz	r3, 80042fe <_dtoa_r+0xc6>
 80042f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80042fa:	4b84      	ldr	r3, [pc, #528]	@ (800450c <_dtoa_r+0x2d4>)
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004520 <_dtoa_r+0x2e8>
 8004302:	f000 bd33 	b.w	8004d6c <_dtoa_r+0xb34>
 8004306:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800430a:	aa16      	add	r2, sp, #88	@ 0x58
 800430c:	a917      	add	r1, sp, #92	@ 0x5c
 800430e:	4658      	mov	r0, fp
 8004310:	f001 f980 	bl	8005614 <__d2b>
 8004314:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004318:	4681      	mov	r9, r0
 800431a:	2e00      	cmp	r6, #0
 800431c:	d077      	beq.n	800440e <_dtoa_r+0x1d6>
 800431e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004320:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800432c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004330:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004334:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004338:	4619      	mov	r1, r3
 800433a:	2200      	movs	r2, #0
 800433c:	4b74      	ldr	r3, [pc, #464]	@ (8004510 <_dtoa_r+0x2d8>)
 800433e:	f7fb ffab 	bl	8000298 <__aeabi_dsub>
 8004342:	a369      	add	r3, pc, #420	@ (adr r3, 80044e8 <_dtoa_r+0x2b0>)
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f7fc f95e 	bl	8000608 <__aeabi_dmul>
 800434c:	a368      	add	r3, pc, #416	@ (adr r3, 80044f0 <_dtoa_r+0x2b8>)
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f7fb ffa3 	bl	800029c <__adddf3>
 8004356:	4604      	mov	r4, r0
 8004358:	4630      	mov	r0, r6
 800435a:	460d      	mov	r5, r1
 800435c:	f7fc f8ea 	bl	8000534 <__aeabi_i2d>
 8004360:	a365      	add	r3, pc, #404	@ (adr r3, 80044f8 <_dtoa_r+0x2c0>)
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f7fc f94f 	bl	8000608 <__aeabi_dmul>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	f7fb ff93 	bl	800029c <__adddf3>
 8004376:	4604      	mov	r4, r0
 8004378:	460d      	mov	r5, r1
 800437a:	f7fc fbf5 	bl	8000b68 <__aeabi_d2iz>
 800437e:	2200      	movs	r2, #0
 8004380:	4607      	mov	r7, r0
 8004382:	2300      	movs	r3, #0
 8004384:	4620      	mov	r0, r4
 8004386:	4629      	mov	r1, r5
 8004388:	f7fc fbb0 	bl	8000aec <__aeabi_dcmplt>
 800438c:	b140      	cbz	r0, 80043a0 <_dtoa_r+0x168>
 800438e:	4638      	mov	r0, r7
 8004390:	f7fc f8d0 	bl	8000534 <__aeabi_i2d>
 8004394:	4622      	mov	r2, r4
 8004396:	462b      	mov	r3, r5
 8004398:	f7fc fb9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800439c:	b900      	cbnz	r0, 80043a0 <_dtoa_r+0x168>
 800439e:	3f01      	subs	r7, #1
 80043a0:	2f16      	cmp	r7, #22
 80043a2:	d851      	bhi.n	8004448 <_dtoa_r+0x210>
 80043a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004514 <_dtoa_r+0x2dc>)
 80043a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80043b2:	f7fc fb9b 	bl	8000aec <__aeabi_dcmplt>
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d048      	beq.n	800444c <_dtoa_r+0x214>
 80043ba:	3f01      	subs	r7, #1
 80043bc:	2300      	movs	r3, #0
 80043be:	9312      	str	r3, [sp, #72]	@ 0x48
 80043c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80043c2:	1b9b      	subs	r3, r3, r6
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	bf44      	itt	mi
 80043c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80043cc:	2300      	movmi	r3, #0
 80043ce:	9208      	str	r2, [sp, #32]
 80043d0:	bf54      	ite	pl
 80043d2:	f04f 0800 	movpl.w	r8, #0
 80043d6:	9308      	strmi	r3, [sp, #32]
 80043d8:	2f00      	cmp	r7, #0
 80043da:	db39      	blt.n	8004450 <_dtoa_r+0x218>
 80043dc:	9b08      	ldr	r3, [sp, #32]
 80043de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80043e0:	443b      	add	r3, r7
 80043e2:	9308      	str	r3, [sp, #32]
 80043e4:	2300      	movs	r3, #0
 80043e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80043e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ea:	2b09      	cmp	r3, #9
 80043ec:	d864      	bhi.n	80044b8 <_dtoa_r+0x280>
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	bfc4      	itt	gt
 80043f2:	3b04      	subgt	r3, #4
 80043f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80043f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043f8:	f1a3 0302 	sub.w	r3, r3, #2
 80043fc:	bfcc      	ite	gt
 80043fe:	2400      	movgt	r4, #0
 8004400:	2401      	movle	r4, #1
 8004402:	2b03      	cmp	r3, #3
 8004404:	d863      	bhi.n	80044ce <_dtoa_r+0x296>
 8004406:	e8df f003 	tbb	[pc, r3]
 800440a:	372a      	.short	0x372a
 800440c:	5535      	.short	0x5535
 800440e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004412:	441e      	add	r6, r3
 8004414:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004418:	2b20      	cmp	r3, #32
 800441a:	bfc1      	itttt	gt
 800441c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004420:	409f      	lslgt	r7, r3
 8004422:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004426:	fa24 f303 	lsrgt.w	r3, r4, r3
 800442a:	bfd6      	itet	le
 800442c:	f1c3 0320 	rsble	r3, r3, #32
 8004430:	ea47 0003 	orrgt.w	r0, r7, r3
 8004434:	fa04 f003 	lslle.w	r0, r4, r3
 8004438:	f7fc f86c 	bl	8000514 <__aeabi_ui2d>
 800443c:	2201      	movs	r2, #1
 800443e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004442:	3e01      	subs	r6, #1
 8004444:	9214      	str	r2, [sp, #80]	@ 0x50
 8004446:	e777      	b.n	8004338 <_dtoa_r+0x100>
 8004448:	2301      	movs	r3, #1
 800444a:	e7b8      	b.n	80043be <_dtoa_r+0x186>
 800444c:	9012      	str	r0, [sp, #72]	@ 0x48
 800444e:	e7b7      	b.n	80043c0 <_dtoa_r+0x188>
 8004450:	427b      	negs	r3, r7
 8004452:	930a      	str	r3, [sp, #40]	@ 0x28
 8004454:	2300      	movs	r3, #0
 8004456:	eba8 0807 	sub.w	r8, r8, r7
 800445a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800445c:	e7c4      	b.n	80043e8 <_dtoa_r+0x1b0>
 800445e:	2300      	movs	r3, #0
 8004460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004464:	2b00      	cmp	r3, #0
 8004466:	dc35      	bgt.n	80044d4 <_dtoa_r+0x29c>
 8004468:	2301      	movs	r3, #1
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	9307      	str	r3, [sp, #28]
 800446e:	461a      	mov	r2, r3
 8004470:	920e      	str	r2, [sp, #56]	@ 0x38
 8004472:	e00b      	b.n	800448c <_dtoa_r+0x254>
 8004474:	2301      	movs	r3, #1
 8004476:	e7f3      	b.n	8004460 <_dtoa_r+0x228>
 8004478:	2300      	movs	r3, #0
 800447a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800447c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	9307      	str	r3, [sp, #28]
 8004488:	bfb8      	it	lt
 800448a:	2301      	movlt	r3, #1
 800448c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004490:	2100      	movs	r1, #0
 8004492:	2204      	movs	r2, #4
 8004494:	f102 0514 	add.w	r5, r2, #20
 8004498:	429d      	cmp	r5, r3
 800449a:	d91f      	bls.n	80044dc <_dtoa_r+0x2a4>
 800449c:	6041      	str	r1, [r0, #4]
 800449e:	4658      	mov	r0, fp
 80044a0:	f000 fd8e 	bl	8004fc0 <_Balloc>
 80044a4:	4682      	mov	sl, r0
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d13c      	bne.n	8004524 <_dtoa_r+0x2ec>
 80044aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004518 <_dtoa_r+0x2e0>)
 80044ac:	4602      	mov	r2, r0
 80044ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80044b2:	e6d8      	b.n	8004266 <_dtoa_r+0x2e>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e7e0      	b.n	800447a <_dtoa_r+0x242>
 80044b8:	2401      	movs	r4, #1
 80044ba:	2300      	movs	r3, #0
 80044bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80044be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80044c0:	f04f 33ff 	mov.w	r3, #4294967295
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	9307      	str	r3, [sp, #28]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2312      	movs	r3, #18
 80044cc:	e7d0      	b.n	8004470 <_dtoa_r+0x238>
 80044ce:	2301      	movs	r3, #1
 80044d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044d2:	e7f5      	b.n	80044c0 <_dtoa_r+0x288>
 80044d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	9307      	str	r3, [sp, #28]
 80044da:	e7d7      	b.n	800448c <_dtoa_r+0x254>
 80044dc:	3101      	adds	r1, #1
 80044de:	0052      	lsls	r2, r2, #1
 80044e0:	e7d8      	b.n	8004494 <_dtoa_r+0x25c>
 80044e2:	bf00      	nop
 80044e4:	f3af 8000 	nop.w
 80044e8:	636f4361 	.word	0x636f4361
 80044ec:	3fd287a7 	.word	0x3fd287a7
 80044f0:	8b60c8b3 	.word	0x8b60c8b3
 80044f4:	3fc68a28 	.word	0x3fc68a28
 80044f8:	509f79fb 	.word	0x509f79fb
 80044fc:	3fd34413 	.word	0x3fd34413
 8004500:	08005ea9 	.word	0x08005ea9
 8004504:	08005ec0 	.word	0x08005ec0
 8004508:	7ff00000 	.word	0x7ff00000
 800450c:	08005e79 	.word	0x08005e79
 8004510:	3ff80000 	.word	0x3ff80000
 8004514:	08005fb8 	.word	0x08005fb8
 8004518:	08005f18 	.word	0x08005f18
 800451c:	08005ea5 	.word	0x08005ea5
 8004520:	08005e78 	.word	0x08005e78
 8004524:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004528:	6018      	str	r0, [r3, #0]
 800452a:	9b07      	ldr	r3, [sp, #28]
 800452c:	2b0e      	cmp	r3, #14
 800452e:	f200 80a4 	bhi.w	800467a <_dtoa_r+0x442>
 8004532:	2c00      	cmp	r4, #0
 8004534:	f000 80a1 	beq.w	800467a <_dtoa_r+0x442>
 8004538:	2f00      	cmp	r7, #0
 800453a:	dd33      	ble.n	80045a4 <_dtoa_r+0x36c>
 800453c:	4bad      	ldr	r3, [pc, #692]	@ (80047f4 <_dtoa_r+0x5bc>)
 800453e:	f007 020f 	and.w	r2, r7, #15
 8004542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004546:	ed93 7b00 	vldr	d7, [r3]
 800454a:	05f8      	lsls	r0, r7, #23
 800454c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004550:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004554:	d516      	bpl.n	8004584 <_dtoa_r+0x34c>
 8004556:	4ba8      	ldr	r3, [pc, #672]	@ (80047f8 <_dtoa_r+0x5c0>)
 8004558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800455c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004560:	f7fc f97c 	bl	800085c <__aeabi_ddiv>
 8004564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004568:	f004 040f 	and.w	r4, r4, #15
 800456c:	2603      	movs	r6, #3
 800456e:	4da2      	ldr	r5, [pc, #648]	@ (80047f8 <_dtoa_r+0x5c0>)
 8004570:	b954      	cbnz	r4, 8004588 <_dtoa_r+0x350>
 8004572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800457a:	f7fc f96f 	bl	800085c <__aeabi_ddiv>
 800457e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004582:	e028      	b.n	80045d6 <_dtoa_r+0x39e>
 8004584:	2602      	movs	r6, #2
 8004586:	e7f2      	b.n	800456e <_dtoa_r+0x336>
 8004588:	07e1      	lsls	r1, r4, #31
 800458a:	d508      	bpl.n	800459e <_dtoa_r+0x366>
 800458c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004590:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004594:	f7fc f838 	bl	8000608 <__aeabi_dmul>
 8004598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800459c:	3601      	adds	r6, #1
 800459e:	1064      	asrs	r4, r4, #1
 80045a0:	3508      	adds	r5, #8
 80045a2:	e7e5      	b.n	8004570 <_dtoa_r+0x338>
 80045a4:	f000 80d2 	beq.w	800474c <_dtoa_r+0x514>
 80045a8:	427c      	negs	r4, r7
 80045aa:	4b92      	ldr	r3, [pc, #584]	@ (80047f4 <_dtoa_r+0x5bc>)
 80045ac:	4d92      	ldr	r5, [pc, #584]	@ (80047f8 <_dtoa_r+0x5c0>)
 80045ae:	f004 020f 	and.w	r2, r4, #15
 80045b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045be:	f7fc f823 	bl	8000608 <__aeabi_dmul>
 80045c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045c6:	1124      	asrs	r4, r4, #4
 80045c8:	2300      	movs	r3, #0
 80045ca:	2602      	movs	r6, #2
 80045cc:	2c00      	cmp	r4, #0
 80045ce:	f040 80b2 	bne.w	8004736 <_dtoa_r+0x4fe>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1d3      	bne.n	800457e <_dtoa_r+0x346>
 80045d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80045d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80b7 	beq.w	8004750 <_dtoa_r+0x518>
 80045e2:	4b86      	ldr	r3, [pc, #536]	@ (80047fc <_dtoa_r+0x5c4>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7fc fa7f 	bl	8000aec <__aeabi_dcmplt>
 80045ee:	2800      	cmp	r0, #0
 80045f0:	f000 80ae 	beq.w	8004750 <_dtoa_r+0x518>
 80045f4:	9b07      	ldr	r3, [sp, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80aa 	beq.w	8004750 <_dtoa_r+0x518>
 80045fc:	9b00      	ldr	r3, [sp, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	dd37      	ble.n	8004672 <_dtoa_r+0x43a>
 8004602:	1e7b      	subs	r3, r7, #1
 8004604:	9304      	str	r3, [sp, #16]
 8004606:	4620      	mov	r0, r4
 8004608:	4b7d      	ldr	r3, [pc, #500]	@ (8004800 <_dtoa_r+0x5c8>)
 800460a:	2200      	movs	r2, #0
 800460c:	4629      	mov	r1, r5
 800460e:	f7fb fffb 	bl	8000608 <__aeabi_dmul>
 8004612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004616:	9c00      	ldr	r4, [sp, #0]
 8004618:	3601      	adds	r6, #1
 800461a:	4630      	mov	r0, r6
 800461c:	f7fb ff8a 	bl	8000534 <__aeabi_i2d>
 8004620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004624:	f7fb fff0 	bl	8000608 <__aeabi_dmul>
 8004628:	4b76      	ldr	r3, [pc, #472]	@ (8004804 <_dtoa_r+0x5cc>)
 800462a:	2200      	movs	r2, #0
 800462c:	f7fb fe36 	bl	800029c <__adddf3>
 8004630:	4605      	mov	r5, r0
 8004632:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004636:	2c00      	cmp	r4, #0
 8004638:	f040 808d 	bne.w	8004756 <_dtoa_r+0x51e>
 800463c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004640:	4b71      	ldr	r3, [pc, #452]	@ (8004808 <_dtoa_r+0x5d0>)
 8004642:	2200      	movs	r2, #0
 8004644:	f7fb fe28 	bl	8000298 <__aeabi_dsub>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004650:	462a      	mov	r2, r5
 8004652:	4633      	mov	r3, r6
 8004654:	f7fc fa68 	bl	8000b28 <__aeabi_dcmpgt>
 8004658:	2800      	cmp	r0, #0
 800465a:	f040 828b 	bne.w	8004b74 <_dtoa_r+0x93c>
 800465e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004662:	462a      	mov	r2, r5
 8004664:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004668:	f7fc fa40 	bl	8000aec <__aeabi_dcmplt>
 800466c:	2800      	cmp	r0, #0
 800466e:	f040 8128 	bne.w	80048c2 <_dtoa_r+0x68a>
 8004672:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004676:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800467a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800467c:	2b00      	cmp	r3, #0
 800467e:	f2c0 815a 	blt.w	8004936 <_dtoa_r+0x6fe>
 8004682:	2f0e      	cmp	r7, #14
 8004684:	f300 8157 	bgt.w	8004936 <_dtoa_r+0x6fe>
 8004688:	4b5a      	ldr	r3, [pc, #360]	@ (80047f4 <_dtoa_r+0x5bc>)
 800468a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800468e:	ed93 7b00 	vldr	d7, [r3]
 8004692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004694:	2b00      	cmp	r3, #0
 8004696:	ed8d 7b00 	vstr	d7, [sp]
 800469a:	da03      	bge.n	80046a4 <_dtoa_r+0x46c>
 800469c:	9b07      	ldr	r3, [sp, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f340 8101 	ble.w	80048a6 <_dtoa_r+0x66e>
 80046a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80046a8:	4656      	mov	r6, sl
 80046aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046ae:	4620      	mov	r0, r4
 80046b0:	4629      	mov	r1, r5
 80046b2:	f7fc f8d3 	bl	800085c <__aeabi_ddiv>
 80046b6:	f7fc fa57 	bl	8000b68 <__aeabi_d2iz>
 80046ba:	4680      	mov	r8, r0
 80046bc:	f7fb ff3a 	bl	8000534 <__aeabi_i2d>
 80046c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046c4:	f7fb ffa0 	bl	8000608 <__aeabi_dmul>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4620      	mov	r0, r4
 80046ce:	4629      	mov	r1, r5
 80046d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80046d4:	f7fb fde0 	bl	8000298 <__aeabi_dsub>
 80046d8:	f806 4b01 	strb.w	r4, [r6], #1
 80046dc:	9d07      	ldr	r5, [sp, #28]
 80046de:	eba6 040a 	sub.w	r4, r6, sl
 80046e2:	42a5      	cmp	r5, r4
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	f040 8117 	bne.w	800491a <_dtoa_r+0x6e2>
 80046ec:	f7fb fdd6 	bl	800029c <__adddf3>
 80046f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046f4:	4604      	mov	r4, r0
 80046f6:	460d      	mov	r5, r1
 80046f8:	f7fc fa16 	bl	8000b28 <__aeabi_dcmpgt>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	f040 80f9 	bne.w	80048f4 <_dtoa_r+0x6bc>
 8004702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004706:	4620      	mov	r0, r4
 8004708:	4629      	mov	r1, r5
 800470a:	f7fc f9e5 	bl	8000ad8 <__aeabi_dcmpeq>
 800470e:	b118      	cbz	r0, 8004718 <_dtoa_r+0x4e0>
 8004710:	f018 0f01 	tst.w	r8, #1
 8004714:	f040 80ee 	bne.w	80048f4 <_dtoa_r+0x6bc>
 8004718:	4649      	mov	r1, r9
 800471a:	4658      	mov	r0, fp
 800471c:	f000 fc90 	bl	8005040 <_Bfree>
 8004720:	2300      	movs	r3, #0
 8004722:	7033      	strb	r3, [r6, #0]
 8004724:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004726:	3701      	adds	r7, #1
 8004728:	601f      	str	r7, [r3, #0]
 800472a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 831d 	beq.w	8004d6c <_dtoa_r+0xb34>
 8004732:	601e      	str	r6, [r3, #0]
 8004734:	e31a      	b.n	8004d6c <_dtoa_r+0xb34>
 8004736:	07e2      	lsls	r2, r4, #31
 8004738:	d505      	bpl.n	8004746 <_dtoa_r+0x50e>
 800473a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800473e:	f7fb ff63 	bl	8000608 <__aeabi_dmul>
 8004742:	3601      	adds	r6, #1
 8004744:	2301      	movs	r3, #1
 8004746:	1064      	asrs	r4, r4, #1
 8004748:	3508      	adds	r5, #8
 800474a:	e73f      	b.n	80045cc <_dtoa_r+0x394>
 800474c:	2602      	movs	r6, #2
 800474e:	e742      	b.n	80045d6 <_dtoa_r+0x39e>
 8004750:	9c07      	ldr	r4, [sp, #28]
 8004752:	9704      	str	r7, [sp, #16]
 8004754:	e761      	b.n	800461a <_dtoa_r+0x3e2>
 8004756:	4b27      	ldr	r3, [pc, #156]	@ (80047f4 <_dtoa_r+0x5bc>)
 8004758:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800475a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800475e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004762:	4454      	add	r4, sl
 8004764:	2900      	cmp	r1, #0
 8004766:	d053      	beq.n	8004810 <_dtoa_r+0x5d8>
 8004768:	4928      	ldr	r1, [pc, #160]	@ (800480c <_dtoa_r+0x5d4>)
 800476a:	2000      	movs	r0, #0
 800476c:	f7fc f876 	bl	800085c <__aeabi_ddiv>
 8004770:	4633      	mov	r3, r6
 8004772:	462a      	mov	r2, r5
 8004774:	f7fb fd90 	bl	8000298 <__aeabi_dsub>
 8004778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800477c:	4656      	mov	r6, sl
 800477e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004782:	f7fc f9f1 	bl	8000b68 <__aeabi_d2iz>
 8004786:	4605      	mov	r5, r0
 8004788:	f7fb fed4 	bl	8000534 <__aeabi_i2d>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004794:	f7fb fd80 	bl	8000298 <__aeabi_dsub>
 8004798:	3530      	adds	r5, #48	@ 0x30
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047a2:	f806 5b01 	strb.w	r5, [r6], #1
 80047a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047aa:	f7fc f99f 	bl	8000aec <__aeabi_dcmplt>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d171      	bne.n	8004896 <_dtoa_r+0x65e>
 80047b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80047b6:	4911      	ldr	r1, [pc, #68]	@ (80047fc <_dtoa_r+0x5c4>)
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7fb fd6d 	bl	8000298 <__aeabi_dsub>
 80047be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047c2:	f7fc f993 	bl	8000aec <__aeabi_dcmplt>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	f040 8095 	bne.w	80048f6 <_dtoa_r+0x6be>
 80047cc:	42a6      	cmp	r6, r4
 80047ce:	f43f af50 	beq.w	8004672 <_dtoa_r+0x43a>
 80047d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80047d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <_dtoa_r+0x5c8>)
 80047d8:	2200      	movs	r2, #0
 80047da:	f7fb ff15 	bl	8000608 <__aeabi_dmul>
 80047de:	4b08      	ldr	r3, [pc, #32]	@ (8004800 <_dtoa_r+0x5c8>)
 80047e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047e4:	2200      	movs	r2, #0
 80047e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ea:	f7fb ff0d 	bl	8000608 <__aeabi_dmul>
 80047ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047f2:	e7c4      	b.n	800477e <_dtoa_r+0x546>
 80047f4:	08005fb8 	.word	0x08005fb8
 80047f8:	08005f90 	.word	0x08005f90
 80047fc:	3ff00000 	.word	0x3ff00000
 8004800:	40240000 	.word	0x40240000
 8004804:	401c0000 	.word	0x401c0000
 8004808:	40140000 	.word	0x40140000
 800480c:	3fe00000 	.word	0x3fe00000
 8004810:	4631      	mov	r1, r6
 8004812:	4628      	mov	r0, r5
 8004814:	f7fb fef8 	bl	8000608 <__aeabi_dmul>
 8004818:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800481c:	9415      	str	r4, [sp, #84]	@ 0x54
 800481e:	4656      	mov	r6, sl
 8004820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004824:	f7fc f9a0 	bl	8000b68 <__aeabi_d2iz>
 8004828:	4605      	mov	r5, r0
 800482a:	f7fb fe83 	bl	8000534 <__aeabi_i2d>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004836:	f7fb fd2f 	bl	8000298 <__aeabi_dsub>
 800483a:	3530      	adds	r5, #48	@ 0x30
 800483c:	f806 5b01 	strb.w	r5, [r6], #1
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	42a6      	cmp	r6, r4
 8004846:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	d124      	bne.n	800489a <_dtoa_r+0x662>
 8004850:	4bac      	ldr	r3, [pc, #688]	@ (8004b04 <_dtoa_r+0x8cc>)
 8004852:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004856:	f7fb fd21 	bl	800029c <__adddf3>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004862:	f7fc f961 	bl	8000b28 <__aeabi_dcmpgt>
 8004866:	2800      	cmp	r0, #0
 8004868:	d145      	bne.n	80048f6 <_dtoa_r+0x6be>
 800486a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800486e:	49a5      	ldr	r1, [pc, #660]	@ (8004b04 <_dtoa_r+0x8cc>)
 8004870:	2000      	movs	r0, #0
 8004872:	f7fb fd11 	bl	8000298 <__aeabi_dsub>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800487e:	f7fc f935 	bl	8000aec <__aeabi_dcmplt>
 8004882:	2800      	cmp	r0, #0
 8004884:	f43f aef5 	beq.w	8004672 <_dtoa_r+0x43a>
 8004888:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800488a:	1e73      	subs	r3, r6, #1
 800488c:	9315      	str	r3, [sp, #84]	@ 0x54
 800488e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004892:	2b30      	cmp	r3, #48	@ 0x30
 8004894:	d0f8      	beq.n	8004888 <_dtoa_r+0x650>
 8004896:	9f04      	ldr	r7, [sp, #16]
 8004898:	e73e      	b.n	8004718 <_dtoa_r+0x4e0>
 800489a:	4b9b      	ldr	r3, [pc, #620]	@ (8004b08 <_dtoa_r+0x8d0>)
 800489c:	f7fb feb4 	bl	8000608 <__aeabi_dmul>
 80048a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048a4:	e7bc      	b.n	8004820 <_dtoa_r+0x5e8>
 80048a6:	d10c      	bne.n	80048c2 <_dtoa_r+0x68a>
 80048a8:	4b98      	ldr	r3, [pc, #608]	@ (8004b0c <_dtoa_r+0x8d4>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048b0:	f7fb feaa 	bl	8000608 <__aeabi_dmul>
 80048b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048b8:	f7fc f92c 	bl	8000b14 <__aeabi_dcmpge>
 80048bc:	2800      	cmp	r0, #0
 80048be:	f000 8157 	beq.w	8004b70 <_dtoa_r+0x938>
 80048c2:	2400      	movs	r4, #0
 80048c4:	4625      	mov	r5, r4
 80048c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048c8:	43db      	mvns	r3, r3
 80048ca:	9304      	str	r3, [sp, #16]
 80048cc:	4656      	mov	r6, sl
 80048ce:	2700      	movs	r7, #0
 80048d0:	4621      	mov	r1, r4
 80048d2:	4658      	mov	r0, fp
 80048d4:	f000 fbb4 	bl	8005040 <_Bfree>
 80048d8:	2d00      	cmp	r5, #0
 80048da:	d0dc      	beq.n	8004896 <_dtoa_r+0x65e>
 80048dc:	b12f      	cbz	r7, 80048ea <_dtoa_r+0x6b2>
 80048de:	42af      	cmp	r7, r5
 80048e0:	d003      	beq.n	80048ea <_dtoa_r+0x6b2>
 80048e2:	4639      	mov	r1, r7
 80048e4:	4658      	mov	r0, fp
 80048e6:	f000 fbab 	bl	8005040 <_Bfree>
 80048ea:	4629      	mov	r1, r5
 80048ec:	4658      	mov	r0, fp
 80048ee:	f000 fba7 	bl	8005040 <_Bfree>
 80048f2:	e7d0      	b.n	8004896 <_dtoa_r+0x65e>
 80048f4:	9704      	str	r7, [sp, #16]
 80048f6:	4633      	mov	r3, r6
 80048f8:	461e      	mov	r6, r3
 80048fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048fe:	2a39      	cmp	r2, #57	@ 0x39
 8004900:	d107      	bne.n	8004912 <_dtoa_r+0x6da>
 8004902:	459a      	cmp	sl, r3
 8004904:	d1f8      	bne.n	80048f8 <_dtoa_r+0x6c0>
 8004906:	9a04      	ldr	r2, [sp, #16]
 8004908:	3201      	adds	r2, #1
 800490a:	9204      	str	r2, [sp, #16]
 800490c:	2230      	movs	r2, #48	@ 0x30
 800490e:	f88a 2000 	strb.w	r2, [sl]
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	3201      	adds	r2, #1
 8004916:	701a      	strb	r2, [r3, #0]
 8004918:	e7bd      	b.n	8004896 <_dtoa_r+0x65e>
 800491a:	4b7b      	ldr	r3, [pc, #492]	@ (8004b08 <_dtoa_r+0x8d0>)
 800491c:	2200      	movs	r2, #0
 800491e:	f7fb fe73 	bl	8000608 <__aeabi_dmul>
 8004922:	2200      	movs	r2, #0
 8004924:	2300      	movs	r3, #0
 8004926:	4604      	mov	r4, r0
 8004928:	460d      	mov	r5, r1
 800492a:	f7fc f8d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800492e:	2800      	cmp	r0, #0
 8004930:	f43f aebb 	beq.w	80046aa <_dtoa_r+0x472>
 8004934:	e6f0      	b.n	8004718 <_dtoa_r+0x4e0>
 8004936:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004938:	2a00      	cmp	r2, #0
 800493a:	f000 80db 	beq.w	8004af4 <_dtoa_r+0x8bc>
 800493e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004940:	2a01      	cmp	r2, #1
 8004942:	f300 80bf 	bgt.w	8004ac4 <_dtoa_r+0x88c>
 8004946:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004948:	2a00      	cmp	r2, #0
 800494a:	f000 80b7 	beq.w	8004abc <_dtoa_r+0x884>
 800494e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004952:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004954:	4646      	mov	r6, r8
 8004956:	9a08      	ldr	r2, [sp, #32]
 8004958:	2101      	movs	r1, #1
 800495a:	441a      	add	r2, r3
 800495c:	4658      	mov	r0, fp
 800495e:	4498      	add	r8, r3
 8004960:	9208      	str	r2, [sp, #32]
 8004962:	f000 fc21 	bl	80051a8 <__i2b>
 8004966:	4605      	mov	r5, r0
 8004968:	b15e      	cbz	r6, 8004982 <_dtoa_r+0x74a>
 800496a:	9b08      	ldr	r3, [sp, #32]
 800496c:	2b00      	cmp	r3, #0
 800496e:	dd08      	ble.n	8004982 <_dtoa_r+0x74a>
 8004970:	42b3      	cmp	r3, r6
 8004972:	9a08      	ldr	r2, [sp, #32]
 8004974:	bfa8      	it	ge
 8004976:	4633      	movge	r3, r6
 8004978:	eba8 0803 	sub.w	r8, r8, r3
 800497c:	1af6      	subs	r6, r6, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	9308      	str	r3, [sp, #32]
 8004982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004984:	b1f3      	cbz	r3, 80049c4 <_dtoa_r+0x78c>
 8004986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80b7 	beq.w	8004afc <_dtoa_r+0x8c4>
 800498e:	b18c      	cbz	r4, 80049b4 <_dtoa_r+0x77c>
 8004990:	4629      	mov	r1, r5
 8004992:	4622      	mov	r2, r4
 8004994:	4658      	mov	r0, fp
 8004996:	f000 fcc7 	bl	8005328 <__pow5mult>
 800499a:	464a      	mov	r2, r9
 800499c:	4601      	mov	r1, r0
 800499e:	4605      	mov	r5, r0
 80049a0:	4658      	mov	r0, fp
 80049a2:	f000 fc17 	bl	80051d4 <__multiply>
 80049a6:	4649      	mov	r1, r9
 80049a8:	9004      	str	r0, [sp, #16]
 80049aa:	4658      	mov	r0, fp
 80049ac:	f000 fb48 	bl	8005040 <_Bfree>
 80049b0:	9b04      	ldr	r3, [sp, #16]
 80049b2:	4699      	mov	r9, r3
 80049b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049b6:	1b1a      	subs	r2, r3, r4
 80049b8:	d004      	beq.n	80049c4 <_dtoa_r+0x78c>
 80049ba:	4649      	mov	r1, r9
 80049bc:	4658      	mov	r0, fp
 80049be:	f000 fcb3 	bl	8005328 <__pow5mult>
 80049c2:	4681      	mov	r9, r0
 80049c4:	2101      	movs	r1, #1
 80049c6:	4658      	mov	r0, fp
 80049c8:	f000 fbee 	bl	80051a8 <__i2b>
 80049cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80049ce:	4604      	mov	r4, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 81cf 	beq.w	8004d74 <_dtoa_r+0xb3c>
 80049d6:	461a      	mov	r2, r3
 80049d8:	4601      	mov	r1, r0
 80049da:	4658      	mov	r0, fp
 80049dc:	f000 fca4 	bl	8005328 <__pow5mult>
 80049e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	4604      	mov	r4, r0
 80049e6:	f300 8095 	bgt.w	8004b14 <_dtoa_r+0x8dc>
 80049ea:	9b02      	ldr	r3, [sp, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 8087 	bne.w	8004b00 <_dtoa_r+0x8c8>
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 8089 	bne.w	8004b10 <_dtoa_r+0x8d8>
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a04:	0d1b      	lsrs	r3, r3, #20
 8004a06:	051b      	lsls	r3, r3, #20
 8004a08:	b12b      	cbz	r3, 8004a16 <_dtoa_r+0x7de>
 8004a0a:	9b08      	ldr	r3, [sp, #32]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	9308      	str	r3, [sp, #32]
 8004a10:	f108 0801 	add.w	r8, r8, #1
 8004a14:	2301      	movs	r3, #1
 8004a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 81b0 	beq.w	8004d80 <_dtoa_r+0xb48>
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a26:	6918      	ldr	r0, [r3, #16]
 8004a28:	f000 fb72 	bl	8005110 <__hi0bits>
 8004a2c:	f1c0 0020 	rsb	r0, r0, #32
 8004a30:	9b08      	ldr	r3, [sp, #32]
 8004a32:	4418      	add	r0, r3
 8004a34:	f010 001f 	ands.w	r0, r0, #31
 8004a38:	d077      	beq.n	8004b2a <_dtoa_r+0x8f2>
 8004a3a:	f1c0 0320 	rsb	r3, r0, #32
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	dd6b      	ble.n	8004b1a <_dtoa_r+0x8e2>
 8004a42:	9b08      	ldr	r3, [sp, #32]
 8004a44:	f1c0 001c 	rsb	r0, r0, #28
 8004a48:	4403      	add	r3, r0
 8004a4a:	4480      	add	r8, r0
 8004a4c:	4406      	add	r6, r0
 8004a4e:	9308      	str	r3, [sp, #32]
 8004a50:	f1b8 0f00 	cmp.w	r8, #0
 8004a54:	dd05      	ble.n	8004a62 <_dtoa_r+0x82a>
 8004a56:	4649      	mov	r1, r9
 8004a58:	4642      	mov	r2, r8
 8004a5a:	4658      	mov	r0, fp
 8004a5c:	f000 fcbe 	bl	80053dc <__lshift>
 8004a60:	4681      	mov	r9, r0
 8004a62:	9b08      	ldr	r3, [sp, #32]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	dd05      	ble.n	8004a74 <_dtoa_r+0x83c>
 8004a68:	4621      	mov	r1, r4
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4658      	mov	r0, fp
 8004a6e:	f000 fcb5 	bl	80053dc <__lshift>
 8004a72:	4604      	mov	r4, r0
 8004a74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d059      	beq.n	8004b2e <_dtoa_r+0x8f6>
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	4648      	mov	r0, r9
 8004a7e:	f000 fd19 	bl	80054b4 <__mcmp>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	da53      	bge.n	8004b2e <_dtoa_r+0x8f6>
 8004a86:	1e7b      	subs	r3, r7, #1
 8004a88:	9304      	str	r3, [sp, #16]
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	220a      	movs	r2, #10
 8004a90:	4658      	mov	r0, fp
 8004a92:	f000 faf7 	bl	8005084 <__multadd>
 8004a96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a98:	4681      	mov	r9, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 8172 	beq.w	8004d84 <_dtoa_r+0xb4c>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	220a      	movs	r2, #10
 8004aa6:	4658      	mov	r0, fp
 8004aa8:	f000 faec 	bl	8005084 <__multadd>
 8004aac:	9b00      	ldr	r3, [sp, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	dc67      	bgt.n	8004b84 <_dtoa_r+0x94c>
 8004ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	dc41      	bgt.n	8004b3e <_dtoa_r+0x906>
 8004aba:	e063      	b.n	8004b84 <_dtoa_r+0x94c>
 8004abc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004abe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004ac2:	e746      	b.n	8004952 <_dtoa_r+0x71a>
 8004ac4:	9b07      	ldr	r3, [sp, #28]
 8004ac6:	1e5c      	subs	r4, r3, #1
 8004ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004aca:	42a3      	cmp	r3, r4
 8004acc:	bfbf      	itttt	lt
 8004ace:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004ad0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004ad2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004ad4:	1ae3      	sublt	r3, r4, r3
 8004ad6:	bfb4      	ite	lt
 8004ad8:	18d2      	addlt	r2, r2, r3
 8004ada:	1b1c      	subge	r4, r3, r4
 8004adc:	9b07      	ldr	r3, [sp, #28]
 8004ade:	bfbc      	itt	lt
 8004ae0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004ae2:	2400      	movlt	r4, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bfb5      	itete	lt
 8004ae8:	eba8 0603 	sublt.w	r6, r8, r3
 8004aec:	9b07      	ldrge	r3, [sp, #28]
 8004aee:	2300      	movlt	r3, #0
 8004af0:	4646      	movge	r6, r8
 8004af2:	e730      	b.n	8004956 <_dtoa_r+0x71e>
 8004af4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004af6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004af8:	4646      	mov	r6, r8
 8004afa:	e735      	b.n	8004968 <_dtoa_r+0x730>
 8004afc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004afe:	e75c      	b.n	80049ba <_dtoa_r+0x782>
 8004b00:	2300      	movs	r3, #0
 8004b02:	e788      	b.n	8004a16 <_dtoa_r+0x7de>
 8004b04:	3fe00000 	.word	0x3fe00000
 8004b08:	40240000 	.word	0x40240000
 8004b0c:	40140000 	.word	0x40140000
 8004b10:	9b02      	ldr	r3, [sp, #8]
 8004b12:	e780      	b.n	8004a16 <_dtoa_r+0x7de>
 8004b14:	2300      	movs	r3, #0
 8004b16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b18:	e782      	b.n	8004a20 <_dtoa_r+0x7e8>
 8004b1a:	d099      	beq.n	8004a50 <_dtoa_r+0x818>
 8004b1c:	9a08      	ldr	r2, [sp, #32]
 8004b1e:	331c      	adds	r3, #28
 8004b20:	441a      	add	r2, r3
 8004b22:	4498      	add	r8, r3
 8004b24:	441e      	add	r6, r3
 8004b26:	9208      	str	r2, [sp, #32]
 8004b28:	e792      	b.n	8004a50 <_dtoa_r+0x818>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	e7f6      	b.n	8004b1c <_dtoa_r+0x8e4>
 8004b2e:	9b07      	ldr	r3, [sp, #28]
 8004b30:	9704      	str	r7, [sp, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	dc20      	bgt.n	8004b78 <_dtoa_r+0x940>
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	dd1e      	ble.n	8004b7c <_dtoa_r+0x944>
 8004b3e:	9b00      	ldr	r3, [sp, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f47f aec0 	bne.w	80048c6 <_dtoa_r+0x68e>
 8004b46:	4621      	mov	r1, r4
 8004b48:	2205      	movs	r2, #5
 8004b4a:	4658      	mov	r0, fp
 8004b4c:	f000 fa9a 	bl	8005084 <__multadd>
 8004b50:	4601      	mov	r1, r0
 8004b52:	4604      	mov	r4, r0
 8004b54:	4648      	mov	r0, r9
 8004b56:	f000 fcad 	bl	80054b4 <__mcmp>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	f77f aeb3 	ble.w	80048c6 <_dtoa_r+0x68e>
 8004b60:	4656      	mov	r6, sl
 8004b62:	2331      	movs	r3, #49	@ 0x31
 8004b64:	f806 3b01 	strb.w	r3, [r6], #1
 8004b68:	9b04      	ldr	r3, [sp, #16]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	9304      	str	r3, [sp, #16]
 8004b6e:	e6ae      	b.n	80048ce <_dtoa_r+0x696>
 8004b70:	9c07      	ldr	r4, [sp, #28]
 8004b72:	9704      	str	r7, [sp, #16]
 8004b74:	4625      	mov	r5, r4
 8004b76:	e7f3      	b.n	8004b60 <_dtoa_r+0x928>
 8004b78:	9b07      	ldr	r3, [sp, #28]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8104 	beq.w	8004d8c <_dtoa_r+0xb54>
 8004b84:	2e00      	cmp	r6, #0
 8004b86:	dd05      	ble.n	8004b94 <_dtoa_r+0x95c>
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4632      	mov	r2, r6
 8004b8c:	4658      	mov	r0, fp
 8004b8e:	f000 fc25 	bl	80053dc <__lshift>
 8004b92:	4605      	mov	r5, r0
 8004b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d05a      	beq.n	8004c50 <_dtoa_r+0xa18>
 8004b9a:	6869      	ldr	r1, [r5, #4]
 8004b9c:	4658      	mov	r0, fp
 8004b9e:	f000 fa0f 	bl	8004fc0 <_Balloc>
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	b928      	cbnz	r0, 8004bb2 <_dtoa_r+0x97a>
 8004ba6:	4b84      	ldr	r3, [pc, #528]	@ (8004db8 <_dtoa_r+0xb80>)
 8004ba8:	4602      	mov	r2, r0
 8004baa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004bae:	f7ff bb5a 	b.w	8004266 <_dtoa_r+0x2e>
 8004bb2:	692a      	ldr	r2, [r5, #16]
 8004bb4:	3202      	adds	r2, #2
 8004bb6:	0092      	lsls	r2, r2, #2
 8004bb8:	f105 010c 	add.w	r1, r5, #12
 8004bbc:	300c      	adds	r0, #12
 8004bbe:	f7ff faa4 	bl	800410a <memcpy>
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	4658      	mov	r0, fp
 8004bc8:	f000 fc08 	bl	80053dc <__lshift>
 8004bcc:	f10a 0301 	add.w	r3, sl, #1
 8004bd0:	9307      	str	r3, [sp, #28]
 8004bd2:	9b00      	ldr	r3, [sp, #0]
 8004bd4:	4453      	add	r3, sl
 8004bd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bd8:	9b02      	ldr	r3, [sp, #8]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	462f      	mov	r7, r5
 8004be0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004be2:	4605      	mov	r5, r0
 8004be4:	9b07      	ldr	r3, [sp, #28]
 8004be6:	4621      	mov	r1, r4
 8004be8:	3b01      	subs	r3, #1
 8004bea:	4648      	mov	r0, r9
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	f7ff fa9a 	bl	8004126 <quorem>
 8004bf2:	4639      	mov	r1, r7
 8004bf4:	9002      	str	r0, [sp, #8]
 8004bf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004bfa:	4648      	mov	r0, r9
 8004bfc:	f000 fc5a 	bl	80054b4 <__mcmp>
 8004c00:	462a      	mov	r2, r5
 8004c02:	9008      	str	r0, [sp, #32]
 8004c04:	4621      	mov	r1, r4
 8004c06:	4658      	mov	r0, fp
 8004c08:	f000 fc70 	bl	80054ec <__mdiff>
 8004c0c:	68c2      	ldr	r2, [r0, #12]
 8004c0e:	4606      	mov	r6, r0
 8004c10:	bb02      	cbnz	r2, 8004c54 <_dtoa_r+0xa1c>
 8004c12:	4601      	mov	r1, r0
 8004c14:	4648      	mov	r0, r9
 8004c16:	f000 fc4d 	bl	80054b4 <__mcmp>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4658      	mov	r0, fp
 8004c20:	920e      	str	r2, [sp, #56]	@ 0x38
 8004c22:	f000 fa0d 	bl	8005040 <_Bfree>
 8004c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c2a:	9e07      	ldr	r6, [sp, #28]
 8004c2c:	ea43 0102 	orr.w	r1, r3, r2
 8004c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c32:	4319      	orrs	r1, r3
 8004c34:	d110      	bne.n	8004c58 <_dtoa_r+0xa20>
 8004c36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c3a:	d029      	beq.n	8004c90 <_dtoa_r+0xa58>
 8004c3c:	9b08      	ldr	r3, [sp, #32]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dd02      	ble.n	8004c48 <_dtoa_r+0xa10>
 8004c42:	9b02      	ldr	r3, [sp, #8]
 8004c44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004c48:	9b00      	ldr	r3, [sp, #0]
 8004c4a:	f883 8000 	strb.w	r8, [r3]
 8004c4e:	e63f      	b.n	80048d0 <_dtoa_r+0x698>
 8004c50:	4628      	mov	r0, r5
 8004c52:	e7bb      	b.n	8004bcc <_dtoa_r+0x994>
 8004c54:	2201      	movs	r2, #1
 8004c56:	e7e1      	b.n	8004c1c <_dtoa_r+0x9e4>
 8004c58:	9b08      	ldr	r3, [sp, #32]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	db04      	blt.n	8004c68 <_dtoa_r+0xa30>
 8004c5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c60:	430b      	orrs	r3, r1
 8004c62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c64:	430b      	orrs	r3, r1
 8004c66:	d120      	bne.n	8004caa <_dtoa_r+0xa72>
 8004c68:	2a00      	cmp	r2, #0
 8004c6a:	dded      	ble.n	8004c48 <_dtoa_r+0xa10>
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	2201      	movs	r2, #1
 8004c70:	4658      	mov	r0, fp
 8004c72:	f000 fbb3 	bl	80053dc <__lshift>
 8004c76:	4621      	mov	r1, r4
 8004c78:	4681      	mov	r9, r0
 8004c7a:	f000 fc1b 	bl	80054b4 <__mcmp>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	dc03      	bgt.n	8004c8a <_dtoa_r+0xa52>
 8004c82:	d1e1      	bne.n	8004c48 <_dtoa_r+0xa10>
 8004c84:	f018 0f01 	tst.w	r8, #1
 8004c88:	d0de      	beq.n	8004c48 <_dtoa_r+0xa10>
 8004c8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c8e:	d1d8      	bne.n	8004c42 <_dtoa_r+0xa0a>
 8004c90:	9a00      	ldr	r2, [sp, #0]
 8004c92:	2339      	movs	r3, #57	@ 0x39
 8004c94:	7013      	strb	r3, [r2, #0]
 8004c96:	4633      	mov	r3, r6
 8004c98:	461e      	mov	r6, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004ca0:	2a39      	cmp	r2, #57	@ 0x39
 8004ca2:	d052      	beq.n	8004d4a <_dtoa_r+0xb12>
 8004ca4:	3201      	adds	r2, #1
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e612      	b.n	80048d0 <_dtoa_r+0x698>
 8004caa:	2a00      	cmp	r2, #0
 8004cac:	dd07      	ble.n	8004cbe <_dtoa_r+0xa86>
 8004cae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004cb2:	d0ed      	beq.n	8004c90 <_dtoa_r+0xa58>
 8004cb4:	9a00      	ldr	r2, [sp, #0]
 8004cb6:	f108 0301 	add.w	r3, r8, #1
 8004cba:	7013      	strb	r3, [r2, #0]
 8004cbc:	e608      	b.n	80048d0 <_dtoa_r+0x698>
 8004cbe:	9b07      	ldr	r3, [sp, #28]
 8004cc0:	9a07      	ldr	r2, [sp, #28]
 8004cc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d028      	beq.n	8004d1e <_dtoa_r+0xae6>
 8004ccc:	4649      	mov	r1, r9
 8004cce:	2300      	movs	r3, #0
 8004cd0:	220a      	movs	r2, #10
 8004cd2:	4658      	mov	r0, fp
 8004cd4:	f000 f9d6 	bl	8005084 <__multadd>
 8004cd8:	42af      	cmp	r7, r5
 8004cda:	4681      	mov	r9, r0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	f04f 020a 	mov.w	r2, #10
 8004ce4:	4639      	mov	r1, r7
 8004ce6:	4658      	mov	r0, fp
 8004ce8:	d107      	bne.n	8004cfa <_dtoa_r+0xac2>
 8004cea:	f000 f9cb 	bl	8005084 <__multadd>
 8004cee:	4607      	mov	r7, r0
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	9b07      	ldr	r3, [sp, #28]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	9307      	str	r3, [sp, #28]
 8004cf8:	e774      	b.n	8004be4 <_dtoa_r+0x9ac>
 8004cfa:	f000 f9c3 	bl	8005084 <__multadd>
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4607      	mov	r7, r0
 8004d02:	2300      	movs	r3, #0
 8004d04:	220a      	movs	r2, #10
 8004d06:	4658      	mov	r0, fp
 8004d08:	f000 f9bc 	bl	8005084 <__multadd>
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	e7f0      	b.n	8004cf2 <_dtoa_r+0xaba>
 8004d10:	9b00      	ldr	r3, [sp, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bfcc      	ite	gt
 8004d16:	461e      	movgt	r6, r3
 8004d18:	2601      	movle	r6, #1
 8004d1a:	4456      	add	r6, sl
 8004d1c:	2700      	movs	r7, #0
 8004d1e:	4649      	mov	r1, r9
 8004d20:	2201      	movs	r2, #1
 8004d22:	4658      	mov	r0, fp
 8004d24:	f000 fb5a 	bl	80053dc <__lshift>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4681      	mov	r9, r0
 8004d2c:	f000 fbc2 	bl	80054b4 <__mcmp>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	dcb0      	bgt.n	8004c96 <_dtoa_r+0xa5e>
 8004d34:	d102      	bne.n	8004d3c <_dtoa_r+0xb04>
 8004d36:	f018 0f01 	tst.w	r8, #1
 8004d3a:	d1ac      	bne.n	8004c96 <_dtoa_r+0xa5e>
 8004d3c:	4633      	mov	r3, r6
 8004d3e:	461e      	mov	r6, r3
 8004d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d44:	2a30      	cmp	r2, #48	@ 0x30
 8004d46:	d0fa      	beq.n	8004d3e <_dtoa_r+0xb06>
 8004d48:	e5c2      	b.n	80048d0 <_dtoa_r+0x698>
 8004d4a:	459a      	cmp	sl, r3
 8004d4c:	d1a4      	bne.n	8004c98 <_dtoa_r+0xa60>
 8004d4e:	9b04      	ldr	r3, [sp, #16]
 8004d50:	3301      	adds	r3, #1
 8004d52:	9304      	str	r3, [sp, #16]
 8004d54:	2331      	movs	r3, #49	@ 0x31
 8004d56:	f88a 3000 	strb.w	r3, [sl]
 8004d5a:	e5b9      	b.n	80048d0 <_dtoa_r+0x698>
 8004d5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004d5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004dbc <_dtoa_r+0xb84>
 8004d62:	b11b      	cbz	r3, 8004d6c <_dtoa_r+0xb34>
 8004d64:	f10a 0308 	add.w	r3, sl, #8
 8004d68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	4650      	mov	r0, sl
 8004d6e:	b019      	add	sp, #100	@ 0x64
 8004d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	f77f ae37 	ble.w	80049ea <_dtoa_r+0x7b2>
 8004d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d80:	2001      	movs	r0, #1
 8004d82:	e655      	b.n	8004a30 <_dtoa_r+0x7f8>
 8004d84:	9b00      	ldr	r3, [sp, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f77f aed6 	ble.w	8004b38 <_dtoa_r+0x900>
 8004d8c:	4656      	mov	r6, sl
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4648      	mov	r0, r9
 8004d92:	f7ff f9c8 	bl	8004126 <quorem>
 8004d96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004d9a:	f806 8b01 	strb.w	r8, [r6], #1
 8004d9e:	9b00      	ldr	r3, [sp, #0]
 8004da0:	eba6 020a 	sub.w	r2, r6, sl
 8004da4:	4293      	cmp	r3, r2
 8004da6:	ddb3      	ble.n	8004d10 <_dtoa_r+0xad8>
 8004da8:	4649      	mov	r1, r9
 8004daa:	2300      	movs	r3, #0
 8004dac:	220a      	movs	r2, #10
 8004dae:	4658      	mov	r0, fp
 8004db0:	f000 f968 	bl	8005084 <__multadd>
 8004db4:	4681      	mov	r9, r0
 8004db6:	e7ea      	b.n	8004d8e <_dtoa_r+0xb56>
 8004db8:	08005f18 	.word	0x08005f18
 8004dbc:	08005e9c 	.word	0x08005e9c

08004dc0 <_free_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	2900      	cmp	r1, #0
 8004dc6:	d041      	beq.n	8004e4c <_free_r+0x8c>
 8004dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dcc:	1f0c      	subs	r4, r1, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bfb8      	it	lt
 8004dd2:	18e4      	addlt	r4, r4, r3
 8004dd4:	f000 f8e8 	bl	8004fa8 <__malloc_lock>
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e50 <_free_r+0x90>)
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	b933      	cbnz	r3, 8004dec <_free_r+0x2c>
 8004dde:	6063      	str	r3, [r4, #4]
 8004de0:	6014      	str	r4, [r2, #0]
 8004de2:	4628      	mov	r0, r5
 8004de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004de8:	f000 b8e4 	b.w	8004fb4 <__malloc_unlock>
 8004dec:	42a3      	cmp	r3, r4
 8004dee:	d908      	bls.n	8004e02 <_free_r+0x42>
 8004df0:	6820      	ldr	r0, [r4, #0]
 8004df2:	1821      	adds	r1, r4, r0
 8004df4:	428b      	cmp	r3, r1
 8004df6:	bf01      	itttt	eq
 8004df8:	6819      	ldreq	r1, [r3, #0]
 8004dfa:	685b      	ldreq	r3, [r3, #4]
 8004dfc:	1809      	addeq	r1, r1, r0
 8004dfe:	6021      	streq	r1, [r4, #0]
 8004e00:	e7ed      	b.n	8004dde <_free_r+0x1e>
 8004e02:	461a      	mov	r2, r3
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	b10b      	cbz	r3, 8004e0c <_free_r+0x4c>
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	d9fa      	bls.n	8004e02 <_free_r+0x42>
 8004e0c:	6811      	ldr	r1, [r2, #0]
 8004e0e:	1850      	adds	r0, r2, r1
 8004e10:	42a0      	cmp	r0, r4
 8004e12:	d10b      	bne.n	8004e2c <_free_r+0x6c>
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	4401      	add	r1, r0
 8004e18:	1850      	adds	r0, r2, r1
 8004e1a:	4283      	cmp	r3, r0
 8004e1c:	6011      	str	r1, [r2, #0]
 8004e1e:	d1e0      	bne.n	8004de2 <_free_r+0x22>
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	6053      	str	r3, [r2, #4]
 8004e26:	4408      	add	r0, r1
 8004e28:	6010      	str	r0, [r2, #0]
 8004e2a:	e7da      	b.n	8004de2 <_free_r+0x22>
 8004e2c:	d902      	bls.n	8004e34 <_free_r+0x74>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	602b      	str	r3, [r5, #0]
 8004e32:	e7d6      	b.n	8004de2 <_free_r+0x22>
 8004e34:	6820      	ldr	r0, [r4, #0]
 8004e36:	1821      	adds	r1, r4, r0
 8004e38:	428b      	cmp	r3, r1
 8004e3a:	bf04      	itt	eq
 8004e3c:	6819      	ldreq	r1, [r3, #0]
 8004e3e:	685b      	ldreq	r3, [r3, #4]
 8004e40:	6063      	str	r3, [r4, #4]
 8004e42:	bf04      	itt	eq
 8004e44:	1809      	addeq	r1, r1, r0
 8004e46:	6021      	streq	r1, [r4, #0]
 8004e48:	6054      	str	r4, [r2, #4]
 8004e4a:	e7ca      	b.n	8004de2 <_free_r+0x22>
 8004e4c:	bd38      	pop	{r3, r4, r5, pc}
 8004e4e:	bf00      	nop
 8004e50:	2000052c 	.word	0x2000052c

08004e54 <malloc>:
 8004e54:	4b02      	ldr	r3, [pc, #8]	@ (8004e60 <malloc+0xc>)
 8004e56:	4601      	mov	r1, r0
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	f000 b825 	b.w	8004ea8 <_malloc_r>
 8004e5e:	bf00      	nop
 8004e60:	20000010 	.word	0x20000010

08004e64 <sbrk_aligned>:
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	4e0f      	ldr	r6, [pc, #60]	@ (8004ea4 <sbrk_aligned+0x40>)
 8004e68:	460c      	mov	r4, r1
 8004e6a:	6831      	ldr	r1, [r6, #0]
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	b911      	cbnz	r1, 8004e76 <sbrk_aligned+0x12>
 8004e70:	f000 fcd4 	bl	800581c <_sbrk_r>
 8004e74:	6030      	str	r0, [r6, #0]
 8004e76:	4621      	mov	r1, r4
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f000 fccf 	bl	800581c <_sbrk_r>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	d103      	bne.n	8004e8a <sbrk_aligned+0x26>
 8004e82:	f04f 34ff 	mov.w	r4, #4294967295
 8004e86:	4620      	mov	r0, r4
 8004e88:	bd70      	pop	{r4, r5, r6, pc}
 8004e8a:	1cc4      	adds	r4, r0, #3
 8004e8c:	f024 0403 	bic.w	r4, r4, #3
 8004e90:	42a0      	cmp	r0, r4
 8004e92:	d0f8      	beq.n	8004e86 <sbrk_aligned+0x22>
 8004e94:	1a21      	subs	r1, r4, r0
 8004e96:	4628      	mov	r0, r5
 8004e98:	f000 fcc0 	bl	800581c <_sbrk_r>
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d1f2      	bne.n	8004e86 <sbrk_aligned+0x22>
 8004ea0:	e7ef      	b.n	8004e82 <sbrk_aligned+0x1e>
 8004ea2:	bf00      	nop
 8004ea4:	20000528 	.word	0x20000528

08004ea8 <_malloc_r>:
 8004ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eac:	1ccd      	adds	r5, r1, #3
 8004eae:	f025 0503 	bic.w	r5, r5, #3
 8004eb2:	3508      	adds	r5, #8
 8004eb4:	2d0c      	cmp	r5, #12
 8004eb6:	bf38      	it	cc
 8004eb8:	250c      	movcc	r5, #12
 8004eba:	2d00      	cmp	r5, #0
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	db01      	blt.n	8004ec4 <_malloc_r+0x1c>
 8004ec0:	42a9      	cmp	r1, r5
 8004ec2:	d904      	bls.n	8004ece <_malloc_r+0x26>
 8004ec4:	230c      	movs	r3, #12
 8004ec6:	6033      	str	r3, [r6, #0]
 8004ec8:	2000      	movs	r0, #0
 8004eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fa4 <_malloc_r+0xfc>
 8004ed2:	f000 f869 	bl	8004fa8 <__malloc_lock>
 8004ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eda:	461c      	mov	r4, r3
 8004edc:	bb44      	cbnz	r4, 8004f30 <_malloc_r+0x88>
 8004ede:	4629      	mov	r1, r5
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f7ff ffbf 	bl	8004e64 <sbrk_aligned>
 8004ee6:	1c43      	adds	r3, r0, #1
 8004ee8:	4604      	mov	r4, r0
 8004eea:	d158      	bne.n	8004f9e <_malloc_r+0xf6>
 8004eec:	f8d8 4000 	ldr.w	r4, [r8]
 8004ef0:	4627      	mov	r7, r4
 8004ef2:	2f00      	cmp	r7, #0
 8004ef4:	d143      	bne.n	8004f7e <_malloc_r+0xd6>
 8004ef6:	2c00      	cmp	r4, #0
 8004ef8:	d04b      	beq.n	8004f92 <_malloc_r+0xea>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	4639      	mov	r1, r7
 8004efe:	4630      	mov	r0, r6
 8004f00:	eb04 0903 	add.w	r9, r4, r3
 8004f04:	f000 fc8a 	bl	800581c <_sbrk_r>
 8004f08:	4581      	cmp	r9, r0
 8004f0a:	d142      	bne.n	8004f92 <_malloc_r+0xea>
 8004f0c:	6821      	ldr	r1, [r4, #0]
 8004f0e:	1a6d      	subs	r5, r5, r1
 8004f10:	4629      	mov	r1, r5
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7ff ffa6 	bl	8004e64 <sbrk_aligned>
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d03a      	beq.n	8004f92 <_malloc_r+0xea>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	442b      	add	r3, r5
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	f8d8 3000 	ldr.w	r3, [r8]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	bb62      	cbnz	r2, 8004f84 <_malloc_r+0xdc>
 8004f2a:	f8c8 7000 	str.w	r7, [r8]
 8004f2e:	e00f      	b.n	8004f50 <_malloc_r+0xa8>
 8004f30:	6822      	ldr	r2, [r4, #0]
 8004f32:	1b52      	subs	r2, r2, r5
 8004f34:	d420      	bmi.n	8004f78 <_malloc_r+0xd0>
 8004f36:	2a0b      	cmp	r2, #11
 8004f38:	d917      	bls.n	8004f6a <_malloc_r+0xc2>
 8004f3a:	1961      	adds	r1, r4, r5
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	6025      	str	r5, [r4, #0]
 8004f40:	bf18      	it	ne
 8004f42:	6059      	strne	r1, [r3, #4]
 8004f44:	6863      	ldr	r3, [r4, #4]
 8004f46:	bf08      	it	eq
 8004f48:	f8c8 1000 	streq.w	r1, [r8]
 8004f4c:	5162      	str	r2, [r4, r5]
 8004f4e:	604b      	str	r3, [r1, #4]
 8004f50:	4630      	mov	r0, r6
 8004f52:	f000 f82f 	bl	8004fb4 <__malloc_unlock>
 8004f56:	f104 000b 	add.w	r0, r4, #11
 8004f5a:	1d23      	adds	r3, r4, #4
 8004f5c:	f020 0007 	bic.w	r0, r0, #7
 8004f60:	1ac2      	subs	r2, r0, r3
 8004f62:	bf1c      	itt	ne
 8004f64:	1a1b      	subne	r3, r3, r0
 8004f66:	50a3      	strne	r3, [r4, r2]
 8004f68:	e7af      	b.n	8004eca <_malloc_r+0x22>
 8004f6a:	6862      	ldr	r2, [r4, #4]
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	bf0c      	ite	eq
 8004f70:	f8c8 2000 	streq.w	r2, [r8]
 8004f74:	605a      	strne	r2, [r3, #4]
 8004f76:	e7eb      	b.n	8004f50 <_malloc_r+0xa8>
 8004f78:	4623      	mov	r3, r4
 8004f7a:	6864      	ldr	r4, [r4, #4]
 8004f7c:	e7ae      	b.n	8004edc <_malloc_r+0x34>
 8004f7e:	463c      	mov	r4, r7
 8004f80:	687f      	ldr	r7, [r7, #4]
 8004f82:	e7b6      	b.n	8004ef2 <_malloc_r+0x4a>
 8004f84:	461a      	mov	r2, r3
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	42a3      	cmp	r3, r4
 8004f8a:	d1fb      	bne.n	8004f84 <_malloc_r+0xdc>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	6053      	str	r3, [r2, #4]
 8004f90:	e7de      	b.n	8004f50 <_malloc_r+0xa8>
 8004f92:	230c      	movs	r3, #12
 8004f94:	6033      	str	r3, [r6, #0]
 8004f96:	4630      	mov	r0, r6
 8004f98:	f000 f80c 	bl	8004fb4 <__malloc_unlock>
 8004f9c:	e794      	b.n	8004ec8 <_malloc_r+0x20>
 8004f9e:	6005      	str	r5, [r0, #0]
 8004fa0:	e7d6      	b.n	8004f50 <_malloc_r+0xa8>
 8004fa2:	bf00      	nop
 8004fa4:	2000052c 	.word	0x2000052c

08004fa8 <__malloc_lock>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	@ (8004fb0 <__malloc_lock+0x8>)
 8004faa:	f7ff b8ac 	b.w	8004106 <__retarget_lock_acquire_recursive>
 8004fae:	bf00      	nop
 8004fb0:	20000524 	.word	0x20000524

08004fb4 <__malloc_unlock>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	@ (8004fbc <__malloc_unlock+0x8>)
 8004fb6:	f7ff b8a7 	b.w	8004108 <__retarget_lock_release_recursive>
 8004fba:	bf00      	nop
 8004fbc:	20000524 	.word	0x20000524

08004fc0 <_Balloc>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	69c6      	ldr	r6, [r0, #28]
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	b976      	cbnz	r6, 8004fe8 <_Balloc+0x28>
 8004fca:	2010      	movs	r0, #16
 8004fcc:	f7ff ff42 	bl	8004e54 <malloc>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	61e0      	str	r0, [r4, #28]
 8004fd4:	b920      	cbnz	r0, 8004fe0 <_Balloc+0x20>
 8004fd6:	4b18      	ldr	r3, [pc, #96]	@ (8005038 <_Balloc+0x78>)
 8004fd8:	4818      	ldr	r0, [pc, #96]	@ (800503c <_Balloc+0x7c>)
 8004fda:	216b      	movs	r1, #107	@ 0x6b
 8004fdc:	f000 fc2e 	bl	800583c <__assert_func>
 8004fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fe4:	6006      	str	r6, [r0, #0]
 8004fe6:	60c6      	str	r6, [r0, #12]
 8004fe8:	69e6      	ldr	r6, [r4, #28]
 8004fea:	68f3      	ldr	r3, [r6, #12]
 8004fec:	b183      	cbz	r3, 8005010 <_Balloc+0x50>
 8004fee:	69e3      	ldr	r3, [r4, #28]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ff6:	b9b8      	cbnz	r0, 8005028 <_Balloc+0x68>
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	fa01 f605 	lsl.w	r6, r1, r5
 8004ffe:	1d72      	adds	r2, r6, #5
 8005000:	0092      	lsls	r2, r2, #2
 8005002:	4620      	mov	r0, r4
 8005004:	f000 fc38 	bl	8005878 <_calloc_r>
 8005008:	b160      	cbz	r0, 8005024 <_Balloc+0x64>
 800500a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800500e:	e00e      	b.n	800502e <_Balloc+0x6e>
 8005010:	2221      	movs	r2, #33	@ 0x21
 8005012:	2104      	movs	r1, #4
 8005014:	4620      	mov	r0, r4
 8005016:	f000 fc2f 	bl	8005878 <_calloc_r>
 800501a:	69e3      	ldr	r3, [r4, #28]
 800501c:	60f0      	str	r0, [r6, #12]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e4      	bne.n	8004fee <_Balloc+0x2e>
 8005024:	2000      	movs	r0, #0
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	6802      	ldr	r2, [r0, #0]
 800502a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800502e:	2300      	movs	r3, #0
 8005030:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005034:	e7f7      	b.n	8005026 <_Balloc+0x66>
 8005036:	bf00      	nop
 8005038:	08005ea9 	.word	0x08005ea9
 800503c:	08005f29 	.word	0x08005f29

08005040 <_Bfree>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	69c6      	ldr	r6, [r0, #28]
 8005044:	4605      	mov	r5, r0
 8005046:	460c      	mov	r4, r1
 8005048:	b976      	cbnz	r6, 8005068 <_Bfree+0x28>
 800504a:	2010      	movs	r0, #16
 800504c:	f7ff ff02 	bl	8004e54 <malloc>
 8005050:	4602      	mov	r2, r0
 8005052:	61e8      	str	r0, [r5, #28]
 8005054:	b920      	cbnz	r0, 8005060 <_Bfree+0x20>
 8005056:	4b09      	ldr	r3, [pc, #36]	@ (800507c <_Bfree+0x3c>)
 8005058:	4809      	ldr	r0, [pc, #36]	@ (8005080 <_Bfree+0x40>)
 800505a:	218f      	movs	r1, #143	@ 0x8f
 800505c:	f000 fbee 	bl	800583c <__assert_func>
 8005060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005064:	6006      	str	r6, [r0, #0]
 8005066:	60c6      	str	r6, [r0, #12]
 8005068:	b13c      	cbz	r4, 800507a <_Bfree+0x3a>
 800506a:	69eb      	ldr	r3, [r5, #28]
 800506c:	6862      	ldr	r2, [r4, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005074:	6021      	str	r1, [r4, #0]
 8005076:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800507a:	bd70      	pop	{r4, r5, r6, pc}
 800507c:	08005ea9 	.word	0x08005ea9
 8005080:	08005f29 	.word	0x08005f29

08005084 <__multadd>:
 8005084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005088:	690d      	ldr	r5, [r1, #16]
 800508a:	4607      	mov	r7, r0
 800508c:	460c      	mov	r4, r1
 800508e:	461e      	mov	r6, r3
 8005090:	f101 0c14 	add.w	ip, r1, #20
 8005094:	2000      	movs	r0, #0
 8005096:	f8dc 3000 	ldr.w	r3, [ip]
 800509a:	b299      	uxth	r1, r3
 800509c:	fb02 6101 	mla	r1, r2, r1, r6
 80050a0:	0c1e      	lsrs	r6, r3, #16
 80050a2:	0c0b      	lsrs	r3, r1, #16
 80050a4:	fb02 3306 	mla	r3, r2, r6, r3
 80050a8:	b289      	uxth	r1, r1
 80050aa:	3001      	adds	r0, #1
 80050ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80050b0:	4285      	cmp	r5, r0
 80050b2:	f84c 1b04 	str.w	r1, [ip], #4
 80050b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80050ba:	dcec      	bgt.n	8005096 <__multadd+0x12>
 80050bc:	b30e      	cbz	r6, 8005102 <__multadd+0x7e>
 80050be:	68a3      	ldr	r3, [r4, #8]
 80050c0:	42ab      	cmp	r3, r5
 80050c2:	dc19      	bgt.n	80050f8 <__multadd+0x74>
 80050c4:	6861      	ldr	r1, [r4, #4]
 80050c6:	4638      	mov	r0, r7
 80050c8:	3101      	adds	r1, #1
 80050ca:	f7ff ff79 	bl	8004fc0 <_Balloc>
 80050ce:	4680      	mov	r8, r0
 80050d0:	b928      	cbnz	r0, 80050de <__multadd+0x5a>
 80050d2:	4602      	mov	r2, r0
 80050d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005108 <__multadd+0x84>)
 80050d6:	480d      	ldr	r0, [pc, #52]	@ (800510c <__multadd+0x88>)
 80050d8:	21ba      	movs	r1, #186	@ 0xba
 80050da:	f000 fbaf 	bl	800583c <__assert_func>
 80050de:	6922      	ldr	r2, [r4, #16]
 80050e0:	3202      	adds	r2, #2
 80050e2:	f104 010c 	add.w	r1, r4, #12
 80050e6:	0092      	lsls	r2, r2, #2
 80050e8:	300c      	adds	r0, #12
 80050ea:	f7ff f80e 	bl	800410a <memcpy>
 80050ee:	4621      	mov	r1, r4
 80050f0:	4638      	mov	r0, r7
 80050f2:	f7ff ffa5 	bl	8005040 <_Bfree>
 80050f6:	4644      	mov	r4, r8
 80050f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80050fc:	3501      	adds	r5, #1
 80050fe:	615e      	str	r6, [r3, #20]
 8005100:	6125      	str	r5, [r4, #16]
 8005102:	4620      	mov	r0, r4
 8005104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005108:	08005f18 	.word	0x08005f18
 800510c:	08005f29 	.word	0x08005f29

08005110 <__hi0bits>:
 8005110:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005114:	4603      	mov	r3, r0
 8005116:	bf36      	itet	cc
 8005118:	0403      	lslcc	r3, r0, #16
 800511a:	2000      	movcs	r0, #0
 800511c:	2010      	movcc	r0, #16
 800511e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005122:	bf3c      	itt	cc
 8005124:	021b      	lslcc	r3, r3, #8
 8005126:	3008      	addcc	r0, #8
 8005128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800512c:	bf3c      	itt	cc
 800512e:	011b      	lslcc	r3, r3, #4
 8005130:	3004      	addcc	r0, #4
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005136:	bf3c      	itt	cc
 8005138:	009b      	lslcc	r3, r3, #2
 800513a:	3002      	addcc	r0, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	db05      	blt.n	800514c <__hi0bits+0x3c>
 8005140:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005144:	f100 0001 	add.w	r0, r0, #1
 8005148:	bf08      	it	eq
 800514a:	2020      	moveq	r0, #32
 800514c:	4770      	bx	lr

0800514e <__lo0bits>:
 800514e:	6803      	ldr	r3, [r0, #0]
 8005150:	4602      	mov	r2, r0
 8005152:	f013 0007 	ands.w	r0, r3, #7
 8005156:	d00b      	beq.n	8005170 <__lo0bits+0x22>
 8005158:	07d9      	lsls	r1, r3, #31
 800515a:	d421      	bmi.n	80051a0 <__lo0bits+0x52>
 800515c:	0798      	lsls	r0, r3, #30
 800515e:	bf49      	itett	mi
 8005160:	085b      	lsrmi	r3, r3, #1
 8005162:	089b      	lsrpl	r3, r3, #2
 8005164:	2001      	movmi	r0, #1
 8005166:	6013      	strmi	r3, [r2, #0]
 8005168:	bf5c      	itt	pl
 800516a:	6013      	strpl	r3, [r2, #0]
 800516c:	2002      	movpl	r0, #2
 800516e:	4770      	bx	lr
 8005170:	b299      	uxth	r1, r3
 8005172:	b909      	cbnz	r1, 8005178 <__lo0bits+0x2a>
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	2010      	movs	r0, #16
 8005178:	b2d9      	uxtb	r1, r3
 800517a:	b909      	cbnz	r1, 8005180 <__lo0bits+0x32>
 800517c:	3008      	adds	r0, #8
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	0719      	lsls	r1, r3, #28
 8005182:	bf04      	itt	eq
 8005184:	091b      	lsreq	r3, r3, #4
 8005186:	3004      	addeq	r0, #4
 8005188:	0799      	lsls	r1, r3, #30
 800518a:	bf04      	itt	eq
 800518c:	089b      	lsreq	r3, r3, #2
 800518e:	3002      	addeq	r0, #2
 8005190:	07d9      	lsls	r1, r3, #31
 8005192:	d403      	bmi.n	800519c <__lo0bits+0x4e>
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	f100 0001 	add.w	r0, r0, #1
 800519a:	d003      	beq.n	80051a4 <__lo0bits+0x56>
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	4770      	bx	lr
 80051a0:	2000      	movs	r0, #0
 80051a2:	4770      	bx	lr
 80051a4:	2020      	movs	r0, #32
 80051a6:	4770      	bx	lr

080051a8 <__i2b>:
 80051a8:	b510      	push	{r4, lr}
 80051aa:	460c      	mov	r4, r1
 80051ac:	2101      	movs	r1, #1
 80051ae:	f7ff ff07 	bl	8004fc0 <_Balloc>
 80051b2:	4602      	mov	r2, r0
 80051b4:	b928      	cbnz	r0, 80051c2 <__i2b+0x1a>
 80051b6:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <__i2b+0x24>)
 80051b8:	4805      	ldr	r0, [pc, #20]	@ (80051d0 <__i2b+0x28>)
 80051ba:	f240 1145 	movw	r1, #325	@ 0x145
 80051be:	f000 fb3d 	bl	800583c <__assert_func>
 80051c2:	2301      	movs	r3, #1
 80051c4:	6144      	str	r4, [r0, #20]
 80051c6:	6103      	str	r3, [r0, #16]
 80051c8:	bd10      	pop	{r4, pc}
 80051ca:	bf00      	nop
 80051cc:	08005f18 	.word	0x08005f18
 80051d0:	08005f29 	.word	0x08005f29

080051d4 <__multiply>:
 80051d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d8:	4614      	mov	r4, r2
 80051da:	690a      	ldr	r2, [r1, #16]
 80051dc:	6923      	ldr	r3, [r4, #16]
 80051de:	429a      	cmp	r2, r3
 80051e0:	bfa8      	it	ge
 80051e2:	4623      	movge	r3, r4
 80051e4:	460f      	mov	r7, r1
 80051e6:	bfa4      	itt	ge
 80051e8:	460c      	movge	r4, r1
 80051ea:	461f      	movge	r7, r3
 80051ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80051f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80051f4:	68a3      	ldr	r3, [r4, #8]
 80051f6:	6861      	ldr	r1, [r4, #4]
 80051f8:	eb0a 0609 	add.w	r6, sl, r9
 80051fc:	42b3      	cmp	r3, r6
 80051fe:	b085      	sub	sp, #20
 8005200:	bfb8      	it	lt
 8005202:	3101      	addlt	r1, #1
 8005204:	f7ff fedc 	bl	8004fc0 <_Balloc>
 8005208:	b930      	cbnz	r0, 8005218 <__multiply+0x44>
 800520a:	4602      	mov	r2, r0
 800520c:	4b44      	ldr	r3, [pc, #272]	@ (8005320 <__multiply+0x14c>)
 800520e:	4845      	ldr	r0, [pc, #276]	@ (8005324 <__multiply+0x150>)
 8005210:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005214:	f000 fb12 	bl	800583c <__assert_func>
 8005218:	f100 0514 	add.w	r5, r0, #20
 800521c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005220:	462b      	mov	r3, r5
 8005222:	2200      	movs	r2, #0
 8005224:	4543      	cmp	r3, r8
 8005226:	d321      	bcc.n	800526c <__multiply+0x98>
 8005228:	f107 0114 	add.w	r1, r7, #20
 800522c:	f104 0214 	add.w	r2, r4, #20
 8005230:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005234:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005238:	9302      	str	r3, [sp, #8]
 800523a:	1b13      	subs	r3, r2, r4
 800523c:	3b15      	subs	r3, #21
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	3304      	adds	r3, #4
 8005244:	f104 0715 	add.w	r7, r4, #21
 8005248:	42ba      	cmp	r2, r7
 800524a:	bf38      	it	cc
 800524c:	2304      	movcc	r3, #4
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	9b02      	ldr	r3, [sp, #8]
 8005252:	9103      	str	r1, [sp, #12]
 8005254:	428b      	cmp	r3, r1
 8005256:	d80c      	bhi.n	8005272 <__multiply+0x9e>
 8005258:	2e00      	cmp	r6, #0
 800525a:	dd03      	ble.n	8005264 <__multiply+0x90>
 800525c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005260:	2b00      	cmp	r3, #0
 8005262:	d05b      	beq.n	800531c <__multiply+0x148>
 8005264:	6106      	str	r6, [r0, #16]
 8005266:	b005      	add	sp, #20
 8005268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526c:	f843 2b04 	str.w	r2, [r3], #4
 8005270:	e7d8      	b.n	8005224 <__multiply+0x50>
 8005272:	f8b1 a000 	ldrh.w	sl, [r1]
 8005276:	f1ba 0f00 	cmp.w	sl, #0
 800527a:	d024      	beq.n	80052c6 <__multiply+0xf2>
 800527c:	f104 0e14 	add.w	lr, r4, #20
 8005280:	46a9      	mov	r9, r5
 8005282:	f04f 0c00 	mov.w	ip, #0
 8005286:	f85e 7b04 	ldr.w	r7, [lr], #4
 800528a:	f8d9 3000 	ldr.w	r3, [r9]
 800528e:	fa1f fb87 	uxth.w	fp, r7
 8005292:	b29b      	uxth	r3, r3
 8005294:	fb0a 330b 	mla	r3, sl, fp, r3
 8005298:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800529c:	f8d9 7000 	ldr.w	r7, [r9]
 80052a0:	4463      	add	r3, ip
 80052a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80052a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80052aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80052b4:	4572      	cmp	r2, lr
 80052b6:	f849 3b04 	str.w	r3, [r9], #4
 80052ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80052be:	d8e2      	bhi.n	8005286 <__multiply+0xb2>
 80052c0:	9b01      	ldr	r3, [sp, #4]
 80052c2:	f845 c003 	str.w	ip, [r5, r3]
 80052c6:	9b03      	ldr	r3, [sp, #12]
 80052c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80052cc:	3104      	adds	r1, #4
 80052ce:	f1b9 0f00 	cmp.w	r9, #0
 80052d2:	d021      	beq.n	8005318 <__multiply+0x144>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	f104 0c14 	add.w	ip, r4, #20
 80052da:	46ae      	mov	lr, r5
 80052dc:	f04f 0a00 	mov.w	sl, #0
 80052e0:	f8bc b000 	ldrh.w	fp, [ip]
 80052e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80052e8:	fb09 770b 	mla	r7, r9, fp, r7
 80052ec:	4457      	add	r7, sl
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80052f4:	f84e 3b04 	str.w	r3, [lr], #4
 80052f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005300:	f8be 3000 	ldrh.w	r3, [lr]
 8005304:	fb09 330a 	mla	r3, r9, sl, r3
 8005308:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800530c:	4562      	cmp	r2, ip
 800530e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005312:	d8e5      	bhi.n	80052e0 <__multiply+0x10c>
 8005314:	9f01      	ldr	r7, [sp, #4]
 8005316:	51eb      	str	r3, [r5, r7]
 8005318:	3504      	adds	r5, #4
 800531a:	e799      	b.n	8005250 <__multiply+0x7c>
 800531c:	3e01      	subs	r6, #1
 800531e:	e79b      	b.n	8005258 <__multiply+0x84>
 8005320:	08005f18 	.word	0x08005f18
 8005324:	08005f29 	.word	0x08005f29

08005328 <__pow5mult>:
 8005328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800532c:	4615      	mov	r5, r2
 800532e:	f012 0203 	ands.w	r2, r2, #3
 8005332:	4607      	mov	r7, r0
 8005334:	460e      	mov	r6, r1
 8005336:	d007      	beq.n	8005348 <__pow5mult+0x20>
 8005338:	4c25      	ldr	r4, [pc, #148]	@ (80053d0 <__pow5mult+0xa8>)
 800533a:	3a01      	subs	r2, #1
 800533c:	2300      	movs	r3, #0
 800533e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005342:	f7ff fe9f 	bl	8005084 <__multadd>
 8005346:	4606      	mov	r6, r0
 8005348:	10ad      	asrs	r5, r5, #2
 800534a:	d03d      	beq.n	80053c8 <__pow5mult+0xa0>
 800534c:	69fc      	ldr	r4, [r7, #28]
 800534e:	b97c      	cbnz	r4, 8005370 <__pow5mult+0x48>
 8005350:	2010      	movs	r0, #16
 8005352:	f7ff fd7f 	bl	8004e54 <malloc>
 8005356:	4602      	mov	r2, r0
 8005358:	61f8      	str	r0, [r7, #28]
 800535a:	b928      	cbnz	r0, 8005368 <__pow5mult+0x40>
 800535c:	4b1d      	ldr	r3, [pc, #116]	@ (80053d4 <__pow5mult+0xac>)
 800535e:	481e      	ldr	r0, [pc, #120]	@ (80053d8 <__pow5mult+0xb0>)
 8005360:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005364:	f000 fa6a 	bl	800583c <__assert_func>
 8005368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800536c:	6004      	str	r4, [r0, #0]
 800536e:	60c4      	str	r4, [r0, #12]
 8005370:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005378:	b94c      	cbnz	r4, 800538e <__pow5mult+0x66>
 800537a:	f240 2171 	movw	r1, #625	@ 0x271
 800537e:	4638      	mov	r0, r7
 8005380:	f7ff ff12 	bl	80051a8 <__i2b>
 8005384:	2300      	movs	r3, #0
 8005386:	f8c8 0008 	str.w	r0, [r8, #8]
 800538a:	4604      	mov	r4, r0
 800538c:	6003      	str	r3, [r0, #0]
 800538e:	f04f 0900 	mov.w	r9, #0
 8005392:	07eb      	lsls	r3, r5, #31
 8005394:	d50a      	bpl.n	80053ac <__pow5mult+0x84>
 8005396:	4631      	mov	r1, r6
 8005398:	4622      	mov	r2, r4
 800539a:	4638      	mov	r0, r7
 800539c:	f7ff ff1a 	bl	80051d4 <__multiply>
 80053a0:	4631      	mov	r1, r6
 80053a2:	4680      	mov	r8, r0
 80053a4:	4638      	mov	r0, r7
 80053a6:	f7ff fe4b 	bl	8005040 <_Bfree>
 80053aa:	4646      	mov	r6, r8
 80053ac:	106d      	asrs	r5, r5, #1
 80053ae:	d00b      	beq.n	80053c8 <__pow5mult+0xa0>
 80053b0:	6820      	ldr	r0, [r4, #0]
 80053b2:	b938      	cbnz	r0, 80053c4 <__pow5mult+0x9c>
 80053b4:	4622      	mov	r2, r4
 80053b6:	4621      	mov	r1, r4
 80053b8:	4638      	mov	r0, r7
 80053ba:	f7ff ff0b 	bl	80051d4 <__multiply>
 80053be:	6020      	str	r0, [r4, #0]
 80053c0:	f8c0 9000 	str.w	r9, [r0]
 80053c4:	4604      	mov	r4, r0
 80053c6:	e7e4      	b.n	8005392 <__pow5mult+0x6a>
 80053c8:	4630      	mov	r0, r6
 80053ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ce:	bf00      	nop
 80053d0:	08005f84 	.word	0x08005f84
 80053d4:	08005ea9 	.word	0x08005ea9
 80053d8:	08005f29 	.word	0x08005f29

080053dc <__lshift>:
 80053dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e0:	460c      	mov	r4, r1
 80053e2:	6849      	ldr	r1, [r1, #4]
 80053e4:	6923      	ldr	r3, [r4, #16]
 80053e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80053ea:	68a3      	ldr	r3, [r4, #8]
 80053ec:	4607      	mov	r7, r0
 80053ee:	4691      	mov	r9, r2
 80053f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053f4:	f108 0601 	add.w	r6, r8, #1
 80053f8:	42b3      	cmp	r3, r6
 80053fa:	db0b      	blt.n	8005414 <__lshift+0x38>
 80053fc:	4638      	mov	r0, r7
 80053fe:	f7ff fddf 	bl	8004fc0 <_Balloc>
 8005402:	4605      	mov	r5, r0
 8005404:	b948      	cbnz	r0, 800541a <__lshift+0x3e>
 8005406:	4602      	mov	r2, r0
 8005408:	4b28      	ldr	r3, [pc, #160]	@ (80054ac <__lshift+0xd0>)
 800540a:	4829      	ldr	r0, [pc, #164]	@ (80054b0 <__lshift+0xd4>)
 800540c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005410:	f000 fa14 	bl	800583c <__assert_func>
 8005414:	3101      	adds	r1, #1
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	e7ee      	b.n	80053f8 <__lshift+0x1c>
 800541a:	2300      	movs	r3, #0
 800541c:	f100 0114 	add.w	r1, r0, #20
 8005420:	f100 0210 	add.w	r2, r0, #16
 8005424:	4618      	mov	r0, r3
 8005426:	4553      	cmp	r3, sl
 8005428:	db33      	blt.n	8005492 <__lshift+0xb6>
 800542a:	6920      	ldr	r0, [r4, #16]
 800542c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005430:	f104 0314 	add.w	r3, r4, #20
 8005434:	f019 091f 	ands.w	r9, r9, #31
 8005438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800543c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005440:	d02b      	beq.n	800549a <__lshift+0xbe>
 8005442:	f1c9 0e20 	rsb	lr, r9, #32
 8005446:	468a      	mov	sl, r1
 8005448:	2200      	movs	r2, #0
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	fa00 f009 	lsl.w	r0, r0, r9
 8005450:	4310      	orrs	r0, r2
 8005452:	f84a 0b04 	str.w	r0, [sl], #4
 8005456:	f853 2b04 	ldr.w	r2, [r3], #4
 800545a:	459c      	cmp	ip, r3
 800545c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005460:	d8f3      	bhi.n	800544a <__lshift+0x6e>
 8005462:	ebac 0304 	sub.w	r3, ip, r4
 8005466:	3b15      	subs	r3, #21
 8005468:	f023 0303 	bic.w	r3, r3, #3
 800546c:	3304      	adds	r3, #4
 800546e:	f104 0015 	add.w	r0, r4, #21
 8005472:	4584      	cmp	ip, r0
 8005474:	bf38      	it	cc
 8005476:	2304      	movcc	r3, #4
 8005478:	50ca      	str	r2, [r1, r3]
 800547a:	b10a      	cbz	r2, 8005480 <__lshift+0xa4>
 800547c:	f108 0602 	add.w	r6, r8, #2
 8005480:	3e01      	subs	r6, #1
 8005482:	4638      	mov	r0, r7
 8005484:	612e      	str	r6, [r5, #16]
 8005486:	4621      	mov	r1, r4
 8005488:	f7ff fdda 	bl	8005040 <_Bfree>
 800548c:	4628      	mov	r0, r5
 800548e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005492:	f842 0f04 	str.w	r0, [r2, #4]!
 8005496:	3301      	adds	r3, #1
 8005498:	e7c5      	b.n	8005426 <__lshift+0x4a>
 800549a:	3904      	subs	r1, #4
 800549c:	f853 2b04 	ldr.w	r2, [r3], #4
 80054a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80054a4:	459c      	cmp	ip, r3
 80054a6:	d8f9      	bhi.n	800549c <__lshift+0xc0>
 80054a8:	e7ea      	b.n	8005480 <__lshift+0xa4>
 80054aa:	bf00      	nop
 80054ac:	08005f18 	.word	0x08005f18
 80054b0:	08005f29 	.word	0x08005f29

080054b4 <__mcmp>:
 80054b4:	690a      	ldr	r2, [r1, #16]
 80054b6:	4603      	mov	r3, r0
 80054b8:	6900      	ldr	r0, [r0, #16]
 80054ba:	1a80      	subs	r0, r0, r2
 80054bc:	b530      	push	{r4, r5, lr}
 80054be:	d10e      	bne.n	80054de <__mcmp+0x2a>
 80054c0:	3314      	adds	r3, #20
 80054c2:	3114      	adds	r1, #20
 80054c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80054c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80054cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80054d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80054d4:	4295      	cmp	r5, r2
 80054d6:	d003      	beq.n	80054e0 <__mcmp+0x2c>
 80054d8:	d205      	bcs.n	80054e6 <__mcmp+0x32>
 80054da:	f04f 30ff 	mov.w	r0, #4294967295
 80054de:	bd30      	pop	{r4, r5, pc}
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	d3f3      	bcc.n	80054cc <__mcmp+0x18>
 80054e4:	e7fb      	b.n	80054de <__mcmp+0x2a>
 80054e6:	2001      	movs	r0, #1
 80054e8:	e7f9      	b.n	80054de <__mcmp+0x2a>
	...

080054ec <__mdiff>:
 80054ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f0:	4689      	mov	r9, r1
 80054f2:	4606      	mov	r6, r0
 80054f4:	4611      	mov	r1, r2
 80054f6:	4648      	mov	r0, r9
 80054f8:	4614      	mov	r4, r2
 80054fa:	f7ff ffdb 	bl	80054b4 <__mcmp>
 80054fe:	1e05      	subs	r5, r0, #0
 8005500:	d112      	bne.n	8005528 <__mdiff+0x3c>
 8005502:	4629      	mov	r1, r5
 8005504:	4630      	mov	r0, r6
 8005506:	f7ff fd5b 	bl	8004fc0 <_Balloc>
 800550a:	4602      	mov	r2, r0
 800550c:	b928      	cbnz	r0, 800551a <__mdiff+0x2e>
 800550e:	4b3f      	ldr	r3, [pc, #252]	@ (800560c <__mdiff+0x120>)
 8005510:	f240 2137 	movw	r1, #567	@ 0x237
 8005514:	483e      	ldr	r0, [pc, #248]	@ (8005610 <__mdiff+0x124>)
 8005516:	f000 f991 	bl	800583c <__assert_func>
 800551a:	2301      	movs	r3, #1
 800551c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005520:	4610      	mov	r0, r2
 8005522:	b003      	add	sp, #12
 8005524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005528:	bfbc      	itt	lt
 800552a:	464b      	movlt	r3, r9
 800552c:	46a1      	movlt	r9, r4
 800552e:	4630      	mov	r0, r6
 8005530:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005534:	bfba      	itte	lt
 8005536:	461c      	movlt	r4, r3
 8005538:	2501      	movlt	r5, #1
 800553a:	2500      	movge	r5, #0
 800553c:	f7ff fd40 	bl	8004fc0 <_Balloc>
 8005540:	4602      	mov	r2, r0
 8005542:	b918      	cbnz	r0, 800554c <__mdiff+0x60>
 8005544:	4b31      	ldr	r3, [pc, #196]	@ (800560c <__mdiff+0x120>)
 8005546:	f240 2145 	movw	r1, #581	@ 0x245
 800554a:	e7e3      	b.n	8005514 <__mdiff+0x28>
 800554c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005550:	6926      	ldr	r6, [r4, #16]
 8005552:	60c5      	str	r5, [r0, #12]
 8005554:	f109 0310 	add.w	r3, r9, #16
 8005558:	f109 0514 	add.w	r5, r9, #20
 800555c:	f104 0e14 	add.w	lr, r4, #20
 8005560:	f100 0b14 	add.w	fp, r0, #20
 8005564:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005568:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	46d9      	mov	r9, fp
 8005570:	f04f 0c00 	mov.w	ip, #0
 8005574:	9b01      	ldr	r3, [sp, #4]
 8005576:	f85e 0b04 	ldr.w	r0, [lr], #4
 800557a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	fa1f f38a 	uxth.w	r3, sl
 8005584:	4619      	mov	r1, r3
 8005586:	b283      	uxth	r3, r0
 8005588:	1acb      	subs	r3, r1, r3
 800558a:	0c00      	lsrs	r0, r0, #16
 800558c:	4463      	add	r3, ip
 800558e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005592:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005596:	b29b      	uxth	r3, r3
 8005598:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800559c:	4576      	cmp	r6, lr
 800559e:	f849 3b04 	str.w	r3, [r9], #4
 80055a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80055a6:	d8e5      	bhi.n	8005574 <__mdiff+0x88>
 80055a8:	1b33      	subs	r3, r6, r4
 80055aa:	3b15      	subs	r3, #21
 80055ac:	f023 0303 	bic.w	r3, r3, #3
 80055b0:	3415      	adds	r4, #21
 80055b2:	3304      	adds	r3, #4
 80055b4:	42a6      	cmp	r6, r4
 80055b6:	bf38      	it	cc
 80055b8:	2304      	movcc	r3, #4
 80055ba:	441d      	add	r5, r3
 80055bc:	445b      	add	r3, fp
 80055be:	461e      	mov	r6, r3
 80055c0:	462c      	mov	r4, r5
 80055c2:	4544      	cmp	r4, r8
 80055c4:	d30e      	bcc.n	80055e4 <__mdiff+0xf8>
 80055c6:	f108 0103 	add.w	r1, r8, #3
 80055ca:	1b49      	subs	r1, r1, r5
 80055cc:	f021 0103 	bic.w	r1, r1, #3
 80055d0:	3d03      	subs	r5, #3
 80055d2:	45a8      	cmp	r8, r5
 80055d4:	bf38      	it	cc
 80055d6:	2100      	movcc	r1, #0
 80055d8:	440b      	add	r3, r1
 80055da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80055de:	b191      	cbz	r1, 8005606 <__mdiff+0x11a>
 80055e0:	6117      	str	r7, [r2, #16]
 80055e2:	e79d      	b.n	8005520 <__mdiff+0x34>
 80055e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80055e8:	46e6      	mov	lr, ip
 80055ea:	0c08      	lsrs	r0, r1, #16
 80055ec:	fa1c fc81 	uxtah	ip, ip, r1
 80055f0:	4471      	add	r1, lr
 80055f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80055f6:	b289      	uxth	r1, r1
 80055f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80055fc:	f846 1b04 	str.w	r1, [r6], #4
 8005600:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005604:	e7dd      	b.n	80055c2 <__mdiff+0xd6>
 8005606:	3f01      	subs	r7, #1
 8005608:	e7e7      	b.n	80055da <__mdiff+0xee>
 800560a:	bf00      	nop
 800560c:	08005f18 	.word	0x08005f18
 8005610:	08005f29 	.word	0x08005f29

08005614 <__d2b>:
 8005614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005618:	460f      	mov	r7, r1
 800561a:	2101      	movs	r1, #1
 800561c:	ec59 8b10 	vmov	r8, r9, d0
 8005620:	4616      	mov	r6, r2
 8005622:	f7ff fccd 	bl	8004fc0 <_Balloc>
 8005626:	4604      	mov	r4, r0
 8005628:	b930      	cbnz	r0, 8005638 <__d2b+0x24>
 800562a:	4602      	mov	r2, r0
 800562c:	4b23      	ldr	r3, [pc, #140]	@ (80056bc <__d2b+0xa8>)
 800562e:	4824      	ldr	r0, [pc, #144]	@ (80056c0 <__d2b+0xac>)
 8005630:	f240 310f 	movw	r1, #783	@ 0x30f
 8005634:	f000 f902 	bl	800583c <__assert_func>
 8005638:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800563c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005640:	b10d      	cbz	r5, 8005646 <__d2b+0x32>
 8005642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	f1b8 0300 	subs.w	r3, r8, #0
 800564c:	d023      	beq.n	8005696 <__d2b+0x82>
 800564e:	4668      	mov	r0, sp
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	f7ff fd7c 	bl	800514e <__lo0bits>
 8005656:	e9dd 1200 	ldrd	r1, r2, [sp]
 800565a:	b1d0      	cbz	r0, 8005692 <__d2b+0x7e>
 800565c:	f1c0 0320 	rsb	r3, r0, #32
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	430b      	orrs	r3, r1
 8005666:	40c2      	lsrs	r2, r0
 8005668:	6163      	str	r3, [r4, #20]
 800566a:	9201      	str	r2, [sp, #4]
 800566c:	9b01      	ldr	r3, [sp, #4]
 800566e:	61a3      	str	r3, [r4, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	bf0c      	ite	eq
 8005674:	2201      	moveq	r2, #1
 8005676:	2202      	movne	r2, #2
 8005678:	6122      	str	r2, [r4, #16]
 800567a:	b1a5      	cbz	r5, 80056a6 <__d2b+0x92>
 800567c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005680:	4405      	add	r5, r0
 8005682:	603d      	str	r5, [r7, #0]
 8005684:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005688:	6030      	str	r0, [r6, #0]
 800568a:	4620      	mov	r0, r4
 800568c:	b003      	add	sp, #12
 800568e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005692:	6161      	str	r1, [r4, #20]
 8005694:	e7ea      	b.n	800566c <__d2b+0x58>
 8005696:	a801      	add	r0, sp, #4
 8005698:	f7ff fd59 	bl	800514e <__lo0bits>
 800569c:	9b01      	ldr	r3, [sp, #4]
 800569e:	6163      	str	r3, [r4, #20]
 80056a0:	3020      	adds	r0, #32
 80056a2:	2201      	movs	r2, #1
 80056a4:	e7e8      	b.n	8005678 <__d2b+0x64>
 80056a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80056aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80056ae:	6038      	str	r0, [r7, #0]
 80056b0:	6918      	ldr	r0, [r3, #16]
 80056b2:	f7ff fd2d 	bl	8005110 <__hi0bits>
 80056b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80056ba:	e7e5      	b.n	8005688 <__d2b+0x74>
 80056bc:	08005f18 	.word	0x08005f18
 80056c0:	08005f29 	.word	0x08005f29

080056c4 <__sflush_r>:
 80056c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	0716      	lsls	r6, r2, #28
 80056ce:	4605      	mov	r5, r0
 80056d0:	460c      	mov	r4, r1
 80056d2:	d454      	bmi.n	800577e <__sflush_r+0xba>
 80056d4:	684b      	ldr	r3, [r1, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	dc02      	bgt.n	80056e0 <__sflush_r+0x1c>
 80056da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	dd48      	ble.n	8005772 <__sflush_r+0xae>
 80056e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056e2:	2e00      	cmp	r6, #0
 80056e4:	d045      	beq.n	8005772 <__sflush_r+0xae>
 80056e6:	2300      	movs	r3, #0
 80056e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056ec:	682f      	ldr	r7, [r5, #0]
 80056ee:	6a21      	ldr	r1, [r4, #32]
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	d030      	beq.n	8005756 <__sflush_r+0x92>
 80056f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056f6:	89a3      	ldrh	r3, [r4, #12]
 80056f8:	0759      	lsls	r1, r3, #29
 80056fa:	d505      	bpl.n	8005708 <__sflush_r+0x44>
 80056fc:	6863      	ldr	r3, [r4, #4]
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005702:	b10b      	cbz	r3, 8005708 <__sflush_r+0x44>
 8005704:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005706:	1ad2      	subs	r2, r2, r3
 8005708:	2300      	movs	r3, #0
 800570a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800570c:	6a21      	ldr	r1, [r4, #32]
 800570e:	4628      	mov	r0, r5
 8005710:	47b0      	blx	r6
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	d106      	bne.n	8005726 <__sflush_r+0x62>
 8005718:	6829      	ldr	r1, [r5, #0]
 800571a:	291d      	cmp	r1, #29
 800571c:	d82b      	bhi.n	8005776 <__sflush_r+0xb2>
 800571e:	4a2a      	ldr	r2, [pc, #168]	@ (80057c8 <__sflush_r+0x104>)
 8005720:	410a      	asrs	r2, r1
 8005722:	07d6      	lsls	r6, r2, #31
 8005724:	d427      	bmi.n	8005776 <__sflush_r+0xb2>
 8005726:	2200      	movs	r2, #0
 8005728:	6062      	str	r2, [r4, #4]
 800572a:	04d9      	lsls	r1, r3, #19
 800572c:	6922      	ldr	r2, [r4, #16]
 800572e:	6022      	str	r2, [r4, #0]
 8005730:	d504      	bpl.n	800573c <__sflush_r+0x78>
 8005732:	1c42      	adds	r2, r0, #1
 8005734:	d101      	bne.n	800573a <__sflush_r+0x76>
 8005736:	682b      	ldr	r3, [r5, #0]
 8005738:	b903      	cbnz	r3, 800573c <__sflush_r+0x78>
 800573a:	6560      	str	r0, [r4, #84]	@ 0x54
 800573c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800573e:	602f      	str	r7, [r5, #0]
 8005740:	b1b9      	cbz	r1, 8005772 <__sflush_r+0xae>
 8005742:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005746:	4299      	cmp	r1, r3
 8005748:	d002      	beq.n	8005750 <__sflush_r+0x8c>
 800574a:	4628      	mov	r0, r5
 800574c:	f7ff fb38 	bl	8004dc0 <_free_r>
 8005750:	2300      	movs	r3, #0
 8005752:	6363      	str	r3, [r4, #52]	@ 0x34
 8005754:	e00d      	b.n	8005772 <__sflush_r+0xae>
 8005756:	2301      	movs	r3, #1
 8005758:	4628      	mov	r0, r5
 800575a:	47b0      	blx	r6
 800575c:	4602      	mov	r2, r0
 800575e:	1c50      	adds	r0, r2, #1
 8005760:	d1c9      	bne.n	80056f6 <__sflush_r+0x32>
 8005762:	682b      	ldr	r3, [r5, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0c6      	beq.n	80056f6 <__sflush_r+0x32>
 8005768:	2b1d      	cmp	r3, #29
 800576a:	d001      	beq.n	8005770 <__sflush_r+0xac>
 800576c:	2b16      	cmp	r3, #22
 800576e:	d11e      	bne.n	80057ae <__sflush_r+0xea>
 8005770:	602f      	str	r7, [r5, #0]
 8005772:	2000      	movs	r0, #0
 8005774:	e022      	b.n	80057bc <__sflush_r+0xf8>
 8005776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800577a:	b21b      	sxth	r3, r3
 800577c:	e01b      	b.n	80057b6 <__sflush_r+0xf2>
 800577e:	690f      	ldr	r7, [r1, #16]
 8005780:	2f00      	cmp	r7, #0
 8005782:	d0f6      	beq.n	8005772 <__sflush_r+0xae>
 8005784:	0793      	lsls	r3, r2, #30
 8005786:	680e      	ldr	r6, [r1, #0]
 8005788:	bf08      	it	eq
 800578a:	694b      	ldreq	r3, [r1, #20]
 800578c:	600f      	str	r7, [r1, #0]
 800578e:	bf18      	it	ne
 8005790:	2300      	movne	r3, #0
 8005792:	eba6 0807 	sub.w	r8, r6, r7
 8005796:	608b      	str	r3, [r1, #8]
 8005798:	f1b8 0f00 	cmp.w	r8, #0
 800579c:	dde9      	ble.n	8005772 <__sflush_r+0xae>
 800579e:	6a21      	ldr	r1, [r4, #32]
 80057a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80057a2:	4643      	mov	r3, r8
 80057a4:	463a      	mov	r2, r7
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b0      	blx	r6
 80057aa:	2800      	cmp	r0, #0
 80057ac:	dc08      	bgt.n	80057c0 <__sflush_r+0xfc>
 80057ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057b6:	81a3      	strh	r3, [r4, #12]
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295
 80057bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c0:	4407      	add	r7, r0
 80057c2:	eba8 0800 	sub.w	r8, r8, r0
 80057c6:	e7e7      	b.n	8005798 <__sflush_r+0xd4>
 80057c8:	dfbffffe 	.word	0xdfbffffe

080057cc <_fflush_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	690b      	ldr	r3, [r1, #16]
 80057d0:	4605      	mov	r5, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	b913      	cbnz	r3, 80057dc <_fflush_r+0x10>
 80057d6:	2500      	movs	r5, #0
 80057d8:	4628      	mov	r0, r5
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	b118      	cbz	r0, 80057e6 <_fflush_r+0x1a>
 80057de:	6a03      	ldr	r3, [r0, #32]
 80057e0:	b90b      	cbnz	r3, 80057e6 <_fflush_r+0x1a>
 80057e2:	f7fe fb99 	bl	8003f18 <__sinit>
 80057e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f3      	beq.n	80057d6 <_fflush_r+0xa>
 80057ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057f0:	07d0      	lsls	r0, r2, #31
 80057f2:	d404      	bmi.n	80057fe <_fflush_r+0x32>
 80057f4:	0599      	lsls	r1, r3, #22
 80057f6:	d402      	bmi.n	80057fe <_fflush_r+0x32>
 80057f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057fa:	f7fe fc84 	bl	8004106 <__retarget_lock_acquire_recursive>
 80057fe:	4628      	mov	r0, r5
 8005800:	4621      	mov	r1, r4
 8005802:	f7ff ff5f 	bl	80056c4 <__sflush_r>
 8005806:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005808:	07da      	lsls	r2, r3, #31
 800580a:	4605      	mov	r5, r0
 800580c:	d4e4      	bmi.n	80057d8 <_fflush_r+0xc>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	059b      	lsls	r3, r3, #22
 8005812:	d4e1      	bmi.n	80057d8 <_fflush_r+0xc>
 8005814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005816:	f7fe fc77 	bl	8004108 <__retarget_lock_release_recursive>
 800581a:	e7dd      	b.n	80057d8 <_fflush_r+0xc>

0800581c <_sbrk_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4d06      	ldr	r5, [pc, #24]	@ (8005838 <_sbrk_r+0x1c>)
 8005820:	2300      	movs	r3, #0
 8005822:	4604      	mov	r4, r0
 8005824:	4608      	mov	r0, r1
 8005826:	602b      	str	r3, [r5, #0]
 8005828:	f7fd fe22 	bl	8003470 <_sbrk>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_sbrk_r+0x1a>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_sbrk_r+0x1a>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	20000520 	.word	0x20000520

0800583c <__assert_func>:
 800583c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800583e:	4614      	mov	r4, r2
 8005840:	461a      	mov	r2, r3
 8005842:	4b09      	ldr	r3, [pc, #36]	@ (8005868 <__assert_func+0x2c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4605      	mov	r5, r0
 8005848:	68d8      	ldr	r0, [r3, #12]
 800584a:	b954      	cbnz	r4, 8005862 <__assert_func+0x26>
 800584c:	4b07      	ldr	r3, [pc, #28]	@ (800586c <__assert_func+0x30>)
 800584e:	461c      	mov	r4, r3
 8005850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005854:	9100      	str	r1, [sp, #0]
 8005856:	462b      	mov	r3, r5
 8005858:	4905      	ldr	r1, [pc, #20]	@ (8005870 <__assert_func+0x34>)
 800585a:	f000 f841 	bl	80058e0 <fiprintf>
 800585e:	f000 f851 	bl	8005904 <abort>
 8005862:	4b04      	ldr	r3, [pc, #16]	@ (8005874 <__assert_func+0x38>)
 8005864:	e7f4      	b.n	8005850 <__assert_func+0x14>
 8005866:	bf00      	nop
 8005868:	20000010 	.word	0x20000010
 800586c:	080060c5 	.word	0x080060c5
 8005870:	08006097 	.word	0x08006097
 8005874:	0800608a 	.word	0x0800608a

08005878 <_calloc_r>:
 8005878:	b570      	push	{r4, r5, r6, lr}
 800587a:	fba1 5402 	umull	r5, r4, r1, r2
 800587e:	b93c      	cbnz	r4, 8005890 <_calloc_r+0x18>
 8005880:	4629      	mov	r1, r5
 8005882:	f7ff fb11 	bl	8004ea8 <_malloc_r>
 8005886:	4606      	mov	r6, r0
 8005888:	b928      	cbnz	r0, 8005896 <_calloc_r+0x1e>
 800588a:	2600      	movs	r6, #0
 800588c:	4630      	mov	r0, r6
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	220c      	movs	r2, #12
 8005892:	6002      	str	r2, [r0, #0]
 8005894:	e7f9      	b.n	800588a <_calloc_r+0x12>
 8005896:	462a      	mov	r2, r5
 8005898:	4621      	mov	r1, r4
 800589a:	f7fe fbb6 	bl	800400a <memset>
 800589e:	e7f5      	b.n	800588c <_calloc_r+0x14>

080058a0 <__ascii_mbtowc>:
 80058a0:	b082      	sub	sp, #8
 80058a2:	b901      	cbnz	r1, 80058a6 <__ascii_mbtowc+0x6>
 80058a4:	a901      	add	r1, sp, #4
 80058a6:	b142      	cbz	r2, 80058ba <__ascii_mbtowc+0x1a>
 80058a8:	b14b      	cbz	r3, 80058be <__ascii_mbtowc+0x1e>
 80058aa:	7813      	ldrb	r3, [r2, #0]
 80058ac:	600b      	str	r3, [r1, #0]
 80058ae:	7812      	ldrb	r2, [r2, #0]
 80058b0:	1e10      	subs	r0, r2, #0
 80058b2:	bf18      	it	ne
 80058b4:	2001      	movne	r0, #1
 80058b6:	b002      	add	sp, #8
 80058b8:	4770      	bx	lr
 80058ba:	4610      	mov	r0, r2
 80058bc:	e7fb      	b.n	80058b6 <__ascii_mbtowc+0x16>
 80058be:	f06f 0001 	mvn.w	r0, #1
 80058c2:	e7f8      	b.n	80058b6 <__ascii_mbtowc+0x16>

080058c4 <__ascii_wctomb>:
 80058c4:	4603      	mov	r3, r0
 80058c6:	4608      	mov	r0, r1
 80058c8:	b141      	cbz	r1, 80058dc <__ascii_wctomb+0x18>
 80058ca:	2aff      	cmp	r2, #255	@ 0xff
 80058cc:	d904      	bls.n	80058d8 <__ascii_wctomb+0x14>
 80058ce:	228a      	movs	r2, #138	@ 0x8a
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295
 80058d6:	4770      	bx	lr
 80058d8:	700a      	strb	r2, [r1, #0]
 80058da:	2001      	movs	r0, #1
 80058dc:	4770      	bx	lr
	...

080058e0 <fiprintf>:
 80058e0:	b40e      	push	{r1, r2, r3}
 80058e2:	b503      	push	{r0, r1, lr}
 80058e4:	4601      	mov	r1, r0
 80058e6:	ab03      	add	r3, sp, #12
 80058e8:	4805      	ldr	r0, [pc, #20]	@ (8005900 <fiprintf+0x20>)
 80058ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ee:	6800      	ldr	r0, [r0, #0]
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	f000 f837 	bl	8005964 <_vfiprintf_r>
 80058f6:	b002      	add	sp, #8
 80058f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058fc:	b003      	add	sp, #12
 80058fe:	4770      	bx	lr
 8005900:	20000010 	.word	0x20000010

08005904 <abort>:
 8005904:	b508      	push	{r3, lr}
 8005906:	2006      	movs	r0, #6
 8005908:	f000 fa00 	bl	8005d0c <raise>
 800590c:	2001      	movs	r0, #1
 800590e:	f7fd fd37 	bl	8003380 <_exit>

08005912 <__sfputc_r>:
 8005912:	6893      	ldr	r3, [r2, #8]
 8005914:	3b01      	subs	r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	b410      	push	{r4}
 800591a:	6093      	str	r3, [r2, #8]
 800591c:	da08      	bge.n	8005930 <__sfputc_r+0x1e>
 800591e:	6994      	ldr	r4, [r2, #24]
 8005920:	42a3      	cmp	r3, r4
 8005922:	db01      	blt.n	8005928 <__sfputc_r+0x16>
 8005924:	290a      	cmp	r1, #10
 8005926:	d103      	bne.n	8005930 <__sfputc_r+0x1e>
 8005928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800592c:	f000 b932 	b.w	8005b94 <__swbuf_r>
 8005930:	6813      	ldr	r3, [r2, #0]
 8005932:	1c58      	adds	r0, r3, #1
 8005934:	6010      	str	r0, [r2, #0]
 8005936:	7019      	strb	r1, [r3, #0]
 8005938:	4608      	mov	r0, r1
 800593a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800593e:	4770      	bx	lr

08005940 <__sfputs_r>:
 8005940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005942:	4606      	mov	r6, r0
 8005944:	460f      	mov	r7, r1
 8005946:	4614      	mov	r4, r2
 8005948:	18d5      	adds	r5, r2, r3
 800594a:	42ac      	cmp	r4, r5
 800594c:	d101      	bne.n	8005952 <__sfputs_r+0x12>
 800594e:	2000      	movs	r0, #0
 8005950:	e007      	b.n	8005962 <__sfputs_r+0x22>
 8005952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005956:	463a      	mov	r2, r7
 8005958:	4630      	mov	r0, r6
 800595a:	f7ff ffda 	bl	8005912 <__sfputc_r>
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	d1f3      	bne.n	800594a <__sfputs_r+0xa>
 8005962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005964 <_vfiprintf_r>:
 8005964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005968:	460d      	mov	r5, r1
 800596a:	b09d      	sub	sp, #116	@ 0x74
 800596c:	4614      	mov	r4, r2
 800596e:	4698      	mov	r8, r3
 8005970:	4606      	mov	r6, r0
 8005972:	b118      	cbz	r0, 800597c <_vfiprintf_r+0x18>
 8005974:	6a03      	ldr	r3, [r0, #32]
 8005976:	b90b      	cbnz	r3, 800597c <_vfiprintf_r+0x18>
 8005978:	f7fe face 	bl	8003f18 <__sinit>
 800597c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800597e:	07d9      	lsls	r1, r3, #31
 8005980:	d405      	bmi.n	800598e <_vfiprintf_r+0x2a>
 8005982:	89ab      	ldrh	r3, [r5, #12]
 8005984:	059a      	lsls	r2, r3, #22
 8005986:	d402      	bmi.n	800598e <_vfiprintf_r+0x2a>
 8005988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800598a:	f7fe fbbc 	bl	8004106 <__retarget_lock_acquire_recursive>
 800598e:	89ab      	ldrh	r3, [r5, #12]
 8005990:	071b      	lsls	r3, r3, #28
 8005992:	d501      	bpl.n	8005998 <_vfiprintf_r+0x34>
 8005994:	692b      	ldr	r3, [r5, #16]
 8005996:	b99b      	cbnz	r3, 80059c0 <_vfiprintf_r+0x5c>
 8005998:	4629      	mov	r1, r5
 800599a:	4630      	mov	r0, r6
 800599c:	f000 f938 	bl	8005c10 <__swsetup_r>
 80059a0:	b170      	cbz	r0, 80059c0 <_vfiprintf_r+0x5c>
 80059a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059a4:	07dc      	lsls	r4, r3, #31
 80059a6:	d504      	bpl.n	80059b2 <_vfiprintf_r+0x4e>
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	b01d      	add	sp, #116	@ 0x74
 80059ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b2:	89ab      	ldrh	r3, [r5, #12]
 80059b4:	0598      	lsls	r0, r3, #22
 80059b6:	d4f7      	bmi.n	80059a8 <_vfiprintf_r+0x44>
 80059b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059ba:	f7fe fba5 	bl	8004108 <__retarget_lock_release_recursive>
 80059be:	e7f3      	b.n	80059a8 <_vfiprintf_r+0x44>
 80059c0:	2300      	movs	r3, #0
 80059c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c4:	2320      	movs	r3, #32
 80059c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80059ce:	2330      	movs	r3, #48	@ 0x30
 80059d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b80 <_vfiprintf_r+0x21c>
 80059d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059d8:	f04f 0901 	mov.w	r9, #1
 80059dc:	4623      	mov	r3, r4
 80059de:	469a      	mov	sl, r3
 80059e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e4:	b10a      	cbz	r2, 80059ea <_vfiprintf_r+0x86>
 80059e6:	2a25      	cmp	r2, #37	@ 0x25
 80059e8:	d1f9      	bne.n	80059de <_vfiprintf_r+0x7a>
 80059ea:	ebba 0b04 	subs.w	fp, sl, r4
 80059ee:	d00b      	beq.n	8005a08 <_vfiprintf_r+0xa4>
 80059f0:	465b      	mov	r3, fp
 80059f2:	4622      	mov	r2, r4
 80059f4:	4629      	mov	r1, r5
 80059f6:	4630      	mov	r0, r6
 80059f8:	f7ff ffa2 	bl	8005940 <__sfputs_r>
 80059fc:	3001      	adds	r0, #1
 80059fe:	f000 80a7 	beq.w	8005b50 <_vfiprintf_r+0x1ec>
 8005a02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a04:	445a      	add	r2, fp
 8005a06:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a08:	f89a 3000 	ldrb.w	r3, [sl]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 809f 	beq.w	8005b50 <_vfiprintf_r+0x1ec>
 8005a12:	2300      	movs	r3, #0
 8005a14:	f04f 32ff 	mov.w	r2, #4294967295
 8005a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a1c:	f10a 0a01 	add.w	sl, sl, #1
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	9307      	str	r3, [sp, #28]
 8005a24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a28:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a2a:	4654      	mov	r4, sl
 8005a2c:	2205      	movs	r2, #5
 8005a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a32:	4853      	ldr	r0, [pc, #332]	@ (8005b80 <_vfiprintf_r+0x21c>)
 8005a34:	f7fa fbd4 	bl	80001e0 <memchr>
 8005a38:	9a04      	ldr	r2, [sp, #16]
 8005a3a:	b9d8      	cbnz	r0, 8005a74 <_vfiprintf_r+0x110>
 8005a3c:	06d1      	lsls	r1, r2, #27
 8005a3e:	bf44      	itt	mi
 8005a40:	2320      	movmi	r3, #32
 8005a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a46:	0713      	lsls	r3, r2, #28
 8005a48:	bf44      	itt	mi
 8005a4a:	232b      	movmi	r3, #43	@ 0x2b
 8005a4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a50:	f89a 3000 	ldrb.w	r3, [sl]
 8005a54:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a56:	d015      	beq.n	8005a84 <_vfiprintf_r+0x120>
 8005a58:	9a07      	ldr	r2, [sp, #28]
 8005a5a:	4654      	mov	r4, sl
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	f04f 0c0a 	mov.w	ip, #10
 8005a62:	4621      	mov	r1, r4
 8005a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a68:	3b30      	subs	r3, #48	@ 0x30
 8005a6a:	2b09      	cmp	r3, #9
 8005a6c:	d94b      	bls.n	8005b06 <_vfiprintf_r+0x1a2>
 8005a6e:	b1b0      	cbz	r0, 8005a9e <_vfiprintf_r+0x13a>
 8005a70:	9207      	str	r2, [sp, #28]
 8005a72:	e014      	b.n	8005a9e <_vfiprintf_r+0x13a>
 8005a74:	eba0 0308 	sub.w	r3, r0, r8
 8005a78:	fa09 f303 	lsl.w	r3, r9, r3
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	9304      	str	r3, [sp, #16]
 8005a80:	46a2      	mov	sl, r4
 8005a82:	e7d2      	b.n	8005a2a <_vfiprintf_r+0xc6>
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	1d19      	adds	r1, r3, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	9103      	str	r1, [sp, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bfbb      	ittet	lt
 8005a90:	425b      	neglt	r3, r3
 8005a92:	f042 0202 	orrlt.w	r2, r2, #2
 8005a96:	9307      	strge	r3, [sp, #28]
 8005a98:	9307      	strlt	r3, [sp, #28]
 8005a9a:	bfb8      	it	lt
 8005a9c:	9204      	strlt	r2, [sp, #16]
 8005a9e:	7823      	ldrb	r3, [r4, #0]
 8005aa0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005aa2:	d10a      	bne.n	8005aba <_vfiprintf_r+0x156>
 8005aa4:	7863      	ldrb	r3, [r4, #1]
 8005aa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aa8:	d132      	bne.n	8005b10 <_vfiprintf_r+0x1ac>
 8005aaa:	9b03      	ldr	r3, [sp, #12]
 8005aac:	1d1a      	adds	r2, r3, #4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	9203      	str	r2, [sp, #12]
 8005ab2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ab6:	3402      	adds	r4, #2
 8005ab8:	9305      	str	r3, [sp, #20]
 8005aba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b90 <_vfiprintf_r+0x22c>
 8005abe:	7821      	ldrb	r1, [r4, #0]
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	4650      	mov	r0, sl
 8005ac4:	f7fa fb8c 	bl	80001e0 <memchr>
 8005ac8:	b138      	cbz	r0, 8005ada <_vfiprintf_r+0x176>
 8005aca:	9b04      	ldr	r3, [sp, #16]
 8005acc:	eba0 000a 	sub.w	r0, r0, sl
 8005ad0:	2240      	movs	r2, #64	@ 0x40
 8005ad2:	4082      	lsls	r2, r0
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	3401      	adds	r4, #1
 8005ad8:	9304      	str	r3, [sp, #16]
 8005ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ade:	4829      	ldr	r0, [pc, #164]	@ (8005b84 <_vfiprintf_r+0x220>)
 8005ae0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ae4:	2206      	movs	r2, #6
 8005ae6:	f7fa fb7b 	bl	80001e0 <memchr>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d03f      	beq.n	8005b6e <_vfiprintf_r+0x20a>
 8005aee:	4b26      	ldr	r3, [pc, #152]	@ (8005b88 <_vfiprintf_r+0x224>)
 8005af0:	bb1b      	cbnz	r3, 8005b3a <_vfiprintf_r+0x1d6>
 8005af2:	9b03      	ldr	r3, [sp, #12]
 8005af4:	3307      	adds	r3, #7
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	3308      	adds	r3, #8
 8005afc:	9303      	str	r3, [sp, #12]
 8005afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b00:	443b      	add	r3, r7
 8005b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b04:	e76a      	b.n	80059dc <_vfiprintf_r+0x78>
 8005b06:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	e7a8      	b.n	8005a62 <_vfiprintf_r+0xfe>
 8005b10:	2300      	movs	r3, #0
 8005b12:	3401      	adds	r4, #1
 8005b14:	9305      	str	r3, [sp, #20]
 8005b16:	4619      	mov	r1, r3
 8005b18:	f04f 0c0a 	mov.w	ip, #10
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b22:	3a30      	subs	r2, #48	@ 0x30
 8005b24:	2a09      	cmp	r2, #9
 8005b26:	d903      	bls.n	8005b30 <_vfiprintf_r+0x1cc>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0c6      	beq.n	8005aba <_vfiprintf_r+0x156>
 8005b2c:	9105      	str	r1, [sp, #20]
 8005b2e:	e7c4      	b.n	8005aba <_vfiprintf_r+0x156>
 8005b30:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b34:	4604      	mov	r4, r0
 8005b36:	2301      	movs	r3, #1
 8005b38:	e7f0      	b.n	8005b1c <_vfiprintf_r+0x1b8>
 8005b3a:	ab03      	add	r3, sp, #12
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	462a      	mov	r2, r5
 8005b40:	4b12      	ldr	r3, [pc, #72]	@ (8005b8c <_vfiprintf_r+0x228>)
 8005b42:	a904      	add	r1, sp, #16
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7fd fda3 	bl	8003690 <_printf_float>
 8005b4a:	4607      	mov	r7, r0
 8005b4c:	1c78      	adds	r0, r7, #1
 8005b4e:	d1d6      	bne.n	8005afe <_vfiprintf_r+0x19a>
 8005b50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b52:	07d9      	lsls	r1, r3, #31
 8005b54:	d405      	bmi.n	8005b62 <_vfiprintf_r+0x1fe>
 8005b56:	89ab      	ldrh	r3, [r5, #12]
 8005b58:	059a      	lsls	r2, r3, #22
 8005b5a:	d402      	bmi.n	8005b62 <_vfiprintf_r+0x1fe>
 8005b5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b5e:	f7fe fad3 	bl	8004108 <__retarget_lock_release_recursive>
 8005b62:	89ab      	ldrh	r3, [r5, #12]
 8005b64:	065b      	lsls	r3, r3, #25
 8005b66:	f53f af1f 	bmi.w	80059a8 <_vfiprintf_r+0x44>
 8005b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b6c:	e71e      	b.n	80059ac <_vfiprintf_r+0x48>
 8005b6e:	ab03      	add	r3, sp, #12
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	462a      	mov	r2, r5
 8005b74:	4b05      	ldr	r3, [pc, #20]	@ (8005b8c <_vfiprintf_r+0x228>)
 8005b76:	a904      	add	r1, sp, #16
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f7fe f821 	bl	8003bc0 <_printf_i>
 8005b7e:	e7e4      	b.n	8005b4a <_vfiprintf_r+0x1e6>
 8005b80:	080061c7 	.word	0x080061c7
 8005b84:	080061d1 	.word	0x080061d1
 8005b88:	08003691 	.word	0x08003691
 8005b8c:	08005941 	.word	0x08005941
 8005b90:	080061cd 	.word	0x080061cd

08005b94 <__swbuf_r>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	460e      	mov	r6, r1
 8005b98:	4614      	mov	r4, r2
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	b118      	cbz	r0, 8005ba6 <__swbuf_r+0x12>
 8005b9e:	6a03      	ldr	r3, [r0, #32]
 8005ba0:	b90b      	cbnz	r3, 8005ba6 <__swbuf_r+0x12>
 8005ba2:	f7fe f9b9 	bl	8003f18 <__sinit>
 8005ba6:	69a3      	ldr	r3, [r4, #24]
 8005ba8:	60a3      	str	r3, [r4, #8]
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	071a      	lsls	r2, r3, #28
 8005bae:	d501      	bpl.n	8005bb4 <__swbuf_r+0x20>
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	b943      	cbnz	r3, 8005bc6 <__swbuf_r+0x32>
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	f000 f82a 	bl	8005c10 <__swsetup_r>
 8005bbc:	b118      	cbz	r0, 8005bc6 <__swbuf_r+0x32>
 8005bbe:	f04f 37ff 	mov.w	r7, #4294967295
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	6922      	ldr	r2, [r4, #16]
 8005bca:	1a98      	subs	r0, r3, r2
 8005bcc:	6963      	ldr	r3, [r4, #20]
 8005bce:	b2f6      	uxtb	r6, r6
 8005bd0:	4283      	cmp	r3, r0
 8005bd2:	4637      	mov	r7, r6
 8005bd4:	dc05      	bgt.n	8005be2 <__swbuf_r+0x4e>
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f7ff fdf7 	bl	80057cc <_fflush_r>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d1ed      	bne.n	8005bbe <__swbuf_r+0x2a>
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	60a3      	str	r3, [r4, #8]
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	6022      	str	r2, [r4, #0]
 8005bee:	701e      	strb	r6, [r3, #0]
 8005bf0:	6962      	ldr	r2, [r4, #20]
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d004      	beq.n	8005c02 <__swbuf_r+0x6e>
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	07db      	lsls	r3, r3, #31
 8005bfc:	d5e1      	bpl.n	8005bc2 <__swbuf_r+0x2e>
 8005bfe:	2e0a      	cmp	r6, #10
 8005c00:	d1df      	bne.n	8005bc2 <__swbuf_r+0x2e>
 8005c02:	4621      	mov	r1, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f7ff fde1 	bl	80057cc <_fflush_r>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d0d9      	beq.n	8005bc2 <__swbuf_r+0x2e>
 8005c0e:	e7d6      	b.n	8005bbe <__swbuf_r+0x2a>

08005c10 <__swsetup_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4b29      	ldr	r3, [pc, #164]	@ (8005cb8 <__swsetup_r+0xa8>)
 8005c14:	4605      	mov	r5, r0
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	460c      	mov	r4, r1
 8005c1a:	b118      	cbz	r0, 8005c24 <__swsetup_r+0x14>
 8005c1c:	6a03      	ldr	r3, [r0, #32]
 8005c1e:	b90b      	cbnz	r3, 8005c24 <__swsetup_r+0x14>
 8005c20:	f7fe f97a 	bl	8003f18 <__sinit>
 8005c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c28:	0719      	lsls	r1, r3, #28
 8005c2a:	d422      	bmi.n	8005c72 <__swsetup_r+0x62>
 8005c2c:	06da      	lsls	r2, r3, #27
 8005c2e:	d407      	bmi.n	8005c40 <__swsetup_r+0x30>
 8005c30:	2209      	movs	r2, #9
 8005c32:	602a      	str	r2, [r5, #0]
 8005c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c38:	81a3      	strh	r3, [r4, #12]
 8005c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3e:	e033      	b.n	8005ca8 <__swsetup_r+0x98>
 8005c40:	0758      	lsls	r0, r3, #29
 8005c42:	d512      	bpl.n	8005c6a <__swsetup_r+0x5a>
 8005c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c46:	b141      	cbz	r1, 8005c5a <__swsetup_r+0x4a>
 8005c48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c4c:	4299      	cmp	r1, r3
 8005c4e:	d002      	beq.n	8005c56 <__swsetup_r+0x46>
 8005c50:	4628      	mov	r0, r5
 8005c52:	f7ff f8b5 	bl	8004dc0 <_free_r>
 8005c56:	2300      	movs	r3, #0
 8005c58:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	2300      	movs	r3, #0
 8005c64:	6063      	str	r3, [r4, #4]
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f043 0308 	orr.w	r3, r3, #8
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	6923      	ldr	r3, [r4, #16]
 8005c74:	b94b      	cbnz	r3, 8005c8a <__swsetup_r+0x7a>
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c80:	d003      	beq.n	8005c8a <__swsetup_r+0x7a>
 8005c82:	4621      	mov	r1, r4
 8005c84:	4628      	mov	r0, r5
 8005c86:	f000 f883 	bl	8005d90 <__smakebuf_r>
 8005c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c8e:	f013 0201 	ands.w	r2, r3, #1
 8005c92:	d00a      	beq.n	8005caa <__swsetup_r+0x9a>
 8005c94:	2200      	movs	r2, #0
 8005c96:	60a2      	str	r2, [r4, #8]
 8005c98:	6962      	ldr	r2, [r4, #20]
 8005c9a:	4252      	negs	r2, r2
 8005c9c:	61a2      	str	r2, [r4, #24]
 8005c9e:	6922      	ldr	r2, [r4, #16]
 8005ca0:	b942      	cbnz	r2, 8005cb4 <__swsetup_r+0xa4>
 8005ca2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ca6:	d1c5      	bne.n	8005c34 <__swsetup_r+0x24>
 8005ca8:	bd38      	pop	{r3, r4, r5, pc}
 8005caa:	0799      	lsls	r1, r3, #30
 8005cac:	bf58      	it	pl
 8005cae:	6962      	ldrpl	r2, [r4, #20]
 8005cb0:	60a2      	str	r2, [r4, #8]
 8005cb2:	e7f4      	b.n	8005c9e <__swsetup_r+0x8e>
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	e7f7      	b.n	8005ca8 <__swsetup_r+0x98>
 8005cb8:	20000010 	.word	0x20000010

08005cbc <_raise_r>:
 8005cbc:	291f      	cmp	r1, #31
 8005cbe:	b538      	push	{r3, r4, r5, lr}
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	d904      	bls.n	8005cd0 <_raise_r+0x14>
 8005cc6:	2316      	movs	r3, #22
 8005cc8:	6003      	str	r3, [r0, #0]
 8005cca:	f04f 30ff 	mov.w	r0, #4294967295
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005cd2:	b112      	cbz	r2, 8005cda <_raise_r+0x1e>
 8005cd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cd8:	b94b      	cbnz	r3, 8005cee <_raise_r+0x32>
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f000 f830 	bl	8005d40 <_getpid_r>
 8005ce0:	4622      	mov	r2, r4
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cea:	f000 b817 	b.w	8005d1c <_kill_r>
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d00a      	beq.n	8005d08 <_raise_r+0x4c>
 8005cf2:	1c59      	adds	r1, r3, #1
 8005cf4:	d103      	bne.n	8005cfe <_raise_r+0x42>
 8005cf6:	2316      	movs	r3, #22
 8005cf8:	6003      	str	r3, [r0, #0]
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	e7e7      	b.n	8005cce <_raise_r+0x12>
 8005cfe:	2100      	movs	r1, #0
 8005d00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005d04:	4620      	mov	r0, r4
 8005d06:	4798      	blx	r3
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e7e0      	b.n	8005cce <_raise_r+0x12>

08005d0c <raise>:
 8005d0c:	4b02      	ldr	r3, [pc, #8]	@ (8005d18 <raise+0xc>)
 8005d0e:	4601      	mov	r1, r0
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	f7ff bfd3 	b.w	8005cbc <_raise_r>
 8005d16:	bf00      	nop
 8005d18:	20000010 	.word	0x20000010

08005d1c <_kill_r>:
 8005d1c:	b538      	push	{r3, r4, r5, lr}
 8005d1e:	4d07      	ldr	r5, [pc, #28]	@ (8005d3c <_kill_r+0x20>)
 8005d20:	2300      	movs	r3, #0
 8005d22:	4604      	mov	r4, r0
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	602b      	str	r3, [r5, #0]
 8005d2a:	f7fd fb19 	bl	8003360 <_kill>
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	d102      	bne.n	8005d38 <_kill_r+0x1c>
 8005d32:	682b      	ldr	r3, [r5, #0]
 8005d34:	b103      	cbz	r3, 8005d38 <_kill_r+0x1c>
 8005d36:	6023      	str	r3, [r4, #0]
 8005d38:	bd38      	pop	{r3, r4, r5, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000520 	.word	0x20000520

08005d40 <_getpid_r>:
 8005d40:	f7fd bb06 	b.w	8003350 <_getpid>

08005d44 <__swhatbuf_r>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	460c      	mov	r4, r1
 8005d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	b096      	sub	sp, #88	@ 0x58
 8005d50:	4615      	mov	r5, r2
 8005d52:	461e      	mov	r6, r3
 8005d54:	da0d      	bge.n	8005d72 <__swhatbuf_r+0x2e>
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d5c:	f04f 0100 	mov.w	r1, #0
 8005d60:	bf14      	ite	ne
 8005d62:	2340      	movne	r3, #64	@ 0x40
 8005d64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d68:	2000      	movs	r0, #0
 8005d6a:	6031      	str	r1, [r6, #0]
 8005d6c:	602b      	str	r3, [r5, #0]
 8005d6e:	b016      	add	sp, #88	@ 0x58
 8005d70:	bd70      	pop	{r4, r5, r6, pc}
 8005d72:	466a      	mov	r2, sp
 8005d74:	f000 f848 	bl	8005e08 <_fstat_r>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	dbec      	blt.n	8005d56 <__swhatbuf_r+0x12>
 8005d7c:	9901      	ldr	r1, [sp, #4]
 8005d7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d86:	4259      	negs	r1, r3
 8005d88:	4159      	adcs	r1, r3
 8005d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d8e:	e7eb      	b.n	8005d68 <__swhatbuf_r+0x24>

08005d90 <__smakebuf_r>:
 8005d90:	898b      	ldrh	r3, [r1, #12]
 8005d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d94:	079d      	lsls	r5, r3, #30
 8005d96:	4606      	mov	r6, r0
 8005d98:	460c      	mov	r4, r1
 8005d9a:	d507      	bpl.n	8005dac <__smakebuf_r+0x1c>
 8005d9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	6123      	str	r3, [r4, #16]
 8005da4:	2301      	movs	r3, #1
 8005da6:	6163      	str	r3, [r4, #20]
 8005da8:	b003      	add	sp, #12
 8005daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dac:	ab01      	add	r3, sp, #4
 8005dae:	466a      	mov	r2, sp
 8005db0:	f7ff ffc8 	bl	8005d44 <__swhatbuf_r>
 8005db4:	9f00      	ldr	r7, [sp, #0]
 8005db6:	4605      	mov	r5, r0
 8005db8:	4639      	mov	r1, r7
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f7ff f874 	bl	8004ea8 <_malloc_r>
 8005dc0:	b948      	cbnz	r0, 8005dd6 <__smakebuf_r+0x46>
 8005dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dc6:	059a      	lsls	r2, r3, #22
 8005dc8:	d4ee      	bmi.n	8005da8 <__smakebuf_r+0x18>
 8005dca:	f023 0303 	bic.w	r3, r3, #3
 8005dce:	f043 0302 	orr.w	r3, r3, #2
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	e7e2      	b.n	8005d9c <__smakebuf_r+0xc>
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	6020      	str	r0, [r4, #0]
 8005dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dde:	81a3      	strh	r3, [r4, #12]
 8005de0:	9b01      	ldr	r3, [sp, #4]
 8005de2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005de6:	b15b      	cbz	r3, 8005e00 <__smakebuf_r+0x70>
 8005de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dec:	4630      	mov	r0, r6
 8005dee:	f000 f81d 	bl	8005e2c <_isatty_r>
 8005df2:	b128      	cbz	r0, 8005e00 <__smakebuf_r+0x70>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	f043 0301 	orr.w	r3, r3, #1
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	431d      	orrs	r5, r3
 8005e04:	81a5      	strh	r5, [r4, #12]
 8005e06:	e7cf      	b.n	8005da8 <__smakebuf_r+0x18>

08005e08 <_fstat_r>:
 8005e08:	b538      	push	{r3, r4, r5, lr}
 8005e0a:	4d07      	ldr	r5, [pc, #28]	@ (8005e28 <_fstat_r+0x20>)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	4604      	mov	r4, r0
 8005e10:	4608      	mov	r0, r1
 8005e12:	4611      	mov	r1, r2
 8005e14:	602b      	str	r3, [r5, #0]
 8005e16:	f7fd fb03 	bl	8003420 <_fstat>
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	d102      	bne.n	8005e24 <_fstat_r+0x1c>
 8005e1e:	682b      	ldr	r3, [r5, #0]
 8005e20:	b103      	cbz	r3, 8005e24 <_fstat_r+0x1c>
 8005e22:	6023      	str	r3, [r4, #0]
 8005e24:	bd38      	pop	{r3, r4, r5, pc}
 8005e26:	bf00      	nop
 8005e28:	20000520 	.word	0x20000520

08005e2c <_isatty_r>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	4d06      	ldr	r5, [pc, #24]	@ (8005e48 <_isatty_r+0x1c>)
 8005e30:	2300      	movs	r3, #0
 8005e32:	4604      	mov	r4, r0
 8005e34:	4608      	mov	r0, r1
 8005e36:	602b      	str	r3, [r5, #0]
 8005e38:	f7fd fb02 	bl	8003440 <_isatty>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_isatty_r+0x1a>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_isatty_r+0x1a>
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	20000520 	.word	0x20000520

08005e4c <_init>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	bf00      	nop
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr

08005e58 <_fini>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	bf00      	nop
 8005e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5e:	bc08      	pop	{r3}
 8005e60:	469e      	mov	lr, r3
 8005e62:	4770      	bx	lr
