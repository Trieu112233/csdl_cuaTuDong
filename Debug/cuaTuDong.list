
cuaTuDong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08005bb0  08005bb0  00006bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f20  08005f20  000071c8  2**0
                  CONTENTS
  4 .ARM          00000008  08005f20  08005f20  00006f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f28  08005f28  000071c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f28  08005f28  00006f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f2c  08005f2c  00006f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c8  20000000  08005f30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001c8  080060f8  000071c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  080060f8  0000752c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b61  00000000  00000000  000071f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cbd  00000000  00000000  0000cd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d0  00000000  00000000  0000ea18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000422  00000000  00000000  0000efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011815  00000000  00000000  0000f40a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b33e  00000000  00000000  00020c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087299  00000000  00000000  0002bf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b31f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021f8  00000000  00000000  000b323c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b5434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b94 	.word	0x08005b94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	08005b94 	.word	0x08005b94

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <change_door_state>:
static void process_state_opening(bool just_enter_state);
static void process_state_open(bool just_enter_state);
static void process_state_closing(bool just_enter_state);
static void process_state_error(bool just_enter_state);

static void change_door_state(DoorState_t new_state) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
    if(g_current_door_state != new_state) {
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <change_door_state+0x34>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d00b      	beq.n	8000be4 <change_door_state+0x2c>
        g_previous_door_state = g_current_door_state; // Lưu trạng thái cũ
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <change_door_state+0x34>)
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <change_door_state+0x38>)
 8000bd2:	701a      	strb	r2, [r3, #0]
        g_current_door_state = new_state; // Cập nhật trạng thái mới
 8000bd4:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <change_door_state+0x34>)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	7013      	strb	r3, [r2, #0]
        g_state_timer_start_tick = GetTick(); // Reset timer khi chuyển trạng thái
 8000bda:	f001 fb4f 	bl	800227c <GetTick>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <change_door_state+0x3c>)
 8000be2:	6013      	str	r3, [r2, #0]
    }

}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200001e4 	.word	0x200001e4
 8000bf0:	200001e5 	.word	0x200001e5
 8000bf4:	200001e8 	.word	0x200001e8

08000bf8 <DoorFSM_Init>:

void DoorFSM_Init(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    if (LimitSwitchService_IsDoorFullyClosed()) {
 8000bfc:	f001 fee2 	bl	80029c4 <LimitSwitchService_IsDoorFullyClosed>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <DoorFSM_Init+0x16>
        g_current_door_state = DOOR_STATE_CLOSED;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <DoorFSM_Init+0x50>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	e00b      	b.n	8000c26 <DoorFSM_Init+0x2e>
    } else if (LimitSwitchService_IsDoorFullyOpen()) {
 8000c0e:	f001 fec5 	bl	800299c <LimitSwitchService_IsDoorFullyOpen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <DoorFSM_Init+0x28>
        g_current_door_state = DOOR_STATE_OPEN;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <DoorFSM_Init+0x50>)
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e002      	b.n	8000c26 <DoorFSM_Init+0x2e>
    } else {
        g_current_door_state = DOOR_STATE_ERROR; // Nếu không rõ trạng thái, chuyển sang ERROR
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <DoorFSM_Init+0x50>)
 8000c22:	2205      	movs	r2, #5
 8000c24:	701a      	strb	r2, [r3, #0]
    }
    UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_DOOR_STATE, (uint8_t*)&g_current_door_state, 1);
 8000c26:	2301      	movs	r3, #1
 8000c28:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <DoorFSM_Init+0x50>)
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f002 f8c7 	bl	8002dc0 <UARTProto_SendFrame>
    g_previous_door_state = DOOR_STATE_INIT; // Khởi tạo trạng thái trước 
 8000c32:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <DoorFSM_Init+0x54>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
    g_state_timer_start_tick = GetTick(); // Bắt đầu timer
 8000c38:	f001 fb20 	bl	800227c <GetTick>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <DoorFSM_Init+0x58>)
 8000c40:	6013      	str	r3, [r2, #0]
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001e4 	.word	0x200001e4
 8000c4c:	200001e5 	.word	0x200001e5
 8000c50:	200001e8 	.word	0x200001e8

08000c54 <DoorFSM_Process>:

void DoorFSM_Process(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
    bool just_enter_state = (g_current_door_state != g_previous_door_state);
 8000c5a:	4b45      	ldr	r3, [pc, #276]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	4b45      	ldr	r3, [pc, #276]	@ (8000d74 <DoorFSM_Process+0x120>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	71fb      	strb	r3, [r7, #7]
    if(just_enter_state){
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <DoorFSM_Process+0x26>
        g_previous_door_state = g_current_door_state; 
 8000c72:	4b3f      	ldr	r3, [pc, #252]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	4b3f      	ldr	r3, [pc, #252]	@ (8000d74 <DoorFSM_Process+0x120>)
 8000c78:	701a      	strb	r2, [r3, #0]
    }

    // Xử lý ưu tiên: nếu đang ở chế độ FORCE_OPEN hoặc FORCE_CLOSE, cần xử lý trước
    if (g_current_system_mode == SYSTEM_MODE_FORCE_OPEN) {
 8000c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d78 <DoorFSM_Process+0x124>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d10f      	bne.n	8000ca2 <DoorFSM_Process+0x4e>
        if (g_current_door_state != DOOR_STATE_OPEN && g_current_door_state != DOOR_STATE_OPENING) {
 8000c82:	4b3b      	ldr	r3, [pc, #236]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d01e      	beq.n	8000cc8 <DoorFSM_Process+0x74>
 8000c8a:	4b39      	ldr	r3, [pc, #228]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d01a      	beq.n	8000cc8 <DoorFSM_Process+0x74>
            if (g_current_door_state != DOOR_STATE_ERROR) { 
 8000c92:	4b37      	ldr	r3, [pc, #220]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d016      	beq.n	8000cc8 <DoorFSM_Process+0x74>
                 change_door_state(DOOR_STATE_OPENING);
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f7ff ff8c 	bl	8000bb8 <change_door_state>
 8000ca0:	e012      	b.n	8000cc8 <DoorFSM_Process+0x74>
            }
        }
    } else if (g_current_system_mode == SYSTEM_MODE_FORCE_CLOSE) {
 8000ca2:	4b35      	ldr	r3, [pc, #212]	@ (8000d78 <DoorFSM_Process+0x124>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d10e      	bne.n	8000cc8 <DoorFSM_Process+0x74>
        if (g_current_door_state != DOOR_STATE_CLOSED && g_current_door_state != DOOR_STATE_CLOSING) {
 8000caa:	4b31      	ldr	r3, [pc, #196]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d00a      	beq.n	8000cc8 <DoorFSM_Process+0x74>
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d006      	beq.n	8000cc8 <DoorFSM_Process+0x74>
             if (g_current_door_state != DOOR_STATE_ERROR) {
 8000cba:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b05      	cmp	r3, #5
 8000cc0:	d002      	beq.n	8000cc8 <DoorFSM_Process+0x74>
                change_door_state(DOOR_STATE_CLOSING);
 8000cc2:	2004      	movs	r0, #4
 8000cc4:	f7ff ff78 	bl	8000bb8 <change_door_state>
             }
        }
    }

    // Logic xử lý trạng thái hiện tại
    switch (g_current_door_state) {
 8000cc8:	4b29      	ldr	r3, [pc, #164]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b05      	cmp	r3, #5
 8000cce:	d849      	bhi.n	8000d64 <DoorFSM_Process+0x110>
 8000cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd8 <DoorFSM_Process+0x84>)
 8000cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd6:	bf00      	nop
 8000cd8:	08000cf1 	.word	0x08000cf1
 8000cdc:	08000cf7 	.word	0x08000cf7
 8000ce0:	08000d0d 	.word	0x08000d0d
 8000ce4:	08000d23 	.word	0x08000d23
 8000ce8:	08000d39 	.word	0x08000d39
 8000cec:	08000d4f 	.word	0x08000d4f
        case DOOR_STATE_INIT:
            DoorFSM_Init();
 8000cf0:	f7ff ff82 	bl	8000bf8 <DoorFSM_Init>
            break;
 8000cf4:	e037      	b.n	8000d66 <DoorFSM_Process+0x112>

        case DOOR_STATE_CLOSED:
            process_state_closed(just_enter_state);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f8a1 	bl	8000e40 <process_state_closed>
            UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_DOOR_STATE, (uint8_t*)&g_current_door_state, 1);
 8000cfe:	2301      	movs	r3, #1
 8000d00:	4a1b      	ldr	r2, [pc, #108]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000d02:	2101      	movs	r1, #1
 8000d04:	2001      	movs	r0, #1
 8000d06:	f002 f85b 	bl	8002dc0 <UARTProto_SendFrame>
            break;
 8000d0a:	e02c      	b.n	8000d66 <DoorFSM_Process+0x112>

        case DOOR_STATE_OPENING:
            process_state_opening(just_enter_state);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f8ae 	bl	8000e70 <process_state_opening>
            UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_DOOR_STATE, (uint8_t*)&g_current_door_state, 1);
 8000d14:	2301      	movs	r3, #1
 8000d16:	4a16      	ldr	r2, [pc, #88]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000d18:	2101      	movs	r1, #1
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f002 f850 	bl	8002dc0 <UARTProto_SendFrame>
            break;
 8000d20:	e021      	b.n	8000d66 <DoorFSM_Process+0x112>

        case DOOR_STATE_OPEN:           
            process_state_open(just_enter_state);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f8d1 	bl	8000ecc <process_state_open>
            UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_DOOR_STATE, (uint8_t*)&g_current_door_state, 1);
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	4a10      	ldr	r2, [pc, #64]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000d2e:	2101      	movs	r1, #1
 8000d30:	2001      	movs	r0, #1
 8000d32:	f002 f845 	bl	8002dc0 <UARTProto_SendFrame>
            break;
 8000d36:	e016      	b.n	8000d66 <DoorFSM_Process+0x112>

        case DOOR_STATE_CLOSING:
            process_state_closing(just_enter_state);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f914 	bl	8000f68 <process_state_closing>
            UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_DOOR_STATE, (uint8_t*)&g_current_door_state, 1);    
 8000d40:	2301      	movs	r3, #1
 8000d42:	4a0b      	ldr	r2, [pc, #44]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	2001      	movs	r0, #1
 8000d48:	f002 f83a 	bl	8002dc0 <UARTProto_SendFrame>
            break;
 8000d4c:	e00b      	b.n	8000d66 <DoorFSM_Process+0x112>

        case DOOR_STATE_ERROR:
            process_state_error(just_enter_state);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f957 	bl	8001004 <process_state_error>
            UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_DOOR_STATE, (uint8_t*)&g_current_door_state, 1);
 8000d56:	2301      	movs	r3, #1
 8000d58:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <DoorFSM_Process+0x11c>)
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f002 f82f 	bl	8002dc0 <UARTProto_SendFrame>
            break;
 8000d62:	e000      	b.n	8000d66 <DoorFSM_Process+0x112>

        default:
            break;
 8000d64:	bf00      	nop
    }
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200001e4 	.word	0x200001e4
 8000d74:	200001e5 	.word	0x200001e5
 8000d78:	200001e6 	.word	0x200001e6

08000d7c <DoorFSM_GetState>:

DoorState_t DoorFSM_GetState(void) { 
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
    return g_current_door_state; 
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <DoorFSM_GetState+0x14>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200001e4 	.word	0x200001e4

08000d94 <DoorFSM_NotifySystemModeChange>:

void DoorFSM_NotifySystemModeChange(SystemOpMode_t new_mode) { 
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
    SystemOpMode_t old_mode = g_current_system_mode;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <DoorFSM_NotifySystemModeChange+0x50>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	73fb      	strb	r3, [r7, #15]
    g_current_system_mode = new_mode;
 8000da4:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <DoorFSM_NotifySystemModeChange+0x50>)
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	7013      	strb	r3, [r2, #0]

    if ((old_mode == SYSTEM_MODE_FORCE_OPEN || old_mode == SYSTEM_MODE_FORCE_CLOSE) && new_mode == SYSTEM_MODE_NORMAL) {
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d002      	beq.n	8000db6 <DoorFSM_NotifySystemModeChange+0x22>
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d10b      	bne.n	8000dce <DoorFSM_NotifySystemModeChange+0x3a>
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d108      	bne.n	8000dce <DoorFSM_NotifySystemModeChange+0x3a>
        if (g_current_door_state == DOOR_STATE_OPEN) {
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <DoorFSM_NotifySystemModeChange+0x54>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d104      	bne.n	8000dce <DoorFSM_NotifySystemModeChange+0x3a>
            g_state_timer_start_tick = GetTick(); // Reset auto-close timer
 8000dc4:	f001 fa5a 	bl	800227c <GetTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a08      	ldr	r2, [pc, #32]	@ (8000dec <DoorFSM_NotifySystemModeChange+0x58>)
 8000dcc:	6013      	str	r3, [r2, #0]
        }
    }

    UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_SYSTEM_MODE, (uint8_t*)&g_current_system_mode, 1);
 8000dce:	2301      	movs	r3, #1
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <DoorFSM_NotifySystemModeChange+0x50>)
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f001 fff3 	bl	8002dc0 <UARTProto_SendFrame>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200001e6 	.word	0x200001e6
 8000de8:	200001e4 	.word	0x200001e4
 8000dec:	200001e8 	.word	0x200001e8

08000df0 <DoorFSM_NotifyPersonDetectedPassing>:

void DoorFSM_NotifyPersonDetectedPassing(void) { 
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
    if (g_current_system_mode == SYSTEM_MODE_NORMAL) {
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <DoorFSM_NotifyPersonDetectedPassing+0x44>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d118      	bne.n	8000e2e <DoorFSM_NotifyPersonDetectedPassing+0x3e>
        if (g_current_door_state == DOOR_STATE_CLOSED) {
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <DoorFSM_NotifyPersonDetectedPassing+0x48>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d103      	bne.n	8000e0c <DoorFSM_NotifyPersonDetectedPassing+0x1c>
            change_door_state(DOOR_STATE_OPENING);
 8000e04:	2002      	movs	r0, #2
 8000e06:	f7ff fed7 	bl	8000bb8 <change_door_state>
            change_door_state(DOOR_STATE_OPENING); // Mở lại ngay nếu đang đóng mà có người đi qua
        } else if (g_current_door_state == DOOR_STATE_OPEN) {
            g_state_timer_start_tick = GetTick(); // Reset auto-close timer
        }
    }
}
 8000e0a:	e010      	b.n	8000e2e <DoorFSM_NotifyPersonDetectedPassing+0x3e>
        } else if (g_current_door_state == DOOR_STATE_CLOSING) {
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <DoorFSM_NotifyPersonDetectedPassing+0x48>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d103      	bne.n	8000e1c <DoorFSM_NotifyPersonDetectedPassing+0x2c>
            change_door_state(DOOR_STATE_OPENING); // Mở lại ngay nếu đang đóng mà có người đi qua
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff fecf 	bl	8000bb8 <change_door_state>
}
 8000e1a:	e008      	b.n	8000e2e <DoorFSM_NotifyPersonDetectedPassing+0x3e>
        } else if (g_current_door_state == DOOR_STATE_OPEN) {
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <DoorFSM_NotifyPersonDetectedPassing+0x48>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d104      	bne.n	8000e2e <DoorFSM_NotifyPersonDetectedPassing+0x3e>
            g_state_timer_start_tick = GetTick(); // Reset auto-close timer
 8000e24:	f001 fa2a 	bl	800227c <GetTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <DoorFSM_NotifyPersonDetectedPassing+0x4c>)
 8000e2c:	6013      	str	r3, [r2, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200001e6 	.word	0x200001e6
 8000e38:	200001e4 	.word	0x200001e4
 8000e3c:	200001e8 	.word	0x200001e8

08000e40 <process_state_closed>:

static void process_state_closed(bool just_enter_state) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
    if (just_enter_state) {
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <process_state_closed+0x14>
        Motor_Stop();
 8000e50:	f001 fe9e 	bl	8002b90 <Motor_Stop>
    }

    if (g_current_system_mode == SYSTEM_MODE_FORCE_OPEN) {
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <process_state_closed+0x2c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d102      	bne.n	8000e62 <process_state_closed+0x22>
        change_door_state(DOOR_STATE_OPENING);
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f7ff feab 	bl	8000bb8 <change_door_state>
    } 
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001e6 	.word	0x200001e6

08000e70 <process_state_opening>:

static void process_state_opening(bool just_enter_state) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
    if (just_enter_state) {
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <process_state_opening+0x1e>
        Motor_SetDirection(MOTOR_FORWARD); // Đặt hướng mở cửa
 8000e80:	2000      	movs	r0, #0
 8000e82:	f001 fe33 	bl	8002aec <Motor_SetDirection>
        Motor_SetSpeed(100.0f); // Bắt đầu mở cửa
 8000e86:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000ec4 <process_state_opening+0x54>
 8000e8a:	f001 fe07 	bl	8002a9c <Motor_SetSpeed>
    }

    if (LimitSwitchService_IsDoorFullyOpen()) {
 8000e8e:	f001 fd85 	bl	800299c <LimitSwitchService_IsDoorFullyOpen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <process_state_opening+0x30>
        change_door_state(DOOR_STATE_OPEN);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f7ff fe8d 	bl	8000bb8 <change_door_state>
    } else if (GetTick() - g_state_timer_start_tick > DOOR_MAX_TRAVEL_TIME_MS) {
        change_door_state(DOOR_STATE_ERROR); // Quá thời gian mở cửa
    }
}
 8000e9e:	e00c      	b.n	8000eba <process_state_opening+0x4a>
    } else if (GetTick() - g_state_timer_start_tick > DOOR_MAX_TRAVEL_TIME_MS) {
 8000ea0:	f001 f9ec 	bl	800227c <GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <process_state_opening+0x58>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d902      	bls.n	8000eba <process_state_opening+0x4a>
        change_door_state(DOOR_STATE_ERROR); // Quá thời gian mở cửa
 8000eb4:	2005      	movs	r0, #5
 8000eb6:	f7ff fe7f 	bl	8000bb8 <change_door_state>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	42c80000 	.word	0x42c80000
 8000ec8:	200001e8 	.word	0x200001e8

08000ecc <process_state_open>:

static void process_state_open(bool just_enter_state) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
    if (just_enter_state) {
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <process_state_open+0x1e>
        Motor_Stop(); // Dừng động cơ khi đã mở
 8000edc:	f001 fe58 	bl	8002b90 <Motor_Stop>
        g_state_timer_start_tick = GetTick(); // Reset auto-close timer
 8000ee0:	f001 f9cc 	bl	800227c <GetTick>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8000f60 <process_state_open+0x94>)
 8000ee8:	6013      	str	r3, [r2, #0]
    }

    if (g_current_system_mode == SYSTEM_MODE_FORCE_CLOSE) {
 8000eea:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <process_state_open+0x98>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d103      	bne.n	8000efa <process_state_open+0x2e>
        change_door_state(DOOR_STATE_CLOSING);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f7ff fe60 	bl	8000bb8 <change_door_state>
            if (GetTick() - g_state_timer_start_tick > DOOR_AUTO_CLOSE_TIMEOUT_MS) {
            change_door_state(DOOR_STATE_CLOSING); // Tự động đóng cửa sau thời gian quy định
           }
        }
    }
}
 8000ef8:	e02d      	b.n	8000f56 <process_state_open+0x8a>
    } else if (g_current_system_mode == SYSTEM_MODE_NORMAL) {
 8000efa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <process_state_open+0x98>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d129      	bne.n	8000f56 <process_state_open+0x8a>
        bool is_person_detected = PIRService_IsMotionDetected(PIR_SENSOR_IN) || PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f001 fedc 	bl	8002cc0 <PIRService_IsMotionDetected>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d105      	bne.n	8000f1a <process_state_open+0x4e>
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f001 fed6 	bl	8002cc0 <PIRService_IsMotionDetected>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <process_state_open+0x52>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <process_state_open+0x54>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	73fb      	strb	r3, [r7, #15]
        if (is_person_detected) {
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <process_state_open+0x70>
            g_state_timer_start_tick = GetTick(); // Reset auto-close timer nếu có người
 8000f30:	f001 f9a4 	bl	800227c <GetTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <process_state_open+0x94>)
 8000f38:	6013      	str	r3, [r2, #0]
}
 8000f3a:	e00c      	b.n	8000f56 <process_state_open+0x8a>
            if (GetTick() - g_state_timer_start_tick > DOOR_AUTO_CLOSE_TIMEOUT_MS) {
 8000f3c:	f001 f99e 	bl	800227c <GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <process_state_open+0x94>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d902      	bls.n	8000f56 <process_state_open+0x8a>
            change_door_state(DOOR_STATE_CLOSING); // Tự động đóng cửa sau thời gian quy định
 8000f50:	2004      	movs	r0, #4
 8000f52:	f7ff fe31 	bl	8000bb8 <change_door_state>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200001e8 	.word	0x200001e8
 8000f64:	200001e6 	.word	0x200001e6

08000f68 <process_state_closing>:

static void process_state_closing(bool just_enter_state) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
    if (just_enter_state) {
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <process_state_closing+0x1e>
        Motor_SetDirection(MOTOR_REVERSE); // Đặt hướng đóng cửa
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f001 fdb7 	bl	8002aec <Motor_SetDirection>
        Motor_SetSpeed(100.0f); // Bắt đầu đóng cửa
 8000f7e:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8000ff8 <process_state_closing+0x90>
 8000f82:	f001 fd8b 	bl	8002a9c <Motor_SetSpeed>
    }

    if (g_current_system_mode == SYSTEM_MODE_NORMAL) {
 8000f86:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <process_state_closing+0x94>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d11a      	bne.n	8000fc4 <process_state_closing+0x5c>
        bool is_person_detected = PIRService_IsMotionDetected(PIR_SENSOR_IN) || PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f001 fe96 	bl	8002cc0 <PIRService_IsMotionDetected>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d105      	bne.n	8000fa6 <process_state_closing+0x3e>
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f001 fe90 	bl	8002cc0 <PIRService_IsMotionDetected>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <process_state_closing+0x42>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <process_state_closing+0x44>
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
        if (is_person_detected) {
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <process_state_closing+0x5c>
            change_door_state(DOOR_STATE_OPENING); // Nếu có người, mở cửa lại
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f7ff fdfb 	bl	8000bb8 <change_door_state>
            return;
 8000fc2:	e015      	b.n	8000ff0 <process_state_closing+0x88>
        }
    }

    if (LimitSwitchService_IsDoorFullyClosed()) {
 8000fc4:	f001 fcfe 	bl	80029c4 <LimitSwitchService_IsDoorFullyClosed>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <process_state_closing+0x6e>
        change_door_state(DOOR_STATE_CLOSED);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff fdf2 	bl	8000bb8 <change_door_state>
 8000fd4:	e00c      	b.n	8000ff0 <process_state_closing+0x88>
    } else if (GetTick() - g_state_timer_start_tick > DOOR_MAX_TRAVEL_TIME_MS) {
 8000fd6:	f001 f951 	bl	800227c <GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <process_state_closing+0x98>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d902      	bls.n	8000ff0 <process_state_closing+0x88>
        change_door_state(DOOR_STATE_ERROR); // Quá thời gian đóng cửa
 8000fea:	2005      	movs	r0, #5
 8000fec:	f7ff fde4 	bl	8000bb8 <change_door_state>
    }
}
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	42c80000 	.word	0x42c80000
 8000ffc:	200001e6 	.word	0x200001e6
 8001000:	200001e8 	.word	0x200001e8

08001004 <process_state_error>:

static void process_state_error(bool just_enter_state) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
    if (just_enter_state) {
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <process_state_error+0x14>
        Motor_Stop(); // Dừng động cơ khi ở trạng thái lỗi
 8001014:	f001 fdbc 	bl	8002b90 <Motor_Stop>
    }

    if (g_current_system_mode == SYSTEM_MODE_FORCE_OPEN) {
 8001018:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <process_state_error+0x3c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d103      	bne.n	8001028 <process_state_error+0x24>
        change_door_state(DOOR_STATE_OPENING); // Chuyển sang mở cửa nếu ở chế độ FORCE_OPEN
 8001020:	2002      	movs	r0, #2
 8001022:	f7ff fdc9 	bl	8000bb8 <change_door_state>
    } else if (g_current_system_mode == SYSTEM_MODE_FORCE_CLOSE) {
        change_door_state(DOOR_STATE_CLOSING); // Chuyển sang đóng cửa nếu ở chế độ FORCE_CLOSE
    }
    // Ở trạng thái lỗi, không làm gì cả, chờ người dùng can thiệp
    // Có thể thêm logic reset nếu cần
}
 8001026:	e006      	b.n	8001036 <process_state_error+0x32>
    } else if (g_current_system_mode == SYSTEM_MODE_FORCE_CLOSE) {
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <process_state_error+0x3c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d102      	bne.n	8001036 <process_state_error+0x32>
        change_door_state(DOOR_STATE_CLOSING); // Chuyển sang đóng cửa nếu ở chế độ FORCE_CLOSE
 8001030:	2004      	movs	r0, #4
 8001032:	f7ff fdc1 	bl	8000bb8 <change_door_state>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001e6 	.word	0x200001e6

08001044 <LightingLogic_Init>:
#include "lighting_logic.h"
#include "people_counter.h"
#include "light_control_service.h"
#include "uart_protocol_service.h"

void LightingLogic_Init(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
    int16_t current_person_count = PeopleCounter_GetCount();
 800104a:	f000 f975 	bl	8001338 <PeopleCounter_GetCount>
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]

    if (current_person_count > 0) {
 8001052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001056:	2b00      	cmp	r3, #0
 8001058:	dd02      	ble.n	8001060 <LightingLogic_Init+0x1c>
        LightService_TurnOn();
 800105a:	f001 fb41 	bl	80026e0 <LightService_TurnOn>
    } else {
        LightService_TurnOff();
    }
}
 800105e:	e001      	b.n	8001064 <LightingLogic_Init+0x20>
        LightService_TurnOff();
 8001060:	f001 fb58 	bl	8002714 <LightService_TurnOff>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <LightingLogic_Process>:

void LightingLogic_Process(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
    int16_t current_person_count = PeopleCounter_GetCount();
 8001072:	f000 f961 	bl	8001338 <PeopleCounter_GetCount>
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
    bool current_light_hw_state = LightService_GetState(); // Lấy trạng thái thực tế của đèn từ service
 800107a:	f001 fb65 	bl	8002748 <LightService_GetState>
 800107e:	4603      	mov	r3, r0
 8001080:	717b      	strb	r3, [r7, #5]

    if (current_person_count > 0) {
 8001082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001086:	2b00      	cmp	r3, #0
 8001088:	dd0e      	ble.n	80010a8 <LightingLogic_Process+0x3c>
        if (!current_light_hw_state) {
 800108a:	797b      	ldrb	r3, [r7, #5]
 800108c:	f083 0301 	eor.w	r3, r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d013      	beq.n	80010be <LightingLogic_Process+0x52>
            LightService_TurnOn();
 8001096:	f001 fb23 	bl	80026e0 <LightService_TurnOn>
            UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_LIGHT_STATE, PAYLOAD_LIGHT_ON, 0);
 800109a:	2300      	movs	r3, #0
 800109c:	2201      	movs	r2, #1
 800109e:	2102      	movs	r1, #2
 80010a0:	2001      	movs	r0, #1
 80010a2:	f001 fe8d 	bl	8002dc0 <UARTProto_SendFrame>
        if (current_light_hw_state) {
            LightService_TurnOff();
            UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_LIGHT_STATE, PAYLOAD_LIGHT_OFF, 0);
        }
    }
}
 80010a6:	e00a      	b.n	80010be <LightingLogic_Process+0x52>
        if (current_light_hw_state) {
 80010a8:	797b      	ldrb	r3, [r7, #5]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d007      	beq.n	80010be <LightingLogic_Process+0x52>
            LightService_TurnOff();
 80010ae:	f001 fb31 	bl	8002714 <LightService_TurnOff>
            UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_LIGHT_STATE, PAYLOAD_LIGHT_OFF, 0);
 80010b2:	2300      	movs	r3, #0
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	2001      	movs	r0, #1
 80010ba:	f001 fe81 	bl	8002dc0 <UARTProto_SendFrame>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <PeopleCounter_Init>:
static bool g_pir_outside_last_state = false;
static bool g_pir_inside_last_state = false;

static person_passed_callback_t g_person_passed_cb = NULL;

void PeopleCounter_Init(person_passed_callback_t callback) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    g_person_count = 0;
 80010d0:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <PeopleCounter_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	801a      	strh	r2, [r3, #0]
    g_detection_state = DETECTION_STATE_IDLE;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <PeopleCounter_Init+0x5c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
    g_first_pir_activation_tick = 0;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <PeopleCounter_Init+0x60>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
    g_last_detection_time = 0; // Để cooldown hoạt động ngay từ đầu nếu cần
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <PeopleCounter_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
    g_person_passed_cb = callback;
 80010e8:	4a11      	ldr	r2, [pc, #68]	@ (8001130 <PeopleCounter_Init+0x68>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]

    // Khởi tạo trạng thái PIR ban đầu
    g_pir_outside_last_state = PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f001 fde6 	bl	8002cc0 <PIRService_IsMotionDetected>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <PeopleCounter_Init+0x6c>)
 80010fa:	701a      	strb	r2, [r3, #0]
    g_pir_inside_last_state = PIRService_IsMotionDetected(PIR_SENSOR_IN);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f001 fddf 	bl	8002cc0 <PIRService_IsMotionDetected>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <PeopleCounter_Init+0x70>)
 8001108:	701a      	strb	r2, [r3, #0]

    UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_PERSON_COUNT, (uint8_t*)&g_person_count, 1);
 800110a:	2301      	movs	r3, #1
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <PeopleCounter_Init+0x58>)
 800110e:	2103      	movs	r1, #3
 8001110:	2001      	movs	r0, #1
 8001112:	f001 fe55 	bl	8002dc0 <UARTProto_SendFrame>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001ec 	.word	0x200001ec
 8001124:	200001ee 	.word	0x200001ee
 8001128:	200001f0 	.word	0x200001f0
 800112c:	200001f4 	.word	0x200001f4
 8001130:	200001fc 	.word	0x200001fc
 8001134:	200001f8 	.word	0x200001f8
 8001138:	200001f9 	.word	0x200001f9

0800113c <PeopleCounter_Process>:

void PeopleCounter_Process(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
    bool pir_outside_current_state = PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 8001142:	2001      	movs	r0, #1
 8001144:	f001 fdbc 	bl	8002cc0 <PIRService_IsMotionDetected>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]
    bool pir_inside_current_state = PIRService_IsMotionDetected(PIR_SENSOR_IN);
 800114c:	2000      	movs	r0, #0
 800114e:	f001 fdb7 	bl	8002cc0 <PIRService_IsMotionDetected>
 8001152:	4603      	mov	r3, r0
 8001154:	73bb      	strb	r3, [r7, #14]
    uint32_t current_tick = GetTick();
 8001156:	f001 f891 	bl	800227c <GetTick>
 800115a:	60b8      	str	r0, [r7, #8]

    // Phát hiện sườn lên (rising edge)
    bool pir_outside_triggered = (pir_outside_current_state && !g_pir_outside_last_state);
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <PeopleCounter_Process+0x38>
 8001162:	4b6e      	ldr	r3, [pc, #440]	@ (800131c <PeopleCounter_Process+0x1e0>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f083 0301 	eor.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <PeopleCounter_Process+0x38>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <PeopleCounter_Process+0x3a>
 8001174:	2300      	movs	r3, #0
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	71fb      	strb	r3, [r7, #7]
    bool pir_inside_triggered = (pir_inside_current_state && !g_pir_inside_last_state);
 8001180:	7bbb      	ldrb	r3, [r7, #14]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d008      	beq.n	8001198 <PeopleCounter_Process+0x5c>
 8001186:	4b66      	ldr	r3, [pc, #408]	@ (8001320 <PeopleCounter_Process+0x1e4>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	f083 0301 	eor.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <PeopleCounter_Process+0x5c>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <PeopleCounter_Process+0x5e>
 8001198:	2300      	movs	r3, #0
 800119a:	71bb      	strb	r3, [r7, #6]
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	71bb      	strb	r3, [r7, #6]

    // Cooldown: Nếu vừa mới đếm xong, bỏ qua các trigger mới trong một khoảng thời gian
    if ((current_tick - g_last_detection_time) < PERSON_COUNTER_COOLDOWN_MS) {
 80011a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001324 <PeopleCounter_Process+0x1e8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80011b0:	d206      	bcs.n	80011c0 <PeopleCounter_Process+0x84>
        // Cập nhật trạng thái cuối cùng để không bỏ lỡ sườn lên sau cooldown
        g_pir_outside_last_state = pir_outside_current_state;
 80011b2:	4a5a      	ldr	r2, [pc, #360]	@ (800131c <PeopleCounter_Process+0x1e0>)
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	7013      	strb	r3, [r2, #0]
        g_pir_inside_last_state = pir_inside_current_state;
 80011b8:	4a59      	ldr	r2, [pc, #356]	@ (8001320 <PeopleCounter_Process+0x1e4>)
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	7013      	strb	r3, [r2, #0]
        return;
 80011be:	e0aa      	b.n	8001316 <PeopleCounter_Process+0x1da>
    }


    switch (g_detection_state) {
 80011c0:	4b59      	ldr	r3, [pc, #356]	@ (8001328 <PeopleCounter_Process+0x1ec>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d059      	beq.n	800127c <PeopleCounter_Process+0x140>
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	f300 809e 	bgt.w	800130a <PeopleCounter_Process+0x1ce>
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <PeopleCounter_Process+0x9c>
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d015      	beq.n	8001202 <PeopleCounter_Process+0xc6>
 80011d6:	e098      	b.n	800130a <PeopleCounter_Process+0x1ce>
        case DETECTION_STATE_IDLE:
            if (pir_outside_triggered) {
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <PeopleCounter_Process+0xb0>
                g_detection_state = DETECTION_STATE_EXPECTING_PIR_INSIDE;
 80011de:	4b52      	ldr	r3, [pc, #328]	@ (8001328 <PeopleCounter_Process+0x1ec>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
                g_first_pir_activation_tick = current_tick;
 80011e4:	4a51      	ldr	r2, [pc, #324]	@ (800132c <PeopleCounter_Process+0x1f0>)
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	6013      	str	r3, [r2, #0]
            } else if (pir_inside_triggered) {
                g_detection_state = DETECTION_STATE_EXPECTING_PIR_OUTSIDE;
                g_first_pir_activation_tick = current_tick;
            }
            break;
 80011ea:	e089      	b.n	8001300 <PeopleCounter_Process+0x1c4>
            } else if (pir_inside_triggered) {
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8086 	beq.w	8001300 <PeopleCounter_Process+0x1c4>
                g_detection_state = DETECTION_STATE_EXPECTING_PIR_OUTSIDE;
 80011f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001328 <PeopleCounter_Process+0x1ec>)
 80011f6:	2202      	movs	r2, #2
 80011f8:	701a      	strb	r2, [r3, #0]
                g_first_pir_activation_tick = current_tick;
 80011fa:	4a4c      	ldr	r2, [pc, #304]	@ (800132c <PeopleCounter_Process+0x1f0>)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	6013      	str	r3, [r2, #0]
            break;
 8001200:	e07e      	b.n	8001300 <PeopleCounter_Process+0x1c4>

        case DETECTION_STATE_EXPECTING_PIR_INSIDE: // PIR_OUTSIDE đã active, chờ PIR_INSIDE
            if (pir_inside_triggered) { // PIR_INSIDE cũng active -> Người vào
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d01d      	beq.n	8001244 <PeopleCounter_Process+0x108>
                g_person_count++;
 8001208:	4b49      	ldr	r3, [pc, #292]	@ (8001330 <PeopleCounter_Process+0x1f4>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b21b      	sxth	r3, r3
 800120e:	b29b      	uxth	r3, r3
 8001210:	3301      	adds	r3, #1
 8001212:	b29b      	uxth	r3, r3
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b46      	ldr	r3, [pc, #280]	@ (8001330 <PeopleCounter_Process+0x1f4>)
 8001218:	801a      	strh	r2, [r3, #0]
                UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_PERSON_COUNT, (uint8_t*)&g_person_count, 1);
 800121a:	2301      	movs	r3, #1
 800121c:	4a44      	ldr	r2, [pc, #272]	@ (8001330 <PeopleCounter_Process+0x1f4>)
 800121e:	2103      	movs	r1, #3
 8001220:	2001      	movs	r0, #1
 8001222:	f001 fdcd 	bl	8002dc0 <UARTProto_SendFrame>
                g_detection_state = DETECTION_STATE_IDLE;
 8001226:	4b40      	ldr	r3, [pc, #256]	@ (8001328 <PeopleCounter_Process+0x1ec>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
                g_last_detection_time = current_tick;
 800122c:	4a3d      	ldr	r2, [pc, #244]	@ (8001324 <PeopleCounter_Process+0x1e8>)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	6013      	str	r3, [r2, #0]
                if (g_person_passed_cb) g_person_passed_cb(PERSON_PASSED_ENTERED);
 8001232:	4b40      	ldr	r3, [pc, #256]	@ (8001334 <PeopleCounter_Process+0x1f8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d064      	beq.n	8001304 <PeopleCounter_Process+0x1c8>
 800123a:	4b3e      	ldr	r3, [pc, #248]	@ (8001334 <PeopleCounter_Process+0x1f8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2001      	movs	r0, #1
 8001240:	4798      	blx	r3
            } else if (!pir_outside_current_state && !pir_inside_current_state) {
                // Nếu cả 2 PIR đều tắt trước khi PIR_INSIDE kịp active (hiếm, nhưng có thể)
                // Hoặc nếu người dùng quay lại sau khi kích hoạt PIR_OUTSIDE
                g_detection_state = DETECTION_STATE_IDLE;
            }
            break;
 8001242:	e05f      	b.n	8001304 <PeopleCounter_Process+0x1c8>
            } else if ((current_tick - g_first_pir_activation_tick) > PERSON_COUNTER_MAX_TRANSITION_TIME_MS) {
 8001244:	4b39      	ldr	r3, [pc, #228]	@ (800132c <PeopleCounter_Process+0x1f0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001250:	4293      	cmp	r3, r2
 8001252:	d903      	bls.n	800125c <PeopleCounter_Process+0x120>
                g_detection_state = DETECTION_STATE_IDLE;
 8001254:	4b34      	ldr	r3, [pc, #208]	@ (8001328 <PeopleCounter_Process+0x1ec>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
            break;
 800125a:	e053      	b.n	8001304 <PeopleCounter_Process+0x1c8>
            } else if (!pir_outside_current_state && !pir_inside_current_state) {
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d04d      	beq.n	8001304 <PeopleCounter_Process+0x1c8>
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d047      	beq.n	8001304 <PeopleCounter_Process+0x1c8>
                g_detection_state = DETECTION_STATE_IDLE;
 8001274:	4b2c      	ldr	r3, [pc, #176]	@ (8001328 <PeopleCounter_Process+0x1ec>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
            break;
 800127a:	e043      	b.n	8001304 <PeopleCounter_Process+0x1c8>

        case DETECTION_STATE_EXPECTING_PIR_OUTSIDE: // PIR_INSIDE đã active, chờ PIR_OUTSIDE
            if (pir_outside_triggered) { // PIR_OUTSIDE cũng active -> Người ra
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d022      	beq.n	80012c8 <PeopleCounter_Process+0x18c>
                if (g_person_count > 0) {
 8001282:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <PeopleCounter_Process+0x1f4>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b21b      	sxth	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	dd0e      	ble.n	80012aa <PeopleCounter_Process+0x16e>
                    g_person_count--;
 800128c:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <PeopleCounter_Process+0x1f4>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	b21b      	sxth	r3, r3
 8001292:	b29b      	uxth	r3, r3
 8001294:	3b01      	subs	r3, #1
 8001296:	b29b      	uxth	r3, r3
 8001298:	b21a      	sxth	r2, r3
 800129a:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <PeopleCounter_Process+0x1f4>)
 800129c:	801a      	strh	r2, [r3, #0]
                    UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_PERSON_COUNT, (uint8_t*)&g_person_count, 1);
 800129e:	2301      	movs	r3, #1
 80012a0:	4a23      	ldr	r2, [pc, #140]	@ (8001330 <PeopleCounter_Process+0x1f4>)
 80012a2:	2103      	movs	r1, #3
 80012a4:	2001      	movs	r0, #1
 80012a6:	f001 fd8b 	bl	8002dc0 <UARTProto_SendFrame>
                }
                g_detection_state = DETECTION_STATE_IDLE;
 80012aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <PeopleCounter_Process+0x1ec>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
                g_last_detection_time = current_tick;
 80012b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001324 <PeopleCounter_Process+0x1e8>)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	6013      	str	r3, [r2, #0]
                if (g_person_passed_cb) g_person_passed_cb(PERSON_PASSED_EXITED);
 80012b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <PeopleCounter_Process+0x1f8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d024      	beq.n	8001308 <PeopleCounter_Process+0x1cc>
 80012be:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <PeopleCounter_Process+0x1f8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2002      	movs	r0, #2
 80012c4:	4798      	blx	r3
                g_detection_state = DETECTION_STATE_IDLE;
            } else if (!pir_outside_current_state && !pir_inside_current_state) {
                // Nếu cả 2 PIR đều tắt trước khi PIR_OUTSIDE kịp active
                g_detection_state = DETECTION_STATE_IDLE;
            }
            break;
 80012c6:	e01f      	b.n	8001308 <PeopleCounter_Process+0x1cc>
            } else if ((current_tick - g_first_pir_activation_tick) > PERSON_COUNTER_MAX_TRANSITION_TIME_MS) {
 80012c8:	4b18      	ldr	r3, [pc, #96]	@ (800132c <PeopleCounter_Process+0x1f0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d903      	bls.n	80012e0 <PeopleCounter_Process+0x1a4>
                g_detection_state = DETECTION_STATE_IDLE;
 80012d8:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <PeopleCounter_Process+0x1ec>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
            break;
 80012de:	e013      	b.n	8001308 <PeopleCounter_Process+0x1cc>
            } else if (!pir_outside_current_state && !pir_inside_current_state) {
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	f083 0301 	eor.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00d      	beq.n	8001308 <PeopleCounter_Process+0x1cc>
 80012ec:	7bbb      	ldrb	r3, [r7, #14]
 80012ee:	f083 0301 	eor.w	r3, r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d007      	beq.n	8001308 <PeopleCounter_Process+0x1cc>
                g_detection_state = DETECTION_STATE_IDLE;
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <PeopleCounter_Process+0x1ec>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
            break;
 80012fe:	e003      	b.n	8001308 <PeopleCounter_Process+0x1cc>
            break;
 8001300:	bf00      	nop
 8001302:	e002      	b.n	800130a <PeopleCounter_Process+0x1ce>
            break;
 8001304:	bf00      	nop
 8001306:	e000      	b.n	800130a <PeopleCounter_Process+0x1ce>
            break;
 8001308:	bf00      	nop
    }

    // Cập nhật trạng thái cuối cùng của PIR cho lần gọi Process tiếp theo
    g_pir_outside_last_state = pir_outside_current_state;
 800130a:	4a04      	ldr	r2, [pc, #16]	@ (800131c <PeopleCounter_Process+0x1e0>)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	7013      	strb	r3, [r2, #0]
    g_pir_inside_last_state = pir_inside_current_state;
 8001310:	4a03      	ldr	r2, [pc, #12]	@ (8001320 <PeopleCounter_Process+0x1e4>)
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	7013      	strb	r3, [r2, #0]
}
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200001f8 	.word	0x200001f8
 8001320:	200001f9 	.word	0x200001f9
 8001324:	200001f4 	.word	0x200001f4
 8001328:	200001ee 	.word	0x200001ee
 800132c:	200001f0 	.word	0x200001f0
 8001330:	200001ec 	.word	0x200001ec
 8001334:	200001fc 	.word	0x200001fc

08001338 <PeopleCounter_GetCount>:

int16_t PeopleCounter_GetCount(void) {
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
    return g_person_count;
 800133c:	4b03      	ldr	r3, [pc, #12]	@ (800134c <PeopleCounter_GetCount+0x14>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	b21b      	sxth	r3, r3
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	200001ec 	.word	0x200001ec

08001350 <PeopleCounter_Reset>:

void PeopleCounter_Reset(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
    // Critical section
    __disable_irq();
    g_person_count = 0;
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <PeopleCounter_Reset+0x34>)
 800135a:	2200      	movs	r2, #0
 800135c:	801a      	strh	r2, [r3, #0]
    UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_PERSON_COUNT, (uint8_t*)&g_person_count, 1);
 800135e:	2301      	movs	r3, #1
 8001360:	4a08      	ldr	r2, [pc, #32]	@ (8001384 <PeopleCounter_Reset+0x34>)
 8001362:	2103      	movs	r1, #3
 8001364:	2001      	movs	r0, #1
 8001366:	f001 fd2b 	bl	8002dc0 <UARTProto_SendFrame>
    g_detection_state = DETECTION_STATE_IDLE; // Reset cả máy trạng thái phát hiện
 800136a:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <PeopleCounter_Reset+0x38>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
    g_last_detection_time = GetTick(); // Reset cooldown để lệnh reset có hiệu lực ngay
 8001370:	f000 ff84 	bl	800227c <GetTick>
 8001374:	4603      	mov	r3, r0
 8001376:	4a05      	ldr	r2, [pc, #20]	@ (800138c <PeopleCounter_Reset+0x3c>)
 8001378:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800137a:	b662      	cpsie	i
}
 800137c:	bf00      	nop
    __enable_irq();
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200001ec 	.word	0x200001ec
 8001388:	200001ee 	.word	0x200001ee
 800138c:	200001f4 	.word	0x200001f4

08001390 <app_person_passed_handler>:
static SystemOpMode_t g_system_op_mode = SYSTEM_MODE_NORMAL;
static uint32_t g_last_status_update_tick = 0;


// Callback được people_counter gọi khi có người đi qua
void app_person_passed_handler(PersonPassedDirection_t direction) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
    if (g_system_op_mode == SYSTEM_MODE_NORMAL) {
 800139a:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <app_person_passed_handler+0x20>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <app_person_passed_handler+0x16>
        // Chỉ thông báo cho FSM nếu đang ở chế độ NORMAL
        DoorFSM_NotifyPersonDetectedPassing();
 80013a2:	f7ff fd25 	bl	8000df0 <DoorFSM_NotifyPersonDetectedPassing>
    }
    // Có thể gửi ngay một status update nếu cần
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000200 	.word	0x20000200

080013b4 <SystemManager_Init>:


void SystemManager_Init(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af02      	add	r7, sp, #8
    UARTProto_Init(SystemManager_HandleLabVIEWCommand);
 80013ba:	481a      	ldr	r0, [pc, #104]	@ (8001424 <SystemManager_Init+0x70>)
 80013bc:	f001 fc96 	bl	8002cec <UARTProto_Init>

    PIRService_Init(PIR_IN_PORT, PIR_IN_PIN, PIR_OUT_PORT, PIR_OUT_PIN, PIR_IRQ_PRIO);
 80013c0:	230a      	movs	r3, #10
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2301      	movs	r3, #1
 80013c6:	4a18      	ldr	r2, [pc, #96]	@ (8001428 <SystemManager_Init+0x74>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	4817      	ldr	r0, [pc, #92]	@ (8001428 <SystemManager_Init+0x74>)
 80013cc:	f001 fc36 	bl	8002c3c <PIRService_Init>
    LimitSwitchService_Init(LS_OPEN_PORT, LS_OPEN_PIN, LS_CLOSED_PORT, LS_CLOSED_PIN, LS_IRQ_PRIO);
 80013d0:	230b      	movs	r3, #11
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2306      	movs	r3, #6
 80013d6:	4a15      	ldr	r2, [pc, #84]	@ (800142c <SystemManager_Init+0x78>)
 80013d8:	2105      	movs	r1, #5
 80013da:	4814      	ldr	r0, [pc, #80]	@ (800142c <SystemManager_Init+0x78>)
 80013dc:	f001 fa14 	bl	8002808 <LimitSwitchService_Init>
    Motor_Init(MOTOR_DIR1_PORT, MOTOR_DIR1_PIN, MOTOR_DIR2_PORT, MOTOR_DIR2_PIN);
 80013e0:	2301      	movs	r3, #1
 80013e2:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <SystemManager_Init+0x7c>)
 80013e4:	2100      	movs	r1, #0
 80013e6:	4812      	ldr	r0, [pc, #72]	@ (8001430 <SystemManager_Init+0x7c>)
 80013e8:	f001 fb00 	bl	80029ec <Motor_Init>
    LightService_Init(LIGHT_RELAY_PORT, LIGHT_RELAY_PIN);
 80013ec:	2108      	movs	r1, #8
 80013ee:	4810      	ldr	r0, [pc, #64]	@ (8001430 <SystemManager_Init+0x7c>)
 80013f0:	f001 f93c 	bl	800266c <LightService_Init>

    PeopleCounter_Init(app_person_passed_handler);
 80013f4:	480f      	ldr	r0, [pc, #60]	@ (8001434 <SystemManager_Init+0x80>)
 80013f6:	f7ff fe67 	bl	80010c8 <PeopleCounter_Init>
    DoorFSM_Init();
 80013fa:	f7ff fbfd 	bl	8000bf8 <DoorFSM_Init>
    LightingLogic_Init();
 80013fe:	f7ff fe21 	bl	8001044 <LightingLogic_Init>

    g_system_op_mode = SYSTEM_MODE_NORMAL; // Đặt chế độ mặc định
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <SystemManager_Init+0x84>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
    DoorFSM_NotifySystemModeChange(g_system_op_mode); // Thông báo cho FSM
 8001408:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <SystemManager_Init+0x84>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fcc1 	bl	8000d94 <DoorFSM_NotifySystemModeChange>
    g_last_status_update_tick = GetTick();
 8001412:	f000 ff33 	bl	800227c <GetTick>
 8001416:	4603      	mov	r3, r0
 8001418:	4a08      	ldr	r2, [pc, #32]	@ (800143c <SystemManager_Init+0x88>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	080014b5 	.word	0x080014b5
 8001428:	40020800 	.word	0x40020800
 800142c:	40020400 	.word	0x40020400
 8001430:	40020000 	.word	0x40020000
 8001434:	08001391 	.word	0x08001391
 8001438:	20000200 	.word	0x20000200
 800143c:	20000204 	.word	0x20000204

08001440 <SystemManager_Process>:

void SystemManager_Process(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
    UARTProto_Process();
 8001446:	f001 fd1f 	bl	8002e88 <UARTProto_Process>
    LimitSwitchService_ProcessDebounce();
 800144a:	f001 fa63 	bl	8002914 <LimitSwitchService_ProcessDebounce>
    PeopleCounter_Process();
 800144e:	f7ff fe75 	bl	800113c <PeopleCounter_Process>
    DoorFSM_Process();
 8001452:	f7ff fbff 	bl	8000c54 <DoorFSM_Process>
    LightingLogic_Process();
 8001456:	f7ff fe09 	bl	800106c <LightingLogic_Process>

    // Gửi status update định kỳ
    if ((GetTick() - g_last_status_update_tick) >= STATUS_UPDATE_INTERVAL_MS) {
 800145a:	f000 ff0f 	bl	800227c <GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <SystemManager_Process+0x6c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800146a:	d31a      	bcc.n	80014a2 <SystemManager_Process+0x62>
        g_last_status_update_tick = GetTick();
 800146c:	f000 ff06 	bl	800227c <GetTick>
 8001470:	4603      	mov	r3, r0
 8001472:	4a0e      	ldr	r2, [pc, #56]	@ (80014ac <SystemManager_Process+0x6c>)
 8001474:	6013      	str	r3, [r2, #0]

        // --- Gửi FRAME_ID_STM_FULL_SNAPSHOT ---
        uint8_t snapshot_payload[4];
        snapshot_payload[0] = (uint8_t)g_system_op_mode;
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <SystemManager_Process+0x70>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	713b      	strb	r3, [r7, #4]
        snapshot_payload[1] = (uint8_t)DoorFSM_GetState();
 800147c:	f7ff fc7e 	bl	8000d7c <DoorFSM_GetState>
 8001480:	4603      	mov	r3, r0
 8001482:	717b      	strb	r3, [r7, #5]
        snapshot_payload[2] = (uint8_t)PeopleCounter_GetCount();
 8001484:	f7ff ff58 	bl	8001338 <PeopleCounter_GetCount>
 8001488:	4603      	mov	r3, r0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	71bb      	strb	r3, [r7, #6]
        snapshot_payload[3] = LightService_GetState() ? PAYLOAD_LIGHT_ON : PAYLOAD_LIGHT_OFF;
 800148e:	f001 f95b 	bl	8002748 <LightService_GetState>
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]

        UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW,
 8001496:	1d3a      	adds	r2, r7, #4
 8001498:	2304      	movs	r3, #4
 800149a:	2105      	movs	r1, #5
 800149c:	2001      	movs	r0, #1
 800149e:	f001 fc8f 	bl	8002dc0 <UARTProto_SendFrame>
                              FRAME_ID_STM_FULL_SNAPSHOT,
                              snapshot_payload,
                              4);
    }
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000204 	.word	0x20000204
 80014b0:	20000200 	.word	0x20000200

080014b4 <SystemManager_HandleLabVIEWCommand>:

bool SystemManager_HandleLabVIEWCommand(const ParsedFrame_t* frame) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    if (frame->type != FRAME_TYPE_LABVIEW_TO_STM) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d001      	beq.n	80014c8 <SystemManager_HandleLabVIEWCommand+0x14>
        return false; // Không phải lệnh, bỏ qua
 80014c4:	2300      	movs	r3, #0
 80014c6:	e039      	b.n	800153c <SystemManager_HandleLabVIEWCommand+0x88>
    }

    bool cmd_processed_ok = false;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]

    switch (frame->id) {
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	785b      	ldrb	r3, [r3, #1]
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	d002      	beq.n	80014da <SystemManager_HandleLabVIEWCommand+0x26>
 80014d4:	2b13      	cmp	r3, #19
 80014d6:	d021      	beq.n	800151c <SystemManager_HandleLabVIEWCommand+0x68>
 80014d8:	e02c      	b.n	8001534 <SystemManager_HandleLabVIEWCommand+0x80>
        case FRAME_ID_LABVIEW_SET_MODE:
            if (frame->length == 1) {
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	799b      	ldrb	r3, [r3, #6]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d119      	bne.n	8001516 <SystemManager_HandleLabVIEWCommand+0x62>
                SystemOpMode_t requested_mode = (SystemOpMode_t)frame->payload[0];
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	73bb      	strb	r3, [r7, #14]
                // Kiểm tra xem mode có hợp lệ không
                if (requested_mode == SYSTEM_MODE_NORMAL ||
 80014e8:	7bbb      	ldrb	r3, [r7, #14]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <SystemManager_HandleLabVIEWCommand+0x46>
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d002      	beq.n	80014fa <SystemManager_HandleLabVIEWCommand+0x46>
                    requested_mode == SYSTEM_MODE_FORCE_OPEN ||
 80014f4:	7bbb      	ldrb	r3, [r7, #14]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d10a      	bne.n	8001510 <SystemManager_HandleLabVIEWCommand+0x5c>
                    requested_mode == SYSTEM_MODE_FORCE_CLOSE) {

                    g_system_op_mode = requested_mode;
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <SystemManager_HandleLabVIEWCommand+0x90>)
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	7013      	strb	r3, [r2, #0]
                    DoorFSM_NotifySystemModeChange(g_system_op_mode);
 8001500:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <SystemManager_HandleLabVIEWCommand+0x90>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fc45 	bl	8000d94 <DoorFSM_NotifySystemModeChange>
                    cmd_processed_ok = true;
 800150a:	2301      	movs	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
                    cmd_processed_ok = false; // Mode không hợp lệ
                }
            } else {
                cmd_processed_ok = false; // Payload length sai
            }
            break;
 800150e:	e014      	b.n	800153a <SystemManager_HandleLabVIEWCommand+0x86>
                    cmd_processed_ok = false; // Mode không hợp lệ
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
            break;
 8001514:	e011      	b.n	800153a <SystemManager_HandleLabVIEWCommand+0x86>
                cmd_processed_ok = false; // Payload length sai
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]
            break;
 800151a:	e00e      	b.n	800153a <SystemManager_HandleLabVIEWCommand+0x86>

        case FRAME_ID_LABVIEW_RESET_COUNT:
            if (frame->length == 0) { // Lệnh này không cần payload
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	799b      	ldrb	r3, [r3, #6]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d104      	bne.n	800152e <SystemManager_HandleLabVIEWCommand+0x7a>
                PeopleCounter_Reset();
 8001524:	f7ff ff14 	bl	8001350 <PeopleCounter_Reset>
                cmd_processed_ok = true;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
            } else {
                cmd_processed_ok = false; // Có payload không mong muốn
            }
            break;
 800152c:	e005      	b.n	800153a <SystemManager_HandleLabVIEWCommand+0x86>
                cmd_processed_ok = false; // Có payload không mong muốn
 800152e:	2300      	movs	r3, #0
 8001530:	73fb      	strb	r3, [r7, #15]
            break;
 8001532:	e002      	b.n	800153a <SystemManager_HandleLabVIEWCommand+0x86>

        default:
            cmd_processed_ok = false; // ID lệnh không xác định
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
            break;
 8001538:	bf00      	nop
    }
    return cmd_processed_ok;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000200 	.word	0x20000200

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	@ (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	@ (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <get_gpio_port_source>:

// Mảng lưu trữ các callback cho từng EXTI line (0-15)
static exti_callback_t g_exti_callbacks[16] = {NULL};

// Helper function để lấy port source cho SYSCFG_EXTICR
static uint8_t get_gpio_port_source(GPIO_TypeDef* GPIOx) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    if (GPIOx == GPIOA) return 0x00U;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a15      	ldr	r2, [pc, #84]	@ (8001638 <get_gpio_port_source+0x60>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d101      	bne.n	80015ec <get_gpio_port_source+0x14>
 80015e8:	2300      	movs	r3, #0
 80015ea:	e01e      	b.n	800162a <get_gpio_port_source+0x52>
    if (GPIOx == GPIOB) return 0x01U;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a13      	ldr	r2, [pc, #76]	@ (800163c <get_gpio_port_source+0x64>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d101      	bne.n	80015f8 <get_gpio_port_source+0x20>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e018      	b.n	800162a <get_gpio_port_source+0x52>
    if (GPIOx == GPIOC) return 0x02U;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <get_gpio_port_source+0x68>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d101      	bne.n	8001604 <get_gpio_port_source+0x2c>
 8001600:	2302      	movs	r3, #2
 8001602:	e012      	b.n	800162a <get_gpio_port_source+0x52>
    if (GPIOx == GPIOD) return 0x03U;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a0f      	ldr	r2, [pc, #60]	@ (8001644 <get_gpio_port_source+0x6c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d101      	bne.n	8001610 <get_gpio_port_source+0x38>
 800160c:	2303      	movs	r3, #3
 800160e:	e00c      	b.n	800162a <get_gpio_port_source+0x52>
    if (GPIOx == GPIOE) return 0x04U;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <get_gpio_port_source+0x70>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d101      	bne.n	800161c <get_gpio_port_source+0x44>
 8001618:	2304      	movs	r3, #4
 800161a:	e006      	b.n	800162a <get_gpio_port_source+0x52>
    if (GPIOx == GPIOH) return 0x07U; // GPIOH là 0b111
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <get_gpio_port_source+0x74>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d101      	bne.n	8001628 <get_gpio_port_source+0x50>
 8001624:	2307      	movs	r3, #7
 8001626:	e000      	b.n	800162a <get_gpio_port_source+0x52>
    return 0xFFU; // Lỗi
 8001628:	23ff      	movs	r3, #255	@ 0xff
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400
 8001640:	40020800 	.word	0x40020800
 8001644:	40020c00 	.word	0x40020c00
 8001648:	40021000 	.word	0x40021000
 800164c:	40021c00 	.word	0x40021c00

08001650 <EXTI_InitPin>:

void EXTI_InitPin(GPIO_TypeDef* GPIOx, uint8_t pin_number, uint8_t trigger_type,
                  uint8_t priority, exti_callback_t callback) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af04      	add	r7, sp, #16
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	4608      	mov	r0, r1
 800165a:	4611      	mov	r1, r2
 800165c:	461a      	mov	r2, r3
 800165e:	4603      	mov	r3, r0
 8001660:	70fb      	strb	r3, [r7, #3]
 8001662:	460b      	mov	r3, r1
 8001664:	70bb      	strb	r3, [r7, #2]
 8001666:	4613      	mov	r3, r2
 8001668:	707b      	strb	r3, [r7, #1]
    if (pin_number > 15) return; // Chỉ hỗ trợ pin 0-15
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	f200 80aa 	bhi.w	80017c6 <EXTI_InitPin+0x176>

    // 1. Cấu hình chân GPIO làm input (thường có pull-up hoặc pull-down)
    // Giả sử người dùng đã bật clock cho GPIOx hoặc GPIO_InitPin sẽ làm điều đó.
    // Ví dụ, cấu hình input với pull-up:
    GPIO_InitPin(GPIOx, (1U << pin_number), GPIO_MODE_INPUT, GPIO_PULL_UP,
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	2201      	movs	r2, #1
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	b299      	uxth	r1, r3
 800167c:	2300      	movs	r3, #0
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2300      	movs	r3, #0
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2300      	movs	r3, #0
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	2200      	movs	r2, #0
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f9c5 	bl	8001a1c <GPIO_InitPin>
                 GPIO_SPEED_LOW, 0, 0); // otype và alt_func không dùng cho input thường

    // 2. Bật clock cho SYSCFG
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001692:	4b50      	ldr	r3, [pc, #320]	@ (80017d4 <EXTI_InitPin+0x184>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	4a4f      	ldr	r2, [pc, #316]	@ (80017d4 <EXTI_InitPin+0x184>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169c:	6453      	str	r3, [r2, #68]	@ 0x44

    // 3. Kết nối EXTI Line với chân GPIO thông qua SYSCFG
    // SYSCFG_EXTICRx có 4 trường, mỗi trường 4 bit, cho 4 EXTI line.
    // EXTICR[0] cho lines 0-3, EXTICR[1] cho lines 4-7, ...
    uint8_t exti_cr_index = pin_number / 4; // 0, 1, 2, 3
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	73bb      	strb	r3, [r7, #14]
    uint8_t exti_cr_pos = (pin_number % 4) * 4; // 0, 4, 8, 12
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	737b      	strb	r3, [r7, #13]
    uint8_t port_source = get_gpio_port_source(GPIOx);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff91 	bl	80015d8 <get_gpio_port_source>
 80016b6:	4603      	mov	r3, r0
 80016b8:	733b      	strb	r3, [r7, #12]

    if (port_source == 0xFFU) return; // Port không hợp lệ
 80016ba:	7b3b      	ldrb	r3, [r7, #12]
 80016bc:	2bff      	cmp	r3, #255	@ 0xff
 80016be:	f000 8084 	beq.w	80017ca <EXTI_InitPin+0x17a>

    // Xóa các bit cũ và set port source mới
    SYSCFG->EXTICR[exti_cr_index] &= ~(0x0FU << exti_cr_pos);
 80016c2:	4a45      	ldr	r2, [pc, #276]	@ (80017d8 <EXTI_InitPin+0x188>)
 80016c4:	7bbb      	ldrb	r3, [r7, #14]
 80016c6:	3302      	adds	r3, #2
 80016c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80016cc:	7b7b      	ldrb	r3, [r7, #13]
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43da      	mvns	r2, r3
 80016d6:	4840      	ldr	r0, [pc, #256]	@ (80017d8 <EXTI_InitPin+0x188>)
 80016d8:	7bbb      	ldrb	r3, [r7, #14]
 80016da:	400a      	ands	r2, r1
 80016dc:	3302      	adds	r3, #2
 80016de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    SYSCFG->EXTICR[exti_cr_index] |= (port_source << exti_cr_pos);
 80016e2:	4a3d      	ldr	r2, [pc, #244]	@ (80017d8 <EXTI_InitPin+0x188>)
 80016e4:	7bbb      	ldrb	r3, [r7, #14]
 80016e6:	3302      	adds	r3, #2
 80016e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016ec:	7b39      	ldrb	r1, [r7, #12]
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	4938      	ldr	r1, [pc, #224]	@ (80017d8 <EXTI_InitPin+0x188>)
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	4302      	orrs	r2, r0
 80016fc:	3302      	adds	r3, #2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // 4. Cấu hình EXTI Line
    // Bỏ mask ngắt (cho phép ngắt)
    EXTI->IMR |= (1U << pin_number);
 8001702:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <EXTI_InitPin+0x18c>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	4933      	ldr	r1, [pc, #204]	@ (80017dc <EXTI_InitPin+0x18c>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
    // Không dùng event mask ở đây
    // EXTI->EMR &= ~(1U << pin_number);

    // Cấu hình trigger type
    if (trigger_type == EXTI_TRIGGER_RISING || trigger_type == EXTI_TRIGGER_BOTH) {
 8001714:	78bb      	ldrb	r3, [r7, #2]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d002      	beq.n	8001720 <EXTI_InitPin+0xd0>
 800171a:	78bb      	ldrb	r3, [r7, #2]
 800171c:	2b03      	cmp	r3, #3
 800171e:	d109      	bne.n	8001734 <EXTI_InitPin+0xe4>
        EXTI->RTSR |= (1U << pin_number);
 8001720:	4b2e      	ldr	r3, [pc, #184]	@ (80017dc <EXTI_InitPin+0x18c>)
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2101      	movs	r1, #1
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	492b      	ldr	r1, [pc, #172]	@ (80017dc <EXTI_InitPin+0x18c>)
 800172e:	4313      	orrs	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
 8001732:	e009      	b.n	8001748 <EXTI_InitPin+0xf8>
    } else {
        EXTI->RTSR &= ~(1U << pin_number); // Clear nếu không phải rising
 8001734:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <EXTI_InitPin+0x18c>)
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	4926      	ldr	r1, [pc, #152]	@ (80017dc <EXTI_InitPin+0x18c>)
 8001744:	4013      	ands	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
    }

    if (trigger_type == EXTI_TRIGGER_FALLING || trigger_type == EXTI_TRIGGER_BOTH) {
 8001748:	78bb      	ldrb	r3, [r7, #2]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d002      	beq.n	8001754 <EXTI_InitPin+0x104>
 800174e:	78bb      	ldrb	r3, [r7, #2]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d109      	bne.n	8001768 <EXTI_InitPin+0x118>
        EXTI->FTSR |= (1U << pin_number);
 8001754:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <EXTI_InitPin+0x18c>)
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	2101      	movs	r1, #1
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	491e      	ldr	r1, [pc, #120]	@ (80017dc <EXTI_InitPin+0x18c>)
 8001762:	4313      	orrs	r3, r2
 8001764:	60cb      	str	r3, [r1, #12]
 8001766:	e009      	b.n	800177c <EXTI_InitPin+0x12c>
    } else {
        EXTI->FTSR &= ~(1U << pin_number); // Clear nếu không phải falling
 8001768:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <EXTI_InitPin+0x18c>)
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4919      	ldr	r1, [pc, #100]	@ (80017dc <EXTI_InitPin+0x18c>)
 8001778:	4013      	ands	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
    }

    // 5. Đăng ký callback
    if (pin_number < 16) {
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	2b0f      	cmp	r3, #15
 8001780:	d804      	bhi.n	800178c <EXTI_InitPin+0x13c>
        g_exti_callbacks[pin_number] = callback;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	4916      	ldr	r1, [pc, #88]	@ (80017e0 <EXTI_InitPin+0x190>)
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    // 6. Cấu hình và kích hoạt ngắt trong NVIC
    IRQn_Type irq_number;
    if (pin_number <= 4) { // EXTI0 đến EXTI4
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d804      	bhi.n	800179c <EXTI_InitPin+0x14c>
        irq_number = (IRQn_Type)(EXTI0_IRQn + pin_number);
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	3306      	adds	r3, #6
 8001796:	b2db      	uxtb	r3, r3
 8001798:	73fb      	strb	r3, [r7, #15]
 800179a:	e007      	b.n	80017ac <EXTI_InitPin+0x15c>
    } else if (pin_number <= 9) { // EXTI5 đến EXTI9
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	2b09      	cmp	r3, #9
 80017a0:	d802      	bhi.n	80017a8 <EXTI_InitPin+0x158>
        irq_number = EXTI9_5_IRQn;
 80017a2:	2317      	movs	r3, #23
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e001      	b.n	80017ac <EXTI_InitPin+0x15c>
    } else { // EXTI10 đến EXTI15
        irq_number = EXTI15_10_IRQn;
 80017a8:	2328      	movs	r3, #40	@ 0x28
 80017aa:	73fb      	strb	r3, [r7, #15]
    }

    NVIC_SetPriority(irq_number, priority);
 80017ac:	787a      	ldrb	r2, [r7, #1]
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fee5 	bl	8001584 <__NVIC_SetPriority>
    NVIC_EnableIRQ(irq_number);
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fec2 	bl	8001548 <__NVIC_EnableIRQ>
 80017c4:	e002      	b.n	80017cc <EXTI_InitPin+0x17c>
    if (pin_number > 15) return; // Chỉ hỗ trợ pin 0-15
 80017c6:	bf00      	nop
 80017c8:	e000      	b.n	80017cc <EXTI_InitPin+0x17c>
    if (port_source == 0xFFU) return; // Port không hợp lệ
 80017ca:	bf00      	nop
}
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40013c00 	.word	0x40013c00
 80017e0:	20000208 	.word	0x20000208

080017e4 <EXTI_ClearPendingBit>:

void EXTI_ClearPendingBit(uint8_t exti_line) {
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
    if (exti_line > 15) return;
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d806      	bhi.n	8001802 <EXTI_ClearPendingBit+0x1e>
    // Ghi 1 vào bit tương ứng trong Pending Register để xóa nó
    EXTI->PR = (1U << exti_line);
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4a06      	ldr	r2, [pc, #24]	@ (8001810 <EXTI_ClearPendingBit+0x2c>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	6153      	str	r3, [r2, #20]
 8001800:	e000      	b.n	8001804 <EXTI_ClearPendingBit+0x20>
    if (exti_line > 15) return;
 8001802:	bf00      	nop
}
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40013c00 	.word	0x40013c00

08001814 <EXTI_IRQHandler_Helper>:
// --- Trình xử lý ngắt (ISRs) ---
// Các hàm này cần được định nghĩa với tên chính xác như trong vector ngắt.
// Chúng sẽ kiểm tra cờ pending và gọi callback tương ứng.

// Helper function để xử lý logic chung trong ISR
static void EXTI_IRQHandler_Helper(uint8_t exti_line_start, uint8_t exti_line_end) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	460a      	mov	r2, r1
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	4613      	mov	r3, r2
 8001822:	71bb      	strb	r3, [r7, #6]
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e01c      	b.n	8001864 <EXTI_IRQHandler_Helper+0x50>
        // Kiểm tra cờ Pending Bit cho từng line
        if ((EXTI->PR & (1U << line)) != 0) {
 800182a:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <EXTI_IRQHandler_Helper+0x64>)
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d010      	beq.n	800185e <EXTI_IRQHandler_Helper+0x4a>
            // Xóa Pending Bit trước khi gọi callback (quan trọng!)
            EXTI_ClearPendingBit(line);
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ffd0 	bl	80017e4 <EXTI_ClearPendingBit>

            // Gọi callback nếu có
            if (g_exti_callbacks[line] != NULL) {
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <EXTI_IRQHandler_Helper+0x68>)
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <EXTI_IRQHandler_Helper+0x4a>
                g_exti_callbacks[line](line);
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <EXTI_IRQHandler_Helper+0x68>)
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	4610      	mov	r0, r2
 800185c:	4798      	blx	r3
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	3301      	adds	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	79bb      	ldrb	r3, [r7, #6]
 8001868:	429a      	cmp	r2, r3
 800186a:	d9de      	bls.n	800182a <EXTI_IRQHandler_Helper+0x16>
            }
        }
    }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40013c00 	.word	0x40013c00
 800187c:	20000208 	.word	0x20000208

08001880 <EXTI0_IRQHandler>:

// ISR cho EXTI Line 0
void EXTI0_IRQHandler(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(0, 0);
 8001884:	2100      	movs	r1, #0
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff ffc4 	bl	8001814 <EXTI_IRQHandler_Helper>
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <EXTI1_IRQHandler>:

// ISR cho EXTI Line 1
void EXTI1_IRQHandler(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(1, 1);
 8001894:	2101      	movs	r1, #1
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff ffbc 	bl	8001814 <EXTI_IRQHandler_Helper>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <EXTI2_IRQHandler>:

// ISR cho EXTI Line 2
void EXTI2_IRQHandler(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(2, 2);
 80018a4:	2102      	movs	r1, #2
 80018a6:	2002      	movs	r0, #2
 80018a8:	f7ff ffb4 	bl	8001814 <EXTI_IRQHandler_Helper>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <EXTI3_IRQHandler>:

// ISR cho EXTI Line 3
void EXTI3_IRQHandler(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(3, 3);
 80018b4:	2103      	movs	r1, #3
 80018b6:	2003      	movs	r0, #3
 80018b8:	f7ff ffac 	bl	8001814 <EXTI_IRQHandler_Helper>
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <EXTI4_IRQHandler>:

// ISR cho EXTI Line 4
void EXTI4_IRQHandler(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(4, 4);
 80018c4:	2104      	movs	r1, #4
 80018c6:	2004      	movs	r0, #4
 80018c8:	f7ff ffa4 	bl	8001814 <EXTI_IRQHandler_Helper>
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <EXTI9_5_IRQHandler>:

// ISR cho EXTI Lines 5 đến 9
void EXTI9_5_IRQHandler(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(5, 9);
 80018d4:	2109      	movs	r1, #9
 80018d6:	2005      	movs	r0, #5
 80018d8:	f7ff ff9c 	bl	8001814 <EXTI_IRQHandler_Helper>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <EXTI15_10_IRQHandler>:

// ISR cho EXTI Lines 10 đến 15
void EXTI15_10_IRQHandler(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(10, 15);
 80018e4:	210f      	movs	r1, #15
 80018e6:	200a      	movs	r0, #10
 80018e8:	f7ff ff94 	bl	8001814 <EXTI_IRQHandler_Helper>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <GPIO_ClockCmd>:
 */

#include "gpio_driver.h"

// Helper function to enable/disable clock for GPIO port
void GPIO_ClockCmd(GPIO_TypeDef* GPIOx, uint8_t NewState) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
    if (NewState == CLOCK_CMD_ENABLE) {
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d141      	bne.n	8001986 <GPIO_ClockCmd+0x96>
        if (GPIOx == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a3e      	ldr	r2, [pc, #248]	@ (8001a00 <GPIO_ClockCmd+0x110>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d106      	bne.n	8001918 <GPIO_ClockCmd+0x28>
 800190a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
        // ...
    }
}
 8001916:	e06c      	b.n	80019f2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a08 <GPIO_ClockCmd+0x118>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d106      	bne.n	800192e <GPIO_ClockCmd+0x3e>
 8001920:	4b38      	ldr	r3, [pc, #224]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001924:	4a37      	ldr	r2, [pc, #220]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800192c:	e061      	b.n	80019f2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a36      	ldr	r2, [pc, #216]	@ (8001a0c <GPIO_ClockCmd+0x11c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d106      	bne.n	8001944 <GPIO_ClockCmd+0x54>
 8001936:	4b33      	ldr	r3, [pc, #204]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a32      	ldr	r2, [pc, #200]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001942:	e056      	b.n	80019f2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a32      	ldr	r2, [pc, #200]	@ (8001a10 <GPIO_ClockCmd+0x120>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d106      	bne.n	800195a <GPIO_ClockCmd+0x6a>
 800194c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	4a2c      	ldr	r2, [pc, #176]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 8001952:	f043 0308 	orr.w	r3, r3, #8
 8001956:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001958:	e04b      	b.n	80019f2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a14 <GPIO_ClockCmd+0x124>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d106      	bne.n	8001970 <GPIO_ClockCmd+0x80>
 8001962:	4b28      	ldr	r3, [pc, #160]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a27      	ldr	r2, [pc, #156]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800196e:	e040      	b.n	80019f2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a29      	ldr	r2, [pc, #164]	@ (8001a18 <GPIO_ClockCmd+0x128>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d13c      	bne.n	80019f2 <GPIO_ClockCmd+0x102>
 8001978:	4b22      	ldr	r3, [pc, #136]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197c:	4a21      	ldr	r2, [pc, #132]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 800197e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001982:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001984:	e035      	b.n	80019f2 <GPIO_ClockCmd+0x102>
        if (GPIOx == GPIOA) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a1d      	ldr	r2, [pc, #116]	@ (8001a00 <GPIO_ClockCmd+0x110>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d106      	bne.n	800199c <GPIO_ClockCmd+0xac>
 800198e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a1c      	ldr	r2, [pc, #112]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800199a:	e02a      	b.n	80019f2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOBEN;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a1a      	ldr	r2, [pc, #104]	@ (8001a08 <GPIO_ClockCmd+0x118>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d106      	bne.n	80019b2 <GPIO_ClockCmd+0xc2>
 80019a4:	4b17      	ldr	r3, [pc, #92]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a8:	4a16      	ldr	r2, [pc, #88]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 80019aa:	f023 0302 	bic.w	r3, r3, #2
 80019ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80019b0:	e01f      	b.n	80019f2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a15      	ldr	r2, [pc, #84]	@ (8001a0c <GPIO_ClockCmd+0x11c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d106      	bne.n	80019c8 <GPIO_ClockCmd+0xd8>
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a11      	ldr	r2, [pc, #68]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80019c6:	e014      	b.n	80019f2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a11      	ldr	r2, [pc, #68]	@ (8001a10 <GPIO_ClockCmd+0x120>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d106      	bne.n	80019de <GPIO_ClockCmd+0xee>
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 80019d6:	f023 0308 	bic.w	r3, r3, #8
 80019da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80019dc:	e009      	b.n	80019f2 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a14 <GPIO_ClockCmd+0x124>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d105      	bne.n	80019f2 <GPIO_ClockCmd+0x102>
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a06      	ldr	r2, [pc, #24]	@ (8001a04 <GPIO_ClockCmd+0x114>)
 80019ec:	f023 0310 	bic.w	r3, r3, #16
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40021c00 	.word	0x40021c00

08001a1c <GPIO_InitPin>:


void GPIO_InitPin(GPIO_TypeDef* GPIOx, uint16_t pin, uint32_t mode, uint32_t pull,
                  uint32_t speed, uint32_t otype, uint32_t alt_func) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	817b      	strh	r3, [r7, #10]
    uint32_t position;
    uint32_t iocurrent;
    uint32_t temp;

    // Enable clock for the GPIO port
    GPIO_ClockCmd(GPIOx, CLOCK_CMD_ENABLE);
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f7ff ff5e 	bl	80018f0 <GPIO_ClockCmd>

    for (position = 0; position < 16; position++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	e0a4      	b.n	8001b84 <GPIO_InitPin+0x168>
        iocurrent = (0x1U << position); // Mask for current pin
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	61bb      	str	r3, [r7, #24]
        if (pin & iocurrent) {          // If this pin is selected
 8001a44:	897a      	ldrh	r2, [r7, #10]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 8097 	beq.w	8001b7e <GPIO_InitPin+0x162>
            // 1. Configure Mode (Input, Output, AF, Analog)
            temp = GPIOx->MODER;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2)); // Clear mode bits for this pin
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4013      	ands	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
            temp |= (mode << (position * 2));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
            GPIOx->MODER = temp;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	601a      	str	r2, [r3, #0]

            if ((mode == GPIO_MODE_OUTPUT) || (mode == GPIO_MODE_AF)) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d002      	beq.n	8001a8a <GPIO_InitPin+0x6e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d12b      	bne.n	8001ae2 <GPIO_InitPin+0xc6>
                // 2. Configure Speed
                temp = GPIOx->OSPEEDR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	617b      	str	r3, [r7, #20]
                temp &= ~(0x03U << (position * 2));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]
                temp |= (speed << (position * 2));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]
                GPIOx->OSPEEDR = temp;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	609a      	str	r2, [r3, #8]

                // 3. Configure Output Type (Push-Pull or Open-Drain)
                temp = GPIOx->OTYPER;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	617b      	str	r3, [r7, #20]
                temp &= ~(0x01U << position);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	4013      	ands	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
                temp |= (otype << position);
 8001ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
                GPIOx->OTYPER = temp;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	605a      	str	r2, [r3, #4]
            }

            // 4. Configure Pull-up/Pull-down
            temp = GPIOx->PUPDR;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4013      	ands	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]
            temp |= (pull << (position * 2));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
            GPIOx->PUPDR = temp;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	60da      	str	r2, [r3, #12]

            // 5. Configure Alternate Function (if AF mode)
            if (mode == GPIO_MODE_AF) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d133      	bne.n	8001b7e <GPIO_InitPin+0x162>
                if (position < 8) { // AFR[0] for pins 0-7
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	2b07      	cmp	r3, #7
 8001b1a:	d817      	bhi.n	8001b4c <GPIO_InitPin+0x130>
                    temp = GPIOx->AFR[0];
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << (position * 4));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4013      	ands	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << (position * 4));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[0] = temp;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	621a      	str	r2, [r3, #32]
 8001b4a:	e018      	b.n	8001b7e <GPIO_InitPin+0x162>
                } else { // AFR[1] for pins 8-15
                    temp = GPIOx->AFR[1];
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << ((position - 8) * 4));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b08      	subs	r3, #8
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4013      	ands	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << ((position - 8) * 4));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b08      	subs	r3, #8
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[1] = temp;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24
    for (position = 0; position < 16; position++) {
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3301      	adds	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	2b0f      	cmp	r3, #15
 8001b88:	f67f af57 	bls.w	8001a3a <GPIO_InitPin+0x1e>
                }
            }
        }
    }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <GPIO_ReadPin>:

uint8_t GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t pin) {
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	807b      	strh	r3, [r7, #2]
    if ((GPIOx->IDR & pin) != 0x00U) {
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691a      	ldr	r2, [r3, #16]
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <GPIO_ReadPin+0x1c>
        return GPIO_PIN_SET;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <GPIO_ReadPin+0x1e>
    } else {
        return GPIO_PIN_RESET;
 8001bb2:	2300      	movs	r3, #0
    }
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t pin, uint8_t state) {
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
    if (state == GPIO_PIN_SET) {
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d103      	bne.n	8001bde <GPIO_WritePin+0x1e>
        GPIOx->BSRR = (uint32_t)pin; // Set bit
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
    }
}
 8001bdc:	e003      	b.n	8001be6 <GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <get_timer_peripheral>:

#include "pwm_driver.h"
#include <stdio.h>

// Helper function để lấy con trỏ đến Timer dựa trên enum
static TIM_TypeDef* get_timer_peripheral(PWM_TimerInstance_e timer_instance) {
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
    switch (timer_instance) {
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d814      	bhi.n	8001c2e <get_timer_peripheral+0x3a>
 8001c04:	a201      	add	r2, pc, #4	@ (adr r2, 8001c0c <get_timer_peripheral+0x18>)
 8001c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0a:	bf00      	nop
 8001c0c:	08001c1d 	.word	0x08001c1d
 8001c10:	08001c23 	.word	0x08001c23
 8001c14:	08001c27 	.word	0x08001c27
 8001c18:	08001c2b 	.word	0x08001c2b
        case PWM_TIMER2: return TIM2;
 8001c1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c20:	e006      	b.n	8001c30 <get_timer_peripheral+0x3c>
        case PWM_TIMER3: return TIM3;
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <get_timer_peripheral+0x48>)
 8001c24:	e004      	b.n	8001c30 <get_timer_peripheral+0x3c>
        case PWM_TIMER4: return TIM4;
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <get_timer_peripheral+0x4c>)
 8001c28:	e002      	b.n	8001c30 <get_timer_peripheral+0x3c>
        case PWM_TIMER5: return TIM5;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <get_timer_peripheral+0x50>)
 8001c2c:	e000      	b.n	8001c30 <get_timer_peripheral+0x3c>
        default: return NULL;
 8001c2e:	2300      	movs	r3, #0
    }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	40000400 	.word	0x40000400
 8001c40:	40000800 	.word	0x40000800
 8001c44:	40000c00 	.word	0x40000c00

08001c48 <pwm_timer_clock_cmd>:

// Helper function để bật clock cho Timer
static void pwm_timer_clock_cmd(PWM_TimerInstance_e timer_instance, uint8_t enable_disable) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ffca 	bl	8001bf4 <get_timer_peripheral>
 8001c60:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL) return;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d01f      	beq.n	8001ca8 <pwm_timer_clock_cmd+0x60>

    if (enable_disable == CLOCK_CMD_ENABLE) { // Giả sử CLOCK_CMD_ENABLE = 1
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d11d      	bne.n	8001caa <pwm_timer_clock_cmd+0x62>
        if (TIMx == TIM2 || TIMx == TIM3 || TIMx == TIM4 || TIMx == TIM5) {
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c74:	d00b      	beq.n	8001c8e <pwm_timer_clock_cmd+0x46>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <pwm_timer_clock_cmd+0x68>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d007      	beq.n	8001c8e <pwm_timer_clock_cmd+0x46>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb4 <pwm_timer_clock_cmd+0x6c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d003      	beq.n	8001c8e <pwm_timer_clock_cmd+0x46>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb8 <pwm_timer_clock_cmd+0x70>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d10d      	bne.n	8001caa <pwm_timer_clock_cmd+0x62>
            RCC->APB1ENR |= (1U << ( ( (uint32_t)TIMx - APB1PERIPH_BASE ) / 0x400UL) );
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <pwm_timer_clock_cmd+0x74>)
 8001c90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8001c98:	0a9b      	lsrs	r3, r3, #10
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	4906      	ldr	r1, [pc, #24]	@ (8001cbc <pwm_timer_clock_cmd+0x74>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	640b      	str	r3, [r1, #64]	@ 0x40
 8001ca6:	e000      	b.n	8001caa <pwm_timer_clock_cmd+0x62>
    if (TIMx == NULL) return;
 8001ca8:	bf00      	nop
        }
        // Thêm cho các timer trên APB2 nếu cần (TIM1, TIM8, TIM9, TIM10, TIM11)
    } else {
        // Logic để tắt clock (ít dùng hơn)
    }
}
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	40000c00 	.word	0x40000c00
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <PWM_InitChannel>:
// Cần khởi tạo các giá trị này trong PWM_InitChannel
static uint32_t g_timer_arr_values[4] = {0}; // TIM2, TIM3, TIM4, TIM5

int8_t PWM_InitChannel(PWM_TimerInstance_e timer_instance, PWM_TimerChannel_e channel,
                       uint32_t pwm_frequency_hz,
                       GPIO_TypeDef* gpio_port, uint8_t gpio_pin_number, uint8_t gpio_af_mode) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b090      	sub	sp, #64	@ 0x40
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	60ba      	str	r2, [r7, #8]
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	4603      	mov	r3, r0
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	73bb      	strb	r3, [r7, #14]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff8d 	bl	8001bf4 <get_timer_peripheral>
 8001cda:	61b8      	str	r0, [r7, #24]
    if (TIMx == NULL || channel < PWM_CHANNEL_1 || channel > PWM_CHANNEL_4 || pwm_frequency_hz == 0) {
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <PWM_InitChannel+0x34>
 8001ce2:	7bbb      	ldrb	r3, [r7, #14]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <PWM_InitChannel+0x34>
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d802      	bhi.n	8001cf4 <PWM_InitChannel+0x34>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <PWM_InitChannel+0x3a>
        return -1; // Tham số không hợp lệ
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	e117      	b.n	8001f2a <PWM_InitChannel+0x26a>
    }

    // 1. Bật clock cho Timer và GPIO Port
    pwm_timer_clock_cmd(timer_instance, CLOCK_CMD_ENABLE);
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff ffa2 	bl	8001c48 <pwm_timer_clock_cmd>
    GPIO_ClockCmd(gpio_port, CLOCK_CMD_ENABLE); // Giả sử hàm này tồn tại và hoạt động
 8001d04:	2101      	movs	r1, #1
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fdf2 	bl	80018f0 <GPIO_ClockCmd>

    // 2. Cấu hình chân GPIO ở chế độ Alternate Function
    GPIO_InitPin(gpio_port, (1U << gpio_pin_number), GPIO_MODE_AF, GPIO_PULL_NO,
 8001d0c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001d10:	2201      	movs	r2, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	b299      	uxth	r1, r3
 8001d18:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	2302      	movs	r3, #2
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2300      	movs	r3, #0
 8001d28:	2202      	movs	r2, #2
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fe76 	bl	8001a1c <GPIO_InitPin>
    // 3. Tính toán Prescaler (PSC) và Auto-Reload Register (ARR)
    // Tần số clock của Timer (ví dụ PCLK1 cho TIM2/3/4/5)
    // Nếu Prescaler của APB1 khác 1, PCLK1_TIMER_CLOCK = PCLK1_FREQUENCY_HZ * 2
    // (Tham khảo mục "Timer clock" trong Reference Manual)
    uint32_t timer_clock_hz;
    if (TIMx == TIM2 || TIMx == TIM3 || TIMx == TIM4 || TIMx == TIM5) { // Thuộc APB1
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d36:	d00b      	beq.n	8001d50 <PWM_InitChannel+0x90>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f34 <PWM_InitChannel+0x274>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <PWM_InitChannel+0x90>
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	4a7d      	ldr	r2, [pc, #500]	@ (8001f38 <PWM_InitChannel+0x278>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d003      	beq.n	8001d50 <PWM_InitChannel+0x90>
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8001f3c <PWM_InitChannel+0x27c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d10b      	bne.n	8001d68 <PWM_InitChannel+0xa8>
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 8001d50:	4b7b      	ldr	r3, [pc, #492]	@ (8001f40 <PWM_InitChannel+0x280>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <PWM_InitChannel+0xa2>
            timer_clock_hz = PCLK1_FREQUENCY_HZ;
 8001d5c:	4b79      	ldr	r3, [pc, #484]	@ (8001f44 <PWM_InitChannel+0x284>)
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 8001d60:	e005      	b.n	8001d6e <PWM_InitChannel+0xae>
        } else { // APB1 Prescaler > 1
            timer_clock_hz = PCLK1_FREQUENCY_HZ * 2;
 8001d62:	4b79      	ldr	r3, [pc, #484]	@ (8001f48 <PWM_InitChannel+0x288>)
 8001d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 8001d66:	e002      	b.n	8001d6e <PWM_InitChannel+0xae>
        }
    } else {
        // Thêm logic cho timer trên APB2 (ví dụ TIM1)
        // if ((RCC->CFGR & RCC_CFGR_PPRE2) == RCC_CFGR_PPRE2_DIV1) { ... }
        return -1; // Timer không được hỗ trợ
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	e0dd      	b.n	8001f2a <PWM_InitChannel+0x26a>
    }

    // Tìm PSC và ARR. Ưu tiên ARR lớn để có độ phân giải duty cycle tốt hơn.
    // pwm_frequency = timer_clock_hz / ((PSC + 1) * (ARR + 1))
    // Giả sử ARR khoảng 1000-65535. PSC = (timer_clock_hz / (pwm_frequency * (ARR+1))) - 1
    uint32_t arr_val = (timer_clock_hz / pwm_frequency_hz) / 1000U; // Thử ARR ~1000
 8001d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4a75      	ldr	r2, [pc, #468]	@ (8001f4c <PWM_InitChannel+0x28c>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val > 0xFFFFU) arr_val = 0xFFFFU; // Giới hạn ARR
 8001d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d86:	d302      	bcc.n	8001d8e <PWM_InitChannel+0xce>
 8001d88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val < 100U && pwm_frequency_hz < 1000) arr_val = 999; // Tăng ARR nếu tần số PWM thấp
 8001d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d90:	2b63      	cmp	r3, #99	@ 0x63
 8001d92:	d806      	bhi.n	8001da2 <PWM_InitChannel+0xe2>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d9a:	d202      	bcs.n	8001da2 <PWM_InitChannel+0xe2>
 8001d9c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val == 0) arr_val = 1; // Tránh chia cho 0
 8001da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <PWM_InitChannel+0xec>
 8001da8:	2301      	movs	r3, #1
 8001daa:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint32_t psc_val = (timer_clock_hz / (pwm_frequency_hz * (arr_val + 1))) -1;
 8001dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dae:	3301      	adds	r3, #1
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    if (psc_val > 0xFFFFU) psc_val = 0xFFFFU;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc6:	d302      	bcc.n	8001dce <PWM_InitChannel+0x10e>
 8001dc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24


    g_timer_arr_values[timer_instance] = arr_val; // Lưu lại ARR
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	495f      	ldr	r1, [pc, #380]	@ (8001f50 <PWM_InitChannel+0x290>)
 8001dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // 4. Cấu hình Timer cơ bản
    TIMx->PSC = (uint16_t)psc_val;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->ARR = (uint16_t)arr_val;
 8001de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIMx->CNT = 0; // Reset bộ đếm
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24
    // 5. Cấu hình kênh Output Compare cho PWM
    volatile uint16_t* ccmr_reg;
    volatile uint16_t* ccer_reg;
    volatile uint32_t* ccr_reg; // CCRx là 32-bit nhưng chỉ dùng 16-bit thấp

    if (channel == PWM_CHANNEL_1 || channel == PWM_CHANNEL_2) {
 8001df2:	7bbb      	ldrb	r3, [r7, #14]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d002      	beq.n	8001dfe <PWM_InitChannel+0x13e>
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d103      	bne.n	8001e06 <PWM_InitChannel+0x146>
        ccmr_reg = (volatile uint16_t*)&(TIMx->CCMR1);
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	3318      	adds	r3, #24
 8001e02:	623b      	str	r3, [r7, #32]
 8001e04:	e002      	b.n	8001e0c <PWM_InitChannel+0x14c>
    } else { // Kênh 3 hoặc 4
        ccmr_reg = (volatile uint16_t*)&(TIMx->CCMR2);
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	331c      	adds	r3, #28
 8001e0a:	623b      	str	r3, [r7, #32]
    }
    ccer_reg = (volatile uint16_t*)&(TIMx->CCER);
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	3320      	adds	r3, #32
 8001e10:	617b      	str	r3, [r7, #20]

    switch (channel) {
 8001e12:	7bbb      	ldrb	r3, [r7, #14]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d81a      	bhi.n	8001e50 <PWM_InitChannel+0x190>
 8001e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e20 <PWM_InitChannel+0x160>)
 8001e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e20:	08001e31 	.word	0x08001e31
 8001e24:	08001e39 	.word	0x08001e39
 8001e28:	08001e41 	.word	0x08001e41
 8001e2c:	08001e49 	.word	0x08001e49
        case PWM_CHANNEL_1: ccr_reg = &(TIMx->CCR1); break;
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	3334      	adds	r3, #52	@ 0x34
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e00e      	b.n	8001e56 <PWM_InitChannel+0x196>
        case PWM_CHANNEL_2: ccr_reg = &(TIMx->CCR2); break;
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	3338      	adds	r3, #56	@ 0x38
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e00a      	b.n	8001e56 <PWM_InitChannel+0x196>
        case PWM_CHANNEL_3: ccr_reg = &(TIMx->CCR3); break;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	333c      	adds	r3, #60	@ 0x3c
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e006      	b.n	8001e56 <PWM_InitChannel+0x196>
        case PWM_CHANNEL_4: ccr_reg = &(TIMx->CCR4); break;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	3340      	adds	r3, #64	@ 0x40
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e002      	b.n	8001e56 <PWM_InitChannel+0x196>
        default: return -1; // Should not happen
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295
 8001e54:	e069      	b.n	8001f2a <PWM_InitChannel+0x26a>
    }

    // Cấu hình PWM Mode 1 (OCxM = 110) và bật Preload Enable (OCxPE = 1)
    // Preload cho phép cập nhật CCRx một cách an toàn vào cuối mỗi chu kỳ PWM
    uint16_t oc_mode_bits = TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1PE;
 8001e56:	2368      	movs	r3, #104	@ 0x68
 8001e58:	827b      	strh	r3, [r7, #18]
    uint16_t ccer_enable_bit = TIM_CCER_CC1E << ((channel - 1) * 4);
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	2201      	movs	r2, #1
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	823b      	strh	r3, [r7, #16]

    if (channel == PWM_CHANNEL_1 || channel == PWM_CHANNEL_3) { // Kênh 1 và 3 dùng 8 bit thấp của CCMRx
 8001e68:	7bbb      	ldrb	r3, [r7, #14]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d002      	beq.n	8001e74 <PWM_InitChannel+0x1b4>
 8001e6e:	7bbb      	ldrb	r3, [r7, #14]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d121      	bne.n	8001eb8 <PWM_InitChannel+0x1f8>
        *ccmr_reg &= ~(0xFFU << ((channel == PWM_CHANNEL_3) ? 8 : 0)); // Xóa bit cũ (OCxM, OCxPE, OCxFE, CCxS)
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	7bba      	ldrb	r2, [r7, #14]
 8001e7c:	2a03      	cmp	r2, #3
 8001e7e:	d101      	bne.n	8001e84 <PWM_InitChannel+0x1c4>
 8001e80:	22ff      	movs	r2, #255	@ 0xff
 8001e82:	e001      	b.n	8001e88 <PWM_InitChannel+0x1c8>
 8001e84:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001e88:	4013      	ands	r3, r2
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	801a      	strh	r2, [r3, #0]
        *ccmr_reg |= (oc_mode_bits << ((channel == PWM_CHANNEL_3) ? 8 : 0));
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b21a      	sxth	r2, r3
 8001e98:	8a79      	ldrh	r1, [r7, #18]
 8001e9a:	7bbb      	ldrb	r3, [r7, #14]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d101      	bne.n	8001ea4 <PWM_InitChannel+0x1e4>
 8001ea0:	2308      	movs	r3, #8
 8001ea2:	e000      	b.n	8001ea6 <PWM_InitChannel+0x1e6>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	e020      	b.n	8001efa <PWM_InitChannel+0x23a>
    } else { // Kênh 2 và 4 dùng 8 bit cao của CCMRx
        *ccmr_reg &= ~(0xFF00U >> ((channel == PWM_CHANNEL_4) ? 0 : 8)); // Xóa bit cũ
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	7bba      	ldrb	r2, [r7, #14]
 8001ec0:	2a04      	cmp	r2, #4
 8001ec2:	d101      	bne.n	8001ec8 <PWM_InitChannel+0x208>
 8001ec4:	22ff      	movs	r2, #255	@ 0xff
 8001ec6:	e001      	b.n	8001ecc <PWM_InitChannel+0x20c>
 8001ec8:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001ecc:	4013      	ands	r3, r2
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	801a      	strh	r2, [r3, #0]
        *ccmr_reg |= (oc_mode_bits << ((channel == PWM_CHANNEL_4) ? 8 : 0));
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	8a79      	ldrh	r1, [r7, #18]
 8001ede:	7bbb      	ldrb	r3, [r7, #14]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d101      	bne.n	8001ee8 <PWM_InitChannel+0x228>
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	e000      	b.n	8001eea <PWM_InitChannel+0x22a>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	b21b      	sxth	r3, r3
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	801a      	strh	r2, [r3, #0]
    }

    // Bật output cho kênh
    *ccer_reg |= ccer_enable_bit;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	8a3b      	ldrh	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	801a      	strh	r2, [r3, #0]

    // Đặt duty cycle ban đầu là 0%
    *ccr_reg = 0;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

    // Bật bit ARPE (Auto-Reload Preload Enable) trong CR1 để ARR được buffer
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	601a      	str	r2, [r3, #0]

    // (Tùy chọn) Tạo một update event để nạp các giá trị preload vào shadow registers
    TIMx->EGR |= TIM_EGR_UG;
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	615a      	str	r2, [r3, #20]

    // Timer chưa được start ở đây, sẽ start bằng PWM_Start()

    return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3730      	adds	r7, #48	@ 0x30
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40000800 	.word	0x40000800
 8001f3c:	40000c00 	.word	0x40000c00
 8001f40:	40023800 	.word	0x40023800
 8001f44:	0280de80 	.word	0x0280de80
 8001f48:	0501bd00 	.word	0x0501bd00
 8001f4c:	10624dd3 	.word	0x10624dd3
 8001f50:	20000248 	.word	0x20000248

08001f54 <PWM_SetDutyCycle>:

int8_t PWM_SetDutyCycle(PWM_TimerInstance_e timer_instance, PWM_TimerChannel_e channel, float duty_cycle_percent) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	ed87 0a00 	vstr	s0, [r7]
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	4613      	mov	r3, r2
 8001f66:	71bb      	strb	r3, [r7, #6]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fe42 	bl	8001bf4 <get_timer_peripheral>
 8001f70:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL || channel < PWM_CHANNEL_1 || channel > PWM_CHANNEL_4) {
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <PWM_SetDutyCycle+0x30>
 8001f78:	79bb      	ldrb	r3, [r7, #6]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <PWM_SetDutyCycle+0x30>
 8001f7e:	79bb      	ldrb	r3, [r7, #6]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d902      	bls.n	8001f8a <PWM_SetDutyCycle+0x36>
        return -1;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	e05f      	b.n	800204a <PWM_SetDutyCycle+0xf6>
    }

    if (duty_cycle_percent < 0.0f) duty_cycle_percent = 0.0f;
 8001f8a:	edd7 7a00 	vldr	s15, [r7]
 8001f8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f96:	d502      	bpl.n	8001f9e <PWM_SetDutyCycle+0x4a>
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	603b      	str	r3, [r7, #0]
    if (duty_cycle_percent > 100.0f) duty_cycle_percent = 100.0f;
 8001f9e:	edd7 7a00 	vldr	s15, [r7]
 8001fa2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002054 <PWM_SetDutyCycle+0x100>
 8001fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fae:	dd01      	ble.n	8001fb4 <PWM_SetDutyCycle+0x60>
 8001fb0:	4b29      	ldr	r3, [pc, #164]	@ (8002058 <PWM_SetDutyCycle+0x104>)
 8001fb2:	603b      	str	r3, [r7, #0]

    uint32_t arr_val = g_timer_arr_values[timer_instance];
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	4a29      	ldr	r2, [pc, #164]	@ (800205c <PWM_SetDutyCycle+0x108>)
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	60bb      	str	r3, [r7, #8]
    if (arr_val == 0) return -1; // Timer chưa được init đúng cách
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <PWM_SetDutyCycle+0x76>
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc8:	e03f      	b.n	800204a <PWM_SetDutyCycle+0xf6>

    uint32_t ccr_val = (uint32_t)((duty_cycle_percent / 100.0f) * (float)(arr_val +1));
 8001fca:	edd7 7a00 	vldr	s15, [r7]
 8001fce:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8002054 <PWM_SetDutyCycle+0x100>
 8001fd2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fea:	ee17 3a90 	vmov	r3, s15
 8001fee:	617b      	str	r3, [r7, #20]
    // arr_val+1 vì duty cycle 100% ứng với CCR = ARR+1 (hoặc ARR nếu dùng PWM mode khác)
    // Với PWM Mode 1 (đếm lên): 0% -> CCR=0; 100% -> CCR = ARR+1 (hoặc lớn hơn ARR)
    // Để đơn giản, nếu CCR > ARR, thì nó sẽ là 100% duty.

    if (ccr_val > arr_val) ccr_val = arr_val +1; // Đảm bảo 100% là CCR > ARR
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d902      	bls.n	8001ffe <PWM_SetDutyCycle+0xaa>
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]

    volatile uint32_t* ccr_reg;
    switch (channel) {
 8001ffe:	79bb      	ldrb	r3, [r7, #6]
 8002000:	3b01      	subs	r3, #1
 8002002:	2b03      	cmp	r3, #3
 8002004:	d81a      	bhi.n	800203c <PWM_SetDutyCycle+0xe8>
 8002006:	a201      	add	r2, pc, #4	@ (adr r2, 800200c <PWM_SetDutyCycle+0xb8>)
 8002008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200c:	0800201d 	.word	0x0800201d
 8002010:	08002025 	.word	0x08002025
 8002014:	0800202d 	.word	0x0800202d
 8002018:	08002035 	.word	0x08002035
        case PWM_CHANNEL_1: ccr_reg = &(TIMx->CCR1); break;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	3334      	adds	r3, #52	@ 0x34
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e00e      	b.n	8002042 <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_2: ccr_reg = &(TIMx->CCR2); break;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3338      	adds	r3, #56	@ 0x38
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e00a      	b.n	8002042 <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_3: ccr_reg = &(TIMx->CCR3); break;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	333c      	adds	r3, #60	@ 0x3c
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	e006      	b.n	8002042 <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_4: ccr_reg = &(TIMx->CCR4); break;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3340      	adds	r3, #64	@ 0x40
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	e002      	b.n	8002042 <PWM_SetDutyCycle+0xee>
        default: return -1;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
 8002040:	e003      	b.n	800204a <PWM_SetDutyCycle+0xf6>
    }

    *ccr_reg = ccr_val;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	601a      	str	r2, [r3, #0]
    return 0;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	42c80000 	.word	0x42c80000
 8002058:	42c80000 	.word	0x42c80000
 800205c:	20000248 	.word	0x20000248

08002060 <PWM_Start>:

int8_t PWM_Start(PWM_TimerInstance_e timer_instance) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fdc1 	bl	8001bf4 <get_timer_peripheral>
 8002072:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL) return -1;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <PWM_Start+0x20>
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	e006      	b.n	800208e <PWM_Start+0x2e>

    // Bật bộ đếm
    TIMx->CR1 |= TIM_CR1_CEN;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	601a      	str	r2, [r3, #0]
    return 0;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <SystemClock_Config>:
  #define PLL_P_REG_VAL 0x03U
#else
  #error "Invalid PLL_P_VAL. Must be 2, 4, 6, or 8."
#endif

void SystemClock_Config(void) {
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
    uint32_t temp_reg; // Biến tạm, tránh warning unused nếu không có MODIFY_REG

    // 1. Bật HSE và đợi nó ổn định (nếu dùng HSE là nguồn PLL)
    RCC->CR |= RCC_CR_HSEON;
 800209e:	4b47      	ldr	r3, [pc, #284]	@ (80021bc <SystemClock_Config+0x124>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a46      	ldr	r2, [pc, #280]	@ (80021bc <SystemClock_Config+0x124>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 80020aa:	bf00      	nop
 80020ac:	4b43      	ldr	r3, [pc, #268]	@ (80021bc <SystemClock_Config+0x124>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f9      	beq.n	80020ac <SystemClock_Config+0x14>

    // 2. Cấu hình Power Control Register
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80020b8:	4b40      	ldr	r3, [pc, #256]	@ (80021bc <SystemClock_Config+0x124>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	4a3f      	ldr	r2, [pc, #252]	@ (80021bc <SystemClock_Config+0x124>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c2:	6413      	str	r3, [r2, #64]	@ 0x40
    temp_reg = PWR->CR;
 80020c4:	4b3e      	ldr	r3, [pc, #248]	@ (80021c0 <SystemClock_Config+0x128>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	607b      	str	r3, [r7, #4]
    temp_reg &= ~PWR_CR_VOS;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80020d0:	607b      	str	r3, [r7, #4]
    temp_reg |= PWR_CR_VOS_1; // Scale 2
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020d8:	607b      	str	r3, [r7, #4]
    PWR->CR = temp_reg;
 80020da:	4a39      	ldr	r2, [pc, #228]	@ (80021c0 <SystemClock_Config+0x128>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6013      	str	r3, [r2, #0]

    // 3. Cấu hình các hệ số chia cho HCLK, PCLK1, PCLK2
    temp_reg = RCC->CFGR;
 80020e0:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <SystemClock_Config+0x124>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_HPRE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020ec:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_HPRE_DIV1;
    RCC->CFGR = temp_reg;
 80020ee:	4a33      	ldr	r2, [pc, #204]	@ (80021bc <SystemClock_Config+0x124>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 80020f4:	4b31      	ldr	r3, [pc, #196]	@ (80021bc <SystemClock_Config+0x124>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002100:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE1_DIV2;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002108:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 800210a:	4a2c      	ldr	r2, [pc, #176]	@ (80021bc <SystemClock_Config+0x124>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 8002110:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <SystemClock_Config+0x124>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800211c:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE2_DIV1;
    RCC->CFGR = temp_reg;
 800211e:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <SystemClock_Config+0x124>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6093      	str	r3, [r2, #8]

    // 4. Cấu hình PLL
    RCC->CR &= ~RCC_CR_PLLON;
 8002124:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <SystemClock_Config+0x124>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a24      	ldr	r2, [pc, #144]	@ (80021bc <SystemClock_Config+0x124>)
 800212a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800212e:	6013      	str	r3, [r2, #0]
    while(RCC->CR & RCC_CR_PLLRDY);
 8002130:	bf00      	nop
 8002132:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <SystemClock_Config+0x124>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f9      	bne.n	8002132 <SystemClock_Config+0x9a>

    RCC->PLLCFGR = (PLL_Q_VAL << RCC_PLLCFGR_PLLQ_Pos) |
 800213e:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <SystemClock_Config+0x124>)
 8002140:	4a20      	ldr	r2, [pc, #128]	@ (80021c4 <SystemClock_Config+0x12c>)
 8002142:	605a      	str	r2, [r3, #4]
                   (PLL_P_REG_VAL << RCC_PLLCFGR_PLLP_Pos)|
                   (PLL_N_VAL << RCC_PLLCFGR_PLLN_Pos) |
                   (PLL_M_VAL << RCC_PLLCFGR_PLLM_Pos);

    // 5. Bật PLL và đợi nó ổn định
    RCC->CR |= RCC_CR_PLLON;
 8002144:	4b1d      	ldr	r3, [pc, #116]	@ (80021bc <SystemClock_Config+0x124>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1c      	ldr	r2, [pc, #112]	@ (80021bc <SystemClock_Config+0x124>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800214e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8002150:	bf00      	nop
 8002152:	4b1a      	ldr	r3, [pc, #104]	@ (80021bc <SystemClock_Config+0x124>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f9      	beq.n	8002152 <SystemClock_Config+0xba>

    // 6. Cấu hình Flash latency
    temp_reg = FLASH->ACR;
 800215e:	4b1a      	ldr	r3, [pc, #104]	@ (80021c8 <SystemClock_Config+0x130>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	607b      	str	r3, [r7, #4]
    temp_reg &= ~FLASH_ACR_LATENCY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f023 0307 	bic.w	r3, r3, #7
 800216a:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_LATENCY_2WS;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f043 0302 	orr.w	r3, r3, #2
 8002172:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_PRFTEN;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217a:	607b      	str	r3, [r7, #4]
    FLASH->ACR = temp_reg;
 800217c:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <SystemClock_Config+0x130>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]

    // 7. Chọn PLL làm nguồn SYSCLK
    temp_reg = RCC->CFGR;
 8002182:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <SystemClock_Config+0x124>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_SW;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f023 0303 	bic.w	r3, r3, #3
 800218e:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_SW_PLL;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 8002198:	4a08      	ldr	r2, [pc, #32]	@ (80021bc <SystemClock_Config+0x124>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800219e:	bf00      	nop
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <SystemClock_Config+0x124>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d1f9      	bne.n	80021a0 <SystemClock_Config+0x108>
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000
 80021c4:	07415408 	.word	0x07415408
 80021c8:	40023c00 	.word	0x40023c00

080021cc <__NVIC_SetPriority>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db0a      	blt.n	80021f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	490c      	ldr	r1, [pc, #48]	@ (8002218 <__NVIC_SetPriority+0x4c>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021f4:	e00a      	b.n	800220c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4908      	ldr	r1, [pc, #32]	@ (800221c <__NVIC_SetPriority+0x50>)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3b04      	subs	r3, #4
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	440b      	add	r3, r1
 800220a:	761a      	strb	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000e100 	.word	0xe000e100
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <SysTick_Init>:
#include "stm32f401xe.h"
#include "rcc_config.h"

static volatile uint32_t g_sysTickCounter = 0;

void SysTick_Init(void){
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
	// 1. Tính toán giá trị nạp cho SysTick để có tick mỗi 1ms
	// (HCLK / 1000) - 1 vì SysTick đếm từ LOAD_VAL về 0 (LOAD_VAL + 1 chu kỳ)
	uint32_t reload_value = (HCLK_FREQUENCY_HZ / 1000U) - 1U;
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <SysTick_Init+0x54>)
 8002228:	607b      	str	r3, [r7, #4]

	// 2. Cấu hình SysTick
    // Vô hiệu hóa SysTick trước khi cấu hình
    SysTick->CTRL = 0;
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <SysTick_Init+0x58>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

    // Nạp giá trị reload
    SysTick->LOAD = reload_value;
 8002230:	4a11      	ldr	r2, [pc, #68]	@ (8002278 <SysTick_Init+0x58>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6053      	str	r3, [r2, #4]

    // Đặt ưu tiên ngắt SysTick cho Cortex-M4 (4 bit ưu tiên)
    NVIC_SetPriority(SysTick_IRQn, 15); // Mức ưu tiên 15 (thấp nhất nếu 4 bit prio)
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ffc6 	bl	80021cc <__NVIC_SetPriority>

    // Reset bộ đếm SysTick hiện tại
    SysTick->VAL = 0;
 8002240:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <SysTick_Init+0x58>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]

    // Kích hoạt SysTick với nguồn clock là HCLK và bật ngắt
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // CLKSOURCE = AHB clock
 8002246:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <SysTick_Init+0x58>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0b      	ldr	r2, [pc, #44]	@ (8002278 <SysTick_Init+0x58>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;   // Enable SysTick interrupt
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <SysTick_Init+0x58>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a08      	ldr	r2, [pc, #32]	@ (8002278 <SysTick_Init+0x58>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;    // Enable SysTick
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <SysTick_Init+0x58>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a05      	ldr	r2, [pc, #20]	@ (8002278 <SysTick_Init+0x58>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6013      	str	r3, [r2, #0]
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	0001481f 	.word	0x0001481f
 8002278:	e000e010 	.word	0xe000e010

0800227c <GetTick>:
	while ((g_sysTickCounter - start_tick) < ms){

	}
}

uint32_t GetTick(void){
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
	return g_sysTickCounter;
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <GetTick+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000258 	.word	0x20000258

08002294 <IncTick>:

void IncTick(void){
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
	g_sysTickCounter ++;
 8002298:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <IncTick+0x18>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a03      	ldr	r2, [pc, #12]	@ (80022ac <IncTick+0x18>)
 80022a0:	6013      	str	r3, [r2, #0]
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	20000258 	.word	0x20000258

080022b0 <SysTick_Handler>:

void SysTick_Handler(void){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	IncTick();
 80022b4:	f7ff ffee 	bl	8002294 <IncTick>
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <__NVIC_EnableIRQ>:
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db0b      	blt.n	80022e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	4907      	ldr	r1, [pc, #28]	@ (80022f4 <__NVIC_EnableIRQ+0x38>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2001      	movs	r0, #1
 80022de:	fa00 f202 	lsl.w	r2, r0, r2
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <__NVIC_DisableIRQ>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	db12      	blt.n	8002330 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	490a      	ldr	r1, [pc, #40]	@ (800233c <__NVIC_DisableIRQ+0x44>)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2001      	movs	r0, #1
 800231a:	fa00 f202 	lsl.w	r2, r0, r2
 800231e:	3320      	adds	r3, #32
 8002320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002324:	f3bf 8f4f 	dsb	sy
}
 8002328:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800232a:	f3bf 8f6f 	isb	sy
}
 800232e:	bf00      	nop
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000e100 	.word	0xe000e100

08002340 <UART2_SendBuffer_IT>:

    // 10. Bật UART
    USART2->CR1 |= USART_CR1_UE;
}

bool UART2_SendBuffer_IT(const uint8_t* buffer, uint16_t length) {
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
    if (length == 0) return true;
 800234c:	887b      	ldrh	r3, [r7, #2]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <UART2_SendBuffer_IT+0x16>
 8002352:	2301      	movs	r3, #1
 8002354:	e04b      	b.n	80023ee <UART2_SendBuffer_IT+0xae>
    if (g_uart2_tx_busy || (UART2_TX_BUFFER_SIZE - g_uart2_tx_buffer_count) < length) {
 8002356:	4b29      	ldr	r3, [pc, #164]	@ (80023fc <UART2_SendBuffer_IT+0xbc>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d107      	bne.n	8002370 <UART2_SendBuffer_IT+0x30>
 8002360:	4b27      	ldr	r3, [pc, #156]	@ (8002400 <UART2_SendBuffer_IT+0xc0>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	f1c3 0280 	rsb	r2, r3, #128	@ 0x80
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	429a      	cmp	r2, r3
 800236e:	da01      	bge.n	8002374 <UART2_SendBuffer_IT+0x34>
        return false;
 8002370:	2300      	movs	r3, #0
 8002372:	e03c      	b.n	80023ee <UART2_SendBuffer_IT+0xae>
    }

    // Tạm thời vô hiệu hóa ngắt TXE để cập nhật buffer an toàn
    USART2->CR1 &= ~USART_CR1_TXEIE;
 8002374:	4b23      	ldr	r3, [pc, #140]	@ (8002404 <UART2_SendBuffer_IT+0xc4>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a22      	ldr	r2, [pc, #136]	@ (8002404 <UART2_SendBuffer_IT+0xc4>)
 800237a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800237e:	60d3      	str	r3, [r2, #12]

    for (uint16_t i = 0; i < length; i++) {
 8002380:	2300      	movs	r3, #0
 8002382:	81fb      	strh	r3, [r7, #14]
 8002384:	e019      	b.n	80023ba <UART2_SendBuffer_IT+0x7a>
        g_uart2_tx_buffer[g_uart2_tx_buffer_tail] = buffer[i];
 8002386:	89fb      	ldrh	r3, [r7, #14]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	4a1e      	ldr	r2, [pc, #120]	@ (8002408 <UART2_SendBuffer_IT+0xc8>)
 800238e:	8812      	ldrh	r2, [r2, #0]
 8002390:	b292      	uxth	r2, r2
 8002392:	7819      	ldrb	r1, [r3, #0]
 8002394:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <UART2_SendBuffer_IT+0xcc>)
 8002396:	5499      	strb	r1, [r3, r2]
        g_uart2_tx_buffer_tail = (g_uart2_tx_buffer_tail + 1) % UART2_TX_BUFFER_SIZE;
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <UART2_SendBuffer_IT+0xc8>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	425a      	negs	r2, r3
 80023a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023aa:	bf58      	it	pl
 80023ac:	4253      	negpl	r3, r2
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <UART2_SendBuffer_IT+0xc8>)
 80023b2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 80023b4:	89fb      	ldrh	r3, [r7, #14]
 80023b6:	3301      	adds	r3, #1
 80023b8:	81fb      	strh	r3, [r7, #14]
 80023ba:	89fa      	ldrh	r2, [r7, #14]
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d3e1      	bcc.n	8002386 <UART2_SendBuffer_IT+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 80023c2:	b672      	cpsid	i
}
 80023c4:	bf00      	nop
    }
    // đảm bảo critical section
    __disable_irq(); // Critical section
    g_uart2_tx_buffer_count += length;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <UART2_SendBuffer_IT+0xc0>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	4413      	add	r3, r2
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <UART2_SendBuffer_IT+0xc0>)
 80023d4:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_busy = true;
 80023d6:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <UART2_SendBuffer_IT+0xbc>)
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023dc:	b662      	cpsie	i
}
 80023de:	bf00      	nop
    __enable_irq();  // End critical section

    // Kích hoạt ngắt TXE để bắt đầu gửi byte đầu tiên từ ISR
    USART2->CR1 |= USART_CR1_TXEIE;
 80023e0:	4b08      	ldr	r3, [pc, #32]	@ (8002404 <UART2_SendBuffer_IT+0xc4>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4a07      	ldr	r2, [pc, #28]	@ (8002404 <UART2_SendBuffer_IT+0xc4>)
 80023e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ea:	60d3      	str	r3, [r2, #12]

    return true;
 80023ec:	2301      	movs	r3, #1
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	2000036a 	.word	0x2000036a
 8002400:	20000368 	.word	0x20000368
 8002404:	40004400 	.word	0x40004400
 8002408:	20000366 	.word	0x20000366
 800240c:	200002e4 	.word	0x200002e4

08002410 <UART2_ReadByte_FromBuffer>:

bool UART2_IsTxBusy(void) {
    return g_uart2_tx_busy;
}

bool UART2_ReadByte_FromBuffer(uint8_t* data) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
    if (g_uart2_rx_buffer_count == 0) {
 8002418:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <UART2_ReadByte_FromBuffer+0x68>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <UART2_ReadByte_FromBuffer+0x16>
        return false; // Buffer rỗng
 8002422:	2300      	movs	r3, #0
 8002424:	e024      	b.n	8002470 <UART2_ReadByte_FromBuffer+0x60>
    }

    // Vô hiệu hóa chỉ ngắt UART2 thay vì tất cả các ngắt
    NVIC_DisableIRQ(USART2_IRQn);
 8002426:	2026      	movs	r0, #38	@ 0x26
 8002428:	f7ff ff66 	bl	80022f8 <__NVIC_DisableIRQ>
    
    *data = g_uart2_rx_buffer[g_uart2_rx_buffer_head];
 800242c:	4b13      	ldr	r3, [pc, #76]	@ (800247c <UART2_ReadByte_FromBuffer+0x6c>)
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <UART2_ReadByte_FromBuffer+0x70>)
 8002436:	5c9b      	ldrb	r3, [r3, r2]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	701a      	strb	r2, [r3, #0]
    g_uart2_rx_buffer_head = (g_uart2_rx_buffer_head + 1) % UART2_RX_BUFFER_SIZE;
 800243e:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <UART2_ReadByte_FromBuffer+0x6c>)
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	3301      	adds	r3, #1
 8002446:	425a      	negs	r2, r3
 8002448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800244c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002450:	bf58      	it	pl
 8002452:	4253      	negpl	r3, r2
 8002454:	b29a      	uxth	r2, r3
 8002456:	4b09      	ldr	r3, [pc, #36]	@ (800247c <UART2_ReadByte_FromBuffer+0x6c>)
 8002458:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_count--;
 800245a:	4b07      	ldr	r3, [pc, #28]	@ (8002478 <UART2_ReadByte_FromBuffer+0x68>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	4b04      	ldr	r3, [pc, #16]	@ (8002478 <UART2_ReadByte_FromBuffer+0x68>)
 8002466:	801a      	strh	r2, [r3, #0]
    
    // Kích hoạt lại ngắt UART2
    NVIC_EnableIRQ(USART2_IRQn);
 8002468:	2026      	movs	r0, #38	@ 0x26
 800246a:	f7ff ff27 	bl	80022bc <__NVIC_EnableIRQ>

    return true;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200002e0 	.word	0x200002e0
 800247c:	200002dc 	.word	0x200002dc
 8002480:	2000025c 	.word	0x2000025c

08002484 <USART2_IRQHandler>:
    __disable_irq();
    g_uart2_error_flags &= ~flags;
    __enable_irq();
}

void USART2_IRQHandler(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
    uint32_t sr_reg = USART2->SR; // Đọc thanh ghi SR một lần
 800248a:	4b6e      	ldr	r3, [pc, #440]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]

    // --- Xử lý ngắt RXNE (Receive Data Register Not Empty) ---
    if ((sr_reg & USART_SR_RXNE) && (USART2->CR1 & USART_CR1_RXNEIE)) {
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b00      	cmp	r3, #0
 8002498:	d032      	beq.n	8002500 <USART2_IRQHandler+0x7c>
 800249a:	4b6a      	ldr	r3, [pc, #424]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d02c      	beq.n	8002500 <USART2_IRQHandler+0x7c>
        uint8_t received_byte = (uint8_t)(USART2->DR & 0xFFU);
 80024a6:	4b67      	ldr	r3, [pc, #412]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	72fb      	strb	r3, [r7, #11]

        if (g_uart2_rx_buffer_count < UART2_RX_BUFFER_SIZE) {
 80024ac:	4b66      	ldr	r3, [pc, #408]	@ (8002648 <USART2_IRQHandler+0x1c4>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80024b4:	d81c      	bhi.n	80024f0 <USART2_IRQHandler+0x6c>
            g_uart2_rx_buffer[g_uart2_rx_buffer_tail] = received_byte;
 80024b6:	4b65      	ldr	r3, [pc, #404]	@ (800264c <USART2_IRQHandler+0x1c8>)
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	4a64      	ldr	r2, [pc, #400]	@ (8002650 <USART2_IRQHandler+0x1cc>)
 80024c0:	7afb      	ldrb	r3, [r7, #11]
 80024c2:	5453      	strb	r3, [r2, r1]
            g_uart2_rx_buffer_tail = (g_uart2_rx_buffer_tail + 1) % UART2_RX_BUFFER_SIZE;
 80024c4:	4b61      	ldr	r3, [pc, #388]	@ (800264c <USART2_IRQHandler+0x1c8>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3301      	adds	r3, #1
 80024cc:	425a      	negs	r2, r3
 80024ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024d6:	bf58      	it	pl
 80024d8:	4253      	negpl	r3, r2
 80024da:	b29a      	uxth	r2, r3
 80024dc:	4b5b      	ldr	r3, [pc, #364]	@ (800264c <USART2_IRQHandler+0x1c8>)
 80024de:	801a      	strh	r2, [r3, #0]
            g_uart2_rx_buffer_count++;
 80024e0:	4b59      	ldr	r3, [pc, #356]	@ (8002648 <USART2_IRQHandler+0x1c4>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b57      	ldr	r3, [pc, #348]	@ (8002648 <USART2_IRQHandler+0x1c4>)
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e007      	b.n	8002500 <USART2_IRQHandler+0x7c>
        } else {
            // Buffer RX đầy, đánh dấu lỗi bằng cách thêm cờ
            g_uart2_error_flags |= UART_ERROR_BUFFER_FULL;
 80024f0:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <USART2_IRQHandler+0x1d0>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b55      	ldr	r3, [pc, #340]	@ (8002654 <USART2_IRQHandler+0x1d0>)
 80024fe:	701a      	strb	r2, [r3, #0]
        }
        // Cờ RXNE tự xóa khi đọc DR.
    }

    // --- Xử lý ngắt TXE (Transmit Data Register Empty) ---
    if ((sr_reg & USART_SR_TXE) && (USART2->CR1 & USART_CR1_TXEIE)) {
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002506:	2b00      	cmp	r3, #0
 8002508:	d039      	beq.n	800257e <USART2_IRQHandler+0xfa>
 800250a:	4b4e      	ldr	r3, [pc, #312]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002512:	2b00      	cmp	r3, #0
 8002514:	d033      	beq.n	800257e <USART2_IRQHandler+0xfa>
        if (g_uart2_tx_buffer_count > 0) {
 8002516:	4b50      	ldr	r3, [pc, #320]	@ (8002658 <USART2_IRQHandler+0x1d4>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d02e      	beq.n	800257e <USART2_IRQHandler+0xfa>
            USART2->DR = g_uart2_tx_buffer[g_uart2_tx_buffer_head];
 8002520:	4b4e      	ldr	r3, [pc, #312]	@ (800265c <USART2_IRQHandler+0x1d8>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	4b4d      	ldr	r3, [pc, #308]	@ (8002660 <USART2_IRQHandler+0x1dc>)
 800252a:	5c9b      	ldrb	r3, [r3, r2]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b45      	ldr	r3, [pc, #276]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 8002530:	605a      	str	r2, [r3, #4]
            g_uart2_tx_buffer_head = (g_uart2_tx_buffer_head + 1) % UART2_TX_BUFFER_SIZE;
 8002532:	4b4a      	ldr	r3, [pc, #296]	@ (800265c <USART2_IRQHandler+0x1d8>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	3301      	adds	r3, #1
 800253a:	425a      	negs	r2, r3
 800253c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002540:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002544:	bf58      	it	pl
 8002546:	4253      	negpl	r3, r2
 8002548:	b29a      	uxth	r2, r3
 800254a:	4b44      	ldr	r3, [pc, #272]	@ (800265c <USART2_IRQHandler+0x1d8>)
 800254c:	801a      	strh	r2, [r3, #0]
            g_uart2_tx_buffer_count--;
 800254e:	4b42      	ldr	r3, [pc, #264]	@ (8002658 <USART2_IRQHandler+0x1d4>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	4b3f      	ldr	r3, [pc, #252]	@ (8002658 <USART2_IRQHandler+0x1d4>)
 800255a:	801a      	strh	r2, [r3, #0]

            if (g_uart2_tx_buffer_count == 0) {
 800255c:	4b3e      	ldr	r3, [pc, #248]	@ (8002658 <USART2_IRQHandler+0x1d4>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <USART2_IRQHandler+0xfa>
                // Đã gửi hết buffer, tắt ngắt TXE
                USART2->CR1 &= ~USART_CR1_TXEIE;
 8002566:	4b37      	ldr	r3, [pc, #220]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a36      	ldr	r2, [pc, #216]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 800256c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002570:	60d3      	str	r3, [r2, #12]
                // Bật ngắt TC (Transmission Complete) để biết khi nào byte cuối cùng thực sự ra khỏi shift register
                USART2->CR1 |= USART_CR1_TCIE;
 8002572:	4b34      	ldr	r3, [pc, #208]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4a33      	ldr	r2, [pc, #204]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 8002578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800257c:	60d3      	str	r3, [r2, #12]
        }
        // Cờ TXE tự xóa khi ghi vào DR.
    }

    // --- Xử lý ngắt TC (Transmission Complete) ---
    if ((sr_reg & USART_SR_TC) && (USART2->CR1 & USART_CR1_TCIE)) {
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <USART2_IRQHandler+0x13c>
 8002588:	4b2e      	ldr	r3, [pc, #184]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002590:	2b00      	cmp	r3, #0
 8002592:	d015      	beq.n	80025c0 <USART2_IRQHandler+0x13c>
        // Byte cuối cùng đã được gửi hoàn toàn
        USART2->CR1 &= ~USART_CR1_TCIE; // Tắt ngắt TC
 8002594:	4b2b      	ldr	r3, [pc, #172]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a2a      	ldr	r2, [pc, #168]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 800259a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800259e:	60d3      	str	r3, [r2, #12]
        g_uart2_tx_busy = false;      // Đánh dấu  không còn bận gửi
 80025a0:	4b30      	ldr	r3, [pc, #192]	@ (8002664 <USART2_IRQHandler+0x1e0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]

        if (g_uart2_tx_complete_callback != NULL) {
 80025a6:	4b30      	ldr	r3, [pc, #192]	@ (8002668 <USART2_IRQHandler+0x1e4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <USART2_IRQHandler+0x130>
            g_uart2_tx_complete_callback();
 80025ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002668 <USART2_IRQHandler+0x1e4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4798      	blx	r3
        }
        // Cờ TC được xóa bằng cách ghi 0 vào nó (hoặc đọc SR rồi ghi vào DR - nhưng ở đây đã xong TX)
        USART2->SR &= ~USART_SR_TC; // Xóa cờ TC
 80025b4:	4b23      	ldr	r3, [pc, #140]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a22      	ldr	r2, [pc, #136]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 80025ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025be:	6013      	str	r3, [r2, #0]
    }


    // --- Xử lý các cờ lỗi (Overrun, Noise, Framing, Parity) ---
    if (sr_reg & (USART_SR_ORE | USART_SR_NE | USART_SR_FE | USART_SR_PE)) {
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d037      	beq.n	800263a <USART2_IRQHandler+0x1b6>
        // Lưu lại lỗi để ứng dụng có thể kiểm tra
        if (sr_reg & USART_SR_ORE) g_uart2_error_flags |= UART_ERROR_OVERRUN;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <USART2_IRQHandler+0x160>
 80025d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002654 <USART2_IRQHandler+0x1d0>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002654 <USART2_IRQHandler+0x1d0>)
 80025e2:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_NE) g_uart2_error_flags |= UART_ERROR_NOISE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <USART2_IRQHandler+0x17a>
 80025ee:	4b19      	ldr	r3, [pc, #100]	@ (8002654 <USART2_IRQHandler+0x1d0>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b16      	ldr	r3, [pc, #88]	@ (8002654 <USART2_IRQHandler+0x1d0>)
 80025fc:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_FE) g_uart2_error_flags |= UART_ERROR_FRAMING;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <USART2_IRQHandler+0x194>
 8002608:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <USART2_IRQHandler+0x1d0>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b0f      	ldr	r3, [pc, #60]	@ (8002654 <USART2_IRQHandler+0x1d0>)
 8002616:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_PE) g_uart2_error_flags |= UART_ERROR_PARITY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <USART2_IRQHandler+0x1ae>
 8002622:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <USART2_IRQHandler+0x1d0>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <USART2_IRQHandler+0x1d0>)
 8002630:	701a      	strb	r2, [r3, #0]
        
        // Đọc DR để xóa cờ lỗi
        volatile uint32_t temp_dr = USART2->DR;
 8002632:	4b04      	ldr	r3, [pc, #16]	@ (8002644 <USART2_IRQHandler+0x1c0>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	607b      	str	r3, [r7, #4]
        (void)temp_dr; // Tránh warning
 8002638:	687b      	ldr	r3, [r7, #4]
    }
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40004400 	.word	0x40004400
 8002648:	200002e0 	.word	0x200002e0
 800264c:	200002de 	.word	0x200002de
 8002650:	2000025c 	.word	0x2000025c
 8002654:	20000370 	.word	0x20000370
 8002658:	20000368 	.word	0x20000368
 800265c:	20000364 	.word	0x20000364
 8002660:	200002e4 	.word	0x200002e4
 8002664:	2000036a 	.word	0x2000036a
 8002668:	2000036c 	.word	0x2000036c

0800266c <LightService_Init>:
// --- Biến nội bộ lưu trữ thông tin chân GPIO và trạng thái đèn ---
static GPIO_TypeDef* g_light_relay_port = NULL;
static uint16_t      g_light_relay_pin_mask = 0;  // Sẽ là (1U << pin_number)
static bool          g_is_light_on = false;     // Trạng thái hiện tại của đèn

void LightService_Init(GPIO_TypeDef* light_relay_port, uint8_t light_relay_pin_number) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af04      	add	r7, sp, #16
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
    if (light_relay_port == NULL || light_relay_pin_number > 15) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d026      	beq.n	80026cc <LightService_Init+0x60>
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	2b0f      	cmp	r3, #15
 8002682:	d823      	bhi.n	80026cc <LightService_Init+0x60>
        return;
    }

    g_light_relay_port = light_relay_port;
 8002684:	4a13      	ldr	r2, [pc, #76]	@ (80026d4 <LightService_Init+0x68>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
    g_light_relay_pin_mask = (1U << light_relay_pin_number);
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	2201      	movs	r2, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	b29a      	uxth	r2, r3
 8002694:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <LightService_Init+0x6c>)
 8002696:	801a      	strh	r2, [r3, #0]

    // Cấu hình chân GPIO làm output, push-pull, không pull, tốc độ thấp
    // GPIO_ClockCmd sẽ được gọi bên trong GPIO_InitPin
    GPIO_InitPin(g_light_relay_port, g_light_relay_pin_mask,
 8002698:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <LightService_Init+0x68>)
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <LightService_Init+0x6c>)
 800269e:	8819      	ldrh	r1, [r3, #0]
 80026a0:	2300      	movs	r3, #0
 80026a2:	9302      	str	r3, [sp, #8]
 80026a4:	2300      	movs	r3, #0
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	2300      	movs	r3, #0
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	2201      	movs	r2, #1
 80026b0:	f7ff f9b4 	bl	8001a1c <GPIO_InitPin>
                 GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW,
                 GPIO_OTYPE_PUSHPULL, 0); // AF không dùng

    // Đặt trạng thái ban đầu cho relay
    GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_INACTIVE_LEVEL);
 80026b4:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <LightService_Init+0x68>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a07      	ldr	r2, [pc, #28]	@ (80026d8 <LightService_Init+0x6c>)
 80026ba:	8811      	ldrh	r1, [r2, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fa7e 	bl	8001bc0 <GPIO_WritePin>
    g_is_light_on = false;
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <LightService_Init+0x70>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	e000      	b.n	80026ce <LightService_Init+0x62>
        return;
 80026cc:	bf00      	nop
}
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000374 	.word	0x20000374
 80026d8:	20000378 	.word	0x20000378
 80026dc:	2000037a 	.word	0x2000037a

080026e0 <LightService_TurnOn>:

void LightService_TurnOn(void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
    if (g_light_relay_port != NULL) {
 80026e4:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <LightService_TurnOn+0x28>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <LightService_TurnOn+0x22>
        GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_ACTIVE_LEVEL);
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <LightService_TurnOn+0x28>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a06      	ldr	r2, [pc, #24]	@ (800270c <LightService_TurnOn+0x2c>)
 80026f2:	8811      	ldrh	r1, [r2, #0]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fa62 	bl	8001bc0 <GPIO_WritePin>
        g_is_light_on = true;
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <LightService_TurnOn+0x30>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
    }
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000374 	.word	0x20000374
 800270c:	20000378 	.word	0x20000378
 8002710:	2000037a 	.word	0x2000037a

08002714 <LightService_TurnOff>:

void LightService_TurnOff(void) {
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
    if (g_light_relay_port != NULL) {
 8002718:	4b08      	ldr	r3, [pc, #32]	@ (800273c <LightService_TurnOff+0x28>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <LightService_TurnOff+0x22>
        GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_INACTIVE_LEVEL);
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <LightService_TurnOff+0x28>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a06      	ldr	r2, [pc, #24]	@ (8002740 <LightService_TurnOff+0x2c>)
 8002726:	8811      	ldrh	r1, [r2, #0]
 8002728:	2200      	movs	r2, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fa48 	bl	8001bc0 <GPIO_WritePin>
        g_is_light_on = false;
 8002730:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <LightService_TurnOff+0x30>)
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
    }
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000374 	.word	0x20000374
 8002740:	20000378 	.word	0x20000378
 8002744:	2000037a 	.word	0x2000037a

08002748 <LightService_GetState>:

bool LightService_GetState(void) {
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
    return g_is_light_on;
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <LightService_GetState+0x14>)
 800274e:	781b      	ldrb	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	2000037a 	.word	0x2000037a

08002760 <ls_open_exti_handler>:
// Giả định: Công tắc là ACTIVE LOW (khi nhấn thì nối với GND, dùng PULL_UP nội)
// Do đó, khi đọc pin, LOW (0) nghĩa là công tắc được nhấn (active).
#define LIMIT_SWITCH_ACTIVE_LEVEL GPIO_PIN_RESET // 0

// Callback cho công tắc "Cửa Mở Hoàn Toàn"
static void ls_open_exti_handler(uint8_t exti_line) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
    (void)exti_line; // Tránh warning
    LimitSwitch_Internal_t* ls = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN];
 800276a:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <ls_open_exti_handler+0x50>)
 800276c:	60fb      	str	r3, [r7, #12]

    // Đọc trạng thái thô của pin ngay lập tức
    ls->last_raw_pin_state = GPIO_ReadPin(ls->port, (1U << ls->pin_number));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	791b      	ldrb	r3, [r3, #4]
 8002776:	4619      	mov	r1, r3
 8002778:	2301      	movs	r3, #1
 800277a:	408b      	lsls	r3, r1
 800277c:	b29b      	uxth	r3, r3
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f7ff fa08 	bl	8001b96 <GPIO_ReadPin>
 8002786:	4603      	mov	r3, r0
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	731a      	strb	r2, [r3, #12]

    // Nếu đang IDLE (chưa debounce), bắt đầu quá trình debounce
    if (ls->debounce_state == DEBOUNCE_STATE_IDLE) {
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	79db      	ldrb	r3, [r3, #7]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <ls_open_exti_handler+0x46>
        ls->debounce_state = DEBOUNCE_STATE_WAITING;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	71da      	strb	r2, [r3, #7]
        ls->debounce_start_tick = GetTick();
 800279c:	f7ff fd6e 	bl	800227c <GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	609a      	str	r2, [r3, #8]
    }
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000037c 	.word	0x2000037c

080027b4 <ls_closed_exti_handler>:

// Callback cho công tắc "Cửa Đóng Hoàn Toàn"
static void ls_closed_exti_handler(uint8_t exti_line) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
    (void)exti_line;
    LimitSwitch_Internal_t* ls = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED];
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <ls_closed_exti_handler+0x50>)
 80027c0:	60fb      	str	r3, [r7, #12]
    ls->last_raw_pin_state = GPIO_ReadPin(ls->port, (1U << ls->pin_number));
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	791b      	ldrb	r3, [r3, #4]
 80027ca:	4619      	mov	r1, r3
 80027cc:	2301      	movs	r3, #1
 80027ce:	408b      	lsls	r3, r1
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	4619      	mov	r1, r3
 80027d4:	4610      	mov	r0, r2
 80027d6:	f7ff f9de 	bl	8001b96 <GPIO_ReadPin>
 80027da:	4603      	mov	r3, r0
 80027dc:	461a      	mov	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	731a      	strb	r2, [r3, #12]
    if (ls->debounce_state == DEBOUNCE_STATE_IDLE) {
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	79db      	ldrb	r3, [r3, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <ls_closed_exti_handler+0x46>
        ls->debounce_state = DEBOUNCE_STATE_WAITING;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	71da      	strb	r2, [r3, #7]
        ls->debounce_start_tick = GetTick();
 80027f0:	f7ff fd44 	bl	800227c <GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	609a      	str	r2, [r3, #8]
    }
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	2000038c 	.word	0x2000038c

08002808 <LimitSwitchService_Init>:

void LimitSwitchService_Init(GPIO_TypeDef* open_ls_port, uint8_t open_ls_pin_number,
                             GPIO_TypeDef* closed_ls_port, uint8_t closed_ls_pin_number,
                             uint8_t nvic_priority) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	461a      	mov	r2, r3
 8002814:	460b      	mov	r3, r1
 8002816:	72fb      	strb	r3, [r7, #11]
 8002818:	4613      	mov	r3, r2
 800281a:	72bb      	strb	r3, [r7, #10]
    // --- Cấu hình cho Công tắc Cửa Mở ---
    LimitSwitch_Internal_t* ls_open = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN];
 800281c:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <LimitSwitchService_Init+0xfc>)
 800281e:	617b      	str	r3, [r7, #20]
    ls_open->port = open_ls_port;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	601a      	str	r2, [r3, #0]
    ls_open->pin_number = open_ls_pin_number;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	7afa      	ldrb	r2, [r7, #11]
 800282a:	711a      	strb	r2, [r3, #4]
    ls_open->exti_line = open_ls_pin_number; // EXTI line thường trùng pin_number
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	7afa      	ldrb	r2, [r7, #11]
 8002830:	715a      	strb	r2, [r3, #5]
    ls_open->current_stable_state = (GPIO_ReadPin(ls_open->port, (1U << ls_open->pin_number)) == LIMIT_SWITCH_ACTIVE_LEVEL); // Đọc trạng thái ban đầu
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	791b      	ldrb	r3, [r3, #4]
 800283a:	4619      	mov	r1, r3
 800283c:	2301      	movs	r3, #1
 800283e:	408b      	lsls	r3, r1
 8002840:	b29b      	uxth	r3, r3
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f7ff f9a6 	bl	8001b96 <GPIO_ReadPin>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2da      	uxtb	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	719a      	strb	r2, [r3, #6]
    ls_open->debounce_state = DEBOUNCE_STATE_IDLE;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2200      	movs	r2, #0
 800285e:	71da      	strb	r2, [r3, #7]
    ls_open->debounce_start_tick = 0;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
    ls_open->last_raw_pin_state = (ls_open->current_stable_state ? LIMIT_SWITCH_ACTIVE_LEVEL : !LIMIT_SWITCH_ACTIVE_LEVEL);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	799b      	ldrb	r3, [r3, #6]
 800286a:	f083 0301 	eor.w	r3, r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	731a      	strb	r2, [r3, #12]

    // EXTI_InitPin sẽ cấu hình GPIO là input. Chúng ta muốn PULL_UP vì công tắc active LOW.
    // Trigger trên cả hai sườn để bắt đầu debounce khi có bất kỳ thay đổi nào.
    EXTI_InitPin(ls_open->port, ls_open->pin_number, EXTI_TRIGGER_BOTH,
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	7919      	ldrb	r1, [r3, #4]
 800287e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002882:	4a21      	ldr	r2, [pc, #132]	@ (8002908 <LimitSwitchService_Init+0x100>)
 8002884:	9200      	str	r2, [sp, #0]
 8002886:	2203      	movs	r2, #3
 8002888:	f7fe fee2 	bl	8001650 <EXTI_InitPin>
                 nvic_priority, ls_open_exti_handler);


    // --- Cấu hình cho Công tắc Cửa Đóng ---
    LimitSwitch_Internal_t* ls_closed = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED];
 800288c:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <LimitSwitchService_Init+0x104>)
 800288e:	613b      	str	r3, [r7, #16]
    ls_closed->port = closed_ls_port;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]
    ls_closed->pin_number = closed_ls_pin_number;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	7aba      	ldrb	r2, [r7, #10]
 800289a:	711a      	strb	r2, [r3, #4]
    ls_closed->exti_line = closed_ls_pin_number;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	7aba      	ldrb	r2, [r7, #10]
 80028a0:	715a      	strb	r2, [r3, #5]
    ls_closed->current_stable_state = (GPIO_ReadPin(ls_closed->port, (1U << ls_closed->pin_number)) == LIMIT_SWITCH_ACTIVE_LEVEL);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	791b      	ldrb	r3, [r3, #4]
 80028aa:	4619      	mov	r1, r3
 80028ac:	2301      	movs	r3, #1
 80028ae:	408b      	lsls	r3, r1
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f7ff f96e 	bl	8001b96 <GPIO_ReadPin>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	719a      	strb	r2, [r3, #6]
    ls_closed->debounce_state = DEBOUNCE_STATE_IDLE;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	2200      	movs	r2, #0
 80028ce:	71da      	strb	r2, [r3, #7]
    ls_closed->debounce_start_tick = 0;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
    ls_closed->last_raw_pin_state = (ls_closed->current_stable_state ? LIMIT_SWITCH_ACTIVE_LEVEL : !LIMIT_SWITCH_ACTIVE_LEVEL);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	799b      	ldrb	r3, [r3, #6]
 80028da:	f083 0301 	eor.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	731a      	strb	r2, [r3, #12]

    EXTI_InitPin(ls_closed->port, ls_closed->pin_number, EXTI_TRIGGER_BOTH,
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	7919      	ldrb	r1, [r3, #4]
 80028ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028f2:	4a07      	ldr	r2, [pc, #28]	@ (8002910 <LimitSwitchService_Init+0x108>)
 80028f4:	9200      	str	r2, [sp, #0]
 80028f6:	2203      	movs	r2, #3
 80028f8:	f7fe feaa 	bl	8001650 <EXTI_InitPin>
                 nvic_priority, ls_closed_exti_handler);
}
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	2000037c 	.word	0x2000037c
 8002908:	08002761 	.word	0x08002761
 800290c:	2000038c 	.word	0x2000038c
 8002910:	080027b5 	.word	0x080027b5

08002914 <LimitSwitchService_ProcessDebounce>:

void LimitSwitchService_ProcessDebounce(void) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
    for (int i = 0; i < LIMIT_SWITCH_COUNT; ++i) {
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e032      	b.n	8002986 <LimitSwitchService_ProcessDebounce+0x72>
        LimitSwitch_Internal_t* ls = &g_limit_switches[i];
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	4a1c      	ldr	r2, [pc, #112]	@ (8002998 <LimitSwitchService_ProcessDebounce+0x84>)
 8002926:	4413      	add	r3, r2
 8002928:	60bb      	str	r3, [r7, #8]

        if (ls->debounce_state == DEBOUNCE_STATE_WAITING) {
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	79db      	ldrb	r3, [r3, #7]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d126      	bne.n	8002980 <LimitSwitchService_ProcessDebounce+0x6c>
            if ((GetTick() - ls->debounce_start_tick) >= DEBOUNCE_TIME_MS) {
 8002932:	f7ff fca3 	bl	800227c <GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b31      	cmp	r3, #49	@ 0x31
 8002940:	d91e      	bls.n	8002980 <LimitSwitchService_ProcessDebounce+0x6c>
                // Thời gian debounce đã hết, đọc lại trạng thái pin
                uint8_t current_pin_state = GPIO_ReadPin(ls->port, (1U << ls->pin_number));
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	791b      	ldrb	r3, [r3, #4]
 800294a:	4619      	mov	r1, r3
 800294c:	2301      	movs	r3, #1
 800294e:	408b      	lsls	r3, r1
 8002950:	b29b      	uxth	r3, r3
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f7ff f91e 	bl	8001b96 <GPIO_ReadPin>
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
                // với trạng thái thô cuối cùng được ghi nhận bởi ISR.
                // Điều này giúp xử lý trường hợp pin thay đổi nhiều lần trong thời gian debounce.
                // Chúng ta quan tâm đến trạng thái cuối cùng sau khi hết debounce.
                // Hoặc đơn giản hơn, chỉ cần lấy trạng thái hiện tại sau khi debounce.
                // Cách đơn giản:
                bool new_stable_state = (current_pin_state == LIMIT_SWITCH_ACTIVE_LEVEL);
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	71bb      	strb	r3, [r7, #6]

                if (ls->current_stable_state != new_stable_state) {
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	799b      	ldrb	r3, [r3, #6]
 800296e:	79ba      	ldrb	r2, [r7, #6]
 8002970:	429a      	cmp	r2, r3
 8002972:	d002      	beq.n	800297a <LimitSwitchService_ProcessDebounce+0x66>
                    ls->current_stable_state = new_stable_state;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	79ba      	ldrb	r2, [r7, #6]
 8002978:	719a      	strb	r2, [r3, #6]
                    // TODO: Có thể gọi một callback ở đây để báo cho Application biết
                    // trạng thái công tắc đã thay đổi ổn định.
                    // Ví dụ: if (ls_state_change_callback[i]) ls_state_change_callback[i](ls->current_stable_state);
                }
                ls->debounce_state = DEBOUNCE_STATE_IDLE; // Quay lại chờ ngắt tiếp theo
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2200      	movs	r2, #0
 800297e:	71da      	strb	r2, [r3, #7]
    for (int i = 0; i < LIMIT_SWITCH_COUNT; ++i) {
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3301      	adds	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b01      	cmp	r3, #1
 800298a:	ddc9      	ble.n	8002920 <LimitSwitchService_ProcessDebounce+0xc>
            }
        }
    }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	2000037c 	.word	0x2000037c

0800299c <LimitSwitchService_IsDoorFullyOpen>:

bool LimitSwitchService_IsDoorFullyOpen(void) {
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029a2:	b672      	cpsid	i
}
 80029a4:	bf00      	nop
    // hoặc nếu có đa luồng. Trong trường hợp ProcessDebounce chạy ở main loop,
    // và ISR chỉ set cờ, thì việc đọc trực tiếp có thể ổn.
    // Để an toàn, có thể dùng critical section ngắn.
    bool state;
    __disable_irq(); // critical section
    state = g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN].current_stable_state;
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <LimitSwitchService_IsDoorFullyOpen+0x24>)
 80029a8:	799b      	ldrb	r3, [r3, #6]
 80029aa:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 80029ac:	b662      	cpsie	i
}
 80029ae:	bf00      	nop
    __enable_irq();
    return state;
 80029b0:	79fb      	ldrb	r3, [r7, #7]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	2000037c 	.word	0x2000037c

080029c4 <LimitSwitchService_IsDoorFullyClosed>:

bool LimitSwitchService_IsDoorFullyClosed(void) {
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029ca:	b672      	cpsid	i
}
 80029cc:	bf00      	nop
    bool state;
    __disable_irq();
    state = g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED].current_stable_state;
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <LimitSwitchService_IsDoorFullyClosed+0x24>)
 80029d0:	7d9b      	ldrb	r3, [r3, #22]
 80029d2:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 80029d4:	b662      	cpsie	i
}
 80029d6:	bf00      	nop
    __enable_irq();
    return state;
 80029d8:	79fb      	ldrb	r3, [r7, #7]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	2000037c 	.word	0x2000037c

080029ec <Motor_Init>:
static uint16_t      g_motor_dir1_pin_mask = 0;
static GPIO_TypeDef* g_motor_dir2_port = NULL;
static uint16_t      g_motor_dir2_pin_mask = 0;

void Motor_Init(GPIO_TypeDef* dir_1_port, uint8_t dir_1_pin_number,
                GPIO_TypeDef* dir_2_port, uint8_t dir_2_pin_number) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af04      	add	r7, sp, #16
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	461a      	mov	r2, r3
 80029f8:	460b      	mov	r3, r1
 80029fa:	72fb      	strb	r3, [r7, #11]
 80029fc:	4613      	mov	r3, r2
 80029fe:	72bb      	strb	r3, [r7, #10]
    // Lưu thông tin chân điều khiển hướng
    g_motor_dir1_port = dir_1_port;
 8002a00:	4a21      	ldr	r2, [pc, #132]	@ (8002a88 <Motor_Init+0x9c>)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6013      	str	r3, [r2, #0]
    g_motor_dir1_pin_mask = (1U << dir_1_pin_number);
 8002a06:	7afb      	ldrb	r3, [r7, #11]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	4b1e      	ldr	r3, [pc, #120]	@ (8002a8c <Motor_Init+0xa0>)
 8002a12:	801a      	strh	r2, [r3, #0]
    g_motor_dir2_port = dir_2_port;
 8002a14:	4a1e      	ldr	r2, [pc, #120]	@ (8002a90 <Motor_Init+0xa4>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6013      	str	r3, [r2, #0]
    g_motor_dir2_pin_mask = (1U << dir_2_pin_number);
 8002a1a:	7abb      	ldrb	r3, [r7, #10]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <Motor_Init+0xa8>)
 8002a26:	801a      	strh	r2, [r3, #0]

    // Khởi tạo chân PWM
    PWM_InitChannel(MOTOR_PWM_TIMER, MOTOR_PWM_CHANNEL, MOTOR_PWM_FREQ_HZ,
 8002a28:	2302      	movs	r3, #2
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	2306      	movs	r3, #6
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <Motor_Init+0xac>)
 8002a32:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002a36:	2101      	movs	r1, #1
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7ff f941 	bl	8001cc0 <PWM_InitChannel>
                    MOTOR_PWM_GPIO_PORT, MOTOR_PWM_GPIO_PIN, MOTOR_PWM_AF);
    
    // Khởi tạo các chân điều khiển hướng là output
    GPIO_InitPin(g_motor_dir1_port, g_motor_dir1_pin_mask,
 8002a3e:	4b12      	ldr	r3, [pc, #72]	@ (8002a88 <Motor_Init+0x9c>)
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <Motor_Init+0xa0>)
 8002a44:	8819      	ldrh	r1, [r3, #0]
 8002a46:	2300      	movs	r3, #0
 8002a48:	9302      	str	r3, [sp, #8]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2300      	movs	r3, #0
 8002a54:	2201      	movs	r2, #1
 8002a56:	f7fe ffe1 	bl	8001a1c <GPIO_InitPin>
                 GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW,
                 GPIO_OTYPE_PUSHPULL, 0);
    GPIO_InitPin(g_motor_dir2_port, g_motor_dir2_pin_mask,
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <Motor_Init+0xa4>)
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <Motor_Init+0xa8>)
 8002a60:	8819      	ldrh	r1, [r3, #0]
 8002a62:	2300      	movs	r3, #0
 8002a64:	9302      	str	r3, [sp, #8]
 8002a66:	2300      	movs	r3, #0
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2201      	movs	r2, #1
 8002a72:	f7fe ffd3 	bl	8001a1c <GPIO_InitPin>
                 GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW,
                 GPIO_OTYPE_PUSHPULL, 0);

    Motor_Stop(); // Đặt trạng thái ban đầu là dừng và coast
 8002a76:	f000 f88b 	bl	8002b90 <Motor_Stop>
    PWM_Start(MOTOR_PWM_TIMER);
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f7ff faf0 	bl	8002060 <PWM_Start>
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	2000039c 	.word	0x2000039c
 8002a8c:	200003a0 	.word	0x200003a0
 8002a90:	200003a4 	.word	0x200003a4
 8002a94:	200003a8 	.word	0x200003a8
 8002a98:	40020000 	.word	0x40020000

08002a9c <Motor_SetSpeed>:

void Motor_SetSpeed(float percent) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (percent < 0.0f) percent = 0.0f;
 8002aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	d502      	bpl.n	8002aba <Motor_SetSpeed+0x1e>
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
    if (percent > 100.0f) percent = 100.0f;
 8002aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8002abe:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002ae4 <Motor_SetSpeed+0x48>
 8002ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aca:	dd01      	ble.n	8002ad0 <Motor_SetSpeed+0x34>
 8002acc:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <Motor_SetSpeed+0x4c>)
 8002ace:	607b      	str	r3, [r7, #4]
    PWM_SetDutyCycle(MOTOR_PWM_TIMER, MOTOR_PWM_CHANNEL, percent);
 8002ad0:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f7ff fa3c 	bl	8001f54 <PWM_SetDutyCycle>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	42c80000 	.word	0x42c80000
 8002ae8:	42c80000 	.word	0x42c80000

08002aec <Motor_SetDirection>:

void Motor_SetDirection(MotorDirection_t direction) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
    if (g_motor_dir1_port == NULL || g_motor_dir2_port == NULL) return;
 8002af6:	4b22      	ldr	r3, [pc, #136]	@ (8002b80 <Motor_SetDirection+0x94>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d03c      	beq.n	8002b78 <Motor_SetDirection+0x8c>
 8002afe:	4b21      	ldr	r3, [pc, #132]	@ (8002b84 <Motor_SetDirection+0x98>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d038      	beq.n	8002b78 <Motor_SetDirection+0x8c>

    switch (direction) {
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <Motor_SetDirection+0x26>
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d011      	beq.n	8002b34 <Motor_SetDirection+0x48>
 8002b10:	e021      	b.n	8002b56 <Motor_SetDirection+0x6a>
        case MOTOR_FORWARD:
            GPIO_WritePin(g_motor_dir1_port, g_motor_dir1_pin_mask, GPIO_PIN_SET);
 8002b12:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <Motor_SetDirection+0x94>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1c      	ldr	r2, [pc, #112]	@ (8002b88 <Motor_SetDirection+0x9c>)
 8002b18:	8811      	ldrh	r1, [r2, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff f84f 	bl	8001bc0 <GPIO_WritePin>
            GPIO_WritePin(g_motor_dir2_port, g_motor_dir2_pin_mask, GPIO_PIN_RESET);
 8002b22:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <Motor_SetDirection+0x98>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a19      	ldr	r2, [pc, #100]	@ (8002b8c <Motor_SetDirection+0xa0>)
 8002b28:	8811      	ldrh	r1, [r2, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f847 	bl	8001bc0 <GPIO_WritePin>
            break;
 8002b32:	e022      	b.n	8002b7a <Motor_SetDirection+0x8e>
        case MOTOR_REVERSE:
            GPIO_WritePin(g_motor_dir1_port, g_motor_dir1_pin_mask, GPIO_PIN_RESET);
 8002b34:	4b12      	ldr	r3, [pc, #72]	@ (8002b80 <Motor_SetDirection+0x94>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a13      	ldr	r2, [pc, #76]	@ (8002b88 <Motor_SetDirection+0x9c>)
 8002b3a:	8811      	ldrh	r1, [r2, #0]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f83e 	bl	8001bc0 <GPIO_WritePin>
            GPIO_WritePin(g_motor_dir2_port, g_motor_dir2_pin_mask, GPIO_PIN_SET);
 8002b44:	4b0f      	ldr	r3, [pc, #60]	@ (8002b84 <Motor_SetDirection+0x98>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a10      	ldr	r2, [pc, #64]	@ (8002b8c <Motor_SetDirection+0xa0>)
 8002b4a:	8811      	ldrh	r1, [r2, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f836 	bl	8001bc0 <GPIO_WritePin>
            break;
 8002b54:	e011      	b.n	8002b7a <Motor_SetDirection+0x8e>
        case MOTOR_COAST:
        default:
            GPIO_WritePin(g_motor_dir1_port, g_motor_dir1_pin_mask, GPIO_PIN_RESET);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <Motor_SetDirection+0x94>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b88 <Motor_SetDirection+0x9c>)
 8002b5c:	8811      	ldrh	r1, [r2, #0]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f82d 	bl	8001bc0 <GPIO_WritePin>
            GPIO_WritePin(g_motor_dir2_port, g_motor_dir2_pin_mask, GPIO_PIN_RESET);
 8002b66:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <Motor_SetDirection+0x98>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a08      	ldr	r2, [pc, #32]	@ (8002b8c <Motor_SetDirection+0xa0>)
 8002b6c:	8811      	ldrh	r1, [r2, #0]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff f825 	bl	8001bc0 <GPIO_WritePin>
            break;
 8002b76:	e000      	b.n	8002b7a <Motor_SetDirection+0x8e>
    if (g_motor_dir1_port == NULL || g_motor_dir2_port == NULL) return;
 8002b78:	bf00      	nop
    }
}
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	2000039c 	.word	0x2000039c
 8002b84:	200003a4 	.word	0x200003a4
 8002b88:	200003a0 	.word	0x200003a0
 8002b8c:	200003a8 	.word	0x200003a8

08002b90 <Motor_Stop>:

void Motor_Stop(void) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
    Motor_SetSpeed(0.0f);
 8002b94:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8002ba8 <Motor_Stop+0x18>
 8002b98:	f7ff ff80 	bl	8002a9c <Motor_SetSpeed>
    Motor_SetDirection(MOTOR_COAST); // Đưa về trạng thái coast khi dừng
 8002b9c:	2002      	movs	r0, #2
 8002b9e:	f7ff ffa5 	bl	8002aec <Motor_SetDirection>
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	00000000 	.word	0x00000000

08002bac <pir1_exti_event_handler>:
} PIR_GpioConfig_t;

static PIR_GpioConfig_t g_pir_configs[PIR_SENSOR_COUNT];

// Callback cho PIR 1
static void pir1_exti_event_handler(uint8_t exti_line) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	71fb      	strb	r3, [r7, #7]
    // Giả định HC-SR501: Output HIGH khi phát hiện, LOW khi không.
    // Cấu hình EXTI_TRIGGER_RISING để báo hiệu bắt đầu phát hiện.
    // Và EXTI_TRIGGER_FALLING để báo hiệu kết thúc phát hiện.
    // GPIO_ReadPin trả về 1 (GPIO_PIN_SET) nếu pin đang HIGH.

    if (GPIO_ReadPin(g_pir_configs[PIR_SENSOR_IN].port, (1U << g_pir_configs[PIR_SENSOR_IN].pin_number)) == GPIO_PIN_SET) {
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <pir1_exti_event_handler+0x40>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a0c      	ldr	r2, [pc, #48]	@ (8002bec <pir1_exti_event_handler+0x40>)
 8002bbc:	7912      	ldrb	r2, [r2, #4]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	408a      	lsls	r2, r1
 8002bc4:	b292      	uxth	r2, r2
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe ffe4 	bl	8001b96 <GPIO_ReadPin>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d103      	bne.n	8002bdc <pir1_exti_event_handler+0x30>
        g_pir_motion_detected_state[PIR_SENSOR_IN] = true;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <pir1_exti_event_handler+0x44>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
    } else {
        g_pir_motion_detected_state[PIR_SENSOR_IN] = false;
    }
}
 8002bda:	e002      	b.n	8002be2 <pir1_exti_event_handler+0x36>
        g_pir_motion_detected_state[PIR_SENSOR_IN] = false;
 8002bdc:	4b04      	ldr	r3, [pc, #16]	@ (8002bf0 <pir1_exti_event_handler+0x44>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200003b0 	.word	0x200003b0
 8002bf0:	200003ac 	.word	0x200003ac

08002bf4 <pir2_exti_event_handler>:

// Callback cho PIR 2
static void pir2_exti_event_handler(uint8_t exti_line) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
    if (GPIO_ReadPin(g_pir_configs[PIR_SENSOR_OUT].port, (1U << g_pir_configs[PIR_SENSOR_OUT].pin_number)) == GPIO_PIN_SET) {
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <pir2_exti_event_handler+0x40>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4a0c      	ldr	r2, [pc, #48]	@ (8002c34 <pir2_exti_event_handler+0x40>)
 8002c04:	7b12      	ldrb	r2, [r2, #12]
 8002c06:	4611      	mov	r1, r2
 8002c08:	2201      	movs	r2, #1
 8002c0a:	408a      	lsls	r2, r1
 8002c0c:	b292      	uxth	r2, r2
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe ffc0 	bl	8001b96 <GPIO_ReadPin>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d103      	bne.n	8002c24 <pir2_exti_event_handler+0x30>
        g_pir_motion_detected_state[PIR_SENSOR_OUT] = true;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <pir2_exti_event_handler+0x44>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	705a      	strb	r2, [r3, #1]
    } else {
        g_pir_motion_detected_state[PIR_SENSOR_OUT] = false;
    }
}
 8002c22:	e002      	b.n	8002c2a <pir2_exti_event_handler+0x36>
        g_pir_motion_detected_state[PIR_SENSOR_OUT] = false;
 8002c24:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <pir2_exti_event_handler+0x44>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	705a      	strb	r2, [r3, #1]
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200003b0 	.word	0x200003b0
 8002c38:	200003ac 	.word	0x200003ac

08002c3c <PIRService_Init>:

void PIRService_Init(GPIO_TypeDef* pir_in_port, uint8_t pir_in_pin_number,
                     GPIO_TypeDef* pir_out_port, uint8_t pir_out_pin_number,
                     uint8_t nvic_priority) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	461a      	mov	r2, r3
 8002c48:	460b      	mov	r3, r1
 8002c4a:	72fb      	strb	r3, [r7, #11]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	72bb      	strb	r3, [r7, #10]
    // Lưu cấu hình chân
    g_pir_configs[PIR_SENSOR_IN].port = pir_in_port;
 8002c50:	4a17      	ldr	r2, [pc, #92]	@ (8002cb0 <PIRService_Init+0x74>)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6013      	str	r3, [r2, #0]
    g_pir_configs[PIR_SENSOR_IN].pin_number = pir_in_pin_number;
 8002c56:	4a16      	ldr	r2, [pc, #88]	@ (8002cb0 <PIRService_Init+0x74>)
 8002c58:	7afb      	ldrb	r3, [r7, #11]
 8002c5a:	7113      	strb	r3, [r2, #4]
    g_pir_configs[PIR_SENSOR_IN].exti_line = pir_in_pin_number; // EXTI line thường trùng pin_number
 8002c5c:	4a14      	ldr	r2, [pc, #80]	@ (8002cb0 <PIRService_Init+0x74>)
 8002c5e:	7afb      	ldrb	r3, [r7, #11]
 8002c60:	7153      	strb	r3, [r2, #5]

    g_pir_configs[PIR_SENSOR_OUT].port = pir_out_port;
 8002c62:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <PIRService_Init+0x74>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6093      	str	r3, [r2, #8]
    g_pir_configs[PIR_SENSOR_OUT].pin_number = pir_out_pin_number;
 8002c68:	4a11      	ldr	r2, [pc, #68]	@ (8002cb0 <PIRService_Init+0x74>)
 8002c6a:	7abb      	ldrb	r3, [r7, #10]
 8002c6c:	7313      	strb	r3, [r2, #12]
    g_pir_configs[PIR_SENSOR_OUT].exti_line = pir_out_pin_number;
 8002c6e:	4a10      	ldr	r2, [pc, #64]	@ (8002cb0 <PIRService_Init+0x74>)
 8002c70:	7abb      	ldrb	r3, [r7, #10]
 8002c72:	7353      	strb	r3, [r2, #13]

    // Reset trạng thái ban đầu
    g_pir_motion_detected_state[PIR_SENSOR_IN] = false;
 8002c74:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <PIRService_Init+0x78>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
    g_pir_motion_detected_state[PIR_SENSOR_OUT] = false;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb4 <PIRService_Init+0x78>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	705a      	strb	r2, [r3, #1]

    // Chân GPIO sẽ được EXTI_InitPin cấu hình là input (pull-up là lựa chọn an toàn).
    EXTI_InitPin(g_pir_configs[PIR_SENSOR_IN].port,
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <PIRService_Init+0x74>)
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <PIRService_Init+0x74>)
 8002c86:	7919      	ldrb	r1, [r3, #4]
 8002c88:	7e3b      	ldrb	r3, [r7, #24]
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb8 <PIRService_Init+0x7c>)
 8002c8c:	9200      	str	r2, [sp, #0]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	f7fe fcde 	bl	8001650 <EXTI_InitPin>
                 EXTI_TRIGGER_BOTH, // <<<< Sườn lên và xuống
                 nvic_priority,
                 pir1_exti_event_handler);

    // Khởi tạo EXTI cho PIR2
    EXTI_InitPin(g_pir_configs[PIR_SENSOR_OUT].port,
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <PIRService_Init+0x74>)
 8002c96:	6898      	ldr	r0, [r3, #8]
 8002c98:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <PIRService_Init+0x74>)
 8002c9a:	7b19      	ldrb	r1, [r3, #12]
 8002c9c:	7e3b      	ldrb	r3, [r7, #24]
 8002c9e:	4a07      	ldr	r2, [pc, #28]	@ (8002cbc <PIRService_Init+0x80>)
 8002ca0:	9200      	str	r2, [sp, #0]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	f7fe fcd4 	bl	8001650 <EXTI_InitPin>
                 g_pir_configs[PIR_SENSOR_OUT].pin_number,
                 EXTI_TRIGGER_BOTH, // <<<< Sườn lên và xuống
                 nvic_priority,     // Có thể dùng cùng priority hoặc khác
                 pir2_exti_event_handler);
}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200003b0 	.word	0x200003b0
 8002cb4:	200003ac 	.word	0x200003ac
 8002cb8:	08002bad 	.word	0x08002bad
 8002cbc:	08002bf5 	.word	0x08002bf5

08002cc0 <PIRService_IsMotionDetected>:

bool PIRService_IsMotionDetected(PIR_SensorID_t sensor_id) {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
    if (sensor_id < PIR_SENSOR_COUNT) {
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d804      	bhi.n	8002cda <PIRService_IsMotionDetected+0x1a>
        return g_pir_motion_detected_state[sensor_id];
 8002cd0:	79fb      	ldrb	r3, [r7, #7]
 8002cd2:	4a05      	ldr	r2, [pc, #20]	@ (8002ce8 <PIRService_IsMotionDetected+0x28>)
 8002cd4:	5cd3      	ldrb	r3, [r2, r3]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	e000      	b.n	8002cdc <PIRService_IsMotionDetected+0x1c>
    }
    return false; // ID không hợp lệ
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	200003ac 	.word	0x200003ac

08002cec <UARTProto_Init>:
// Forward declarations of static helper functions
static void reset_rx_parser(void);
static void process_received_frame_logic(void);
static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length);

void UARTProto_Init(uart_command_handler_callback_t command_callback) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
    g_app_command_callback = command_callback;
 8002cf4:	4a04      	ldr	r2, [pc, #16]	@ (8002d08 <UARTProto_Init+0x1c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6013      	str	r3, [r2, #0]
    reset_rx_parser();
 8002cfa:	f000 f87d 	bl	8002df8 <reset_rx_parser>
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200003d8 	.word	0x200003d8

08002d0c <actually_send_frame>:

static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	603a      	str	r2, [r7, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	71bb      	strb	r3, [r7, #6]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	717b      	strb	r3, [r7, #5]
    // This check is redundant if UARTProto_SendFrame also checks, but harmless.
    if (length > MAX_PAYLOAD_LENGTH) {
 8002d22:	797b      	ldrb	r3, [r7, #5]
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d901      	bls.n	8002d2c <actually_send_frame+0x20>
        return false;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e045      	b.n	8002db8 <actually_send_frame+0xac>
    }

    uint8_t frame_buffer[MAX_FRAME_LENGTH];
    uint8_t frame_idx = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	75fb      	strb	r3, [r7, #23]

    frame_buffer[frame_idx++] = FRAME_START_BYTE;
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	75fa      	strb	r2, [r7, #23]
 8002d36:	3318      	adds	r3, #24
 8002d38:	443b      	add	r3, r7
 8002d3a:	227e      	movs	r2, #126	@ 0x7e
 8002d3c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = (uint8_t)type;
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	75fa      	strb	r2, [r7, #23]
 8002d46:	3318      	adds	r3, #24
 8002d48:	443b      	add	r3, r7
 8002d4a:	79fa      	ldrb	r2, [r7, #7]
 8002d4c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = id;
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	75fa      	strb	r2, [r7, #23]
 8002d56:	3318      	adds	r3, #24
 8002d58:	443b      	add	r3, r7
 8002d5a:	79ba      	ldrb	r2, [r7, #6]
 8002d5c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = length;
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	75fa      	strb	r2, [r7, #23]
 8002d66:	3318      	adds	r3, #24
 8002d68:	443b      	add	r3, r7
 8002d6a:	797a      	ldrb	r2, [r7, #5]
 8002d6c:	f803 2c0c 	strb.w	r2, [r3, #-12]

    if (length > 0 && payload != NULL) {
 8002d70:	797b      	ldrb	r3, [r7, #5]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00f      	beq.n	8002d96 <actually_send_frame+0x8a>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00c      	beq.n	8002d96 <actually_send_frame+0x8a>
        memcpy(&frame_buffer[frame_idx], payload, length);
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	f107 020c 	add.w	r2, r7, #12
 8002d82:	4413      	add	r3, r2
 8002d84:	797a      	ldrb	r2, [r7, #5]
 8002d86:	6839      	ldr	r1, [r7, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 f862 	bl	8003e52 <memcpy>
        frame_idx += length;
 8002d8e:	7dfa      	ldrb	r2, [r7, #23]
 8002d90:	797b      	ldrb	r3, [r7, #5]
 8002d92:	4413      	add	r3, r2
 8002d94:	75fb      	strb	r3, [r7, #23]
    }
    frame_buffer[frame_idx++] = FRAME_END_BYTE;
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	75fa      	strb	r2, [r7, #23]
 8002d9c:	3318      	adds	r3, #24
 8002d9e:	443b      	add	r3, r7
 8002da0:	227f      	movs	r2, #127	@ 0x7f
 8002da2:	f803 2c0c 	strb.w	r2, [r3, #-12]

    return UART2_SendBuffer_IT(frame_buffer, frame_idx);
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	f107 030c 	add.w	r3, r7, #12
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fac5 	bl	8002340 <UART2_SendBuffer_IT>
 8002db6:	4603      	mov	r3, r0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <UARTProto_SendFrame>:

bool UARTProto_SendFrame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	603a      	str	r2, [r7, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	71bb      	strb	r3, [r7, #6]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	717b      	strb	r3, [r7, #5]
    if (length > MAX_PAYLOAD_LENGTH) {
 8002dd6:	797b      	ldrb	r3, [r7, #5]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d901      	bls.n	8002de0 <UARTProto_SendFrame+0x20>
        return false; // Payload too long
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e006      	b.n	8002dee <UARTProto_SendFrame+0x2e>
    }
    return actually_send_frame(type, id, payload, length);
 8002de0:	797b      	ldrb	r3, [r7, #5]
 8002de2:	79b9      	ldrb	r1, [r7, #6]
 8002de4:	79f8      	ldrb	r0, [r7, #7]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	f7ff ff90 	bl	8002d0c <actually_send_frame>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <reset_rx_parser>:

static void reset_rx_parser(void) {
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
    g_rx_state = STATE_WAIT_START;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <reset_rx_parser+0x20>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
    g_rx_buffer_idx = 0;
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <reset_rx_parser+0x24>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
    g_expected_payload_len = 0;
 8002e08:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <reset_rx_parser+0x28>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	200003c0 	.word	0x200003c0
 8002e1c:	200003cd 	.word	0x200003cd
 8002e20:	200003d7 	.word	0x200003d7

08002e24 <process_received_frame_logic>:

static void process_received_frame_logic(void) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
    // This function is called when a complete, structurally valid frame
    // of type FRAME_TYPE_LABVIEW_TO_STM has been received.
    // Frame data is in g_current_rx_frame.

    // Only expect to process commands from LabVIEW.
    if (g_current_rx_frame.type != FRAME_TYPE_LABVIEW_TO_STM) {
 8002e28:	4b15      	ldr	r3, [pc, #84]	@ (8002e80 <process_received_frame_logic+0x5c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d120      	bne.n	8002e72 <process_received_frame_logic+0x4e>
        return; 
    }

    switch (g_current_rx_frame.id) {
 8002e30:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <process_received_frame_logic+0x5c>)
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d002      	beq.n	8002e3e <process_received_frame_logic+0x1a>
 8002e38:	2b13      	cmp	r3, #19
 8002e3a:	d00d      	beq.n	8002e58 <process_received_frame_logic+0x34>
            }
            break;

        default:
            // Unknown command ID received from LabVIEW. Silently ignore or log.
            break;
 8002e3c:	e01e      	b.n	8002e7c <process_received_frame_logic+0x58>
            if (g_current_rx_frame.length == 1) {
 8002e3e:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <process_received_frame_logic+0x5c>)
 8002e40:	799b      	ldrb	r3, [r3, #6]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d117      	bne.n	8002e76 <process_received_frame_logic+0x52>
                if (g_app_command_callback != NULL) {
 8002e46:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <process_received_frame_logic+0x60>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d013      	beq.n	8002e76 <process_received_frame_logic+0x52>
                    g_app_command_callback(&g_current_rx_frame);
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <process_received_frame_logic+0x60>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	480b      	ldr	r0, [pc, #44]	@ (8002e80 <process_received_frame_logic+0x5c>)
 8002e54:	4798      	blx	r3
            break;
 8002e56:	e00e      	b.n	8002e76 <process_received_frame_logic+0x52>
            if (g_current_rx_frame.length == 0) {
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <process_received_frame_logic+0x5c>)
 8002e5a:	799b      	ldrb	r3, [r3, #6]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10c      	bne.n	8002e7a <process_received_frame_logic+0x56>
                if (g_app_command_callback != NULL) {
 8002e60:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <process_received_frame_logic+0x60>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <process_received_frame_logic+0x56>
                    g_app_command_callback(&g_current_rx_frame);
 8002e68:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <process_received_frame_logic+0x60>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4804      	ldr	r0, [pc, #16]	@ (8002e80 <process_received_frame_logic+0x5c>)
 8002e6e:	4798      	blx	r3
            break;
 8002e70:	e003      	b.n	8002e7a <process_received_frame_logic+0x56>
        return; 
 8002e72:	bf00      	nop
 8002e74:	e002      	b.n	8002e7c <process_received_frame_logic+0x58>
            break;
 8002e76:	bf00      	nop
 8002e78:	e000      	b.n	8002e7c <process_received_frame_logic+0x58>
            break;
 8002e7a:	bf00      	nop
    }
    // No ACK or NACK is sent.
}
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200003d0 	.word	0x200003d0
 8002e84:	200003d8 	.word	0x200003d8

08002e88 <UARTProto_Process>:

void UARTProto_Process(void) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
    uint8_t byte;
    while (UART2_ReadByte_FromBuffer(&byte)) {
 8002e8e:	e0b8      	b.n	8003002 <UARTProto_Process+0x17a>
        // Prevent buffer overflow if a malformed frame is too long
        if (g_rx_state != STATE_WAIT_START && g_rx_buffer_idx >= MAX_FRAME_LENGTH) {
 8002e90:	4b62      	ldr	r3, [pc, #392]	@ (800301c <UARTProto_Process+0x194>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <UARTProto_Process+0x1c>
 8002e98:	4b61      	ldr	r3, [pc, #388]	@ (8003020 <UARTProto_Process+0x198>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d901      	bls.n	8002ea4 <UARTProto_Process+0x1c>
            reset_rx_parser();
 8002ea0:	f7ff ffaa 	bl	8002df8 <reset_rx_parser>
            // After reset, the current 'byte' might be a START_BYTE
        }

        switch (g_rx_state) {
 8002ea4:	4b5d      	ldr	r3, [pc, #372]	@ (800301c <UARTProto_Process+0x194>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	f200 80a4 	bhi.w	8002ff6 <UARTProto_Process+0x16e>
 8002eae:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb4 <UARTProto_Process+0x2c>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002ecd 	.word	0x08002ecd
 8002eb8:	08002ef1 	.word	0x08002ef1
 8002ebc:	08002f21 	.word	0x08002f21
 8002ec0:	08002f43 	.word	0x08002f43
 8002ec4:	08002f87 	.word	0x08002f87
 8002ec8:	08002fc9 	.word	0x08002fc9
            case STATE_WAIT_START:
                if (byte == FRAME_START_BYTE) {
 8002ecc:	79bb      	ldrb	r3, [r7, #6]
 8002ece:	2b7e      	cmp	r3, #126	@ 0x7e
 8002ed0:	f040 8094 	bne.w	8002ffc <UARTProto_Process+0x174>
                    // g_rx_buffer_idx is 0 due to reset_rx_parser()
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 8002ed4:	4b52      	ldr	r3, [pc, #328]	@ (8003020 <UARTProto_Process+0x198>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	b2d1      	uxtb	r1, r2
 8002edc:	4a50      	ldr	r2, [pc, #320]	@ (8003020 <UARTProto_Process+0x198>)
 8002ede:	7011      	strb	r1, [r2, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	79b9      	ldrb	r1, [r7, #6]
 8002ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8003024 <UARTProto_Process+0x19c>)
 8002ee6:	5499      	strb	r1, [r3, r2]
                    g_rx_state = STATE_WAIT_TYPE;
 8002ee8:	4b4c      	ldr	r3, [pc, #304]	@ (800301c <UARTProto_Process+0x194>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
                }
                break;
 8002eee:	e085      	b.n	8002ffc <UARTProto_Process+0x174>

            case STATE_WAIT_TYPE:
                g_current_rx_frame.type = (FrameType_t)byte;
 8002ef0:	79ba      	ldrb	r2, [r7, #6]
 8002ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8003028 <UARTProto_Process+0x1a0>)
 8002ef4:	701a      	strb	r2, [r3, #0]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8003020 <UARTProto_Process+0x198>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	b2d1      	uxtb	r1, r2
 8002efe:	4a48      	ldr	r2, [pc, #288]	@ (8003020 <UARTProto_Process+0x198>)
 8002f00:	7011      	strb	r1, [r2, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	79b9      	ldrb	r1, [r7, #6]
 8002f06:	4b47      	ldr	r3, [pc, #284]	@ (8003024 <UARTProto_Process+0x19c>)
 8002f08:	5499      	strb	r1, [r3, r2]
                if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 8002f0a:	4b47      	ldr	r3, [pc, #284]	@ (8003028 <UARTProto_Process+0x1a0>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d103      	bne.n	8002f1a <UARTProto_Process+0x92>
                    g_rx_state = STATE_WAIT_ID;
 8002f12:	4b42      	ldr	r3, [pc, #264]	@ (800301c <UARTProto_Process+0x194>)
 8002f14:	2202      	movs	r2, #2
 8002f16:	701a      	strb	r2, [r3, #0]
                } else {
                    // Received an unexpected frame type (e.g., STM_TO_LABVIEW type, or invalid)
                    reset_rx_parser();
                }
                break;
 8002f18:	e073      	b.n	8003002 <UARTProto_Process+0x17a>
                    reset_rx_parser();
 8002f1a:	f7ff ff6d 	bl	8002df8 <reset_rx_parser>
                break;
 8002f1e:	e070      	b.n	8003002 <UARTProto_Process+0x17a>

            case STATE_WAIT_ID:
                g_current_rx_frame.id = byte;
 8002f20:	79ba      	ldrb	r2, [r7, #6]
 8002f22:	4b41      	ldr	r3, [pc, #260]	@ (8003028 <UARTProto_Process+0x1a0>)
 8002f24:	705a      	strb	r2, [r3, #1]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 8002f26:	4b3e      	ldr	r3, [pc, #248]	@ (8003020 <UARTProto_Process+0x198>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	b2d1      	uxtb	r1, r2
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8003020 <UARTProto_Process+0x198>)
 8002f30:	7011      	strb	r1, [r2, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	79b9      	ldrb	r1, [r7, #6]
 8002f36:	4b3b      	ldr	r3, [pc, #236]	@ (8003024 <UARTProto_Process+0x19c>)
 8002f38:	5499      	strb	r1, [r3, r2]
                g_rx_state = STATE_WAIT_LENGTH;
 8002f3a:	4b38      	ldr	r3, [pc, #224]	@ (800301c <UARTProto_Process+0x194>)
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	701a      	strb	r2, [r3, #0]
                break;
 8002f40:	e05f      	b.n	8003002 <UARTProto_Process+0x17a>

            case STATE_WAIT_LENGTH:
                if (byte > MAX_PAYLOAD_LENGTH) {
 8002f42:	79bb      	ldrb	r3, [r7, #6]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d902      	bls.n	8002f4e <UARTProto_Process+0xc6>
                    reset_rx_parser(); // Error: payload length field is too large
 8002f48:	f7ff ff56 	bl	8002df8 <reset_rx_parser>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
                    } else {
                        g_rx_state = STATE_WAIT_PAYLOAD;
                    }
                }
                break;
 8002f4c:	e059      	b.n	8003002 <UARTProto_Process+0x17a>
                    g_current_rx_frame.length = byte;
 8002f4e:	79ba      	ldrb	r2, [r7, #6]
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <UARTProto_Process+0x1a0>)
 8002f52:	719a      	strb	r2, [r3, #6]
                    g_expected_payload_len = byte;
 8002f54:	79ba      	ldrb	r2, [r7, #6]
 8002f56:	4b35      	ldr	r3, [pc, #212]	@ (800302c <UARTProto_Process+0x1a4>)
 8002f58:	701a      	strb	r2, [r3, #0]
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 8002f5a:	4b31      	ldr	r3, [pc, #196]	@ (8003020 <UARTProto_Process+0x198>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	b2d1      	uxtb	r1, r2
 8002f62:	4a2f      	ldr	r2, [pc, #188]	@ (8003020 <UARTProto_Process+0x198>)
 8002f64:	7011      	strb	r1, [r2, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	79b9      	ldrb	r1, [r7, #6]
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003024 <UARTProto_Process+0x19c>)
 8002f6c:	5499      	strb	r1, [r3, r2]
                    if (g_expected_payload_len == 0) {
 8002f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800302c <UARTProto_Process+0x1a4>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d103      	bne.n	8002f7e <UARTProto_Process+0xf6>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
 8002f76:	4b29      	ldr	r3, [pc, #164]	@ (800301c <UARTProto_Process+0x194>)
 8002f78:	2205      	movs	r2, #5
 8002f7a:	701a      	strb	r2, [r3, #0]
                break;
 8002f7c:	e041      	b.n	8003002 <UARTProto_Process+0x17a>
                        g_rx_state = STATE_WAIT_PAYLOAD;
 8002f7e:	4b27      	ldr	r3, [pc, #156]	@ (800301c <UARTProto_Process+0x194>)
 8002f80:	2204      	movs	r2, #4
 8002f82:	701a      	strb	r2, [r3, #0]
                break;
 8002f84:	e03d      	b.n	8003002 <UARTProto_Process+0x17a>

            case STATE_WAIT_PAYLOAD:
                // Current payload byte's 0-based index in the payload array.
                // Header (START,TYPE,ID,LENGTH) is 4 bytes.
                // g_rx_buffer_idx is count of bytes in g_rx_buffer *before* adding current 'byte'.
                uint8_t payload_byte_index = g_rx_buffer_idx - 4;
 8002f86:	4b26      	ldr	r3, [pc, #152]	@ (8003020 <UARTProto_Process+0x198>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	3b04      	subs	r3, #4
 8002f8c:	71fb      	strb	r3, [r7, #7]

                // Ensure we don't write past allocated payload buffer, though g_expected_payload_len should protect this.
                if (payload_byte_index < MAX_PAYLOAD_LENGTH) {
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d805      	bhi.n	8002fa0 <UARTProto_Process+0x118>
                     g_current_rx_frame.payload[payload_byte_index] = byte;
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	79b9      	ldrb	r1, [r7, #6]
 8002f98:	4a23      	ldr	r2, [pc, #140]	@ (8003028 <UARTProto_Process+0x1a0>)
 8002f9a:	4413      	add	r3, r2
 8002f9c:	460a      	mov	r2, r1
 8002f9e:	709a      	strb	r2, [r3, #2]
                }
                g_rx_buffer[g_rx_buffer_idx++] = byte; // Store current payload byte in raw buffer
 8002fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8003020 <UARTProto_Process+0x198>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	b2d1      	uxtb	r1, r2
 8002fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8003020 <UARTProto_Process+0x198>)
 8002faa:	7011      	strb	r1, [r2, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	79b9      	ldrb	r1, [r7, #6]
 8002fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003024 <UARTProto_Process+0x19c>)
 8002fb2:	5499      	strb	r1, [r3, r2]

                if ((payload_byte_index + 1) >= g_expected_payload_len) {
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800302c <UARTProto_Process+0x1a4>)
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	db1f      	blt.n	8003000 <UARTProto_Process+0x178>
                    g_rx_state = STATE_WAIT_END; // All expected payload bytes received
 8002fc0:	4b16      	ldr	r3, [pc, #88]	@ (800301c <UARTProto_Process+0x194>)
 8002fc2:	2205      	movs	r2, #5
 8002fc4:	701a      	strb	r2, [r3, #0]
                }
                break;
 8002fc6:	e01b      	b.n	8003000 <UARTProto_Process+0x178>

            case STATE_WAIT_END:
                if (byte == FRAME_END_BYTE) {
 8002fc8:	79bb      	ldrb	r3, [r7, #6]
 8002fca:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fcc:	d110      	bne.n	8002ff0 <UARTProto_Process+0x168>
                    // Frame is structurally complete.
                    // g_rx_buffer_idx is count of (START,TYPE,ID,LENGTH,PAYLOAD bytes).
                    // Expected count = 4 + g_current_rx_frame.length.
                    if (g_rx_buffer_idx == (4 + g_current_rx_frame.length)) {
 8002fce:	4b14      	ldr	r3, [pc, #80]	@ (8003020 <UARTProto_Process+0x198>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <UARTProto_Process+0x1a0>)
 8002fd6:	799b      	ldrb	r3, [r3, #6]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d106      	bne.n	8002fec <UARTProto_Process+0x164>
                        // Only process if it's a command from LabVIEW (already checked at TYPE stage)
                        if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 8002fde:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <UARTProto_Process+0x1a0>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d104      	bne.n	8002ff0 <UARTProto_Process+0x168>
                            process_received_frame_logic();
 8002fe6:	f7ff ff1d 	bl	8002e24 <process_received_frame_logic>
 8002fea:	e001      	b.n	8002ff0 <UARTProto_Process+0x168>
                        }
                    } else {
                        // Error: Frame length mismatch. Reset parser.
                        reset_rx_parser();
 8002fec:	f7ff ff04 	bl	8002df8 <reset_rx_parser>
                    }
                } else {
                    // Error: Expected FRAME_END_BYTE but received something else.
                }
                reset_rx_parser(); // Always reset for the next frame, regardless of END byte correctness.
 8002ff0:	f7ff ff02 	bl	8002df8 <reset_rx_parser>
                break;
 8002ff4:	e005      	b.n	8003002 <UARTProto_Process+0x17a>

            default: 
                reset_rx_parser();
 8002ff6:	f7ff feff 	bl	8002df8 <reset_rx_parser>
                break;
 8002ffa:	e002      	b.n	8003002 <UARTProto_Process+0x17a>
                break;
 8002ffc:	bf00      	nop
 8002ffe:	e000      	b.n	8003002 <UARTProto_Process+0x17a>
                break;
 8003000:	bf00      	nop
    while (UART2_ReadByte_FromBuffer(&byte)) {
 8003002:	1dbb      	adds	r3, r7, #6
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fa03 	bl	8002410 <UART2_ReadByte_FromBuffer>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	f47f af3f 	bne.w	8002e90 <UARTProto_Process+0x8>
        }
    }
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200003c0 	.word	0x200003c0
 8003020:	200003cd 	.word	0x200003cd
 8003024:	200003c4 	.word	0x200003c4
 8003028:	200003d0 	.word	0x200003d0
 800302c:	200003d7 	.word	0x200003d7

08003030 <main>:
#include "system_manager.h"       // Module điều phối chính
#include "people_counter.h"
#include "door_fsm.h"
#include "lighting_logic.h"

int main(void) {
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
    // Khởi tạo hệ thống
    SystemClock_Config(); // Cấu hình clock hệ thống (từ rcc_config.c)
 8003034:	f7ff f830 	bl	8002098 <SystemClock_Config>
    SysTick_Init();       // Khởi tạo SysTick cho tick 1ms và Delay_ms()
 8003038:	f7ff f8f2 	bl	8002220 <SysTick_Init>
    SystemManager_Init();
 800303c:	f7fe f9ba 	bl	80013b4 <SystemManager_Init>

    // Vòng lặp chính
    while (1) {
        // Xử lý các module
        SystemManager_Process();
 8003040:	f7fe f9fe 	bl	8001440 <SystemManager_Process>
 8003044:	e7fc      	b.n	8003040 <main+0x10>

08003046 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800304a:	bf00      	nop
 800304c:	e7fd      	b.n	800304a <NMI_Handler+0x4>

0800304e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003052:	bf00      	nop
 8003054:	e7fd      	b.n	8003052 <HardFault_Handler+0x4>

08003056 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800305a:	bf00      	nop
 800305c:	e7fd      	b.n	800305a <MemManage_Handler+0x4>

0800305e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003062:	bf00      	nop
 8003064:	e7fd      	b.n	8003062 <BusFault_Handler+0x4>

08003066 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800306a:	bf00      	nop
 800306c:	e7fd      	b.n	800306a <UsageFault_Handler+0x4>

0800306e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return 1;
 800309c:	2301      	movs	r3, #1
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <_kill>:

int _kill(int pid, int sig)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030b2:	f000 fea1 	bl	8003df8 <__errno>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2216      	movs	r2, #22
 80030ba:	601a      	str	r2, [r3, #0]
  return -1;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <_exit>:

void _exit (int status)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030d0:	f04f 31ff 	mov.w	r1, #4294967295
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff ffe7 	bl	80030a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030da:	bf00      	nop
 80030dc:	e7fd      	b.n	80030da <_exit+0x12>

080030de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e00a      	b.n	8003106 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030f0:	f3af 8000 	nop.w
 80030f4:	4601      	mov	r1, r0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	60ba      	str	r2, [r7, #8]
 80030fc:	b2ca      	uxtb	r2, r1
 80030fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	3301      	adds	r3, #1
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	dbf0      	blt.n	80030f0 <_read+0x12>
  }

  return len;
 800310e:	687b      	ldr	r3, [r7, #4]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	e009      	b.n	800313e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	60ba      	str	r2, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3301      	adds	r3, #1
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	dbf1      	blt.n	800312a <_write+0x12>
  }
  return len;
 8003146:	687b      	ldr	r3, [r7, #4]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <_close>:

int _close(int file)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003178:	605a      	str	r2, [r3, #4]
  return 0;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <_isatty>:

int _isatty(int file)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003190:	2301      	movs	r3, #1
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <_sbrk+0x5c>)
 80031c2:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <_sbrk+0x60>)
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <_sbrk+0x64>)
 80031d6:	4a12      	ldr	r2, [pc, #72]	@ (8003220 <_sbrk+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d207      	bcs.n	80031f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e8:	f000 fe06 	bl	8003df8 <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	220c      	movs	r2, #12
 80031f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	e009      	b.n	800320c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f8:	4b08      	ldr	r3, [pc, #32]	@ (800321c <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031fe:	4b07      	ldr	r3, [pc, #28]	@ (800321c <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	4a05      	ldr	r2, [pc, #20]	@ (800321c <_sbrk+0x64>)
 8003208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20018000 	.word	0x20018000
 8003218:	00000400 	.word	0x00000400
 800321c:	200003dc 	.word	0x200003dc
 8003220:	20000530 	.word	0x20000530

08003224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <SystemInit+0x20>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	4a05      	ldr	r2, [pc, #20]	@ (8003244 <SystemInit+0x20>)
 8003230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003280 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800324c:	f7ff ffea 	bl	8003224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003250:	480c      	ldr	r0, [pc, #48]	@ (8003284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003252:	490d      	ldr	r1, [pc, #52]	@ (8003288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003254:	4a0d      	ldr	r2, [pc, #52]	@ (800328c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003258:	e002      	b.n	8003260 <LoopCopyDataInit>

0800325a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800325a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800325c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325e:	3304      	adds	r3, #4

08003260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003264:	d3f9      	bcc.n	800325a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003266:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003268:	4c0a      	ldr	r4, [pc, #40]	@ (8003294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800326a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800326c:	e001      	b.n	8003272 <LoopFillZerobss>

0800326e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003270:	3204      	adds	r2, #4

08003272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003274:	d3fb      	bcc.n	800326e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003276:	f000 fdc5 	bl	8003e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800327a:	f7ff fed9 	bl	8003030 <main>
  bx  lr    
 800327e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003280:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003288:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 800328c:	08005f30 	.word	0x08005f30
  ldr r2, =_sbss
 8003290:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8003294:	2000052c 	.word	0x2000052c

08003298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003298:	e7fe      	b.n	8003298 <ADC_IRQHandler>

0800329a <__cvt>:
 800329a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800329e:	ec57 6b10 	vmov	r6, r7, d0
 80032a2:	2f00      	cmp	r7, #0
 80032a4:	460c      	mov	r4, r1
 80032a6:	4619      	mov	r1, r3
 80032a8:	463b      	mov	r3, r7
 80032aa:	bfbb      	ittet	lt
 80032ac:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80032b0:	461f      	movlt	r7, r3
 80032b2:	2300      	movge	r3, #0
 80032b4:	232d      	movlt	r3, #45	@ 0x2d
 80032b6:	700b      	strb	r3, [r1, #0]
 80032b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032ba:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80032be:	4691      	mov	r9, r2
 80032c0:	f023 0820 	bic.w	r8, r3, #32
 80032c4:	bfbc      	itt	lt
 80032c6:	4632      	movlt	r2, r6
 80032c8:	4616      	movlt	r6, r2
 80032ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032ce:	d005      	beq.n	80032dc <__cvt+0x42>
 80032d0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80032d4:	d100      	bne.n	80032d8 <__cvt+0x3e>
 80032d6:	3401      	adds	r4, #1
 80032d8:	2102      	movs	r1, #2
 80032da:	e000      	b.n	80032de <__cvt+0x44>
 80032dc:	2103      	movs	r1, #3
 80032de:	ab03      	add	r3, sp, #12
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	ab02      	add	r3, sp, #8
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	ec47 6b10 	vmov	d0, r6, r7
 80032ea:	4653      	mov	r3, sl
 80032ec:	4622      	mov	r2, r4
 80032ee:	f000 fe47 	bl	8003f80 <_dtoa_r>
 80032f2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80032f6:	4605      	mov	r5, r0
 80032f8:	d119      	bne.n	800332e <__cvt+0x94>
 80032fa:	f019 0f01 	tst.w	r9, #1
 80032fe:	d00e      	beq.n	800331e <__cvt+0x84>
 8003300:	eb00 0904 	add.w	r9, r0, r4
 8003304:	2200      	movs	r2, #0
 8003306:	2300      	movs	r3, #0
 8003308:	4630      	mov	r0, r6
 800330a:	4639      	mov	r1, r7
 800330c:	f7fd fbe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8003310:	b108      	cbz	r0, 8003316 <__cvt+0x7c>
 8003312:	f8cd 900c 	str.w	r9, [sp, #12]
 8003316:	2230      	movs	r2, #48	@ 0x30
 8003318:	9b03      	ldr	r3, [sp, #12]
 800331a:	454b      	cmp	r3, r9
 800331c:	d31e      	bcc.n	800335c <__cvt+0xc2>
 800331e:	9b03      	ldr	r3, [sp, #12]
 8003320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003322:	1b5b      	subs	r3, r3, r5
 8003324:	4628      	mov	r0, r5
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	b004      	add	sp, #16
 800332a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003332:	eb00 0904 	add.w	r9, r0, r4
 8003336:	d1e5      	bne.n	8003304 <__cvt+0x6a>
 8003338:	7803      	ldrb	r3, [r0, #0]
 800333a:	2b30      	cmp	r3, #48	@ 0x30
 800333c:	d10a      	bne.n	8003354 <__cvt+0xba>
 800333e:	2200      	movs	r2, #0
 8003340:	2300      	movs	r3, #0
 8003342:	4630      	mov	r0, r6
 8003344:	4639      	mov	r1, r7
 8003346:	f7fd fbc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800334a:	b918      	cbnz	r0, 8003354 <__cvt+0xba>
 800334c:	f1c4 0401 	rsb	r4, r4, #1
 8003350:	f8ca 4000 	str.w	r4, [sl]
 8003354:	f8da 3000 	ldr.w	r3, [sl]
 8003358:	4499      	add	r9, r3
 800335a:	e7d3      	b.n	8003304 <__cvt+0x6a>
 800335c:	1c59      	adds	r1, r3, #1
 800335e:	9103      	str	r1, [sp, #12]
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e7d9      	b.n	8003318 <__cvt+0x7e>

08003364 <__exponent>:
 8003364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003366:	2900      	cmp	r1, #0
 8003368:	bfba      	itte	lt
 800336a:	4249      	neglt	r1, r1
 800336c:	232d      	movlt	r3, #45	@ 0x2d
 800336e:	232b      	movge	r3, #43	@ 0x2b
 8003370:	2909      	cmp	r1, #9
 8003372:	7002      	strb	r2, [r0, #0]
 8003374:	7043      	strb	r3, [r0, #1]
 8003376:	dd29      	ble.n	80033cc <__exponent+0x68>
 8003378:	f10d 0307 	add.w	r3, sp, #7
 800337c:	461d      	mov	r5, r3
 800337e:	270a      	movs	r7, #10
 8003380:	461a      	mov	r2, r3
 8003382:	fbb1 f6f7 	udiv	r6, r1, r7
 8003386:	fb07 1416 	mls	r4, r7, r6, r1
 800338a:	3430      	adds	r4, #48	@ 0x30
 800338c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003390:	460c      	mov	r4, r1
 8003392:	2c63      	cmp	r4, #99	@ 0x63
 8003394:	f103 33ff 	add.w	r3, r3, #4294967295
 8003398:	4631      	mov	r1, r6
 800339a:	dcf1      	bgt.n	8003380 <__exponent+0x1c>
 800339c:	3130      	adds	r1, #48	@ 0x30
 800339e:	1e94      	subs	r4, r2, #2
 80033a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80033a4:	1c41      	adds	r1, r0, #1
 80033a6:	4623      	mov	r3, r4
 80033a8:	42ab      	cmp	r3, r5
 80033aa:	d30a      	bcc.n	80033c2 <__exponent+0x5e>
 80033ac:	f10d 0309 	add.w	r3, sp, #9
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	42ac      	cmp	r4, r5
 80033b4:	bf88      	it	hi
 80033b6:	2300      	movhi	r3, #0
 80033b8:	3302      	adds	r3, #2
 80033ba:	4403      	add	r3, r0
 80033bc:	1a18      	subs	r0, r3, r0
 80033be:	b003      	add	sp, #12
 80033c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80033c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80033ca:	e7ed      	b.n	80033a8 <__exponent+0x44>
 80033cc:	2330      	movs	r3, #48	@ 0x30
 80033ce:	3130      	adds	r1, #48	@ 0x30
 80033d0:	7083      	strb	r3, [r0, #2]
 80033d2:	70c1      	strb	r1, [r0, #3]
 80033d4:	1d03      	adds	r3, r0, #4
 80033d6:	e7f1      	b.n	80033bc <__exponent+0x58>

080033d8 <_printf_float>:
 80033d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033dc:	b08d      	sub	sp, #52	@ 0x34
 80033de:	460c      	mov	r4, r1
 80033e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80033e4:	4616      	mov	r6, r2
 80033e6:	461f      	mov	r7, r3
 80033e8:	4605      	mov	r5, r0
 80033ea:	f000 fcbb 	bl	8003d64 <_localeconv_r>
 80033ee:	6803      	ldr	r3, [r0, #0]
 80033f0:	9304      	str	r3, [sp, #16]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fc ff44 	bl	8000280 <strlen>
 80033f8:	2300      	movs	r3, #0
 80033fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80033fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003400:	9005      	str	r0, [sp, #20]
 8003402:	3307      	adds	r3, #7
 8003404:	f023 0307 	bic.w	r3, r3, #7
 8003408:	f103 0208 	add.w	r2, r3, #8
 800340c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003410:	f8d4 b000 	ldr.w	fp, [r4]
 8003414:	f8c8 2000 	str.w	r2, [r8]
 8003418:	e9d3 8900 	ldrd	r8, r9, [r3]
 800341c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003420:	9307      	str	r3, [sp, #28]
 8003422:	f8cd 8018 	str.w	r8, [sp, #24]
 8003426:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800342a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800342e:	4b9c      	ldr	r3, [pc, #624]	@ (80036a0 <_printf_float+0x2c8>)
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	f7fd fb82 	bl	8000b3c <__aeabi_dcmpun>
 8003438:	bb70      	cbnz	r0, 8003498 <_printf_float+0xc0>
 800343a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800343e:	4b98      	ldr	r3, [pc, #608]	@ (80036a0 <_printf_float+0x2c8>)
 8003440:	f04f 32ff 	mov.w	r2, #4294967295
 8003444:	f7fd fb5c 	bl	8000b00 <__aeabi_dcmple>
 8003448:	bb30      	cbnz	r0, 8003498 <_printf_float+0xc0>
 800344a:	2200      	movs	r2, #0
 800344c:	2300      	movs	r3, #0
 800344e:	4640      	mov	r0, r8
 8003450:	4649      	mov	r1, r9
 8003452:	f7fd fb4b 	bl	8000aec <__aeabi_dcmplt>
 8003456:	b110      	cbz	r0, 800345e <_printf_float+0x86>
 8003458:	232d      	movs	r3, #45	@ 0x2d
 800345a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800345e:	4a91      	ldr	r2, [pc, #580]	@ (80036a4 <_printf_float+0x2cc>)
 8003460:	4b91      	ldr	r3, [pc, #580]	@ (80036a8 <_printf_float+0x2d0>)
 8003462:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003466:	bf94      	ite	ls
 8003468:	4690      	movls	r8, r2
 800346a:	4698      	movhi	r8, r3
 800346c:	2303      	movs	r3, #3
 800346e:	6123      	str	r3, [r4, #16]
 8003470:	f02b 0304 	bic.w	r3, fp, #4
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	f04f 0900 	mov.w	r9, #0
 800347a:	9700      	str	r7, [sp, #0]
 800347c:	4633      	mov	r3, r6
 800347e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003480:	4621      	mov	r1, r4
 8003482:	4628      	mov	r0, r5
 8003484:	f000 f9d2 	bl	800382c <_printf_common>
 8003488:	3001      	adds	r0, #1
 800348a:	f040 808d 	bne.w	80035a8 <_printf_float+0x1d0>
 800348e:	f04f 30ff 	mov.w	r0, #4294967295
 8003492:	b00d      	add	sp, #52	@ 0x34
 8003494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	4640      	mov	r0, r8
 800349e:	4649      	mov	r1, r9
 80034a0:	f7fd fb4c 	bl	8000b3c <__aeabi_dcmpun>
 80034a4:	b140      	cbz	r0, 80034b8 <_printf_float+0xe0>
 80034a6:	464b      	mov	r3, r9
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bfbc      	itt	lt
 80034ac:	232d      	movlt	r3, #45	@ 0x2d
 80034ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80034b2:	4a7e      	ldr	r2, [pc, #504]	@ (80036ac <_printf_float+0x2d4>)
 80034b4:	4b7e      	ldr	r3, [pc, #504]	@ (80036b0 <_printf_float+0x2d8>)
 80034b6:	e7d4      	b.n	8003462 <_printf_float+0x8a>
 80034b8:	6863      	ldr	r3, [r4, #4]
 80034ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80034be:	9206      	str	r2, [sp, #24]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	d13b      	bne.n	800353c <_printf_float+0x164>
 80034c4:	2306      	movs	r3, #6
 80034c6:	6063      	str	r3, [r4, #4]
 80034c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80034cc:	2300      	movs	r3, #0
 80034ce:	6022      	str	r2, [r4, #0]
 80034d0:	9303      	str	r3, [sp, #12]
 80034d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80034d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80034d8:	ab09      	add	r3, sp, #36	@ 0x24
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	6861      	ldr	r1, [r4, #4]
 80034de:	ec49 8b10 	vmov	d0, r8, r9
 80034e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80034e6:	4628      	mov	r0, r5
 80034e8:	f7ff fed7 	bl	800329a <__cvt>
 80034ec:	9b06      	ldr	r3, [sp, #24]
 80034ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80034f0:	2b47      	cmp	r3, #71	@ 0x47
 80034f2:	4680      	mov	r8, r0
 80034f4:	d129      	bne.n	800354a <_printf_float+0x172>
 80034f6:	1cc8      	adds	r0, r1, #3
 80034f8:	db02      	blt.n	8003500 <_printf_float+0x128>
 80034fa:	6863      	ldr	r3, [r4, #4]
 80034fc:	4299      	cmp	r1, r3
 80034fe:	dd41      	ble.n	8003584 <_printf_float+0x1ac>
 8003500:	f1aa 0a02 	sub.w	sl, sl, #2
 8003504:	fa5f fa8a 	uxtb.w	sl, sl
 8003508:	3901      	subs	r1, #1
 800350a:	4652      	mov	r2, sl
 800350c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003510:	9109      	str	r1, [sp, #36]	@ 0x24
 8003512:	f7ff ff27 	bl	8003364 <__exponent>
 8003516:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003518:	1813      	adds	r3, r2, r0
 800351a:	2a01      	cmp	r2, #1
 800351c:	4681      	mov	r9, r0
 800351e:	6123      	str	r3, [r4, #16]
 8003520:	dc02      	bgt.n	8003528 <_printf_float+0x150>
 8003522:	6822      	ldr	r2, [r4, #0]
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	d501      	bpl.n	800352c <_printf_float+0x154>
 8003528:	3301      	adds	r3, #1
 800352a:	6123      	str	r3, [r4, #16]
 800352c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0a2      	beq.n	800347a <_printf_float+0xa2>
 8003534:	232d      	movs	r3, #45	@ 0x2d
 8003536:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800353a:	e79e      	b.n	800347a <_printf_float+0xa2>
 800353c:	9a06      	ldr	r2, [sp, #24]
 800353e:	2a47      	cmp	r2, #71	@ 0x47
 8003540:	d1c2      	bne.n	80034c8 <_printf_float+0xf0>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1c0      	bne.n	80034c8 <_printf_float+0xf0>
 8003546:	2301      	movs	r3, #1
 8003548:	e7bd      	b.n	80034c6 <_printf_float+0xee>
 800354a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800354e:	d9db      	bls.n	8003508 <_printf_float+0x130>
 8003550:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003554:	d118      	bne.n	8003588 <_printf_float+0x1b0>
 8003556:	2900      	cmp	r1, #0
 8003558:	6863      	ldr	r3, [r4, #4]
 800355a:	dd0b      	ble.n	8003574 <_printf_float+0x19c>
 800355c:	6121      	str	r1, [r4, #16]
 800355e:	b913      	cbnz	r3, 8003566 <_printf_float+0x18e>
 8003560:	6822      	ldr	r2, [r4, #0]
 8003562:	07d0      	lsls	r0, r2, #31
 8003564:	d502      	bpl.n	800356c <_printf_float+0x194>
 8003566:	3301      	adds	r3, #1
 8003568:	440b      	add	r3, r1
 800356a:	6123      	str	r3, [r4, #16]
 800356c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800356e:	f04f 0900 	mov.w	r9, #0
 8003572:	e7db      	b.n	800352c <_printf_float+0x154>
 8003574:	b913      	cbnz	r3, 800357c <_printf_float+0x1a4>
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	07d2      	lsls	r2, r2, #31
 800357a:	d501      	bpl.n	8003580 <_printf_float+0x1a8>
 800357c:	3302      	adds	r3, #2
 800357e:	e7f4      	b.n	800356a <_printf_float+0x192>
 8003580:	2301      	movs	r3, #1
 8003582:	e7f2      	b.n	800356a <_printf_float+0x192>
 8003584:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800358a:	4299      	cmp	r1, r3
 800358c:	db05      	blt.n	800359a <_printf_float+0x1c2>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	6121      	str	r1, [r4, #16]
 8003592:	07d8      	lsls	r0, r3, #31
 8003594:	d5ea      	bpl.n	800356c <_printf_float+0x194>
 8003596:	1c4b      	adds	r3, r1, #1
 8003598:	e7e7      	b.n	800356a <_printf_float+0x192>
 800359a:	2900      	cmp	r1, #0
 800359c:	bfd4      	ite	le
 800359e:	f1c1 0202 	rsble	r2, r1, #2
 80035a2:	2201      	movgt	r2, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	e7e0      	b.n	800356a <_printf_float+0x192>
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	055a      	lsls	r2, r3, #21
 80035ac:	d407      	bmi.n	80035be <_printf_float+0x1e6>
 80035ae:	6923      	ldr	r3, [r4, #16]
 80035b0:	4642      	mov	r2, r8
 80035b2:	4631      	mov	r1, r6
 80035b4:	4628      	mov	r0, r5
 80035b6:	47b8      	blx	r7
 80035b8:	3001      	adds	r0, #1
 80035ba:	d12b      	bne.n	8003614 <_printf_float+0x23c>
 80035bc:	e767      	b.n	800348e <_printf_float+0xb6>
 80035be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80035c2:	f240 80dd 	bls.w	8003780 <_printf_float+0x3a8>
 80035c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80035ca:	2200      	movs	r2, #0
 80035cc:	2300      	movs	r3, #0
 80035ce:	f7fd fa83 	bl	8000ad8 <__aeabi_dcmpeq>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d033      	beq.n	800363e <_printf_float+0x266>
 80035d6:	4a37      	ldr	r2, [pc, #220]	@ (80036b4 <_printf_float+0x2dc>)
 80035d8:	2301      	movs	r3, #1
 80035da:	4631      	mov	r1, r6
 80035dc:	4628      	mov	r0, r5
 80035de:	47b8      	blx	r7
 80035e0:	3001      	adds	r0, #1
 80035e2:	f43f af54 	beq.w	800348e <_printf_float+0xb6>
 80035e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80035ea:	4543      	cmp	r3, r8
 80035ec:	db02      	blt.n	80035f4 <_printf_float+0x21c>
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	07d8      	lsls	r0, r3, #31
 80035f2:	d50f      	bpl.n	8003614 <_printf_float+0x23c>
 80035f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035f8:	4631      	mov	r1, r6
 80035fa:	4628      	mov	r0, r5
 80035fc:	47b8      	blx	r7
 80035fe:	3001      	adds	r0, #1
 8003600:	f43f af45 	beq.w	800348e <_printf_float+0xb6>
 8003604:	f04f 0900 	mov.w	r9, #0
 8003608:	f108 38ff 	add.w	r8, r8, #4294967295
 800360c:	f104 0a1a 	add.w	sl, r4, #26
 8003610:	45c8      	cmp	r8, r9
 8003612:	dc09      	bgt.n	8003628 <_printf_float+0x250>
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	079b      	lsls	r3, r3, #30
 8003618:	f100 8103 	bmi.w	8003822 <_printf_float+0x44a>
 800361c:	68e0      	ldr	r0, [r4, #12]
 800361e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003620:	4298      	cmp	r0, r3
 8003622:	bfb8      	it	lt
 8003624:	4618      	movlt	r0, r3
 8003626:	e734      	b.n	8003492 <_printf_float+0xba>
 8003628:	2301      	movs	r3, #1
 800362a:	4652      	mov	r2, sl
 800362c:	4631      	mov	r1, r6
 800362e:	4628      	mov	r0, r5
 8003630:	47b8      	blx	r7
 8003632:	3001      	adds	r0, #1
 8003634:	f43f af2b 	beq.w	800348e <_printf_float+0xb6>
 8003638:	f109 0901 	add.w	r9, r9, #1
 800363c:	e7e8      	b.n	8003610 <_printf_float+0x238>
 800363e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	dc39      	bgt.n	80036b8 <_printf_float+0x2e0>
 8003644:	4a1b      	ldr	r2, [pc, #108]	@ (80036b4 <_printf_float+0x2dc>)
 8003646:	2301      	movs	r3, #1
 8003648:	4631      	mov	r1, r6
 800364a:	4628      	mov	r0, r5
 800364c:	47b8      	blx	r7
 800364e:	3001      	adds	r0, #1
 8003650:	f43f af1d 	beq.w	800348e <_printf_float+0xb6>
 8003654:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003658:	ea59 0303 	orrs.w	r3, r9, r3
 800365c:	d102      	bne.n	8003664 <_printf_float+0x28c>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	07d9      	lsls	r1, r3, #31
 8003662:	d5d7      	bpl.n	8003614 <_printf_float+0x23c>
 8003664:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003668:	4631      	mov	r1, r6
 800366a:	4628      	mov	r0, r5
 800366c:	47b8      	blx	r7
 800366e:	3001      	adds	r0, #1
 8003670:	f43f af0d 	beq.w	800348e <_printf_float+0xb6>
 8003674:	f04f 0a00 	mov.w	sl, #0
 8003678:	f104 0b1a 	add.w	fp, r4, #26
 800367c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800367e:	425b      	negs	r3, r3
 8003680:	4553      	cmp	r3, sl
 8003682:	dc01      	bgt.n	8003688 <_printf_float+0x2b0>
 8003684:	464b      	mov	r3, r9
 8003686:	e793      	b.n	80035b0 <_printf_float+0x1d8>
 8003688:	2301      	movs	r3, #1
 800368a:	465a      	mov	r2, fp
 800368c:	4631      	mov	r1, r6
 800368e:	4628      	mov	r0, r5
 8003690:	47b8      	blx	r7
 8003692:	3001      	adds	r0, #1
 8003694:	f43f aefb 	beq.w	800348e <_printf_float+0xb6>
 8003698:	f10a 0a01 	add.w	sl, sl, #1
 800369c:	e7ee      	b.n	800367c <_printf_float+0x2a4>
 800369e:	bf00      	nop
 80036a0:	7fefffff 	.word	0x7fefffff
 80036a4:	08005bb0 	.word	0x08005bb0
 80036a8:	08005bb4 	.word	0x08005bb4
 80036ac:	08005bb8 	.word	0x08005bb8
 80036b0:	08005bbc 	.word	0x08005bbc
 80036b4:	08005bc0 	.word	0x08005bc0
 80036b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80036be:	4553      	cmp	r3, sl
 80036c0:	bfa8      	it	ge
 80036c2:	4653      	movge	r3, sl
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	4699      	mov	r9, r3
 80036c8:	dc36      	bgt.n	8003738 <_printf_float+0x360>
 80036ca:	f04f 0b00 	mov.w	fp, #0
 80036ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036d2:	f104 021a 	add.w	r2, r4, #26
 80036d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036d8:	9306      	str	r3, [sp, #24]
 80036da:	eba3 0309 	sub.w	r3, r3, r9
 80036de:	455b      	cmp	r3, fp
 80036e0:	dc31      	bgt.n	8003746 <_printf_float+0x36e>
 80036e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036e4:	459a      	cmp	sl, r3
 80036e6:	dc3a      	bgt.n	800375e <_printf_float+0x386>
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	07da      	lsls	r2, r3, #31
 80036ec:	d437      	bmi.n	800375e <_printf_float+0x386>
 80036ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036f0:	ebaa 0903 	sub.w	r9, sl, r3
 80036f4:	9b06      	ldr	r3, [sp, #24]
 80036f6:	ebaa 0303 	sub.w	r3, sl, r3
 80036fa:	4599      	cmp	r9, r3
 80036fc:	bfa8      	it	ge
 80036fe:	4699      	movge	r9, r3
 8003700:	f1b9 0f00 	cmp.w	r9, #0
 8003704:	dc33      	bgt.n	800376e <_printf_float+0x396>
 8003706:	f04f 0800 	mov.w	r8, #0
 800370a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800370e:	f104 0b1a 	add.w	fp, r4, #26
 8003712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003714:	ebaa 0303 	sub.w	r3, sl, r3
 8003718:	eba3 0309 	sub.w	r3, r3, r9
 800371c:	4543      	cmp	r3, r8
 800371e:	f77f af79 	ble.w	8003614 <_printf_float+0x23c>
 8003722:	2301      	movs	r3, #1
 8003724:	465a      	mov	r2, fp
 8003726:	4631      	mov	r1, r6
 8003728:	4628      	mov	r0, r5
 800372a:	47b8      	blx	r7
 800372c:	3001      	adds	r0, #1
 800372e:	f43f aeae 	beq.w	800348e <_printf_float+0xb6>
 8003732:	f108 0801 	add.w	r8, r8, #1
 8003736:	e7ec      	b.n	8003712 <_printf_float+0x33a>
 8003738:	4642      	mov	r2, r8
 800373a:	4631      	mov	r1, r6
 800373c:	4628      	mov	r0, r5
 800373e:	47b8      	blx	r7
 8003740:	3001      	adds	r0, #1
 8003742:	d1c2      	bne.n	80036ca <_printf_float+0x2f2>
 8003744:	e6a3      	b.n	800348e <_printf_float+0xb6>
 8003746:	2301      	movs	r3, #1
 8003748:	4631      	mov	r1, r6
 800374a:	4628      	mov	r0, r5
 800374c:	9206      	str	r2, [sp, #24]
 800374e:	47b8      	blx	r7
 8003750:	3001      	adds	r0, #1
 8003752:	f43f ae9c 	beq.w	800348e <_printf_float+0xb6>
 8003756:	9a06      	ldr	r2, [sp, #24]
 8003758:	f10b 0b01 	add.w	fp, fp, #1
 800375c:	e7bb      	b.n	80036d6 <_printf_float+0x2fe>
 800375e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003762:	4631      	mov	r1, r6
 8003764:	4628      	mov	r0, r5
 8003766:	47b8      	blx	r7
 8003768:	3001      	adds	r0, #1
 800376a:	d1c0      	bne.n	80036ee <_printf_float+0x316>
 800376c:	e68f      	b.n	800348e <_printf_float+0xb6>
 800376e:	9a06      	ldr	r2, [sp, #24]
 8003770:	464b      	mov	r3, r9
 8003772:	4442      	add	r2, r8
 8003774:	4631      	mov	r1, r6
 8003776:	4628      	mov	r0, r5
 8003778:	47b8      	blx	r7
 800377a:	3001      	adds	r0, #1
 800377c:	d1c3      	bne.n	8003706 <_printf_float+0x32e>
 800377e:	e686      	b.n	800348e <_printf_float+0xb6>
 8003780:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003784:	f1ba 0f01 	cmp.w	sl, #1
 8003788:	dc01      	bgt.n	800378e <_printf_float+0x3b6>
 800378a:	07db      	lsls	r3, r3, #31
 800378c:	d536      	bpl.n	80037fc <_printf_float+0x424>
 800378e:	2301      	movs	r3, #1
 8003790:	4642      	mov	r2, r8
 8003792:	4631      	mov	r1, r6
 8003794:	4628      	mov	r0, r5
 8003796:	47b8      	blx	r7
 8003798:	3001      	adds	r0, #1
 800379a:	f43f ae78 	beq.w	800348e <_printf_float+0xb6>
 800379e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037a2:	4631      	mov	r1, r6
 80037a4:	4628      	mov	r0, r5
 80037a6:	47b8      	blx	r7
 80037a8:	3001      	adds	r0, #1
 80037aa:	f43f ae70 	beq.w	800348e <_printf_float+0xb6>
 80037ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80037b2:	2200      	movs	r2, #0
 80037b4:	2300      	movs	r3, #0
 80037b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037ba:	f7fd f98d 	bl	8000ad8 <__aeabi_dcmpeq>
 80037be:	b9c0      	cbnz	r0, 80037f2 <_printf_float+0x41a>
 80037c0:	4653      	mov	r3, sl
 80037c2:	f108 0201 	add.w	r2, r8, #1
 80037c6:	4631      	mov	r1, r6
 80037c8:	4628      	mov	r0, r5
 80037ca:	47b8      	blx	r7
 80037cc:	3001      	adds	r0, #1
 80037ce:	d10c      	bne.n	80037ea <_printf_float+0x412>
 80037d0:	e65d      	b.n	800348e <_printf_float+0xb6>
 80037d2:	2301      	movs	r3, #1
 80037d4:	465a      	mov	r2, fp
 80037d6:	4631      	mov	r1, r6
 80037d8:	4628      	mov	r0, r5
 80037da:	47b8      	blx	r7
 80037dc:	3001      	adds	r0, #1
 80037de:	f43f ae56 	beq.w	800348e <_printf_float+0xb6>
 80037e2:	f108 0801 	add.w	r8, r8, #1
 80037e6:	45d0      	cmp	r8, sl
 80037e8:	dbf3      	blt.n	80037d2 <_printf_float+0x3fa>
 80037ea:	464b      	mov	r3, r9
 80037ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80037f0:	e6df      	b.n	80035b2 <_printf_float+0x1da>
 80037f2:	f04f 0800 	mov.w	r8, #0
 80037f6:	f104 0b1a 	add.w	fp, r4, #26
 80037fa:	e7f4      	b.n	80037e6 <_printf_float+0x40e>
 80037fc:	2301      	movs	r3, #1
 80037fe:	4642      	mov	r2, r8
 8003800:	e7e1      	b.n	80037c6 <_printf_float+0x3ee>
 8003802:	2301      	movs	r3, #1
 8003804:	464a      	mov	r2, r9
 8003806:	4631      	mov	r1, r6
 8003808:	4628      	mov	r0, r5
 800380a:	47b8      	blx	r7
 800380c:	3001      	adds	r0, #1
 800380e:	f43f ae3e 	beq.w	800348e <_printf_float+0xb6>
 8003812:	f108 0801 	add.w	r8, r8, #1
 8003816:	68e3      	ldr	r3, [r4, #12]
 8003818:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800381a:	1a5b      	subs	r3, r3, r1
 800381c:	4543      	cmp	r3, r8
 800381e:	dcf0      	bgt.n	8003802 <_printf_float+0x42a>
 8003820:	e6fc      	b.n	800361c <_printf_float+0x244>
 8003822:	f04f 0800 	mov.w	r8, #0
 8003826:	f104 0919 	add.w	r9, r4, #25
 800382a:	e7f4      	b.n	8003816 <_printf_float+0x43e>

0800382c <_printf_common>:
 800382c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003830:	4616      	mov	r6, r2
 8003832:	4698      	mov	r8, r3
 8003834:	688a      	ldr	r2, [r1, #8]
 8003836:	690b      	ldr	r3, [r1, #16]
 8003838:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800383c:	4293      	cmp	r3, r2
 800383e:	bfb8      	it	lt
 8003840:	4613      	movlt	r3, r2
 8003842:	6033      	str	r3, [r6, #0]
 8003844:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003848:	4607      	mov	r7, r0
 800384a:	460c      	mov	r4, r1
 800384c:	b10a      	cbz	r2, 8003852 <_printf_common+0x26>
 800384e:	3301      	adds	r3, #1
 8003850:	6033      	str	r3, [r6, #0]
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	0699      	lsls	r1, r3, #26
 8003856:	bf42      	ittt	mi
 8003858:	6833      	ldrmi	r3, [r6, #0]
 800385a:	3302      	addmi	r3, #2
 800385c:	6033      	strmi	r3, [r6, #0]
 800385e:	6825      	ldr	r5, [r4, #0]
 8003860:	f015 0506 	ands.w	r5, r5, #6
 8003864:	d106      	bne.n	8003874 <_printf_common+0x48>
 8003866:	f104 0a19 	add.w	sl, r4, #25
 800386a:	68e3      	ldr	r3, [r4, #12]
 800386c:	6832      	ldr	r2, [r6, #0]
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	42ab      	cmp	r3, r5
 8003872:	dc26      	bgt.n	80038c2 <_printf_common+0x96>
 8003874:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003878:	6822      	ldr	r2, [r4, #0]
 800387a:	3b00      	subs	r3, #0
 800387c:	bf18      	it	ne
 800387e:	2301      	movne	r3, #1
 8003880:	0692      	lsls	r2, r2, #26
 8003882:	d42b      	bmi.n	80038dc <_printf_common+0xb0>
 8003884:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003888:	4641      	mov	r1, r8
 800388a:	4638      	mov	r0, r7
 800388c:	47c8      	blx	r9
 800388e:	3001      	adds	r0, #1
 8003890:	d01e      	beq.n	80038d0 <_printf_common+0xa4>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	6922      	ldr	r2, [r4, #16]
 8003896:	f003 0306 	and.w	r3, r3, #6
 800389a:	2b04      	cmp	r3, #4
 800389c:	bf02      	ittt	eq
 800389e:	68e5      	ldreq	r5, [r4, #12]
 80038a0:	6833      	ldreq	r3, [r6, #0]
 80038a2:	1aed      	subeq	r5, r5, r3
 80038a4:	68a3      	ldr	r3, [r4, #8]
 80038a6:	bf0c      	ite	eq
 80038a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038ac:	2500      	movne	r5, #0
 80038ae:	4293      	cmp	r3, r2
 80038b0:	bfc4      	itt	gt
 80038b2:	1a9b      	subgt	r3, r3, r2
 80038b4:	18ed      	addgt	r5, r5, r3
 80038b6:	2600      	movs	r6, #0
 80038b8:	341a      	adds	r4, #26
 80038ba:	42b5      	cmp	r5, r6
 80038bc:	d11a      	bne.n	80038f4 <_printf_common+0xc8>
 80038be:	2000      	movs	r0, #0
 80038c0:	e008      	b.n	80038d4 <_printf_common+0xa8>
 80038c2:	2301      	movs	r3, #1
 80038c4:	4652      	mov	r2, sl
 80038c6:	4641      	mov	r1, r8
 80038c8:	4638      	mov	r0, r7
 80038ca:	47c8      	blx	r9
 80038cc:	3001      	adds	r0, #1
 80038ce:	d103      	bne.n	80038d8 <_printf_common+0xac>
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d8:	3501      	adds	r5, #1
 80038da:	e7c6      	b.n	800386a <_printf_common+0x3e>
 80038dc:	18e1      	adds	r1, r4, r3
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	2030      	movs	r0, #48	@ 0x30
 80038e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038e6:	4422      	add	r2, r4
 80038e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038f0:	3302      	adds	r3, #2
 80038f2:	e7c7      	b.n	8003884 <_printf_common+0x58>
 80038f4:	2301      	movs	r3, #1
 80038f6:	4622      	mov	r2, r4
 80038f8:	4641      	mov	r1, r8
 80038fa:	4638      	mov	r0, r7
 80038fc:	47c8      	blx	r9
 80038fe:	3001      	adds	r0, #1
 8003900:	d0e6      	beq.n	80038d0 <_printf_common+0xa4>
 8003902:	3601      	adds	r6, #1
 8003904:	e7d9      	b.n	80038ba <_printf_common+0x8e>
	...

08003908 <_printf_i>:
 8003908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800390c:	7e0f      	ldrb	r7, [r1, #24]
 800390e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003910:	2f78      	cmp	r7, #120	@ 0x78
 8003912:	4691      	mov	r9, r2
 8003914:	4680      	mov	r8, r0
 8003916:	460c      	mov	r4, r1
 8003918:	469a      	mov	sl, r3
 800391a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800391e:	d807      	bhi.n	8003930 <_printf_i+0x28>
 8003920:	2f62      	cmp	r7, #98	@ 0x62
 8003922:	d80a      	bhi.n	800393a <_printf_i+0x32>
 8003924:	2f00      	cmp	r7, #0
 8003926:	f000 80d2 	beq.w	8003ace <_printf_i+0x1c6>
 800392a:	2f58      	cmp	r7, #88	@ 0x58
 800392c:	f000 80b9 	beq.w	8003aa2 <_printf_i+0x19a>
 8003930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003934:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003938:	e03a      	b.n	80039b0 <_printf_i+0xa8>
 800393a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800393e:	2b15      	cmp	r3, #21
 8003940:	d8f6      	bhi.n	8003930 <_printf_i+0x28>
 8003942:	a101      	add	r1, pc, #4	@ (adr r1, 8003948 <_printf_i+0x40>)
 8003944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003948:	080039a1 	.word	0x080039a1
 800394c:	080039b5 	.word	0x080039b5
 8003950:	08003931 	.word	0x08003931
 8003954:	08003931 	.word	0x08003931
 8003958:	08003931 	.word	0x08003931
 800395c:	08003931 	.word	0x08003931
 8003960:	080039b5 	.word	0x080039b5
 8003964:	08003931 	.word	0x08003931
 8003968:	08003931 	.word	0x08003931
 800396c:	08003931 	.word	0x08003931
 8003970:	08003931 	.word	0x08003931
 8003974:	08003ab5 	.word	0x08003ab5
 8003978:	080039df 	.word	0x080039df
 800397c:	08003a6f 	.word	0x08003a6f
 8003980:	08003931 	.word	0x08003931
 8003984:	08003931 	.word	0x08003931
 8003988:	08003ad7 	.word	0x08003ad7
 800398c:	08003931 	.word	0x08003931
 8003990:	080039df 	.word	0x080039df
 8003994:	08003931 	.word	0x08003931
 8003998:	08003931 	.word	0x08003931
 800399c:	08003a77 	.word	0x08003a77
 80039a0:	6833      	ldr	r3, [r6, #0]
 80039a2:	1d1a      	adds	r2, r3, #4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6032      	str	r2, [r6, #0]
 80039a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039b0:	2301      	movs	r3, #1
 80039b2:	e09d      	b.n	8003af0 <_printf_i+0x1e8>
 80039b4:	6833      	ldr	r3, [r6, #0]
 80039b6:	6820      	ldr	r0, [r4, #0]
 80039b8:	1d19      	adds	r1, r3, #4
 80039ba:	6031      	str	r1, [r6, #0]
 80039bc:	0606      	lsls	r6, r0, #24
 80039be:	d501      	bpl.n	80039c4 <_printf_i+0xbc>
 80039c0:	681d      	ldr	r5, [r3, #0]
 80039c2:	e003      	b.n	80039cc <_printf_i+0xc4>
 80039c4:	0645      	lsls	r5, r0, #25
 80039c6:	d5fb      	bpl.n	80039c0 <_printf_i+0xb8>
 80039c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039cc:	2d00      	cmp	r5, #0
 80039ce:	da03      	bge.n	80039d8 <_printf_i+0xd0>
 80039d0:	232d      	movs	r3, #45	@ 0x2d
 80039d2:	426d      	negs	r5, r5
 80039d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039d8:	4859      	ldr	r0, [pc, #356]	@ (8003b40 <_printf_i+0x238>)
 80039da:	230a      	movs	r3, #10
 80039dc:	e011      	b.n	8003a02 <_printf_i+0xfa>
 80039de:	6821      	ldr	r1, [r4, #0]
 80039e0:	6833      	ldr	r3, [r6, #0]
 80039e2:	0608      	lsls	r0, r1, #24
 80039e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80039e8:	d402      	bmi.n	80039f0 <_printf_i+0xe8>
 80039ea:	0649      	lsls	r1, r1, #25
 80039ec:	bf48      	it	mi
 80039ee:	b2ad      	uxthmi	r5, r5
 80039f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80039f2:	4853      	ldr	r0, [pc, #332]	@ (8003b40 <_printf_i+0x238>)
 80039f4:	6033      	str	r3, [r6, #0]
 80039f6:	bf14      	ite	ne
 80039f8:	230a      	movne	r3, #10
 80039fa:	2308      	moveq	r3, #8
 80039fc:	2100      	movs	r1, #0
 80039fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a02:	6866      	ldr	r6, [r4, #4]
 8003a04:	60a6      	str	r6, [r4, #8]
 8003a06:	2e00      	cmp	r6, #0
 8003a08:	bfa2      	ittt	ge
 8003a0a:	6821      	ldrge	r1, [r4, #0]
 8003a0c:	f021 0104 	bicge.w	r1, r1, #4
 8003a10:	6021      	strge	r1, [r4, #0]
 8003a12:	b90d      	cbnz	r5, 8003a18 <_printf_i+0x110>
 8003a14:	2e00      	cmp	r6, #0
 8003a16:	d04b      	beq.n	8003ab0 <_printf_i+0x1a8>
 8003a18:	4616      	mov	r6, r2
 8003a1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a1e:	fb03 5711 	mls	r7, r3, r1, r5
 8003a22:	5dc7      	ldrb	r7, [r0, r7]
 8003a24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a28:	462f      	mov	r7, r5
 8003a2a:	42bb      	cmp	r3, r7
 8003a2c:	460d      	mov	r5, r1
 8003a2e:	d9f4      	bls.n	8003a1a <_printf_i+0x112>
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d10b      	bne.n	8003a4c <_printf_i+0x144>
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	07df      	lsls	r7, r3, #31
 8003a38:	d508      	bpl.n	8003a4c <_printf_i+0x144>
 8003a3a:	6923      	ldr	r3, [r4, #16]
 8003a3c:	6861      	ldr	r1, [r4, #4]
 8003a3e:	4299      	cmp	r1, r3
 8003a40:	bfde      	ittt	le
 8003a42:	2330      	movle	r3, #48	@ 0x30
 8003a44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a4c:	1b92      	subs	r2, r2, r6
 8003a4e:	6122      	str	r2, [r4, #16]
 8003a50:	f8cd a000 	str.w	sl, [sp]
 8003a54:	464b      	mov	r3, r9
 8003a56:	aa03      	add	r2, sp, #12
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	f7ff fee6 	bl	800382c <_printf_common>
 8003a60:	3001      	adds	r0, #1
 8003a62:	d14a      	bne.n	8003afa <_printf_i+0x1f2>
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	b004      	add	sp, #16
 8003a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	f043 0320 	orr.w	r3, r3, #32
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	4833      	ldr	r0, [pc, #204]	@ (8003b44 <_printf_i+0x23c>)
 8003a78:	2778      	movs	r7, #120	@ 0x78
 8003a7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	6831      	ldr	r1, [r6, #0]
 8003a82:	061f      	lsls	r7, r3, #24
 8003a84:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a88:	d402      	bmi.n	8003a90 <_printf_i+0x188>
 8003a8a:	065f      	lsls	r7, r3, #25
 8003a8c:	bf48      	it	mi
 8003a8e:	b2ad      	uxthmi	r5, r5
 8003a90:	6031      	str	r1, [r6, #0]
 8003a92:	07d9      	lsls	r1, r3, #31
 8003a94:	bf44      	itt	mi
 8003a96:	f043 0320 	orrmi.w	r3, r3, #32
 8003a9a:	6023      	strmi	r3, [r4, #0]
 8003a9c:	b11d      	cbz	r5, 8003aa6 <_printf_i+0x19e>
 8003a9e:	2310      	movs	r3, #16
 8003aa0:	e7ac      	b.n	80039fc <_printf_i+0xf4>
 8003aa2:	4827      	ldr	r0, [pc, #156]	@ (8003b40 <_printf_i+0x238>)
 8003aa4:	e7e9      	b.n	8003a7a <_printf_i+0x172>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	f023 0320 	bic.w	r3, r3, #32
 8003aac:	6023      	str	r3, [r4, #0]
 8003aae:	e7f6      	b.n	8003a9e <_printf_i+0x196>
 8003ab0:	4616      	mov	r6, r2
 8003ab2:	e7bd      	b.n	8003a30 <_printf_i+0x128>
 8003ab4:	6833      	ldr	r3, [r6, #0]
 8003ab6:	6825      	ldr	r5, [r4, #0]
 8003ab8:	6961      	ldr	r1, [r4, #20]
 8003aba:	1d18      	adds	r0, r3, #4
 8003abc:	6030      	str	r0, [r6, #0]
 8003abe:	062e      	lsls	r6, r5, #24
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	d501      	bpl.n	8003ac8 <_printf_i+0x1c0>
 8003ac4:	6019      	str	r1, [r3, #0]
 8003ac6:	e002      	b.n	8003ace <_printf_i+0x1c6>
 8003ac8:	0668      	lsls	r0, r5, #25
 8003aca:	d5fb      	bpl.n	8003ac4 <_printf_i+0x1bc>
 8003acc:	8019      	strh	r1, [r3, #0]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	6123      	str	r3, [r4, #16]
 8003ad2:	4616      	mov	r6, r2
 8003ad4:	e7bc      	b.n	8003a50 <_printf_i+0x148>
 8003ad6:	6833      	ldr	r3, [r6, #0]
 8003ad8:	1d1a      	adds	r2, r3, #4
 8003ada:	6032      	str	r2, [r6, #0]
 8003adc:	681e      	ldr	r6, [r3, #0]
 8003ade:	6862      	ldr	r2, [r4, #4]
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f7fc fb7c 	bl	80001e0 <memchr>
 8003ae8:	b108      	cbz	r0, 8003aee <_printf_i+0x1e6>
 8003aea:	1b80      	subs	r0, r0, r6
 8003aec:	6060      	str	r0, [r4, #4]
 8003aee:	6863      	ldr	r3, [r4, #4]
 8003af0:	6123      	str	r3, [r4, #16]
 8003af2:	2300      	movs	r3, #0
 8003af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003af8:	e7aa      	b.n	8003a50 <_printf_i+0x148>
 8003afa:	6923      	ldr	r3, [r4, #16]
 8003afc:	4632      	mov	r2, r6
 8003afe:	4649      	mov	r1, r9
 8003b00:	4640      	mov	r0, r8
 8003b02:	47d0      	blx	sl
 8003b04:	3001      	adds	r0, #1
 8003b06:	d0ad      	beq.n	8003a64 <_printf_i+0x15c>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	079b      	lsls	r3, r3, #30
 8003b0c:	d413      	bmi.n	8003b36 <_printf_i+0x22e>
 8003b0e:	68e0      	ldr	r0, [r4, #12]
 8003b10:	9b03      	ldr	r3, [sp, #12]
 8003b12:	4298      	cmp	r0, r3
 8003b14:	bfb8      	it	lt
 8003b16:	4618      	movlt	r0, r3
 8003b18:	e7a6      	b.n	8003a68 <_printf_i+0x160>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	4632      	mov	r2, r6
 8003b1e:	4649      	mov	r1, r9
 8003b20:	4640      	mov	r0, r8
 8003b22:	47d0      	blx	sl
 8003b24:	3001      	adds	r0, #1
 8003b26:	d09d      	beq.n	8003a64 <_printf_i+0x15c>
 8003b28:	3501      	adds	r5, #1
 8003b2a:	68e3      	ldr	r3, [r4, #12]
 8003b2c:	9903      	ldr	r1, [sp, #12]
 8003b2e:	1a5b      	subs	r3, r3, r1
 8003b30:	42ab      	cmp	r3, r5
 8003b32:	dcf2      	bgt.n	8003b1a <_printf_i+0x212>
 8003b34:	e7eb      	b.n	8003b0e <_printf_i+0x206>
 8003b36:	2500      	movs	r5, #0
 8003b38:	f104 0619 	add.w	r6, r4, #25
 8003b3c:	e7f5      	b.n	8003b2a <_printf_i+0x222>
 8003b3e:	bf00      	nop
 8003b40:	08005bc2 	.word	0x08005bc2
 8003b44:	08005bd3 	.word	0x08005bd3

08003b48 <std>:
 8003b48:	2300      	movs	r3, #0
 8003b4a:	b510      	push	{r4, lr}
 8003b4c:	4604      	mov	r4, r0
 8003b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b56:	6083      	str	r3, [r0, #8]
 8003b58:	8181      	strh	r1, [r0, #12]
 8003b5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b5c:	81c2      	strh	r2, [r0, #14]
 8003b5e:	6183      	str	r3, [r0, #24]
 8003b60:	4619      	mov	r1, r3
 8003b62:	2208      	movs	r2, #8
 8003b64:	305c      	adds	r0, #92	@ 0x5c
 8003b66:	f000 f8f4 	bl	8003d52 <memset>
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba0 <std+0x58>)
 8003b6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba4 <std+0x5c>)
 8003b70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba8 <std+0x60>)
 8003b74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b76:	4b0d      	ldr	r3, [pc, #52]	@ (8003bac <std+0x64>)
 8003b78:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <std+0x68>)
 8003b7c:	6224      	str	r4, [r4, #32]
 8003b7e:	429c      	cmp	r4, r3
 8003b80:	d006      	beq.n	8003b90 <std+0x48>
 8003b82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b86:	4294      	cmp	r4, r2
 8003b88:	d002      	beq.n	8003b90 <std+0x48>
 8003b8a:	33d0      	adds	r3, #208	@ 0xd0
 8003b8c:	429c      	cmp	r4, r3
 8003b8e:	d105      	bne.n	8003b9c <std+0x54>
 8003b90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b98:	f000 b958 	b.w	8003e4c <__retarget_lock_init_recursive>
 8003b9c:	bd10      	pop	{r4, pc}
 8003b9e:	bf00      	nop
 8003ba0:	08003ccd 	.word	0x08003ccd
 8003ba4:	08003cef 	.word	0x08003cef
 8003ba8:	08003d27 	.word	0x08003d27
 8003bac:	08003d4b 	.word	0x08003d4b
 8003bb0:	200003e0 	.word	0x200003e0

08003bb4 <stdio_exit_handler>:
 8003bb4:	4a02      	ldr	r2, [pc, #8]	@ (8003bc0 <stdio_exit_handler+0xc>)
 8003bb6:	4903      	ldr	r1, [pc, #12]	@ (8003bc4 <stdio_exit_handler+0x10>)
 8003bb8:	4803      	ldr	r0, [pc, #12]	@ (8003bc8 <stdio_exit_handler+0x14>)
 8003bba:	f000 b869 	b.w	8003c90 <_fwalk_sglue>
 8003bbe:	bf00      	nop
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	08005515 	.word	0x08005515
 8003bc8:	20000010 	.word	0x20000010

08003bcc <cleanup_stdio>:
 8003bcc:	6841      	ldr	r1, [r0, #4]
 8003bce:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <cleanup_stdio+0x34>)
 8003bd0:	4299      	cmp	r1, r3
 8003bd2:	b510      	push	{r4, lr}
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	d001      	beq.n	8003bdc <cleanup_stdio+0x10>
 8003bd8:	f001 fc9c 	bl	8005514 <_fflush_r>
 8003bdc:	68a1      	ldr	r1, [r4, #8]
 8003bde:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <cleanup_stdio+0x38>)
 8003be0:	4299      	cmp	r1, r3
 8003be2:	d002      	beq.n	8003bea <cleanup_stdio+0x1e>
 8003be4:	4620      	mov	r0, r4
 8003be6:	f001 fc95 	bl	8005514 <_fflush_r>
 8003bea:	68e1      	ldr	r1, [r4, #12]
 8003bec:	4b06      	ldr	r3, [pc, #24]	@ (8003c08 <cleanup_stdio+0x3c>)
 8003bee:	4299      	cmp	r1, r3
 8003bf0:	d004      	beq.n	8003bfc <cleanup_stdio+0x30>
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf8:	f001 bc8c 	b.w	8005514 <_fflush_r>
 8003bfc:	bd10      	pop	{r4, pc}
 8003bfe:	bf00      	nop
 8003c00:	200003e0 	.word	0x200003e0
 8003c04:	20000448 	.word	0x20000448
 8003c08:	200004b0 	.word	0x200004b0

08003c0c <global_stdio_init.part.0>:
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <global_stdio_init.part.0+0x30>)
 8003c10:	4c0b      	ldr	r4, [pc, #44]	@ (8003c40 <global_stdio_init.part.0+0x34>)
 8003c12:	4a0c      	ldr	r2, [pc, #48]	@ (8003c44 <global_stdio_init.part.0+0x38>)
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	4620      	mov	r0, r4
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2104      	movs	r1, #4
 8003c1c:	f7ff ff94 	bl	8003b48 <std>
 8003c20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003c24:	2201      	movs	r2, #1
 8003c26:	2109      	movs	r1, #9
 8003c28:	f7ff ff8e 	bl	8003b48 <std>
 8003c2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c30:	2202      	movs	r2, #2
 8003c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c36:	2112      	movs	r1, #18
 8003c38:	f7ff bf86 	b.w	8003b48 <std>
 8003c3c:	20000518 	.word	0x20000518
 8003c40:	200003e0 	.word	0x200003e0
 8003c44:	08003bb5 	.word	0x08003bb5

08003c48 <__sfp_lock_acquire>:
 8003c48:	4801      	ldr	r0, [pc, #4]	@ (8003c50 <__sfp_lock_acquire+0x8>)
 8003c4a:	f000 b900 	b.w	8003e4e <__retarget_lock_acquire_recursive>
 8003c4e:	bf00      	nop
 8003c50:	20000521 	.word	0x20000521

08003c54 <__sfp_lock_release>:
 8003c54:	4801      	ldr	r0, [pc, #4]	@ (8003c5c <__sfp_lock_release+0x8>)
 8003c56:	f000 b8fb 	b.w	8003e50 <__retarget_lock_release_recursive>
 8003c5a:	bf00      	nop
 8003c5c:	20000521 	.word	0x20000521

08003c60 <__sinit>:
 8003c60:	b510      	push	{r4, lr}
 8003c62:	4604      	mov	r4, r0
 8003c64:	f7ff fff0 	bl	8003c48 <__sfp_lock_acquire>
 8003c68:	6a23      	ldr	r3, [r4, #32]
 8003c6a:	b11b      	cbz	r3, 8003c74 <__sinit+0x14>
 8003c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c70:	f7ff bff0 	b.w	8003c54 <__sfp_lock_release>
 8003c74:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <__sinit+0x28>)
 8003c76:	6223      	str	r3, [r4, #32]
 8003c78:	4b04      	ldr	r3, [pc, #16]	@ (8003c8c <__sinit+0x2c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f5      	bne.n	8003c6c <__sinit+0xc>
 8003c80:	f7ff ffc4 	bl	8003c0c <global_stdio_init.part.0>
 8003c84:	e7f2      	b.n	8003c6c <__sinit+0xc>
 8003c86:	bf00      	nop
 8003c88:	08003bcd 	.word	0x08003bcd
 8003c8c:	20000518 	.word	0x20000518

08003c90 <_fwalk_sglue>:
 8003c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c94:	4607      	mov	r7, r0
 8003c96:	4688      	mov	r8, r1
 8003c98:	4614      	mov	r4, r2
 8003c9a:	2600      	movs	r6, #0
 8003c9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ca0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ca4:	d505      	bpl.n	8003cb2 <_fwalk_sglue+0x22>
 8003ca6:	6824      	ldr	r4, [r4, #0]
 8003ca8:	2c00      	cmp	r4, #0
 8003caa:	d1f7      	bne.n	8003c9c <_fwalk_sglue+0xc>
 8003cac:	4630      	mov	r0, r6
 8003cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cb2:	89ab      	ldrh	r3, [r5, #12]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d907      	bls.n	8003cc8 <_fwalk_sglue+0x38>
 8003cb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	d003      	beq.n	8003cc8 <_fwalk_sglue+0x38>
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	47c0      	blx	r8
 8003cc6:	4306      	orrs	r6, r0
 8003cc8:	3568      	adds	r5, #104	@ 0x68
 8003cca:	e7e9      	b.n	8003ca0 <_fwalk_sglue+0x10>

08003ccc <__sread>:
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	460c      	mov	r4, r1
 8003cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd4:	f000 f86c 	bl	8003db0 <_read_r>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	bfab      	itete	ge
 8003cdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003cde:	89a3      	ldrhlt	r3, [r4, #12]
 8003ce0:	181b      	addge	r3, r3, r0
 8003ce2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ce6:	bfac      	ite	ge
 8003ce8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003cea:	81a3      	strhlt	r3, [r4, #12]
 8003cec:	bd10      	pop	{r4, pc}

08003cee <__swrite>:
 8003cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf2:	461f      	mov	r7, r3
 8003cf4:	898b      	ldrh	r3, [r1, #12]
 8003cf6:	05db      	lsls	r3, r3, #23
 8003cf8:	4605      	mov	r5, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	4616      	mov	r6, r2
 8003cfe:	d505      	bpl.n	8003d0c <__swrite+0x1e>
 8003d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d04:	2302      	movs	r3, #2
 8003d06:	2200      	movs	r2, #0
 8003d08:	f000 f840 	bl	8003d8c <_lseek_r>
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	4632      	mov	r2, r6
 8003d1a:	463b      	mov	r3, r7
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d22:	f000 b857 	b.w	8003dd4 <_write_r>

08003d26 <__sseek>:
 8003d26:	b510      	push	{r4, lr}
 8003d28:	460c      	mov	r4, r1
 8003d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d2e:	f000 f82d 	bl	8003d8c <_lseek_r>
 8003d32:	1c43      	adds	r3, r0, #1
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	bf15      	itete	ne
 8003d38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d42:	81a3      	strheq	r3, [r4, #12]
 8003d44:	bf18      	it	ne
 8003d46:	81a3      	strhne	r3, [r4, #12]
 8003d48:	bd10      	pop	{r4, pc}

08003d4a <__sclose>:
 8003d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d4e:	f000 b80d 	b.w	8003d6c <_close_r>

08003d52 <memset>:
 8003d52:	4402      	add	r2, r0
 8003d54:	4603      	mov	r3, r0
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d100      	bne.n	8003d5c <memset+0xa>
 8003d5a:	4770      	bx	lr
 8003d5c:	f803 1b01 	strb.w	r1, [r3], #1
 8003d60:	e7f9      	b.n	8003d56 <memset+0x4>
	...

08003d64 <_localeconv_r>:
 8003d64:	4800      	ldr	r0, [pc, #0]	@ (8003d68 <_localeconv_r+0x4>)
 8003d66:	4770      	bx	lr
 8003d68:	2000014c 	.word	0x2000014c

08003d6c <_close_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	4d06      	ldr	r5, [pc, #24]	@ (8003d88 <_close_r+0x1c>)
 8003d70:	2300      	movs	r3, #0
 8003d72:	4604      	mov	r4, r0
 8003d74:	4608      	mov	r0, r1
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	f7ff f9ea 	bl	8003150 <_close>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d102      	bne.n	8003d86 <_close_r+0x1a>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	b103      	cbz	r3, 8003d86 <_close_r+0x1a>
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
 8003d88:	2000051c 	.word	0x2000051c

08003d8c <_lseek_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4d07      	ldr	r5, [pc, #28]	@ (8003dac <_lseek_r+0x20>)
 8003d90:	4604      	mov	r4, r0
 8003d92:	4608      	mov	r0, r1
 8003d94:	4611      	mov	r1, r2
 8003d96:	2200      	movs	r2, #0
 8003d98:	602a      	str	r2, [r5, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f7ff f9ff 	bl	800319e <_lseek>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_lseek_r+0x1e>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_lseek_r+0x1e>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	2000051c 	.word	0x2000051c

08003db0 <_read_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4d07      	ldr	r5, [pc, #28]	@ (8003dd0 <_read_r+0x20>)
 8003db4:	4604      	mov	r4, r0
 8003db6:	4608      	mov	r0, r1
 8003db8:	4611      	mov	r1, r2
 8003dba:	2200      	movs	r2, #0
 8003dbc:	602a      	str	r2, [r5, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f7ff f98d 	bl	80030de <_read>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d102      	bne.n	8003dce <_read_r+0x1e>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	b103      	cbz	r3, 8003dce <_read_r+0x1e>
 8003dcc:	6023      	str	r3, [r4, #0]
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	2000051c 	.word	0x2000051c

08003dd4 <_write_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4d07      	ldr	r5, [pc, #28]	@ (8003df4 <_write_r+0x20>)
 8003dd8:	4604      	mov	r4, r0
 8003dda:	4608      	mov	r0, r1
 8003ddc:	4611      	mov	r1, r2
 8003dde:	2200      	movs	r2, #0
 8003de0:	602a      	str	r2, [r5, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f7ff f998 	bl	8003118 <_write>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d102      	bne.n	8003df2 <_write_r+0x1e>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	b103      	cbz	r3, 8003df2 <_write_r+0x1e>
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	2000051c 	.word	0x2000051c

08003df8 <__errno>:
 8003df8:	4b01      	ldr	r3, [pc, #4]	@ (8003e00 <__errno+0x8>)
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	2000000c 	.word	0x2000000c

08003e04 <__libc_init_array>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4d0d      	ldr	r5, [pc, #52]	@ (8003e3c <__libc_init_array+0x38>)
 8003e08:	4c0d      	ldr	r4, [pc, #52]	@ (8003e40 <__libc_init_array+0x3c>)
 8003e0a:	1b64      	subs	r4, r4, r5
 8003e0c:	10a4      	asrs	r4, r4, #2
 8003e0e:	2600      	movs	r6, #0
 8003e10:	42a6      	cmp	r6, r4
 8003e12:	d109      	bne.n	8003e28 <__libc_init_array+0x24>
 8003e14:	4d0b      	ldr	r5, [pc, #44]	@ (8003e44 <__libc_init_array+0x40>)
 8003e16:	4c0c      	ldr	r4, [pc, #48]	@ (8003e48 <__libc_init_array+0x44>)
 8003e18:	f001 febc 	bl	8005b94 <_init>
 8003e1c:	1b64      	subs	r4, r4, r5
 8003e1e:	10a4      	asrs	r4, r4, #2
 8003e20:	2600      	movs	r6, #0
 8003e22:	42a6      	cmp	r6, r4
 8003e24:	d105      	bne.n	8003e32 <__libc_init_array+0x2e>
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2c:	4798      	blx	r3
 8003e2e:	3601      	adds	r6, #1
 8003e30:	e7ee      	b.n	8003e10 <__libc_init_array+0xc>
 8003e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e36:	4798      	blx	r3
 8003e38:	3601      	adds	r6, #1
 8003e3a:	e7f2      	b.n	8003e22 <__libc_init_array+0x1e>
 8003e3c:	08005f28 	.word	0x08005f28
 8003e40:	08005f28 	.word	0x08005f28
 8003e44:	08005f28 	.word	0x08005f28
 8003e48:	08005f2c 	.word	0x08005f2c

08003e4c <__retarget_lock_init_recursive>:
 8003e4c:	4770      	bx	lr

08003e4e <__retarget_lock_acquire_recursive>:
 8003e4e:	4770      	bx	lr

08003e50 <__retarget_lock_release_recursive>:
 8003e50:	4770      	bx	lr

08003e52 <memcpy>:
 8003e52:	440a      	add	r2, r1
 8003e54:	4291      	cmp	r1, r2
 8003e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e5a:	d100      	bne.n	8003e5e <memcpy+0xc>
 8003e5c:	4770      	bx	lr
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e68:	4291      	cmp	r1, r2
 8003e6a:	d1f9      	bne.n	8003e60 <memcpy+0xe>
 8003e6c:	bd10      	pop	{r4, pc}

08003e6e <quorem>:
 8003e6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e72:	6903      	ldr	r3, [r0, #16]
 8003e74:	690c      	ldr	r4, [r1, #16]
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	4607      	mov	r7, r0
 8003e7a:	db7e      	blt.n	8003f7a <quorem+0x10c>
 8003e7c:	3c01      	subs	r4, #1
 8003e7e:	f101 0814 	add.w	r8, r1, #20
 8003e82:	00a3      	lsls	r3, r4, #2
 8003e84:	f100 0514 	add.w	r5, r0, #20
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003e94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ea0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ea4:	d32e      	bcc.n	8003f04 <quorem+0x96>
 8003ea6:	f04f 0a00 	mov.w	sl, #0
 8003eaa:	46c4      	mov	ip, r8
 8003eac:	46ae      	mov	lr, r5
 8003eae:	46d3      	mov	fp, sl
 8003eb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003eb4:	b298      	uxth	r0, r3
 8003eb6:	fb06 a000 	mla	r0, r6, r0, sl
 8003eba:	0c02      	lsrs	r2, r0, #16
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	fb06 2303 	mla	r3, r6, r3, r2
 8003ec2:	f8de 2000 	ldr.w	r2, [lr]
 8003ec6:	b280      	uxth	r0, r0
 8003ec8:	b292      	uxth	r2, r2
 8003eca:	1a12      	subs	r2, r2, r0
 8003ecc:	445a      	add	r2, fp
 8003ece:	f8de 0000 	ldr.w	r0, [lr]
 8003ed2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003edc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003ee0:	b292      	uxth	r2, r2
 8003ee2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003ee6:	45e1      	cmp	r9, ip
 8003ee8:	f84e 2b04 	str.w	r2, [lr], #4
 8003eec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003ef0:	d2de      	bcs.n	8003eb0 <quorem+0x42>
 8003ef2:	9b00      	ldr	r3, [sp, #0]
 8003ef4:	58eb      	ldr	r3, [r5, r3]
 8003ef6:	b92b      	cbnz	r3, 8003f04 <quorem+0x96>
 8003ef8:	9b01      	ldr	r3, [sp, #4]
 8003efa:	3b04      	subs	r3, #4
 8003efc:	429d      	cmp	r5, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	d32f      	bcc.n	8003f62 <quorem+0xf4>
 8003f02:	613c      	str	r4, [r7, #16]
 8003f04:	4638      	mov	r0, r7
 8003f06:	f001 f979 	bl	80051fc <__mcmp>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	db25      	blt.n	8003f5a <quorem+0xec>
 8003f0e:	4629      	mov	r1, r5
 8003f10:	2000      	movs	r0, #0
 8003f12:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f16:	f8d1 c000 	ldr.w	ip, [r1]
 8003f1a:	fa1f fe82 	uxth.w	lr, r2
 8003f1e:	fa1f f38c 	uxth.w	r3, ip
 8003f22:	eba3 030e 	sub.w	r3, r3, lr
 8003f26:	4403      	add	r3, r0
 8003f28:	0c12      	lsrs	r2, r2, #16
 8003f2a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003f2e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f38:	45c1      	cmp	r9, r8
 8003f3a:	f841 3b04 	str.w	r3, [r1], #4
 8003f3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003f42:	d2e6      	bcs.n	8003f12 <quorem+0xa4>
 8003f44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f4c:	b922      	cbnz	r2, 8003f58 <quorem+0xea>
 8003f4e:	3b04      	subs	r3, #4
 8003f50:	429d      	cmp	r5, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	d30b      	bcc.n	8003f6e <quorem+0x100>
 8003f56:	613c      	str	r4, [r7, #16]
 8003f58:	3601      	adds	r6, #1
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	b003      	add	sp, #12
 8003f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	3b04      	subs	r3, #4
 8003f66:	2a00      	cmp	r2, #0
 8003f68:	d1cb      	bne.n	8003f02 <quorem+0x94>
 8003f6a:	3c01      	subs	r4, #1
 8003f6c:	e7c6      	b.n	8003efc <quorem+0x8e>
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	3b04      	subs	r3, #4
 8003f72:	2a00      	cmp	r2, #0
 8003f74:	d1ef      	bne.n	8003f56 <quorem+0xe8>
 8003f76:	3c01      	subs	r4, #1
 8003f78:	e7ea      	b.n	8003f50 <quorem+0xe2>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e7ee      	b.n	8003f5c <quorem+0xee>
	...

08003f80 <_dtoa_r>:
 8003f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f84:	69c7      	ldr	r7, [r0, #28]
 8003f86:	b099      	sub	sp, #100	@ 0x64
 8003f88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003f8c:	ec55 4b10 	vmov	r4, r5, d0
 8003f90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003f92:	9109      	str	r1, [sp, #36]	@ 0x24
 8003f94:	4683      	mov	fp, r0
 8003f96:	920e      	str	r2, [sp, #56]	@ 0x38
 8003f98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003f9a:	b97f      	cbnz	r7, 8003fbc <_dtoa_r+0x3c>
 8003f9c:	2010      	movs	r0, #16
 8003f9e:	f000 fdfd 	bl	8004b9c <malloc>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	f8cb 001c 	str.w	r0, [fp, #28]
 8003fa8:	b920      	cbnz	r0, 8003fb4 <_dtoa_r+0x34>
 8003faa:	4ba7      	ldr	r3, [pc, #668]	@ (8004248 <_dtoa_r+0x2c8>)
 8003fac:	21ef      	movs	r1, #239	@ 0xef
 8003fae:	48a7      	ldr	r0, [pc, #668]	@ (800424c <_dtoa_r+0x2cc>)
 8003fb0:	f001 fae8 	bl	8005584 <__assert_func>
 8003fb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003fb8:	6007      	str	r7, [r0, #0]
 8003fba:	60c7      	str	r7, [r0, #12]
 8003fbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003fc0:	6819      	ldr	r1, [r3, #0]
 8003fc2:	b159      	cbz	r1, 8003fdc <_dtoa_r+0x5c>
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	604a      	str	r2, [r1, #4]
 8003fc8:	2301      	movs	r3, #1
 8003fca:	4093      	lsls	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
 8003fce:	4658      	mov	r0, fp
 8003fd0:	f000 feda 	bl	8004d88 <_Bfree>
 8003fd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	1e2b      	subs	r3, r5, #0
 8003fde:	bfb9      	ittee	lt
 8003fe0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003fe4:	9303      	strlt	r3, [sp, #12]
 8003fe6:	2300      	movge	r3, #0
 8003fe8:	6033      	strge	r3, [r6, #0]
 8003fea:	9f03      	ldr	r7, [sp, #12]
 8003fec:	4b98      	ldr	r3, [pc, #608]	@ (8004250 <_dtoa_r+0x2d0>)
 8003fee:	bfbc      	itt	lt
 8003ff0:	2201      	movlt	r2, #1
 8003ff2:	6032      	strlt	r2, [r6, #0]
 8003ff4:	43bb      	bics	r3, r7
 8003ff6:	d112      	bne.n	800401e <_dtoa_r+0x9e>
 8003ff8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003ffa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004004:	4323      	orrs	r3, r4
 8004006:	f000 854d 	beq.w	8004aa4 <_dtoa_r+0xb24>
 800400a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800400c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004264 <_dtoa_r+0x2e4>
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 854f 	beq.w	8004ab4 <_dtoa_r+0xb34>
 8004016:	f10a 0303 	add.w	r3, sl, #3
 800401a:	f000 bd49 	b.w	8004ab0 <_dtoa_r+0xb30>
 800401e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004022:	2200      	movs	r2, #0
 8004024:	ec51 0b17 	vmov	r0, r1, d7
 8004028:	2300      	movs	r3, #0
 800402a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800402e:	f7fc fd53 	bl	8000ad8 <__aeabi_dcmpeq>
 8004032:	4680      	mov	r8, r0
 8004034:	b158      	cbz	r0, 800404e <_dtoa_r+0xce>
 8004036:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004038:	2301      	movs	r3, #1
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800403e:	b113      	cbz	r3, 8004046 <_dtoa_r+0xc6>
 8004040:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004042:	4b84      	ldr	r3, [pc, #528]	@ (8004254 <_dtoa_r+0x2d4>)
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004268 <_dtoa_r+0x2e8>
 800404a:	f000 bd33 	b.w	8004ab4 <_dtoa_r+0xb34>
 800404e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004052:	aa16      	add	r2, sp, #88	@ 0x58
 8004054:	a917      	add	r1, sp, #92	@ 0x5c
 8004056:	4658      	mov	r0, fp
 8004058:	f001 f980 	bl	800535c <__d2b>
 800405c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004060:	4681      	mov	r9, r0
 8004062:	2e00      	cmp	r6, #0
 8004064:	d077      	beq.n	8004156 <_dtoa_r+0x1d6>
 8004066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004068:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800406c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004074:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004078:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800407c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004080:	4619      	mov	r1, r3
 8004082:	2200      	movs	r2, #0
 8004084:	4b74      	ldr	r3, [pc, #464]	@ (8004258 <_dtoa_r+0x2d8>)
 8004086:	f7fc f907 	bl	8000298 <__aeabi_dsub>
 800408a:	a369      	add	r3, pc, #420	@ (adr r3, 8004230 <_dtoa_r+0x2b0>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc faba 	bl	8000608 <__aeabi_dmul>
 8004094:	a368      	add	r3, pc, #416	@ (adr r3, 8004238 <_dtoa_r+0x2b8>)
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	f7fc f8ff 	bl	800029c <__adddf3>
 800409e:	4604      	mov	r4, r0
 80040a0:	4630      	mov	r0, r6
 80040a2:	460d      	mov	r5, r1
 80040a4:	f7fc fa46 	bl	8000534 <__aeabi_i2d>
 80040a8:	a365      	add	r3, pc, #404	@ (adr r3, 8004240 <_dtoa_r+0x2c0>)
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f7fc faab 	bl	8000608 <__aeabi_dmul>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4620      	mov	r0, r4
 80040b8:	4629      	mov	r1, r5
 80040ba:	f7fc f8ef 	bl	800029c <__adddf3>
 80040be:	4604      	mov	r4, r0
 80040c0:	460d      	mov	r5, r1
 80040c2:	f7fc fd51 	bl	8000b68 <__aeabi_d2iz>
 80040c6:	2200      	movs	r2, #0
 80040c8:	4607      	mov	r7, r0
 80040ca:	2300      	movs	r3, #0
 80040cc:	4620      	mov	r0, r4
 80040ce:	4629      	mov	r1, r5
 80040d0:	f7fc fd0c 	bl	8000aec <__aeabi_dcmplt>
 80040d4:	b140      	cbz	r0, 80040e8 <_dtoa_r+0x168>
 80040d6:	4638      	mov	r0, r7
 80040d8:	f7fc fa2c 	bl	8000534 <__aeabi_i2d>
 80040dc:	4622      	mov	r2, r4
 80040de:	462b      	mov	r3, r5
 80040e0:	f7fc fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 80040e4:	b900      	cbnz	r0, 80040e8 <_dtoa_r+0x168>
 80040e6:	3f01      	subs	r7, #1
 80040e8:	2f16      	cmp	r7, #22
 80040ea:	d851      	bhi.n	8004190 <_dtoa_r+0x210>
 80040ec:	4b5b      	ldr	r3, [pc, #364]	@ (800425c <_dtoa_r+0x2dc>)
 80040ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040fa:	f7fc fcf7 	bl	8000aec <__aeabi_dcmplt>
 80040fe:	2800      	cmp	r0, #0
 8004100:	d048      	beq.n	8004194 <_dtoa_r+0x214>
 8004102:	3f01      	subs	r7, #1
 8004104:	2300      	movs	r3, #0
 8004106:	9312      	str	r3, [sp, #72]	@ 0x48
 8004108:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800410a:	1b9b      	subs	r3, r3, r6
 800410c:	1e5a      	subs	r2, r3, #1
 800410e:	bf44      	itt	mi
 8004110:	f1c3 0801 	rsbmi	r8, r3, #1
 8004114:	2300      	movmi	r3, #0
 8004116:	9208      	str	r2, [sp, #32]
 8004118:	bf54      	ite	pl
 800411a:	f04f 0800 	movpl.w	r8, #0
 800411e:	9308      	strmi	r3, [sp, #32]
 8004120:	2f00      	cmp	r7, #0
 8004122:	db39      	blt.n	8004198 <_dtoa_r+0x218>
 8004124:	9b08      	ldr	r3, [sp, #32]
 8004126:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004128:	443b      	add	r3, r7
 800412a:	9308      	str	r3, [sp, #32]
 800412c:	2300      	movs	r3, #0
 800412e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004132:	2b09      	cmp	r3, #9
 8004134:	d864      	bhi.n	8004200 <_dtoa_r+0x280>
 8004136:	2b05      	cmp	r3, #5
 8004138:	bfc4      	itt	gt
 800413a:	3b04      	subgt	r3, #4
 800413c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800413e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004140:	f1a3 0302 	sub.w	r3, r3, #2
 8004144:	bfcc      	ite	gt
 8004146:	2400      	movgt	r4, #0
 8004148:	2401      	movle	r4, #1
 800414a:	2b03      	cmp	r3, #3
 800414c:	d863      	bhi.n	8004216 <_dtoa_r+0x296>
 800414e:	e8df f003 	tbb	[pc, r3]
 8004152:	372a      	.short	0x372a
 8004154:	5535      	.short	0x5535
 8004156:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800415a:	441e      	add	r6, r3
 800415c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004160:	2b20      	cmp	r3, #32
 8004162:	bfc1      	itttt	gt
 8004164:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004168:	409f      	lslgt	r7, r3
 800416a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800416e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004172:	bfd6      	itet	le
 8004174:	f1c3 0320 	rsble	r3, r3, #32
 8004178:	ea47 0003 	orrgt.w	r0, r7, r3
 800417c:	fa04 f003 	lslle.w	r0, r4, r3
 8004180:	f7fc f9c8 	bl	8000514 <__aeabi_ui2d>
 8004184:	2201      	movs	r2, #1
 8004186:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800418a:	3e01      	subs	r6, #1
 800418c:	9214      	str	r2, [sp, #80]	@ 0x50
 800418e:	e777      	b.n	8004080 <_dtoa_r+0x100>
 8004190:	2301      	movs	r3, #1
 8004192:	e7b8      	b.n	8004106 <_dtoa_r+0x186>
 8004194:	9012      	str	r0, [sp, #72]	@ 0x48
 8004196:	e7b7      	b.n	8004108 <_dtoa_r+0x188>
 8004198:	427b      	negs	r3, r7
 800419a:	930a      	str	r3, [sp, #40]	@ 0x28
 800419c:	2300      	movs	r3, #0
 800419e:	eba8 0807 	sub.w	r8, r8, r7
 80041a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80041a4:	e7c4      	b.n	8004130 <_dtoa_r+0x1b0>
 80041a6:	2300      	movs	r3, #0
 80041a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	dc35      	bgt.n	800421c <_dtoa_r+0x29c>
 80041b0:	2301      	movs	r3, #1
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	9307      	str	r3, [sp, #28]
 80041b6:	461a      	mov	r2, r3
 80041b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80041ba:	e00b      	b.n	80041d4 <_dtoa_r+0x254>
 80041bc:	2301      	movs	r3, #1
 80041be:	e7f3      	b.n	80041a8 <_dtoa_r+0x228>
 80041c0:	2300      	movs	r3, #0
 80041c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	3301      	adds	r3, #1
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	9307      	str	r3, [sp, #28]
 80041d0:	bfb8      	it	lt
 80041d2:	2301      	movlt	r3, #1
 80041d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80041d8:	2100      	movs	r1, #0
 80041da:	2204      	movs	r2, #4
 80041dc:	f102 0514 	add.w	r5, r2, #20
 80041e0:	429d      	cmp	r5, r3
 80041e2:	d91f      	bls.n	8004224 <_dtoa_r+0x2a4>
 80041e4:	6041      	str	r1, [r0, #4]
 80041e6:	4658      	mov	r0, fp
 80041e8:	f000 fd8e 	bl	8004d08 <_Balloc>
 80041ec:	4682      	mov	sl, r0
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d13c      	bne.n	800426c <_dtoa_r+0x2ec>
 80041f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004260 <_dtoa_r+0x2e0>)
 80041f4:	4602      	mov	r2, r0
 80041f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80041fa:	e6d8      	b.n	8003fae <_dtoa_r+0x2e>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e7e0      	b.n	80041c2 <_dtoa_r+0x242>
 8004200:	2401      	movs	r4, #1
 8004202:	2300      	movs	r3, #0
 8004204:	9309      	str	r3, [sp, #36]	@ 0x24
 8004206:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	9307      	str	r3, [sp, #28]
 8004210:	2200      	movs	r2, #0
 8004212:	2312      	movs	r3, #18
 8004214:	e7d0      	b.n	80041b8 <_dtoa_r+0x238>
 8004216:	2301      	movs	r3, #1
 8004218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800421a:	e7f5      	b.n	8004208 <_dtoa_r+0x288>
 800421c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	9307      	str	r3, [sp, #28]
 8004222:	e7d7      	b.n	80041d4 <_dtoa_r+0x254>
 8004224:	3101      	adds	r1, #1
 8004226:	0052      	lsls	r2, r2, #1
 8004228:	e7d8      	b.n	80041dc <_dtoa_r+0x25c>
 800422a:	bf00      	nop
 800422c:	f3af 8000 	nop.w
 8004230:	636f4361 	.word	0x636f4361
 8004234:	3fd287a7 	.word	0x3fd287a7
 8004238:	8b60c8b3 	.word	0x8b60c8b3
 800423c:	3fc68a28 	.word	0x3fc68a28
 8004240:	509f79fb 	.word	0x509f79fb
 8004244:	3fd34413 	.word	0x3fd34413
 8004248:	08005bf1 	.word	0x08005bf1
 800424c:	08005c08 	.word	0x08005c08
 8004250:	7ff00000 	.word	0x7ff00000
 8004254:	08005bc1 	.word	0x08005bc1
 8004258:	3ff80000 	.word	0x3ff80000
 800425c:	08005d00 	.word	0x08005d00
 8004260:	08005c60 	.word	0x08005c60
 8004264:	08005bed 	.word	0x08005bed
 8004268:	08005bc0 	.word	0x08005bc0
 800426c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004270:	6018      	str	r0, [r3, #0]
 8004272:	9b07      	ldr	r3, [sp, #28]
 8004274:	2b0e      	cmp	r3, #14
 8004276:	f200 80a4 	bhi.w	80043c2 <_dtoa_r+0x442>
 800427a:	2c00      	cmp	r4, #0
 800427c:	f000 80a1 	beq.w	80043c2 <_dtoa_r+0x442>
 8004280:	2f00      	cmp	r7, #0
 8004282:	dd33      	ble.n	80042ec <_dtoa_r+0x36c>
 8004284:	4bad      	ldr	r3, [pc, #692]	@ (800453c <_dtoa_r+0x5bc>)
 8004286:	f007 020f 	and.w	r2, r7, #15
 800428a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800428e:	ed93 7b00 	vldr	d7, [r3]
 8004292:	05f8      	lsls	r0, r7, #23
 8004294:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004298:	ea4f 1427 	mov.w	r4, r7, asr #4
 800429c:	d516      	bpl.n	80042cc <_dtoa_r+0x34c>
 800429e:	4ba8      	ldr	r3, [pc, #672]	@ (8004540 <_dtoa_r+0x5c0>)
 80042a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042a8:	f7fc fad8 	bl	800085c <__aeabi_ddiv>
 80042ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042b0:	f004 040f 	and.w	r4, r4, #15
 80042b4:	2603      	movs	r6, #3
 80042b6:	4da2      	ldr	r5, [pc, #648]	@ (8004540 <_dtoa_r+0x5c0>)
 80042b8:	b954      	cbnz	r4, 80042d0 <_dtoa_r+0x350>
 80042ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042c2:	f7fc facb 	bl	800085c <__aeabi_ddiv>
 80042c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042ca:	e028      	b.n	800431e <_dtoa_r+0x39e>
 80042cc:	2602      	movs	r6, #2
 80042ce:	e7f2      	b.n	80042b6 <_dtoa_r+0x336>
 80042d0:	07e1      	lsls	r1, r4, #31
 80042d2:	d508      	bpl.n	80042e6 <_dtoa_r+0x366>
 80042d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042dc:	f7fc f994 	bl	8000608 <__aeabi_dmul>
 80042e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042e4:	3601      	adds	r6, #1
 80042e6:	1064      	asrs	r4, r4, #1
 80042e8:	3508      	adds	r5, #8
 80042ea:	e7e5      	b.n	80042b8 <_dtoa_r+0x338>
 80042ec:	f000 80d2 	beq.w	8004494 <_dtoa_r+0x514>
 80042f0:	427c      	negs	r4, r7
 80042f2:	4b92      	ldr	r3, [pc, #584]	@ (800453c <_dtoa_r+0x5bc>)
 80042f4:	4d92      	ldr	r5, [pc, #584]	@ (8004540 <_dtoa_r+0x5c0>)
 80042f6:	f004 020f 	and.w	r2, r4, #15
 80042fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004306:	f7fc f97f 	bl	8000608 <__aeabi_dmul>
 800430a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800430e:	1124      	asrs	r4, r4, #4
 8004310:	2300      	movs	r3, #0
 8004312:	2602      	movs	r6, #2
 8004314:	2c00      	cmp	r4, #0
 8004316:	f040 80b2 	bne.w	800447e <_dtoa_r+0x4fe>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1d3      	bne.n	80042c6 <_dtoa_r+0x346>
 800431e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004320:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80b7 	beq.w	8004498 <_dtoa_r+0x518>
 800432a:	4b86      	ldr	r3, [pc, #536]	@ (8004544 <_dtoa_r+0x5c4>)
 800432c:	2200      	movs	r2, #0
 800432e:	4620      	mov	r0, r4
 8004330:	4629      	mov	r1, r5
 8004332:	f7fc fbdb 	bl	8000aec <__aeabi_dcmplt>
 8004336:	2800      	cmp	r0, #0
 8004338:	f000 80ae 	beq.w	8004498 <_dtoa_r+0x518>
 800433c:	9b07      	ldr	r3, [sp, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80aa 	beq.w	8004498 <_dtoa_r+0x518>
 8004344:	9b00      	ldr	r3, [sp, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	dd37      	ble.n	80043ba <_dtoa_r+0x43a>
 800434a:	1e7b      	subs	r3, r7, #1
 800434c:	9304      	str	r3, [sp, #16]
 800434e:	4620      	mov	r0, r4
 8004350:	4b7d      	ldr	r3, [pc, #500]	@ (8004548 <_dtoa_r+0x5c8>)
 8004352:	2200      	movs	r2, #0
 8004354:	4629      	mov	r1, r5
 8004356:	f7fc f957 	bl	8000608 <__aeabi_dmul>
 800435a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800435e:	9c00      	ldr	r4, [sp, #0]
 8004360:	3601      	adds	r6, #1
 8004362:	4630      	mov	r0, r6
 8004364:	f7fc f8e6 	bl	8000534 <__aeabi_i2d>
 8004368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800436c:	f7fc f94c 	bl	8000608 <__aeabi_dmul>
 8004370:	4b76      	ldr	r3, [pc, #472]	@ (800454c <_dtoa_r+0x5cc>)
 8004372:	2200      	movs	r2, #0
 8004374:	f7fb ff92 	bl	800029c <__adddf3>
 8004378:	4605      	mov	r5, r0
 800437a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800437e:	2c00      	cmp	r4, #0
 8004380:	f040 808d 	bne.w	800449e <_dtoa_r+0x51e>
 8004384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004388:	4b71      	ldr	r3, [pc, #452]	@ (8004550 <_dtoa_r+0x5d0>)
 800438a:	2200      	movs	r2, #0
 800438c:	f7fb ff84 	bl	8000298 <__aeabi_dsub>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004398:	462a      	mov	r2, r5
 800439a:	4633      	mov	r3, r6
 800439c:	f7fc fbc4 	bl	8000b28 <__aeabi_dcmpgt>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	f040 828b 	bne.w	80048bc <_dtoa_r+0x93c>
 80043a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043aa:	462a      	mov	r2, r5
 80043ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80043b0:	f7fc fb9c 	bl	8000aec <__aeabi_dcmplt>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	f040 8128 	bne.w	800460a <_dtoa_r+0x68a>
 80043ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80043be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80043c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f2c0 815a 	blt.w	800467e <_dtoa_r+0x6fe>
 80043ca:	2f0e      	cmp	r7, #14
 80043cc:	f300 8157 	bgt.w	800467e <_dtoa_r+0x6fe>
 80043d0:	4b5a      	ldr	r3, [pc, #360]	@ (800453c <_dtoa_r+0x5bc>)
 80043d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80043d6:	ed93 7b00 	vldr	d7, [r3]
 80043da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	ed8d 7b00 	vstr	d7, [sp]
 80043e2:	da03      	bge.n	80043ec <_dtoa_r+0x46c>
 80043e4:	9b07      	ldr	r3, [sp, #28]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f340 8101 	ble.w	80045ee <_dtoa_r+0x66e>
 80043ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80043f0:	4656      	mov	r6, sl
 80043f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043f6:	4620      	mov	r0, r4
 80043f8:	4629      	mov	r1, r5
 80043fa:	f7fc fa2f 	bl	800085c <__aeabi_ddiv>
 80043fe:	f7fc fbb3 	bl	8000b68 <__aeabi_d2iz>
 8004402:	4680      	mov	r8, r0
 8004404:	f7fc f896 	bl	8000534 <__aeabi_i2d>
 8004408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800440c:	f7fc f8fc 	bl	8000608 <__aeabi_dmul>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4620      	mov	r0, r4
 8004416:	4629      	mov	r1, r5
 8004418:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800441c:	f7fb ff3c 	bl	8000298 <__aeabi_dsub>
 8004420:	f806 4b01 	strb.w	r4, [r6], #1
 8004424:	9d07      	ldr	r5, [sp, #28]
 8004426:	eba6 040a 	sub.w	r4, r6, sl
 800442a:	42a5      	cmp	r5, r4
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	f040 8117 	bne.w	8004662 <_dtoa_r+0x6e2>
 8004434:	f7fb ff32 	bl	800029c <__adddf3>
 8004438:	e9dd 2300 	ldrd	r2, r3, [sp]
 800443c:	4604      	mov	r4, r0
 800443e:	460d      	mov	r5, r1
 8004440:	f7fc fb72 	bl	8000b28 <__aeabi_dcmpgt>
 8004444:	2800      	cmp	r0, #0
 8004446:	f040 80f9 	bne.w	800463c <_dtoa_r+0x6bc>
 800444a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800444e:	4620      	mov	r0, r4
 8004450:	4629      	mov	r1, r5
 8004452:	f7fc fb41 	bl	8000ad8 <__aeabi_dcmpeq>
 8004456:	b118      	cbz	r0, 8004460 <_dtoa_r+0x4e0>
 8004458:	f018 0f01 	tst.w	r8, #1
 800445c:	f040 80ee 	bne.w	800463c <_dtoa_r+0x6bc>
 8004460:	4649      	mov	r1, r9
 8004462:	4658      	mov	r0, fp
 8004464:	f000 fc90 	bl	8004d88 <_Bfree>
 8004468:	2300      	movs	r3, #0
 800446a:	7033      	strb	r3, [r6, #0]
 800446c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800446e:	3701      	adds	r7, #1
 8004470:	601f      	str	r7, [r3, #0]
 8004472:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 831d 	beq.w	8004ab4 <_dtoa_r+0xb34>
 800447a:	601e      	str	r6, [r3, #0]
 800447c:	e31a      	b.n	8004ab4 <_dtoa_r+0xb34>
 800447e:	07e2      	lsls	r2, r4, #31
 8004480:	d505      	bpl.n	800448e <_dtoa_r+0x50e>
 8004482:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004486:	f7fc f8bf 	bl	8000608 <__aeabi_dmul>
 800448a:	3601      	adds	r6, #1
 800448c:	2301      	movs	r3, #1
 800448e:	1064      	asrs	r4, r4, #1
 8004490:	3508      	adds	r5, #8
 8004492:	e73f      	b.n	8004314 <_dtoa_r+0x394>
 8004494:	2602      	movs	r6, #2
 8004496:	e742      	b.n	800431e <_dtoa_r+0x39e>
 8004498:	9c07      	ldr	r4, [sp, #28]
 800449a:	9704      	str	r7, [sp, #16]
 800449c:	e761      	b.n	8004362 <_dtoa_r+0x3e2>
 800449e:	4b27      	ldr	r3, [pc, #156]	@ (800453c <_dtoa_r+0x5bc>)
 80044a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80044a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044aa:	4454      	add	r4, sl
 80044ac:	2900      	cmp	r1, #0
 80044ae:	d053      	beq.n	8004558 <_dtoa_r+0x5d8>
 80044b0:	4928      	ldr	r1, [pc, #160]	@ (8004554 <_dtoa_r+0x5d4>)
 80044b2:	2000      	movs	r0, #0
 80044b4:	f7fc f9d2 	bl	800085c <__aeabi_ddiv>
 80044b8:	4633      	mov	r3, r6
 80044ba:	462a      	mov	r2, r5
 80044bc:	f7fb feec 	bl	8000298 <__aeabi_dsub>
 80044c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80044c4:	4656      	mov	r6, sl
 80044c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ca:	f7fc fb4d 	bl	8000b68 <__aeabi_d2iz>
 80044ce:	4605      	mov	r5, r0
 80044d0:	f7fc f830 	bl	8000534 <__aeabi_i2d>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044dc:	f7fb fedc 	bl	8000298 <__aeabi_dsub>
 80044e0:	3530      	adds	r5, #48	@ 0x30
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044ea:	f806 5b01 	strb.w	r5, [r6], #1
 80044ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80044f2:	f7fc fafb 	bl	8000aec <__aeabi_dcmplt>
 80044f6:	2800      	cmp	r0, #0
 80044f8:	d171      	bne.n	80045de <_dtoa_r+0x65e>
 80044fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044fe:	4911      	ldr	r1, [pc, #68]	@ (8004544 <_dtoa_r+0x5c4>)
 8004500:	2000      	movs	r0, #0
 8004502:	f7fb fec9 	bl	8000298 <__aeabi_dsub>
 8004506:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800450a:	f7fc faef 	bl	8000aec <__aeabi_dcmplt>
 800450e:	2800      	cmp	r0, #0
 8004510:	f040 8095 	bne.w	800463e <_dtoa_r+0x6be>
 8004514:	42a6      	cmp	r6, r4
 8004516:	f43f af50 	beq.w	80043ba <_dtoa_r+0x43a>
 800451a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800451e:	4b0a      	ldr	r3, [pc, #40]	@ (8004548 <_dtoa_r+0x5c8>)
 8004520:	2200      	movs	r2, #0
 8004522:	f7fc f871 	bl	8000608 <__aeabi_dmul>
 8004526:	4b08      	ldr	r3, [pc, #32]	@ (8004548 <_dtoa_r+0x5c8>)
 8004528:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800452c:	2200      	movs	r2, #0
 800452e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004532:	f7fc f869 	bl	8000608 <__aeabi_dmul>
 8004536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800453a:	e7c4      	b.n	80044c6 <_dtoa_r+0x546>
 800453c:	08005d00 	.word	0x08005d00
 8004540:	08005cd8 	.word	0x08005cd8
 8004544:	3ff00000 	.word	0x3ff00000
 8004548:	40240000 	.word	0x40240000
 800454c:	401c0000 	.word	0x401c0000
 8004550:	40140000 	.word	0x40140000
 8004554:	3fe00000 	.word	0x3fe00000
 8004558:	4631      	mov	r1, r6
 800455a:	4628      	mov	r0, r5
 800455c:	f7fc f854 	bl	8000608 <__aeabi_dmul>
 8004560:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004564:	9415      	str	r4, [sp, #84]	@ 0x54
 8004566:	4656      	mov	r6, sl
 8004568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800456c:	f7fc fafc 	bl	8000b68 <__aeabi_d2iz>
 8004570:	4605      	mov	r5, r0
 8004572:	f7fb ffdf 	bl	8000534 <__aeabi_i2d>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800457e:	f7fb fe8b 	bl	8000298 <__aeabi_dsub>
 8004582:	3530      	adds	r5, #48	@ 0x30
 8004584:	f806 5b01 	strb.w	r5, [r6], #1
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	42a6      	cmp	r6, r4
 800458e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	d124      	bne.n	80045e2 <_dtoa_r+0x662>
 8004598:	4bac      	ldr	r3, [pc, #688]	@ (800484c <_dtoa_r+0x8cc>)
 800459a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800459e:	f7fb fe7d 	bl	800029c <__adddf3>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045aa:	f7fc fabd 	bl	8000b28 <__aeabi_dcmpgt>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d145      	bne.n	800463e <_dtoa_r+0x6be>
 80045b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80045b6:	49a5      	ldr	r1, [pc, #660]	@ (800484c <_dtoa_r+0x8cc>)
 80045b8:	2000      	movs	r0, #0
 80045ba:	f7fb fe6d 	bl	8000298 <__aeabi_dsub>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045c6:	f7fc fa91 	bl	8000aec <__aeabi_dcmplt>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	f43f aef5 	beq.w	80043ba <_dtoa_r+0x43a>
 80045d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80045d2:	1e73      	subs	r3, r6, #1
 80045d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80045d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80045da:	2b30      	cmp	r3, #48	@ 0x30
 80045dc:	d0f8      	beq.n	80045d0 <_dtoa_r+0x650>
 80045de:	9f04      	ldr	r7, [sp, #16]
 80045e0:	e73e      	b.n	8004460 <_dtoa_r+0x4e0>
 80045e2:	4b9b      	ldr	r3, [pc, #620]	@ (8004850 <_dtoa_r+0x8d0>)
 80045e4:	f7fc f810 	bl	8000608 <__aeabi_dmul>
 80045e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045ec:	e7bc      	b.n	8004568 <_dtoa_r+0x5e8>
 80045ee:	d10c      	bne.n	800460a <_dtoa_r+0x68a>
 80045f0:	4b98      	ldr	r3, [pc, #608]	@ (8004854 <_dtoa_r+0x8d4>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045f8:	f7fc f806 	bl	8000608 <__aeabi_dmul>
 80045fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004600:	f7fc fa88 	bl	8000b14 <__aeabi_dcmpge>
 8004604:	2800      	cmp	r0, #0
 8004606:	f000 8157 	beq.w	80048b8 <_dtoa_r+0x938>
 800460a:	2400      	movs	r4, #0
 800460c:	4625      	mov	r5, r4
 800460e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004610:	43db      	mvns	r3, r3
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	4656      	mov	r6, sl
 8004616:	2700      	movs	r7, #0
 8004618:	4621      	mov	r1, r4
 800461a:	4658      	mov	r0, fp
 800461c:	f000 fbb4 	bl	8004d88 <_Bfree>
 8004620:	2d00      	cmp	r5, #0
 8004622:	d0dc      	beq.n	80045de <_dtoa_r+0x65e>
 8004624:	b12f      	cbz	r7, 8004632 <_dtoa_r+0x6b2>
 8004626:	42af      	cmp	r7, r5
 8004628:	d003      	beq.n	8004632 <_dtoa_r+0x6b2>
 800462a:	4639      	mov	r1, r7
 800462c:	4658      	mov	r0, fp
 800462e:	f000 fbab 	bl	8004d88 <_Bfree>
 8004632:	4629      	mov	r1, r5
 8004634:	4658      	mov	r0, fp
 8004636:	f000 fba7 	bl	8004d88 <_Bfree>
 800463a:	e7d0      	b.n	80045de <_dtoa_r+0x65e>
 800463c:	9704      	str	r7, [sp, #16]
 800463e:	4633      	mov	r3, r6
 8004640:	461e      	mov	r6, r3
 8004642:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004646:	2a39      	cmp	r2, #57	@ 0x39
 8004648:	d107      	bne.n	800465a <_dtoa_r+0x6da>
 800464a:	459a      	cmp	sl, r3
 800464c:	d1f8      	bne.n	8004640 <_dtoa_r+0x6c0>
 800464e:	9a04      	ldr	r2, [sp, #16]
 8004650:	3201      	adds	r2, #1
 8004652:	9204      	str	r2, [sp, #16]
 8004654:	2230      	movs	r2, #48	@ 0x30
 8004656:	f88a 2000 	strb.w	r2, [sl]
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	3201      	adds	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e7bd      	b.n	80045de <_dtoa_r+0x65e>
 8004662:	4b7b      	ldr	r3, [pc, #492]	@ (8004850 <_dtoa_r+0x8d0>)
 8004664:	2200      	movs	r2, #0
 8004666:	f7fb ffcf 	bl	8000608 <__aeabi_dmul>
 800466a:	2200      	movs	r2, #0
 800466c:	2300      	movs	r3, #0
 800466e:	4604      	mov	r4, r0
 8004670:	460d      	mov	r5, r1
 8004672:	f7fc fa31 	bl	8000ad8 <__aeabi_dcmpeq>
 8004676:	2800      	cmp	r0, #0
 8004678:	f43f aebb 	beq.w	80043f2 <_dtoa_r+0x472>
 800467c:	e6f0      	b.n	8004460 <_dtoa_r+0x4e0>
 800467e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004680:	2a00      	cmp	r2, #0
 8004682:	f000 80db 	beq.w	800483c <_dtoa_r+0x8bc>
 8004686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004688:	2a01      	cmp	r2, #1
 800468a:	f300 80bf 	bgt.w	800480c <_dtoa_r+0x88c>
 800468e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004690:	2a00      	cmp	r2, #0
 8004692:	f000 80b7 	beq.w	8004804 <_dtoa_r+0x884>
 8004696:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800469a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800469c:	4646      	mov	r6, r8
 800469e:	9a08      	ldr	r2, [sp, #32]
 80046a0:	2101      	movs	r1, #1
 80046a2:	441a      	add	r2, r3
 80046a4:	4658      	mov	r0, fp
 80046a6:	4498      	add	r8, r3
 80046a8:	9208      	str	r2, [sp, #32]
 80046aa:	f000 fc21 	bl	8004ef0 <__i2b>
 80046ae:	4605      	mov	r5, r0
 80046b0:	b15e      	cbz	r6, 80046ca <_dtoa_r+0x74a>
 80046b2:	9b08      	ldr	r3, [sp, #32]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	dd08      	ble.n	80046ca <_dtoa_r+0x74a>
 80046b8:	42b3      	cmp	r3, r6
 80046ba:	9a08      	ldr	r2, [sp, #32]
 80046bc:	bfa8      	it	ge
 80046be:	4633      	movge	r3, r6
 80046c0:	eba8 0803 	sub.w	r8, r8, r3
 80046c4:	1af6      	subs	r6, r6, r3
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	9308      	str	r3, [sp, #32]
 80046ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046cc:	b1f3      	cbz	r3, 800470c <_dtoa_r+0x78c>
 80046ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80b7 	beq.w	8004844 <_dtoa_r+0x8c4>
 80046d6:	b18c      	cbz	r4, 80046fc <_dtoa_r+0x77c>
 80046d8:	4629      	mov	r1, r5
 80046da:	4622      	mov	r2, r4
 80046dc:	4658      	mov	r0, fp
 80046de:	f000 fcc7 	bl	8005070 <__pow5mult>
 80046e2:	464a      	mov	r2, r9
 80046e4:	4601      	mov	r1, r0
 80046e6:	4605      	mov	r5, r0
 80046e8:	4658      	mov	r0, fp
 80046ea:	f000 fc17 	bl	8004f1c <__multiply>
 80046ee:	4649      	mov	r1, r9
 80046f0:	9004      	str	r0, [sp, #16]
 80046f2:	4658      	mov	r0, fp
 80046f4:	f000 fb48 	bl	8004d88 <_Bfree>
 80046f8:	9b04      	ldr	r3, [sp, #16]
 80046fa:	4699      	mov	r9, r3
 80046fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046fe:	1b1a      	subs	r2, r3, r4
 8004700:	d004      	beq.n	800470c <_dtoa_r+0x78c>
 8004702:	4649      	mov	r1, r9
 8004704:	4658      	mov	r0, fp
 8004706:	f000 fcb3 	bl	8005070 <__pow5mult>
 800470a:	4681      	mov	r9, r0
 800470c:	2101      	movs	r1, #1
 800470e:	4658      	mov	r0, fp
 8004710:	f000 fbee 	bl	8004ef0 <__i2b>
 8004714:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004716:	4604      	mov	r4, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 81cf 	beq.w	8004abc <_dtoa_r+0xb3c>
 800471e:	461a      	mov	r2, r3
 8004720:	4601      	mov	r1, r0
 8004722:	4658      	mov	r0, fp
 8004724:	f000 fca4 	bl	8005070 <__pow5mult>
 8004728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800472a:	2b01      	cmp	r3, #1
 800472c:	4604      	mov	r4, r0
 800472e:	f300 8095 	bgt.w	800485c <_dtoa_r+0x8dc>
 8004732:	9b02      	ldr	r3, [sp, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 8087 	bne.w	8004848 <_dtoa_r+0x8c8>
 800473a:	9b03      	ldr	r3, [sp, #12]
 800473c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004740:	2b00      	cmp	r3, #0
 8004742:	f040 8089 	bne.w	8004858 <_dtoa_r+0x8d8>
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800474c:	0d1b      	lsrs	r3, r3, #20
 800474e:	051b      	lsls	r3, r3, #20
 8004750:	b12b      	cbz	r3, 800475e <_dtoa_r+0x7de>
 8004752:	9b08      	ldr	r3, [sp, #32]
 8004754:	3301      	adds	r3, #1
 8004756:	9308      	str	r3, [sp, #32]
 8004758:	f108 0801 	add.w	r8, r8, #1
 800475c:	2301      	movs	r3, #1
 800475e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 81b0 	beq.w	8004ac8 <_dtoa_r+0xb48>
 8004768:	6923      	ldr	r3, [r4, #16]
 800476a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800476e:	6918      	ldr	r0, [r3, #16]
 8004770:	f000 fb72 	bl	8004e58 <__hi0bits>
 8004774:	f1c0 0020 	rsb	r0, r0, #32
 8004778:	9b08      	ldr	r3, [sp, #32]
 800477a:	4418      	add	r0, r3
 800477c:	f010 001f 	ands.w	r0, r0, #31
 8004780:	d077      	beq.n	8004872 <_dtoa_r+0x8f2>
 8004782:	f1c0 0320 	rsb	r3, r0, #32
 8004786:	2b04      	cmp	r3, #4
 8004788:	dd6b      	ble.n	8004862 <_dtoa_r+0x8e2>
 800478a:	9b08      	ldr	r3, [sp, #32]
 800478c:	f1c0 001c 	rsb	r0, r0, #28
 8004790:	4403      	add	r3, r0
 8004792:	4480      	add	r8, r0
 8004794:	4406      	add	r6, r0
 8004796:	9308      	str	r3, [sp, #32]
 8004798:	f1b8 0f00 	cmp.w	r8, #0
 800479c:	dd05      	ble.n	80047aa <_dtoa_r+0x82a>
 800479e:	4649      	mov	r1, r9
 80047a0:	4642      	mov	r2, r8
 80047a2:	4658      	mov	r0, fp
 80047a4:	f000 fcbe 	bl	8005124 <__lshift>
 80047a8:	4681      	mov	r9, r0
 80047aa:	9b08      	ldr	r3, [sp, #32]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	dd05      	ble.n	80047bc <_dtoa_r+0x83c>
 80047b0:	4621      	mov	r1, r4
 80047b2:	461a      	mov	r2, r3
 80047b4:	4658      	mov	r0, fp
 80047b6:	f000 fcb5 	bl	8005124 <__lshift>
 80047ba:	4604      	mov	r4, r0
 80047bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d059      	beq.n	8004876 <_dtoa_r+0x8f6>
 80047c2:	4621      	mov	r1, r4
 80047c4:	4648      	mov	r0, r9
 80047c6:	f000 fd19 	bl	80051fc <__mcmp>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	da53      	bge.n	8004876 <_dtoa_r+0x8f6>
 80047ce:	1e7b      	subs	r3, r7, #1
 80047d0:	9304      	str	r3, [sp, #16]
 80047d2:	4649      	mov	r1, r9
 80047d4:	2300      	movs	r3, #0
 80047d6:	220a      	movs	r2, #10
 80047d8:	4658      	mov	r0, fp
 80047da:	f000 faf7 	bl	8004dcc <__multadd>
 80047de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047e0:	4681      	mov	r9, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8172 	beq.w	8004acc <_dtoa_r+0xb4c>
 80047e8:	2300      	movs	r3, #0
 80047ea:	4629      	mov	r1, r5
 80047ec:	220a      	movs	r2, #10
 80047ee:	4658      	mov	r0, fp
 80047f0:	f000 faec 	bl	8004dcc <__multadd>
 80047f4:	9b00      	ldr	r3, [sp, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	4605      	mov	r5, r0
 80047fa:	dc67      	bgt.n	80048cc <_dtoa_r+0x94c>
 80047fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047fe:	2b02      	cmp	r3, #2
 8004800:	dc41      	bgt.n	8004886 <_dtoa_r+0x906>
 8004802:	e063      	b.n	80048cc <_dtoa_r+0x94c>
 8004804:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004806:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800480a:	e746      	b.n	800469a <_dtoa_r+0x71a>
 800480c:	9b07      	ldr	r3, [sp, #28]
 800480e:	1e5c      	subs	r4, r3, #1
 8004810:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004812:	42a3      	cmp	r3, r4
 8004814:	bfbf      	itttt	lt
 8004816:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004818:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800481a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800481c:	1ae3      	sublt	r3, r4, r3
 800481e:	bfb4      	ite	lt
 8004820:	18d2      	addlt	r2, r2, r3
 8004822:	1b1c      	subge	r4, r3, r4
 8004824:	9b07      	ldr	r3, [sp, #28]
 8004826:	bfbc      	itt	lt
 8004828:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800482a:	2400      	movlt	r4, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	bfb5      	itete	lt
 8004830:	eba8 0603 	sublt.w	r6, r8, r3
 8004834:	9b07      	ldrge	r3, [sp, #28]
 8004836:	2300      	movlt	r3, #0
 8004838:	4646      	movge	r6, r8
 800483a:	e730      	b.n	800469e <_dtoa_r+0x71e>
 800483c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800483e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004840:	4646      	mov	r6, r8
 8004842:	e735      	b.n	80046b0 <_dtoa_r+0x730>
 8004844:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004846:	e75c      	b.n	8004702 <_dtoa_r+0x782>
 8004848:	2300      	movs	r3, #0
 800484a:	e788      	b.n	800475e <_dtoa_r+0x7de>
 800484c:	3fe00000 	.word	0x3fe00000
 8004850:	40240000 	.word	0x40240000
 8004854:	40140000 	.word	0x40140000
 8004858:	9b02      	ldr	r3, [sp, #8]
 800485a:	e780      	b.n	800475e <_dtoa_r+0x7de>
 800485c:	2300      	movs	r3, #0
 800485e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004860:	e782      	b.n	8004768 <_dtoa_r+0x7e8>
 8004862:	d099      	beq.n	8004798 <_dtoa_r+0x818>
 8004864:	9a08      	ldr	r2, [sp, #32]
 8004866:	331c      	adds	r3, #28
 8004868:	441a      	add	r2, r3
 800486a:	4498      	add	r8, r3
 800486c:	441e      	add	r6, r3
 800486e:	9208      	str	r2, [sp, #32]
 8004870:	e792      	b.n	8004798 <_dtoa_r+0x818>
 8004872:	4603      	mov	r3, r0
 8004874:	e7f6      	b.n	8004864 <_dtoa_r+0x8e4>
 8004876:	9b07      	ldr	r3, [sp, #28]
 8004878:	9704      	str	r7, [sp, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	dc20      	bgt.n	80048c0 <_dtoa_r+0x940>
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004882:	2b02      	cmp	r3, #2
 8004884:	dd1e      	ble.n	80048c4 <_dtoa_r+0x944>
 8004886:	9b00      	ldr	r3, [sp, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f47f aec0 	bne.w	800460e <_dtoa_r+0x68e>
 800488e:	4621      	mov	r1, r4
 8004890:	2205      	movs	r2, #5
 8004892:	4658      	mov	r0, fp
 8004894:	f000 fa9a 	bl	8004dcc <__multadd>
 8004898:	4601      	mov	r1, r0
 800489a:	4604      	mov	r4, r0
 800489c:	4648      	mov	r0, r9
 800489e:	f000 fcad 	bl	80051fc <__mcmp>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	f77f aeb3 	ble.w	800460e <_dtoa_r+0x68e>
 80048a8:	4656      	mov	r6, sl
 80048aa:	2331      	movs	r3, #49	@ 0x31
 80048ac:	f806 3b01 	strb.w	r3, [r6], #1
 80048b0:	9b04      	ldr	r3, [sp, #16]
 80048b2:	3301      	adds	r3, #1
 80048b4:	9304      	str	r3, [sp, #16]
 80048b6:	e6ae      	b.n	8004616 <_dtoa_r+0x696>
 80048b8:	9c07      	ldr	r4, [sp, #28]
 80048ba:	9704      	str	r7, [sp, #16]
 80048bc:	4625      	mov	r5, r4
 80048be:	e7f3      	b.n	80048a8 <_dtoa_r+0x928>
 80048c0:	9b07      	ldr	r3, [sp, #28]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8104 	beq.w	8004ad4 <_dtoa_r+0xb54>
 80048cc:	2e00      	cmp	r6, #0
 80048ce:	dd05      	ble.n	80048dc <_dtoa_r+0x95c>
 80048d0:	4629      	mov	r1, r5
 80048d2:	4632      	mov	r2, r6
 80048d4:	4658      	mov	r0, fp
 80048d6:	f000 fc25 	bl	8005124 <__lshift>
 80048da:	4605      	mov	r5, r0
 80048dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d05a      	beq.n	8004998 <_dtoa_r+0xa18>
 80048e2:	6869      	ldr	r1, [r5, #4]
 80048e4:	4658      	mov	r0, fp
 80048e6:	f000 fa0f 	bl	8004d08 <_Balloc>
 80048ea:	4606      	mov	r6, r0
 80048ec:	b928      	cbnz	r0, 80048fa <_dtoa_r+0x97a>
 80048ee:	4b84      	ldr	r3, [pc, #528]	@ (8004b00 <_dtoa_r+0xb80>)
 80048f0:	4602      	mov	r2, r0
 80048f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80048f6:	f7ff bb5a 	b.w	8003fae <_dtoa_r+0x2e>
 80048fa:	692a      	ldr	r2, [r5, #16]
 80048fc:	3202      	adds	r2, #2
 80048fe:	0092      	lsls	r2, r2, #2
 8004900:	f105 010c 	add.w	r1, r5, #12
 8004904:	300c      	adds	r0, #12
 8004906:	f7ff faa4 	bl	8003e52 <memcpy>
 800490a:	2201      	movs	r2, #1
 800490c:	4631      	mov	r1, r6
 800490e:	4658      	mov	r0, fp
 8004910:	f000 fc08 	bl	8005124 <__lshift>
 8004914:	f10a 0301 	add.w	r3, sl, #1
 8004918:	9307      	str	r3, [sp, #28]
 800491a:	9b00      	ldr	r3, [sp, #0]
 800491c:	4453      	add	r3, sl
 800491e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004920:	9b02      	ldr	r3, [sp, #8]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	462f      	mov	r7, r5
 8004928:	930a      	str	r3, [sp, #40]	@ 0x28
 800492a:	4605      	mov	r5, r0
 800492c:	9b07      	ldr	r3, [sp, #28]
 800492e:	4621      	mov	r1, r4
 8004930:	3b01      	subs	r3, #1
 8004932:	4648      	mov	r0, r9
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	f7ff fa9a 	bl	8003e6e <quorem>
 800493a:	4639      	mov	r1, r7
 800493c:	9002      	str	r0, [sp, #8]
 800493e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004942:	4648      	mov	r0, r9
 8004944:	f000 fc5a 	bl	80051fc <__mcmp>
 8004948:	462a      	mov	r2, r5
 800494a:	9008      	str	r0, [sp, #32]
 800494c:	4621      	mov	r1, r4
 800494e:	4658      	mov	r0, fp
 8004950:	f000 fc70 	bl	8005234 <__mdiff>
 8004954:	68c2      	ldr	r2, [r0, #12]
 8004956:	4606      	mov	r6, r0
 8004958:	bb02      	cbnz	r2, 800499c <_dtoa_r+0xa1c>
 800495a:	4601      	mov	r1, r0
 800495c:	4648      	mov	r0, r9
 800495e:	f000 fc4d 	bl	80051fc <__mcmp>
 8004962:	4602      	mov	r2, r0
 8004964:	4631      	mov	r1, r6
 8004966:	4658      	mov	r0, fp
 8004968:	920e      	str	r2, [sp, #56]	@ 0x38
 800496a:	f000 fa0d 	bl	8004d88 <_Bfree>
 800496e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004970:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004972:	9e07      	ldr	r6, [sp, #28]
 8004974:	ea43 0102 	orr.w	r1, r3, r2
 8004978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800497a:	4319      	orrs	r1, r3
 800497c:	d110      	bne.n	80049a0 <_dtoa_r+0xa20>
 800497e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004982:	d029      	beq.n	80049d8 <_dtoa_r+0xa58>
 8004984:	9b08      	ldr	r3, [sp, #32]
 8004986:	2b00      	cmp	r3, #0
 8004988:	dd02      	ble.n	8004990 <_dtoa_r+0xa10>
 800498a:	9b02      	ldr	r3, [sp, #8]
 800498c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004990:	9b00      	ldr	r3, [sp, #0]
 8004992:	f883 8000 	strb.w	r8, [r3]
 8004996:	e63f      	b.n	8004618 <_dtoa_r+0x698>
 8004998:	4628      	mov	r0, r5
 800499a:	e7bb      	b.n	8004914 <_dtoa_r+0x994>
 800499c:	2201      	movs	r2, #1
 800499e:	e7e1      	b.n	8004964 <_dtoa_r+0x9e4>
 80049a0:	9b08      	ldr	r3, [sp, #32]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	db04      	blt.n	80049b0 <_dtoa_r+0xa30>
 80049a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049a8:	430b      	orrs	r3, r1
 80049aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80049ac:	430b      	orrs	r3, r1
 80049ae:	d120      	bne.n	80049f2 <_dtoa_r+0xa72>
 80049b0:	2a00      	cmp	r2, #0
 80049b2:	dded      	ble.n	8004990 <_dtoa_r+0xa10>
 80049b4:	4649      	mov	r1, r9
 80049b6:	2201      	movs	r2, #1
 80049b8:	4658      	mov	r0, fp
 80049ba:	f000 fbb3 	bl	8005124 <__lshift>
 80049be:	4621      	mov	r1, r4
 80049c0:	4681      	mov	r9, r0
 80049c2:	f000 fc1b 	bl	80051fc <__mcmp>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	dc03      	bgt.n	80049d2 <_dtoa_r+0xa52>
 80049ca:	d1e1      	bne.n	8004990 <_dtoa_r+0xa10>
 80049cc:	f018 0f01 	tst.w	r8, #1
 80049d0:	d0de      	beq.n	8004990 <_dtoa_r+0xa10>
 80049d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80049d6:	d1d8      	bne.n	800498a <_dtoa_r+0xa0a>
 80049d8:	9a00      	ldr	r2, [sp, #0]
 80049da:	2339      	movs	r3, #57	@ 0x39
 80049dc:	7013      	strb	r3, [r2, #0]
 80049de:	4633      	mov	r3, r6
 80049e0:	461e      	mov	r6, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80049e8:	2a39      	cmp	r2, #57	@ 0x39
 80049ea:	d052      	beq.n	8004a92 <_dtoa_r+0xb12>
 80049ec:	3201      	adds	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e612      	b.n	8004618 <_dtoa_r+0x698>
 80049f2:	2a00      	cmp	r2, #0
 80049f4:	dd07      	ble.n	8004a06 <_dtoa_r+0xa86>
 80049f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80049fa:	d0ed      	beq.n	80049d8 <_dtoa_r+0xa58>
 80049fc:	9a00      	ldr	r2, [sp, #0]
 80049fe:	f108 0301 	add.w	r3, r8, #1
 8004a02:	7013      	strb	r3, [r2, #0]
 8004a04:	e608      	b.n	8004618 <_dtoa_r+0x698>
 8004a06:	9b07      	ldr	r3, [sp, #28]
 8004a08:	9a07      	ldr	r2, [sp, #28]
 8004a0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004a0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d028      	beq.n	8004a66 <_dtoa_r+0xae6>
 8004a14:	4649      	mov	r1, r9
 8004a16:	2300      	movs	r3, #0
 8004a18:	220a      	movs	r2, #10
 8004a1a:	4658      	mov	r0, fp
 8004a1c:	f000 f9d6 	bl	8004dcc <__multadd>
 8004a20:	42af      	cmp	r7, r5
 8004a22:	4681      	mov	r9, r0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	f04f 020a 	mov.w	r2, #10
 8004a2c:	4639      	mov	r1, r7
 8004a2e:	4658      	mov	r0, fp
 8004a30:	d107      	bne.n	8004a42 <_dtoa_r+0xac2>
 8004a32:	f000 f9cb 	bl	8004dcc <__multadd>
 8004a36:	4607      	mov	r7, r0
 8004a38:	4605      	mov	r5, r0
 8004a3a:	9b07      	ldr	r3, [sp, #28]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	9307      	str	r3, [sp, #28]
 8004a40:	e774      	b.n	800492c <_dtoa_r+0x9ac>
 8004a42:	f000 f9c3 	bl	8004dcc <__multadd>
 8004a46:	4629      	mov	r1, r5
 8004a48:	4607      	mov	r7, r0
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	220a      	movs	r2, #10
 8004a4e:	4658      	mov	r0, fp
 8004a50:	f000 f9bc 	bl	8004dcc <__multadd>
 8004a54:	4605      	mov	r5, r0
 8004a56:	e7f0      	b.n	8004a3a <_dtoa_r+0xaba>
 8004a58:	9b00      	ldr	r3, [sp, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bfcc      	ite	gt
 8004a5e:	461e      	movgt	r6, r3
 8004a60:	2601      	movle	r6, #1
 8004a62:	4456      	add	r6, sl
 8004a64:	2700      	movs	r7, #0
 8004a66:	4649      	mov	r1, r9
 8004a68:	2201      	movs	r2, #1
 8004a6a:	4658      	mov	r0, fp
 8004a6c:	f000 fb5a 	bl	8005124 <__lshift>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4681      	mov	r9, r0
 8004a74:	f000 fbc2 	bl	80051fc <__mcmp>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	dcb0      	bgt.n	80049de <_dtoa_r+0xa5e>
 8004a7c:	d102      	bne.n	8004a84 <_dtoa_r+0xb04>
 8004a7e:	f018 0f01 	tst.w	r8, #1
 8004a82:	d1ac      	bne.n	80049de <_dtoa_r+0xa5e>
 8004a84:	4633      	mov	r3, r6
 8004a86:	461e      	mov	r6, r3
 8004a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a8c:	2a30      	cmp	r2, #48	@ 0x30
 8004a8e:	d0fa      	beq.n	8004a86 <_dtoa_r+0xb06>
 8004a90:	e5c2      	b.n	8004618 <_dtoa_r+0x698>
 8004a92:	459a      	cmp	sl, r3
 8004a94:	d1a4      	bne.n	80049e0 <_dtoa_r+0xa60>
 8004a96:	9b04      	ldr	r3, [sp, #16]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	9304      	str	r3, [sp, #16]
 8004a9c:	2331      	movs	r3, #49	@ 0x31
 8004a9e:	f88a 3000 	strb.w	r3, [sl]
 8004aa2:	e5b9      	b.n	8004618 <_dtoa_r+0x698>
 8004aa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004aa6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004b04 <_dtoa_r+0xb84>
 8004aaa:	b11b      	cbz	r3, 8004ab4 <_dtoa_r+0xb34>
 8004aac:	f10a 0308 	add.w	r3, sl, #8
 8004ab0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	4650      	mov	r0, sl
 8004ab6:	b019      	add	sp, #100	@ 0x64
 8004ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	f77f ae37 	ble.w	8004732 <_dtoa_r+0x7b2>
 8004ac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ac8:	2001      	movs	r0, #1
 8004aca:	e655      	b.n	8004778 <_dtoa_r+0x7f8>
 8004acc:	9b00      	ldr	r3, [sp, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f77f aed6 	ble.w	8004880 <_dtoa_r+0x900>
 8004ad4:	4656      	mov	r6, sl
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	4648      	mov	r0, r9
 8004ada:	f7ff f9c8 	bl	8003e6e <quorem>
 8004ade:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004ae2:	f806 8b01 	strb.w	r8, [r6], #1
 8004ae6:	9b00      	ldr	r3, [sp, #0]
 8004ae8:	eba6 020a 	sub.w	r2, r6, sl
 8004aec:	4293      	cmp	r3, r2
 8004aee:	ddb3      	ble.n	8004a58 <_dtoa_r+0xad8>
 8004af0:	4649      	mov	r1, r9
 8004af2:	2300      	movs	r3, #0
 8004af4:	220a      	movs	r2, #10
 8004af6:	4658      	mov	r0, fp
 8004af8:	f000 f968 	bl	8004dcc <__multadd>
 8004afc:	4681      	mov	r9, r0
 8004afe:	e7ea      	b.n	8004ad6 <_dtoa_r+0xb56>
 8004b00:	08005c60 	.word	0x08005c60
 8004b04:	08005be4 	.word	0x08005be4

08004b08 <_free_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	d041      	beq.n	8004b94 <_free_r+0x8c>
 8004b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b14:	1f0c      	subs	r4, r1, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bfb8      	it	lt
 8004b1a:	18e4      	addlt	r4, r4, r3
 8004b1c:	f000 f8e8 	bl	8004cf0 <__malloc_lock>
 8004b20:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <_free_r+0x90>)
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	b933      	cbnz	r3, 8004b34 <_free_r+0x2c>
 8004b26:	6063      	str	r3, [r4, #4]
 8004b28:	6014      	str	r4, [r2, #0]
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b30:	f000 b8e4 	b.w	8004cfc <__malloc_unlock>
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	d908      	bls.n	8004b4a <_free_r+0x42>
 8004b38:	6820      	ldr	r0, [r4, #0]
 8004b3a:	1821      	adds	r1, r4, r0
 8004b3c:	428b      	cmp	r3, r1
 8004b3e:	bf01      	itttt	eq
 8004b40:	6819      	ldreq	r1, [r3, #0]
 8004b42:	685b      	ldreq	r3, [r3, #4]
 8004b44:	1809      	addeq	r1, r1, r0
 8004b46:	6021      	streq	r1, [r4, #0]
 8004b48:	e7ed      	b.n	8004b26 <_free_r+0x1e>
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	b10b      	cbz	r3, 8004b54 <_free_r+0x4c>
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d9fa      	bls.n	8004b4a <_free_r+0x42>
 8004b54:	6811      	ldr	r1, [r2, #0]
 8004b56:	1850      	adds	r0, r2, r1
 8004b58:	42a0      	cmp	r0, r4
 8004b5a:	d10b      	bne.n	8004b74 <_free_r+0x6c>
 8004b5c:	6820      	ldr	r0, [r4, #0]
 8004b5e:	4401      	add	r1, r0
 8004b60:	1850      	adds	r0, r2, r1
 8004b62:	4283      	cmp	r3, r0
 8004b64:	6011      	str	r1, [r2, #0]
 8004b66:	d1e0      	bne.n	8004b2a <_free_r+0x22>
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	6053      	str	r3, [r2, #4]
 8004b6e:	4408      	add	r0, r1
 8004b70:	6010      	str	r0, [r2, #0]
 8004b72:	e7da      	b.n	8004b2a <_free_r+0x22>
 8004b74:	d902      	bls.n	8004b7c <_free_r+0x74>
 8004b76:	230c      	movs	r3, #12
 8004b78:	602b      	str	r3, [r5, #0]
 8004b7a:	e7d6      	b.n	8004b2a <_free_r+0x22>
 8004b7c:	6820      	ldr	r0, [r4, #0]
 8004b7e:	1821      	adds	r1, r4, r0
 8004b80:	428b      	cmp	r3, r1
 8004b82:	bf04      	itt	eq
 8004b84:	6819      	ldreq	r1, [r3, #0]
 8004b86:	685b      	ldreq	r3, [r3, #4]
 8004b88:	6063      	str	r3, [r4, #4]
 8004b8a:	bf04      	itt	eq
 8004b8c:	1809      	addeq	r1, r1, r0
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	6054      	str	r4, [r2, #4]
 8004b92:	e7ca      	b.n	8004b2a <_free_r+0x22>
 8004b94:	bd38      	pop	{r3, r4, r5, pc}
 8004b96:	bf00      	nop
 8004b98:	20000528 	.word	0x20000528

08004b9c <malloc>:
 8004b9c:	4b02      	ldr	r3, [pc, #8]	@ (8004ba8 <malloc+0xc>)
 8004b9e:	4601      	mov	r1, r0
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	f000 b825 	b.w	8004bf0 <_malloc_r>
 8004ba6:	bf00      	nop
 8004ba8:	2000000c 	.word	0x2000000c

08004bac <sbrk_aligned>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4e0f      	ldr	r6, [pc, #60]	@ (8004bec <sbrk_aligned+0x40>)
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	6831      	ldr	r1, [r6, #0]
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	b911      	cbnz	r1, 8004bbe <sbrk_aligned+0x12>
 8004bb8:	f000 fcd4 	bl	8005564 <_sbrk_r>
 8004bbc:	6030      	str	r0, [r6, #0]
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f000 fccf 	bl	8005564 <_sbrk_r>
 8004bc6:	1c43      	adds	r3, r0, #1
 8004bc8:	d103      	bne.n	8004bd2 <sbrk_aligned+0x26>
 8004bca:	f04f 34ff 	mov.w	r4, #4294967295
 8004bce:	4620      	mov	r0, r4
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
 8004bd2:	1cc4      	adds	r4, r0, #3
 8004bd4:	f024 0403 	bic.w	r4, r4, #3
 8004bd8:	42a0      	cmp	r0, r4
 8004bda:	d0f8      	beq.n	8004bce <sbrk_aligned+0x22>
 8004bdc:	1a21      	subs	r1, r4, r0
 8004bde:	4628      	mov	r0, r5
 8004be0:	f000 fcc0 	bl	8005564 <_sbrk_r>
 8004be4:	3001      	adds	r0, #1
 8004be6:	d1f2      	bne.n	8004bce <sbrk_aligned+0x22>
 8004be8:	e7ef      	b.n	8004bca <sbrk_aligned+0x1e>
 8004bea:	bf00      	nop
 8004bec:	20000524 	.word	0x20000524

08004bf0 <_malloc_r>:
 8004bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf4:	1ccd      	adds	r5, r1, #3
 8004bf6:	f025 0503 	bic.w	r5, r5, #3
 8004bfa:	3508      	adds	r5, #8
 8004bfc:	2d0c      	cmp	r5, #12
 8004bfe:	bf38      	it	cc
 8004c00:	250c      	movcc	r5, #12
 8004c02:	2d00      	cmp	r5, #0
 8004c04:	4606      	mov	r6, r0
 8004c06:	db01      	blt.n	8004c0c <_malloc_r+0x1c>
 8004c08:	42a9      	cmp	r1, r5
 8004c0a:	d904      	bls.n	8004c16 <_malloc_r+0x26>
 8004c0c:	230c      	movs	r3, #12
 8004c0e:	6033      	str	r3, [r6, #0]
 8004c10:	2000      	movs	r0, #0
 8004c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004cec <_malloc_r+0xfc>
 8004c1a:	f000 f869 	bl	8004cf0 <__malloc_lock>
 8004c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c22:	461c      	mov	r4, r3
 8004c24:	bb44      	cbnz	r4, 8004c78 <_malloc_r+0x88>
 8004c26:	4629      	mov	r1, r5
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f7ff ffbf 	bl	8004bac <sbrk_aligned>
 8004c2e:	1c43      	adds	r3, r0, #1
 8004c30:	4604      	mov	r4, r0
 8004c32:	d158      	bne.n	8004ce6 <_malloc_r+0xf6>
 8004c34:	f8d8 4000 	ldr.w	r4, [r8]
 8004c38:	4627      	mov	r7, r4
 8004c3a:	2f00      	cmp	r7, #0
 8004c3c:	d143      	bne.n	8004cc6 <_malloc_r+0xd6>
 8004c3e:	2c00      	cmp	r4, #0
 8004c40:	d04b      	beq.n	8004cda <_malloc_r+0xea>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	4639      	mov	r1, r7
 8004c46:	4630      	mov	r0, r6
 8004c48:	eb04 0903 	add.w	r9, r4, r3
 8004c4c:	f000 fc8a 	bl	8005564 <_sbrk_r>
 8004c50:	4581      	cmp	r9, r0
 8004c52:	d142      	bne.n	8004cda <_malloc_r+0xea>
 8004c54:	6821      	ldr	r1, [r4, #0]
 8004c56:	1a6d      	subs	r5, r5, r1
 8004c58:	4629      	mov	r1, r5
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f7ff ffa6 	bl	8004bac <sbrk_aligned>
 8004c60:	3001      	adds	r0, #1
 8004c62:	d03a      	beq.n	8004cda <_malloc_r+0xea>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	442b      	add	r3, r5
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	bb62      	cbnz	r2, 8004ccc <_malloc_r+0xdc>
 8004c72:	f8c8 7000 	str.w	r7, [r8]
 8004c76:	e00f      	b.n	8004c98 <_malloc_r+0xa8>
 8004c78:	6822      	ldr	r2, [r4, #0]
 8004c7a:	1b52      	subs	r2, r2, r5
 8004c7c:	d420      	bmi.n	8004cc0 <_malloc_r+0xd0>
 8004c7e:	2a0b      	cmp	r2, #11
 8004c80:	d917      	bls.n	8004cb2 <_malloc_r+0xc2>
 8004c82:	1961      	adds	r1, r4, r5
 8004c84:	42a3      	cmp	r3, r4
 8004c86:	6025      	str	r5, [r4, #0]
 8004c88:	bf18      	it	ne
 8004c8a:	6059      	strne	r1, [r3, #4]
 8004c8c:	6863      	ldr	r3, [r4, #4]
 8004c8e:	bf08      	it	eq
 8004c90:	f8c8 1000 	streq.w	r1, [r8]
 8004c94:	5162      	str	r2, [r4, r5]
 8004c96:	604b      	str	r3, [r1, #4]
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f000 f82f 	bl	8004cfc <__malloc_unlock>
 8004c9e:	f104 000b 	add.w	r0, r4, #11
 8004ca2:	1d23      	adds	r3, r4, #4
 8004ca4:	f020 0007 	bic.w	r0, r0, #7
 8004ca8:	1ac2      	subs	r2, r0, r3
 8004caa:	bf1c      	itt	ne
 8004cac:	1a1b      	subne	r3, r3, r0
 8004cae:	50a3      	strne	r3, [r4, r2]
 8004cb0:	e7af      	b.n	8004c12 <_malloc_r+0x22>
 8004cb2:	6862      	ldr	r2, [r4, #4]
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	bf0c      	ite	eq
 8004cb8:	f8c8 2000 	streq.w	r2, [r8]
 8004cbc:	605a      	strne	r2, [r3, #4]
 8004cbe:	e7eb      	b.n	8004c98 <_malloc_r+0xa8>
 8004cc0:	4623      	mov	r3, r4
 8004cc2:	6864      	ldr	r4, [r4, #4]
 8004cc4:	e7ae      	b.n	8004c24 <_malloc_r+0x34>
 8004cc6:	463c      	mov	r4, r7
 8004cc8:	687f      	ldr	r7, [r7, #4]
 8004cca:	e7b6      	b.n	8004c3a <_malloc_r+0x4a>
 8004ccc:	461a      	mov	r2, r3
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	d1fb      	bne.n	8004ccc <_malloc_r+0xdc>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	6053      	str	r3, [r2, #4]
 8004cd8:	e7de      	b.n	8004c98 <_malloc_r+0xa8>
 8004cda:	230c      	movs	r3, #12
 8004cdc:	6033      	str	r3, [r6, #0]
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f000 f80c 	bl	8004cfc <__malloc_unlock>
 8004ce4:	e794      	b.n	8004c10 <_malloc_r+0x20>
 8004ce6:	6005      	str	r5, [r0, #0]
 8004ce8:	e7d6      	b.n	8004c98 <_malloc_r+0xa8>
 8004cea:	bf00      	nop
 8004cec:	20000528 	.word	0x20000528

08004cf0 <__malloc_lock>:
 8004cf0:	4801      	ldr	r0, [pc, #4]	@ (8004cf8 <__malloc_lock+0x8>)
 8004cf2:	f7ff b8ac 	b.w	8003e4e <__retarget_lock_acquire_recursive>
 8004cf6:	bf00      	nop
 8004cf8:	20000520 	.word	0x20000520

08004cfc <__malloc_unlock>:
 8004cfc:	4801      	ldr	r0, [pc, #4]	@ (8004d04 <__malloc_unlock+0x8>)
 8004cfe:	f7ff b8a7 	b.w	8003e50 <__retarget_lock_release_recursive>
 8004d02:	bf00      	nop
 8004d04:	20000520 	.word	0x20000520

08004d08 <_Balloc>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	69c6      	ldr	r6, [r0, #28]
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	460d      	mov	r5, r1
 8004d10:	b976      	cbnz	r6, 8004d30 <_Balloc+0x28>
 8004d12:	2010      	movs	r0, #16
 8004d14:	f7ff ff42 	bl	8004b9c <malloc>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	61e0      	str	r0, [r4, #28]
 8004d1c:	b920      	cbnz	r0, 8004d28 <_Balloc+0x20>
 8004d1e:	4b18      	ldr	r3, [pc, #96]	@ (8004d80 <_Balloc+0x78>)
 8004d20:	4818      	ldr	r0, [pc, #96]	@ (8004d84 <_Balloc+0x7c>)
 8004d22:	216b      	movs	r1, #107	@ 0x6b
 8004d24:	f000 fc2e 	bl	8005584 <__assert_func>
 8004d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d2c:	6006      	str	r6, [r0, #0]
 8004d2e:	60c6      	str	r6, [r0, #12]
 8004d30:	69e6      	ldr	r6, [r4, #28]
 8004d32:	68f3      	ldr	r3, [r6, #12]
 8004d34:	b183      	cbz	r3, 8004d58 <_Balloc+0x50>
 8004d36:	69e3      	ldr	r3, [r4, #28]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d3e:	b9b8      	cbnz	r0, 8004d70 <_Balloc+0x68>
 8004d40:	2101      	movs	r1, #1
 8004d42:	fa01 f605 	lsl.w	r6, r1, r5
 8004d46:	1d72      	adds	r2, r6, #5
 8004d48:	0092      	lsls	r2, r2, #2
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f000 fc38 	bl	80055c0 <_calloc_r>
 8004d50:	b160      	cbz	r0, 8004d6c <_Balloc+0x64>
 8004d52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d56:	e00e      	b.n	8004d76 <_Balloc+0x6e>
 8004d58:	2221      	movs	r2, #33	@ 0x21
 8004d5a:	2104      	movs	r1, #4
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f000 fc2f 	bl	80055c0 <_calloc_r>
 8004d62:	69e3      	ldr	r3, [r4, #28]
 8004d64:	60f0      	str	r0, [r6, #12]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e4      	bne.n	8004d36 <_Balloc+0x2e>
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	6802      	ldr	r2, [r0, #0]
 8004d72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d76:	2300      	movs	r3, #0
 8004d78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d7c:	e7f7      	b.n	8004d6e <_Balloc+0x66>
 8004d7e:	bf00      	nop
 8004d80:	08005bf1 	.word	0x08005bf1
 8004d84:	08005c71 	.word	0x08005c71

08004d88 <_Bfree>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	69c6      	ldr	r6, [r0, #28]
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	460c      	mov	r4, r1
 8004d90:	b976      	cbnz	r6, 8004db0 <_Bfree+0x28>
 8004d92:	2010      	movs	r0, #16
 8004d94:	f7ff ff02 	bl	8004b9c <malloc>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	61e8      	str	r0, [r5, #28]
 8004d9c:	b920      	cbnz	r0, 8004da8 <_Bfree+0x20>
 8004d9e:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <_Bfree+0x3c>)
 8004da0:	4809      	ldr	r0, [pc, #36]	@ (8004dc8 <_Bfree+0x40>)
 8004da2:	218f      	movs	r1, #143	@ 0x8f
 8004da4:	f000 fbee 	bl	8005584 <__assert_func>
 8004da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dac:	6006      	str	r6, [r0, #0]
 8004dae:	60c6      	str	r6, [r0, #12]
 8004db0:	b13c      	cbz	r4, 8004dc2 <_Bfree+0x3a>
 8004db2:	69eb      	ldr	r3, [r5, #28]
 8004db4:	6862      	ldr	r2, [r4, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dbc:	6021      	str	r1, [r4, #0]
 8004dbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004dc2:	bd70      	pop	{r4, r5, r6, pc}
 8004dc4:	08005bf1 	.word	0x08005bf1
 8004dc8:	08005c71 	.word	0x08005c71

08004dcc <__multadd>:
 8004dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd0:	690d      	ldr	r5, [r1, #16]
 8004dd2:	4607      	mov	r7, r0
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	461e      	mov	r6, r3
 8004dd8:	f101 0c14 	add.w	ip, r1, #20
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f8dc 3000 	ldr.w	r3, [ip]
 8004de2:	b299      	uxth	r1, r3
 8004de4:	fb02 6101 	mla	r1, r2, r1, r6
 8004de8:	0c1e      	lsrs	r6, r3, #16
 8004dea:	0c0b      	lsrs	r3, r1, #16
 8004dec:	fb02 3306 	mla	r3, r2, r6, r3
 8004df0:	b289      	uxth	r1, r1
 8004df2:	3001      	adds	r0, #1
 8004df4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004df8:	4285      	cmp	r5, r0
 8004dfa:	f84c 1b04 	str.w	r1, [ip], #4
 8004dfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e02:	dcec      	bgt.n	8004dde <__multadd+0x12>
 8004e04:	b30e      	cbz	r6, 8004e4a <__multadd+0x7e>
 8004e06:	68a3      	ldr	r3, [r4, #8]
 8004e08:	42ab      	cmp	r3, r5
 8004e0a:	dc19      	bgt.n	8004e40 <__multadd+0x74>
 8004e0c:	6861      	ldr	r1, [r4, #4]
 8004e0e:	4638      	mov	r0, r7
 8004e10:	3101      	adds	r1, #1
 8004e12:	f7ff ff79 	bl	8004d08 <_Balloc>
 8004e16:	4680      	mov	r8, r0
 8004e18:	b928      	cbnz	r0, 8004e26 <__multadd+0x5a>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e50 <__multadd+0x84>)
 8004e1e:	480d      	ldr	r0, [pc, #52]	@ (8004e54 <__multadd+0x88>)
 8004e20:	21ba      	movs	r1, #186	@ 0xba
 8004e22:	f000 fbaf 	bl	8005584 <__assert_func>
 8004e26:	6922      	ldr	r2, [r4, #16]
 8004e28:	3202      	adds	r2, #2
 8004e2a:	f104 010c 	add.w	r1, r4, #12
 8004e2e:	0092      	lsls	r2, r2, #2
 8004e30:	300c      	adds	r0, #12
 8004e32:	f7ff f80e 	bl	8003e52 <memcpy>
 8004e36:	4621      	mov	r1, r4
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f7ff ffa5 	bl	8004d88 <_Bfree>
 8004e3e:	4644      	mov	r4, r8
 8004e40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e44:	3501      	adds	r5, #1
 8004e46:	615e      	str	r6, [r3, #20]
 8004e48:	6125      	str	r5, [r4, #16]
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e50:	08005c60 	.word	0x08005c60
 8004e54:	08005c71 	.word	0x08005c71

08004e58 <__hi0bits>:
 8004e58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	bf36      	itet	cc
 8004e60:	0403      	lslcc	r3, r0, #16
 8004e62:	2000      	movcs	r0, #0
 8004e64:	2010      	movcc	r0, #16
 8004e66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e6a:	bf3c      	itt	cc
 8004e6c:	021b      	lslcc	r3, r3, #8
 8004e6e:	3008      	addcc	r0, #8
 8004e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e74:	bf3c      	itt	cc
 8004e76:	011b      	lslcc	r3, r3, #4
 8004e78:	3004      	addcc	r0, #4
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7e:	bf3c      	itt	cc
 8004e80:	009b      	lslcc	r3, r3, #2
 8004e82:	3002      	addcc	r0, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	db05      	blt.n	8004e94 <__hi0bits+0x3c>
 8004e88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004e8c:	f100 0001 	add.w	r0, r0, #1
 8004e90:	bf08      	it	eq
 8004e92:	2020      	moveq	r0, #32
 8004e94:	4770      	bx	lr

08004e96 <__lo0bits>:
 8004e96:	6803      	ldr	r3, [r0, #0]
 8004e98:	4602      	mov	r2, r0
 8004e9a:	f013 0007 	ands.w	r0, r3, #7
 8004e9e:	d00b      	beq.n	8004eb8 <__lo0bits+0x22>
 8004ea0:	07d9      	lsls	r1, r3, #31
 8004ea2:	d421      	bmi.n	8004ee8 <__lo0bits+0x52>
 8004ea4:	0798      	lsls	r0, r3, #30
 8004ea6:	bf49      	itett	mi
 8004ea8:	085b      	lsrmi	r3, r3, #1
 8004eaa:	089b      	lsrpl	r3, r3, #2
 8004eac:	2001      	movmi	r0, #1
 8004eae:	6013      	strmi	r3, [r2, #0]
 8004eb0:	bf5c      	itt	pl
 8004eb2:	6013      	strpl	r3, [r2, #0]
 8004eb4:	2002      	movpl	r0, #2
 8004eb6:	4770      	bx	lr
 8004eb8:	b299      	uxth	r1, r3
 8004eba:	b909      	cbnz	r1, 8004ec0 <__lo0bits+0x2a>
 8004ebc:	0c1b      	lsrs	r3, r3, #16
 8004ebe:	2010      	movs	r0, #16
 8004ec0:	b2d9      	uxtb	r1, r3
 8004ec2:	b909      	cbnz	r1, 8004ec8 <__lo0bits+0x32>
 8004ec4:	3008      	adds	r0, #8
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	0719      	lsls	r1, r3, #28
 8004eca:	bf04      	itt	eq
 8004ecc:	091b      	lsreq	r3, r3, #4
 8004ece:	3004      	addeq	r0, #4
 8004ed0:	0799      	lsls	r1, r3, #30
 8004ed2:	bf04      	itt	eq
 8004ed4:	089b      	lsreq	r3, r3, #2
 8004ed6:	3002      	addeq	r0, #2
 8004ed8:	07d9      	lsls	r1, r3, #31
 8004eda:	d403      	bmi.n	8004ee4 <__lo0bits+0x4e>
 8004edc:	085b      	lsrs	r3, r3, #1
 8004ede:	f100 0001 	add.w	r0, r0, #1
 8004ee2:	d003      	beq.n	8004eec <__lo0bits+0x56>
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	4770      	bx	lr
 8004ee8:	2000      	movs	r0, #0
 8004eea:	4770      	bx	lr
 8004eec:	2020      	movs	r0, #32
 8004eee:	4770      	bx	lr

08004ef0 <__i2b>:
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	f7ff ff07 	bl	8004d08 <_Balloc>
 8004efa:	4602      	mov	r2, r0
 8004efc:	b928      	cbnz	r0, 8004f0a <__i2b+0x1a>
 8004efe:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <__i2b+0x24>)
 8004f00:	4805      	ldr	r0, [pc, #20]	@ (8004f18 <__i2b+0x28>)
 8004f02:	f240 1145 	movw	r1, #325	@ 0x145
 8004f06:	f000 fb3d 	bl	8005584 <__assert_func>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	6144      	str	r4, [r0, #20]
 8004f0e:	6103      	str	r3, [r0, #16]
 8004f10:	bd10      	pop	{r4, pc}
 8004f12:	bf00      	nop
 8004f14:	08005c60 	.word	0x08005c60
 8004f18:	08005c71 	.word	0x08005c71

08004f1c <__multiply>:
 8004f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	4614      	mov	r4, r2
 8004f22:	690a      	ldr	r2, [r1, #16]
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	bfa8      	it	ge
 8004f2a:	4623      	movge	r3, r4
 8004f2c:	460f      	mov	r7, r1
 8004f2e:	bfa4      	itt	ge
 8004f30:	460c      	movge	r4, r1
 8004f32:	461f      	movge	r7, r3
 8004f34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004f38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004f3c:	68a3      	ldr	r3, [r4, #8]
 8004f3e:	6861      	ldr	r1, [r4, #4]
 8004f40:	eb0a 0609 	add.w	r6, sl, r9
 8004f44:	42b3      	cmp	r3, r6
 8004f46:	b085      	sub	sp, #20
 8004f48:	bfb8      	it	lt
 8004f4a:	3101      	addlt	r1, #1
 8004f4c:	f7ff fedc 	bl	8004d08 <_Balloc>
 8004f50:	b930      	cbnz	r0, 8004f60 <__multiply+0x44>
 8004f52:	4602      	mov	r2, r0
 8004f54:	4b44      	ldr	r3, [pc, #272]	@ (8005068 <__multiply+0x14c>)
 8004f56:	4845      	ldr	r0, [pc, #276]	@ (800506c <__multiply+0x150>)
 8004f58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004f5c:	f000 fb12 	bl	8005584 <__assert_func>
 8004f60:	f100 0514 	add.w	r5, r0, #20
 8004f64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f68:	462b      	mov	r3, r5
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	4543      	cmp	r3, r8
 8004f6e:	d321      	bcc.n	8004fb4 <__multiply+0x98>
 8004f70:	f107 0114 	add.w	r1, r7, #20
 8004f74:	f104 0214 	add.w	r2, r4, #20
 8004f78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004f7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004f80:	9302      	str	r3, [sp, #8]
 8004f82:	1b13      	subs	r3, r2, r4
 8004f84:	3b15      	subs	r3, #21
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	f104 0715 	add.w	r7, r4, #21
 8004f90:	42ba      	cmp	r2, r7
 8004f92:	bf38      	it	cc
 8004f94:	2304      	movcc	r3, #4
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	9b02      	ldr	r3, [sp, #8]
 8004f9a:	9103      	str	r1, [sp, #12]
 8004f9c:	428b      	cmp	r3, r1
 8004f9e:	d80c      	bhi.n	8004fba <__multiply+0x9e>
 8004fa0:	2e00      	cmp	r6, #0
 8004fa2:	dd03      	ble.n	8004fac <__multiply+0x90>
 8004fa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d05b      	beq.n	8005064 <__multiply+0x148>
 8004fac:	6106      	str	r6, [r0, #16]
 8004fae:	b005      	add	sp, #20
 8004fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb4:	f843 2b04 	str.w	r2, [r3], #4
 8004fb8:	e7d8      	b.n	8004f6c <__multiply+0x50>
 8004fba:	f8b1 a000 	ldrh.w	sl, [r1]
 8004fbe:	f1ba 0f00 	cmp.w	sl, #0
 8004fc2:	d024      	beq.n	800500e <__multiply+0xf2>
 8004fc4:	f104 0e14 	add.w	lr, r4, #20
 8004fc8:	46a9      	mov	r9, r5
 8004fca:	f04f 0c00 	mov.w	ip, #0
 8004fce:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004fd2:	f8d9 3000 	ldr.w	r3, [r9]
 8004fd6:	fa1f fb87 	uxth.w	fp, r7
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	fb0a 330b 	mla	r3, sl, fp, r3
 8004fe0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004fe4:	f8d9 7000 	ldr.w	r7, [r9]
 8004fe8:	4463      	add	r3, ip
 8004fea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004fee:	fb0a c70b 	mla	r7, sl, fp, ip
 8004ff2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004ffc:	4572      	cmp	r2, lr
 8004ffe:	f849 3b04 	str.w	r3, [r9], #4
 8005002:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005006:	d8e2      	bhi.n	8004fce <__multiply+0xb2>
 8005008:	9b01      	ldr	r3, [sp, #4]
 800500a:	f845 c003 	str.w	ip, [r5, r3]
 800500e:	9b03      	ldr	r3, [sp, #12]
 8005010:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005014:	3104      	adds	r1, #4
 8005016:	f1b9 0f00 	cmp.w	r9, #0
 800501a:	d021      	beq.n	8005060 <__multiply+0x144>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	f104 0c14 	add.w	ip, r4, #20
 8005022:	46ae      	mov	lr, r5
 8005024:	f04f 0a00 	mov.w	sl, #0
 8005028:	f8bc b000 	ldrh.w	fp, [ip]
 800502c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005030:	fb09 770b 	mla	r7, r9, fp, r7
 8005034:	4457      	add	r7, sl
 8005036:	b29b      	uxth	r3, r3
 8005038:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800503c:	f84e 3b04 	str.w	r3, [lr], #4
 8005040:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005044:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005048:	f8be 3000 	ldrh.w	r3, [lr]
 800504c:	fb09 330a 	mla	r3, r9, sl, r3
 8005050:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005054:	4562      	cmp	r2, ip
 8005056:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800505a:	d8e5      	bhi.n	8005028 <__multiply+0x10c>
 800505c:	9f01      	ldr	r7, [sp, #4]
 800505e:	51eb      	str	r3, [r5, r7]
 8005060:	3504      	adds	r5, #4
 8005062:	e799      	b.n	8004f98 <__multiply+0x7c>
 8005064:	3e01      	subs	r6, #1
 8005066:	e79b      	b.n	8004fa0 <__multiply+0x84>
 8005068:	08005c60 	.word	0x08005c60
 800506c:	08005c71 	.word	0x08005c71

08005070 <__pow5mult>:
 8005070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005074:	4615      	mov	r5, r2
 8005076:	f012 0203 	ands.w	r2, r2, #3
 800507a:	4607      	mov	r7, r0
 800507c:	460e      	mov	r6, r1
 800507e:	d007      	beq.n	8005090 <__pow5mult+0x20>
 8005080:	4c25      	ldr	r4, [pc, #148]	@ (8005118 <__pow5mult+0xa8>)
 8005082:	3a01      	subs	r2, #1
 8005084:	2300      	movs	r3, #0
 8005086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800508a:	f7ff fe9f 	bl	8004dcc <__multadd>
 800508e:	4606      	mov	r6, r0
 8005090:	10ad      	asrs	r5, r5, #2
 8005092:	d03d      	beq.n	8005110 <__pow5mult+0xa0>
 8005094:	69fc      	ldr	r4, [r7, #28]
 8005096:	b97c      	cbnz	r4, 80050b8 <__pow5mult+0x48>
 8005098:	2010      	movs	r0, #16
 800509a:	f7ff fd7f 	bl	8004b9c <malloc>
 800509e:	4602      	mov	r2, r0
 80050a0:	61f8      	str	r0, [r7, #28]
 80050a2:	b928      	cbnz	r0, 80050b0 <__pow5mult+0x40>
 80050a4:	4b1d      	ldr	r3, [pc, #116]	@ (800511c <__pow5mult+0xac>)
 80050a6:	481e      	ldr	r0, [pc, #120]	@ (8005120 <__pow5mult+0xb0>)
 80050a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80050ac:	f000 fa6a 	bl	8005584 <__assert_func>
 80050b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050b4:	6004      	str	r4, [r0, #0]
 80050b6:	60c4      	str	r4, [r0, #12]
 80050b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80050bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80050c0:	b94c      	cbnz	r4, 80050d6 <__pow5mult+0x66>
 80050c2:	f240 2171 	movw	r1, #625	@ 0x271
 80050c6:	4638      	mov	r0, r7
 80050c8:	f7ff ff12 	bl	8004ef0 <__i2b>
 80050cc:	2300      	movs	r3, #0
 80050ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80050d2:	4604      	mov	r4, r0
 80050d4:	6003      	str	r3, [r0, #0]
 80050d6:	f04f 0900 	mov.w	r9, #0
 80050da:	07eb      	lsls	r3, r5, #31
 80050dc:	d50a      	bpl.n	80050f4 <__pow5mult+0x84>
 80050de:	4631      	mov	r1, r6
 80050e0:	4622      	mov	r2, r4
 80050e2:	4638      	mov	r0, r7
 80050e4:	f7ff ff1a 	bl	8004f1c <__multiply>
 80050e8:	4631      	mov	r1, r6
 80050ea:	4680      	mov	r8, r0
 80050ec:	4638      	mov	r0, r7
 80050ee:	f7ff fe4b 	bl	8004d88 <_Bfree>
 80050f2:	4646      	mov	r6, r8
 80050f4:	106d      	asrs	r5, r5, #1
 80050f6:	d00b      	beq.n	8005110 <__pow5mult+0xa0>
 80050f8:	6820      	ldr	r0, [r4, #0]
 80050fa:	b938      	cbnz	r0, 800510c <__pow5mult+0x9c>
 80050fc:	4622      	mov	r2, r4
 80050fe:	4621      	mov	r1, r4
 8005100:	4638      	mov	r0, r7
 8005102:	f7ff ff0b 	bl	8004f1c <__multiply>
 8005106:	6020      	str	r0, [r4, #0]
 8005108:	f8c0 9000 	str.w	r9, [r0]
 800510c:	4604      	mov	r4, r0
 800510e:	e7e4      	b.n	80050da <__pow5mult+0x6a>
 8005110:	4630      	mov	r0, r6
 8005112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005116:	bf00      	nop
 8005118:	08005ccc 	.word	0x08005ccc
 800511c:	08005bf1 	.word	0x08005bf1
 8005120:	08005c71 	.word	0x08005c71

08005124 <__lshift>:
 8005124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	460c      	mov	r4, r1
 800512a:	6849      	ldr	r1, [r1, #4]
 800512c:	6923      	ldr	r3, [r4, #16]
 800512e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005132:	68a3      	ldr	r3, [r4, #8]
 8005134:	4607      	mov	r7, r0
 8005136:	4691      	mov	r9, r2
 8005138:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800513c:	f108 0601 	add.w	r6, r8, #1
 8005140:	42b3      	cmp	r3, r6
 8005142:	db0b      	blt.n	800515c <__lshift+0x38>
 8005144:	4638      	mov	r0, r7
 8005146:	f7ff fddf 	bl	8004d08 <_Balloc>
 800514a:	4605      	mov	r5, r0
 800514c:	b948      	cbnz	r0, 8005162 <__lshift+0x3e>
 800514e:	4602      	mov	r2, r0
 8005150:	4b28      	ldr	r3, [pc, #160]	@ (80051f4 <__lshift+0xd0>)
 8005152:	4829      	ldr	r0, [pc, #164]	@ (80051f8 <__lshift+0xd4>)
 8005154:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005158:	f000 fa14 	bl	8005584 <__assert_func>
 800515c:	3101      	adds	r1, #1
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	e7ee      	b.n	8005140 <__lshift+0x1c>
 8005162:	2300      	movs	r3, #0
 8005164:	f100 0114 	add.w	r1, r0, #20
 8005168:	f100 0210 	add.w	r2, r0, #16
 800516c:	4618      	mov	r0, r3
 800516e:	4553      	cmp	r3, sl
 8005170:	db33      	blt.n	80051da <__lshift+0xb6>
 8005172:	6920      	ldr	r0, [r4, #16]
 8005174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005178:	f104 0314 	add.w	r3, r4, #20
 800517c:	f019 091f 	ands.w	r9, r9, #31
 8005180:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005184:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005188:	d02b      	beq.n	80051e2 <__lshift+0xbe>
 800518a:	f1c9 0e20 	rsb	lr, r9, #32
 800518e:	468a      	mov	sl, r1
 8005190:	2200      	movs	r2, #0
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	fa00 f009 	lsl.w	r0, r0, r9
 8005198:	4310      	orrs	r0, r2
 800519a:	f84a 0b04 	str.w	r0, [sl], #4
 800519e:	f853 2b04 	ldr.w	r2, [r3], #4
 80051a2:	459c      	cmp	ip, r3
 80051a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80051a8:	d8f3      	bhi.n	8005192 <__lshift+0x6e>
 80051aa:	ebac 0304 	sub.w	r3, ip, r4
 80051ae:	3b15      	subs	r3, #21
 80051b0:	f023 0303 	bic.w	r3, r3, #3
 80051b4:	3304      	adds	r3, #4
 80051b6:	f104 0015 	add.w	r0, r4, #21
 80051ba:	4584      	cmp	ip, r0
 80051bc:	bf38      	it	cc
 80051be:	2304      	movcc	r3, #4
 80051c0:	50ca      	str	r2, [r1, r3]
 80051c2:	b10a      	cbz	r2, 80051c8 <__lshift+0xa4>
 80051c4:	f108 0602 	add.w	r6, r8, #2
 80051c8:	3e01      	subs	r6, #1
 80051ca:	4638      	mov	r0, r7
 80051cc:	612e      	str	r6, [r5, #16]
 80051ce:	4621      	mov	r1, r4
 80051d0:	f7ff fdda 	bl	8004d88 <_Bfree>
 80051d4:	4628      	mov	r0, r5
 80051d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051da:	f842 0f04 	str.w	r0, [r2, #4]!
 80051de:	3301      	adds	r3, #1
 80051e0:	e7c5      	b.n	800516e <__lshift+0x4a>
 80051e2:	3904      	subs	r1, #4
 80051e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80051ec:	459c      	cmp	ip, r3
 80051ee:	d8f9      	bhi.n	80051e4 <__lshift+0xc0>
 80051f0:	e7ea      	b.n	80051c8 <__lshift+0xa4>
 80051f2:	bf00      	nop
 80051f4:	08005c60 	.word	0x08005c60
 80051f8:	08005c71 	.word	0x08005c71

080051fc <__mcmp>:
 80051fc:	690a      	ldr	r2, [r1, #16]
 80051fe:	4603      	mov	r3, r0
 8005200:	6900      	ldr	r0, [r0, #16]
 8005202:	1a80      	subs	r0, r0, r2
 8005204:	b530      	push	{r4, r5, lr}
 8005206:	d10e      	bne.n	8005226 <__mcmp+0x2a>
 8005208:	3314      	adds	r3, #20
 800520a:	3114      	adds	r1, #20
 800520c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005210:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005214:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005218:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800521c:	4295      	cmp	r5, r2
 800521e:	d003      	beq.n	8005228 <__mcmp+0x2c>
 8005220:	d205      	bcs.n	800522e <__mcmp+0x32>
 8005222:	f04f 30ff 	mov.w	r0, #4294967295
 8005226:	bd30      	pop	{r4, r5, pc}
 8005228:	42a3      	cmp	r3, r4
 800522a:	d3f3      	bcc.n	8005214 <__mcmp+0x18>
 800522c:	e7fb      	b.n	8005226 <__mcmp+0x2a>
 800522e:	2001      	movs	r0, #1
 8005230:	e7f9      	b.n	8005226 <__mcmp+0x2a>
	...

08005234 <__mdiff>:
 8005234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005238:	4689      	mov	r9, r1
 800523a:	4606      	mov	r6, r0
 800523c:	4611      	mov	r1, r2
 800523e:	4648      	mov	r0, r9
 8005240:	4614      	mov	r4, r2
 8005242:	f7ff ffdb 	bl	80051fc <__mcmp>
 8005246:	1e05      	subs	r5, r0, #0
 8005248:	d112      	bne.n	8005270 <__mdiff+0x3c>
 800524a:	4629      	mov	r1, r5
 800524c:	4630      	mov	r0, r6
 800524e:	f7ff fd5b 	bl	8004d08 <_Balloc>
 8005252:	4602      	mov	r2, r0
 8005254:	b928      	cbnz	r0, 8005262 <__mdiff+0x2e>
 8005256:	4b3f      	ldr	r3, [pc, #252]	@ (8005354 <__mdiff+0x120>)
 8005258:	f240 2137 	movw	r1, #567	@ 0x237
 800525c:	483e      	ldr	r0, [pc, #248]	@ (8005358 <__mdiff+0x124>)
 800525e:	f000 f991 	bl	8005584 <__assert_func>
 8005262:	2301      	movs	r3, #1
 8005264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005268:	4610      	mov	r0, r2
 800526a:	b003      	add	sp, #12
 800526c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005270:	bfbc      	itt	lt
 8005272:	464b      	movlt	r3, r9
 8005274:	46a1      	movlt	r9, r4
 8005276:	4630      	mov	r0, r6
 8005278:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800527c:	bfba      	itte	lt
 800527e:	461c      	movlt	r4, r3
 8005280:	2501      	movlt	r5, #1
 8005282:	2500      	movge	r5, #0
 8005284:	f7ff fd40 	bl	8004d08 <_Balloc>
 8005288:	4602      	mov	r2, r0
 800528a:	b918      	cbnz	r0, 8005294 <__mdiff+0x60>
 800528c:	4b31      	ldr	r3, [pc, #196]	@ (8005354 <__mdiff+0x120>)
 800528e:	f240 2145 	movw	r1, #581	@ 0x245
 8005292:	e7e3      	b.n	800525c <__mdiff+0x28>
 8005294:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005298:	6926      	ldr	r6, [r4, #16]
 800529a:	60c5      	str	r5, [r0, #12]
 800529c:	f109 0310 	add.w	r3, r9, #16
 80052a0:	f109 0514 	add.w	r5, r9, #20
 80052a4:	f104 0e14 	add.w	lr, r4, #20
 80052a8:	f100 0b14 	add.w	fp, r0, #20
 80052ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80052b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	46d9      	mov	r9, fp
 80052b8:	f04f 0c00 	mov.w	ip, #0
 80052bc:	9b01      	ldr	r3, [sp, #4]
 80052be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80052c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	fa1f f38a 	uxth.w	r3, sl
 80052cc:	4619      	mov	r1, r3
 80052ce:	b283      	uxth	r3, r0
 80052d0:	1acb      	subs	r3, r1, r3
 80052d2:	0c00      	lsrs	r0, r0, #16
 80052d4:	4463      	add	r3, ip
 80052d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80052da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80052de:	b29b      	uxth	r3, r3
 80052e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80052e4:	4576      	cmp	r6, lr
 80052e6:	f849 3b04 	str.w	r3, [r9], #4
 80052ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80052ee:	d8e5      	bhi.n	80052bc <__mdiff+0x88>
 80052f0:	1b33      	subs	r3, r6, r4
 80052f2:	3b15      	subs	r3, #21
 80052f4:	f023 0303 	bic.w	r3, r3, #3
 80052f8:	3415      	adds	r4, #21
 80052fa:	3304      	adds	r3, #4
 80052fc:	42a6      	cmp	r6, r4
 80052fe:	bf38      	it	cc
 8005300:	2304      	movcc	r3, #4
 8005302:	441d      	add	r5, r3
 8005304:	445b      	add	r3, fp
 8005306:	461e      	mov	r6, r3
 8005308:	462c      	mov	r4, r5
 800530a:	4544      	cmp	r4, r8
 800530c:	d30e      	bcc.n	800532c <__mdiff+0xf8>
 800530e:	f108 0103 	add.w	r1, r8, #3
 8005312:	1b49      	subs	r1, r1, r5
 8005314:	f021 0103 	bic.w	r1, r1, #3
 8005318:	3d03      	subs	r5, #3
 800531a:	45a8      	cmp	r8, r5
 800531c:	bf38      	it	cc
 800531e:	2100      	movcc	r1, #0
 8005320:	440b      	add	r3, r1
 8005322:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005326:	b191      	cbz	r1, 800534e <__mdiff+0x11a>
 8005328:	6117      	str	r7, [r2, #16]
 800532a:	e79d      	b.n	8005268 <__mdiff+0x34>
 800532c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005330:	46e6      	mov	lr, ip
 8005332:	0c08      	lsrs	r0, r1, #16
 8005334:	fa1c fc81 	uxtah	ip, ip, r1
 8005338:	4471      	add	r1, lr
 800533a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800533e:	b289      	uxth	r1, r1
 8005340:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005344:	f846 1b04 	str.w	r1, [r6], #4
 8005348:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800534c:	e7dd      	b.n	800530a <__mdiff+0xd6>
 800534e:	3f01      	subs	r7, #1
 8005350:	e7e7      	b.n	8005322 <__mdiff+0xee>
 8005352:	bf00      	nop
 8005354:	08005c60 	.word	0x08005c60
 8005358:	08005c71 	.word	0x08005c71

0800535c <__d2b>:
 800535c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005360:	460f      	mov	r7, r1
 8005362:	2101      	movs	r1, #1
 8005364:	ec59 8b10 	vmov	r8, r9, d0
 8005368:	4616      	mov	r6, r2
 800536a:	f7ff fccd 	bl	8004d08 <_Balloc>
 800536e:	4604      	mov	r4, r0
 8005370:	b930      	cbnz	r0, 8005380 <__d2b+0x24>
 8005372:	4602      	mov	r2, r0
 8005374:	4b23      	ldr	r3, [pc, #140]	@ (8005404 <__d2b+0xa8>)
 8005376:	4824      	ldr	r0, [pc, #144]	@ (8005408 <__d2b+0xac>)
 8005378:	f240 310f 	movw	r1, #783	@ 0x30f
 800537c:	f000 f902 	bl	8005584 <__assert_func>
 8005380:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005384:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005388:	b10d      	cbz	r5, 800538e <__d2b+0x32>
 800538a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800538e:	9301      	str	r3, [sp, #4]
 8005390:	f1b8 0300 	subs.w	r3, r8, #0
 8005394:	d023      	beq.n	80053de <__d2b+0x82>
 8005396:	4668      	mov	r0, sp
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	f7ff fd7c 	bl	8004e96 <__lo0bits>
 800539e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80053a2:	b1d0      	cbz	r0, 80053da <__d2b+0x7e>
 80053a4:	f1c0 0320 	rsb	r3, r0, #32
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	430b      	orrs	r3, r1
 80053ae:	40c2      	lsrs	r2, r0
 80053b0:	6163      	str	r3, [r4, #20]
 80053b2:	9201      	str	r2, [sp, #4]
 80053b4:	9b01      	ldr	r3, [sp, #4]
 80053b6:	61a3      	str	r3, [r4, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bf0c      	ite	eq
 80053bc:	2201      	moveq	r2, #1
 80053be:	2202      	movne	r2, #2
 80053c0:	6122      	str	r2, [r4, #16]
 80053c2:	b1a5      	cbz	r5, 80053ee <__d2b+0x92>
 80053c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80053c8:	4405      	add	r5, r0
 80053ca:	603d      	str	r5, [r7, #0]
 80053cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80053d0:	6030      	str	r0, [r6, #0]
 80053d2:	4620      	mov	r0, r4
 80053d4:	b003      	add	sp, #12
 80053d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053da:	6161      	str	r1, [r4, #20]
 80053dc:	e7ea      	b.n	80053b4 <__d2b+0x58>
 80053de:	a801      	add	r0, sp, #4
 80053e0:	f7ff fd59 	bl	8004e96 <__lo0bits>
 80053e4:	9b01      	ldr	r3, [sp, #4]
 80053e6:	6163      	str	r3, [r4, #20]
 80053e8:	3020      	adds	r0, #32
 80053ea:	2201      	movs	r2, #1
 80053ec:	e7e8      	b.n	80053c0 <__d2b+0x64>
 80053ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80053f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80053f6:	6038      	str	r0, [r7, #0]
 80053f8:	6918      	ldr	r0, [r3, #16]
 80053fa:	f7ff fd2d 	bl	8004e58 <__hi0bits>
 80053fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005402:	e7e5      	b.n	80053d0 <__d2b+0x74>
 8005404:	08005c60 	.word	0x08005c60
 8005408:	08005c71 	.word	0x08005c71

0800540c <__sflush_r>:
 800540c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005414:	0716      	lsls	r6, r2, #28
 8005416:	4605      	mov	r5, r0
 8005418:	460c      	mov	r4, r1
 800541a:	d454      	bmi.n	80054c6 <__sflush_r+0xba>
 800541c:	684b      	ldr	r3, [r1, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	dc02      	bgt.n	8005428 <__sflush_r+0x1c>
 8005422:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	dd48      	ble.n	80054ba <__sflush_r+0xae>
 8005428:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800542a:	2e00      	cmp	r6, #0
 800542c:	d045      	beq.n	80054ba <__sflush_r+0xae>
 800542e:	2300      	movs	r3, #0
 8005430:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005434:	682f      	ldr	r7, [r5, #0]
 8005436:	6a21      	ldr	r1, [r4, #32]
 8005438:	602b      	str	r3, [r5, #0]
 800543a:	d030      	beq.n	800549e <__sflush_r+0x92>
 800543c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	0759      	lsls	r1, r3, #29
 8005442:	d505      	bpl.n	8005450 <__sflush_r+0x44>
 8005444:	6863      	ldr	r3, [r4, #4]
 8005446:	1ad2      	subs	r2, r2, r3
 8005448:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800544a:	b10b      	cbz	r3, 8005450 <__sflush_r+0x44>
 800544c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	2300      	movs	r3, #0
 8005452:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005454:	6a21      	ldr	r1, [r4, #32]
 8005456:	4628      	mov	r0, r5
 8005458:	47b0      	blx	r6
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	d106      	bne.n	800546e <__sflush_r+0x62>
 8005460:	6829      	ldr	r1, [r5, #0]
 8005462:	291d      	cmp	r1, #29
 8005464:	d82b      	bhi.n	80054be <__sflush_r+0xb2>
 8005466:	4a2a      	ldr	r2, [pc, #168]	@ (8005510 <__sflush_r+0x104>)
 8005468:	410a      	asrs	r2, r1
 800546a:	07d6      	lsls	r6, r2, #31
 800546c:	d427      	bmi.n	80054be <__sflush_r+0xb2>
 800546e:	2200      	movs	r2, #0
 8005470:	6062      	str	r2, [r4, #4]
 8005472:	04d9      	lsls	r1, r3, #19
 8005474:	6922      	ldr	r2, [r4, #16]
 8005476:	6022      	str	r2, [r4, #0]
 8005478:	d504      	bpl.n	8005484 <__sflush_r+0x78>
 800547a:	1c42      	adds	r2, r0, #1
 800547c:	d101      	bne.n	8005482 <__sflush_r+0x76>
 800547e:	682b      	ldr	r3, [r5, #0]
 8005480:	b903      	cbnz	r3, 8005484 <__sflush_r+0x78>
 8005482:	6560      	str	r0, [r4, #84]	@ 0x54
 8005484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005486:	602f      	str	r7, [r5, #0]
 8005488:	b1b9      	cbz	r1, 80054ba <__sflush_r+0xae>
 800548a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800548e:	4299      	cmp	r1, r3
 8005490:	d002      	beq.n	8005498 <__sflush_r+0x8c>
 8005492:	4628      	mov	r0, r5
 8005494:	f7ff fb38 	bl	8004b08 <_free_r>
 8005498:	2300      	movs	r3, #0
 800549a:	6363      	str	r3, [r4, #52]	@ 0x34
 800549c:	e00d      	b.n	80054ba <__sflush_r+0xae>
 800549e:	2301      	movs	r3, #1
 80054a0:	4628      	mov	r0, r5
 80054a2:	47b0      	blx	r6
 80054a4:	4602      	mov	r2, r0
 80054a6:	1c50      	adds	r0, r2, #1
 80054a8:	d1c9      	bne.n	800543e <__sflush_r+0x32>
 80054aa:	682b      	ldr	r3, [r5, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0c6      	beq.n	800543e <__sflush_r+0x32>
 80054b0:	2b1d      	cmp	r3, #29
 80054b2:	d001      	beq.n	80054b8 <__sflush_r+0xac>
 80054b4:	2b16      	cmp	r3, #22
 80054b6:	d11e      	bne.n	80054f6 <__sflush_r+0xea>
 80054b8:	602f      	str	r7, [r5, #0]
 80054ba:	2000      	movs	r0, #0
 80054bc:	e022      	b.n	8005504 <__sflush_r+0xf8>
 80054be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054c2:	b21b      	sxth	r3, r3
 80054c4:	e01b      	b.n	80054fe <__sflush_r+0xf2>
 80054c6:	690f      	ldr	r7, [r1, #16]
 80054c8:	2f00      	cmp	r7, #0
 80054ca:	d0f6      	beq.n	80054ba <__sflush_r+0xae>
 80054cc:	0793      	lsls	r3, r2, #30
 80054ce:	680e      	ldr	r6, [r1, #0]
 80054d0:	bf08      	it	eq
 80054d2:	694b      	ldreq	r3, [r1, #20]
 80054d4:	600f      	str	r7, [r1, #0]
 80054d6:	bf18      	it	ne
 80054d8:	2300      	movne	r3, #0
 80054da:	eba6 0807 	sub.w	r8, r6, r7
 80054de:	608b      	str	r3, [r1, #8]
 80054e0:	f1b8 0f00 	cmp.w	r8, #0
 80054e4:	dde9      	ble.n	80054ba <__sflush_r+0xae>
 80054e6:	6a21      	ldr	r1, [r4, #32]
 80054e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80054ea:	4643      	mov	r3, r8
 80054ec:	463a      	mov	r2, r7
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b0      	blx	r6
 80054f2:	2800      	cmp	r0, #0
 80054f4:	dc08      	bgt.n	8005508 <__sflush_r+0xfc>
 80054f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054fe:	81a3      	strh	r3, [r4, #12]
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005508:	4407      	add	r7, r0
 800550a:	eba8 0800 	sub.w	r8, r8, r0
 800550e:	e7e7      	b.n	80054e0 <__sflush_r+0xd4>
 8005510:	dfbffffe 	.word	0xdfbffffe

08005514 <_fflush_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	690b      	ldr	r3, [r1, #16]
 8005518:	4605      	mov	r5, r0
 800551a:	460c      	mov	r4, r1
 800551c:	b913      	cbnz	r3, 8005524 <_fflush_r+0x10>
 800551e:	2500      	movs	r5, #0
 8005520:	4628      	mov	r0, r5
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	b118      	cbz	r0, 800552e <_fflush_r+0x1a>
 8005526:	6a03      	ldr	r3, [r0, #32]
 8005528:	b90b      	cbnz	r3, 800552e <_fflush_r+0x1a>
 800552a:	f7fe fb99 	bl	8003c60 <__sinit>
 800552e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f3      	beq.n	800551e <_fflush_r+0xa>
 8005536:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005538:	07d0      	lsls	r0, r2, #31
 800553a:	d404      	bmi.n	8005546 <_fflush_r+0x32>
 800553c:	0599      	lsls	r1, r3, #22
 800553e:	d402      	bmi.n	8005546 <_fflush_r+0x32>
 8005540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005542:	f7fe fc84 	bl	8003e4e <__retarget_lock_acquire_recursive>
 8005546:	4628      	mov	r0, r5
 8005548:	4621      	mov	r1, r4
 800554a:	f7ff ff5f 	bl	800540c <__sflush_r>
 800554e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005550:	07da      	lsls	r2, r3, #31
 8005552:	4605      	mov	r5, r0
 8005554:	d4e4      	bmi.n	8005520 <_fflush_r+0xc>
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	059b      	lsls	r3, r3, #22
 800555a:	d4e1      	bmi.n	8005520 <_fflush_r+0xc>
 800555c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800555e:	f7fe fc77 	bl	8003e50 <__retarget_lock_release_recursive>
 8005562:	e7dd      	b.n	8005520 <_fflush_r+0xc>

08005564 <_sbrk_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4d06      	ldr	r5, [pc, #24]	@ (8005580 <_sbrk_r+0x1c>)
 8005568:	2300      	movs	r3, #0
 800556a:	4604      	mov	r4, r0
 800556c:	4608      	mov	r0, r1
 800556e:	602b      	str	r3, [r5, #0]
 8005570:	f7fd fe22 	bl	80031b8 <_sbrk>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	d102      	bne.n	800557e <_sbrk_r+0x1a>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	b103      	cbz	r3, 800557e <_sbrk_r+0x1a>
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	2000051c 	.word	0x2000051c

08005584 <__assert_func>:
 8005584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005586:	4614      	mov	r4, r2
 8005588:	461a      	mov	r2, r3
 800558a:	4b09      	ldr	r3, [pc, #36]	@ (80055b0 <__assert_func+0x2c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4605      	mov	r5, r0
 8005590:	68d8      	ldr	r0, [r3, #12]
 8005592:	b954      	cbnz	r4, 80055aa <__assert_func+0x26>
 8005594:	4b07      	ldr	r3, [pc, #28]	@ (80055b4 <__assert_func+0x30>)
 8005596:	461c      	mov	r4, r3
 8005598:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800559c:	9100      	str	r1, [sp, #0]
 800559e:	462b      	mov	r3, r5
 80055a0:	4905      	ldr	r1, [pc, #20]	@ (80055b8 <__assert_func+0x34>)
 80055a2:	f000 f841 	bl	8005628 <fiprintf>
 80055a6:	f000 f851 	bl	800564c <abort>
 80055aa:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <__assert_func+0x38>)
 80055ac:	e7f4      	b.n	8005598 <__assert_func+0x14>
 80055ae:	bf00      	nop
 80055b0:	2000000c 	.word	0x2000000c
 80055b4:	08005e0d 	.word	0x08005e0d
 80055b8:	08005ddf 	.word	0x08005ddf
 80055bc:	08005dd2 	.word	0x08005dd2

080055c0 <_calloc_r>:
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	fba1 5402 	umull	r5, r4, r1, r2
 80055c6:	b93c      	cbnz	r4, 80055d8 <_calloc_r+0x18>
 80055c8:	4629      	mov	r1, r5
 80055ca:	f7ff fb11 	bl	8004bf0 <_malloc_r>
 80055ce:	4606      	mov	r6, r0
 80055d0:	b928      	cbnz	r0, 80055de <_calloc_r+0x1e>
 80055d2:	2600      	movs	r6, #0
 80055d4:	4630      	mov	r0, r6
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
 80055d8:	220c      	movs	r2, #12
 80055da:	6002      	str	r2, [r0, #0]
 80055dc:	e7f9      	b.n	80055d2 <_calloc_r+0x12>
 80055de:	462a      	mov	r2, r5
 80055e0:	4621      	mov	r1, r4
 80055e2:	f7fe fbb6 	bl	8003d52 <memset>
 80055e6:	e7f5      	b.n	80055d4 <_calloc_r+0x14>

080055e8 <__ascii_mbtowc>:
 80055e8:	b082      	sub	sp, #8
 80055ea:	b901      	cbnz	r1, 80055ee <__ascii_mbtowc+0x6>
 80055ec:	a901      	add	r1, sp, #4
 80055ee:	b142      	cbz	r2, 8005602 <__ascii_mbtowc+0x1a>
 80055f0:	b14b      	cbz	r3, 8005606 <__ascii_mbtowc+0x1e>
 80055f2:	7813      	ldrb	r3, [r2, #0]
 80055f4:	600b      	str	r3, [r1, #0]
 80055f6:	7812      	ldrb	r2, [r2, #0]
 80055f8:	1e10      	subs	r0, r2, #0
 80055fa:	bf18      	it	ne
 80055fc:	2001      	movne	r0, #1
 80055fe:	b002      	add	sp, #8
 8005600:	4770      	bx	lr
 8005602:	4610      	mov	r0, r2
 8005604:	e7fb      	b.n	80055fe <__ascii_mbtowc+0x16>
 8005606:	f06f 0001 	mvn.w	r0, #1
 800560a:	e7f8      	b.n	80055fe <__ascii_mbtowc+0x16>

0800560c <__ascii_wctomb>:
 800560c:	4603      	mov	r3, r0
 800560e:	4608      	mov	r0, r1
 8005610:	b141      	cbz	r1, 8005624 <__ascii_wctomb+0x18>
 8005612:	2aff      	cmp	r2, #255	@ 0xff
 8005614:	d904      	bls.n	8005620 <__ascii_wctomb+0x14>
 8005616:	228a      	movs	r2, #138	@ 0x8a
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	f04f 30ff 	mov.w	r0, #4294967295
 800561e:	4770      	bx	lr
 8005620:	700a      	strb	r2, [r1, #0]
 8005622:	2001      	movs	r0, #1
 8005624:	4770      	bx	lr
	...

08005628 <fiprintf>:
 8005628:	b40e      	push	{r1, r2, r3}
 800562a:	b503      	push	{r0, r1, lr}
 800562c:	4601      	mov	r1, r0
 800562e:	ab03      	add	r3, sp, #12
 8005630:	4805      	ldr	r0, [pc, #20]	@ (8005648 <fiprintf+0x20>)
 8005632:	f853 2b04 	ldr.w	r2, [r3], #4
 8005636:	6800      	ldr	r0, [r0, #0]
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	f000 f837 	bl	80056ac <_vfiprintf_r>
 800563e:	b002      	add	sp, #8
 8005640:	f85d eb04 	ldr.w	lr, [sp], #4
 8005644:	b003      	add	sp, #12
 8005646:	4770      	bx	lr
 8005648:	2000000c 	.word	0x2000000c

0800564c <abort>:
 800564c:	b508      	push	{r3, lr}
 800564e:	2006      	movs	r0, #6
 8005650:	f000 fa00 	bl	8005a54 <raise>
 8005654:	2001      	movs	r0, #1
 8005656:	f7fd fd37 	bl	80030c8 <_exit>

0800565a <__sfputc_r>:
 800565a:	6893      	ldr	r3, [r2, #8]
 800565c:	3b01      	subs	r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	b410      	push	{r4}
 8005662:	6093      	str	r3, [r2, #8]
 8005664:	da08      	bge.n	8005678 <__sfputc_r+0x1e>
 8005666:	6994      	ldr	r4, [r2, #24]
 8005668:	42a3      	cmp	r3, r4
 800566a:	db01      	blt.n	8005670 <__sfputc_r+0x16>
 800566c:	290a      	cmp	r1, #10
 800566e:	d103      	bne.n	8005678 <__sfputc_r+0x1e>
 8005670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005674:	f000 b932 	b.w	80058dc <__swbuf_r>
 8005678:	6813      	ldr	r3, [r2, #0]
 800567a:	1c58      	adds	r0, r3, #1
 800567c:	6010      	str	r0, [r2, #0]
 800567e:	7019      	strb	r1, [r3, #0]
 8005680:	4608      	mov	r0, r1
 8005682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005686:	4770      	bx	lr

08005688 <__sfputs_r>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	4606      	mov	r6, r0
 800568c:	460f      	mov	r7, r1
 800568e:	4614      	mov	r4, r2
 8005690:	18d5      	adds	r5, r2, r3
 8005692:	42ac      	cmp	r4, r5
 8005694:	d101      	bne.n	800569a <__sfputs_r+0x12>
 8005696:	2000      	movs	r0, #0
 8005698:	e007      	b.n	80056aa <__sfputs_r+0x22>
 800569a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569e:	463a      	mov	r2, r7
 80056a0:	4630      	mov	r0, r6
 80056a2:	f7ff ffda 	bl	800565a <__sfputc_r>
 80056a6:	1c43      	adds	r3, r0, #1
 80056a8:	d1f3      	bne.n	8005692 <__sfputs_r+0xa>
 80056aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080056ac <_vfiprintf_r>:
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	460d      	mov	r5, r1
 80056b2:	b09d      	sub	sp, #116	@ 0x74
 80056b4:	4614      	mov	r4, r2
 80056b6:	4698      	mov	r8, r3
 80056b8:	4606      	mov	r6, r0
 80056ba:	b118      	cbz	r0, 80056c4 <_vfiprintf_r+0x18>
 80056bc:	6a03      	ldr	r3, [r0, #32]
 80056be:	b90b      	cbnz	r3, 80056c4 <_vfiprintf_r+0x18>
 80056c0:	f7fe face 	bl	8003c60 <__sinit>
 80056c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056c6:	07d9      	lsls	r1, r3, #31
 80056c8:	d405      	bmi.n	80056d6 <_vfiprintf_r+0x2a>
 80056ca:	89ab      	ldrh	r3, [r5, #12]
 80056cc:	059a      	lsls	r2, r3, #22
 80056ce:	d402      	bmi.n	80056d6 <_vfiprintf_r+0x2a>
 80056d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056d2:	f7fe fbbc 	bl	8003e4e <__retarget_lock_acquire_recursive>
 80056d6:	89ab      	ldrh	r3, [r5, #12]
 80056d8:	071b      	lsls	r3, r3, #28
 80056da:	d501      	bpl.n	80056e0 <_vfiprintf_r+0x34>
 80056dc:	692b      	ldr	r3, [r5, #16]
 80056de:	b99b      	cbnz	r3, 8005708 <_vfiprintf_r+0x5c>
 80056e0:	4629      	mov	r1, r5
 80056e2:	4630      	mov	r0, r6
 80056e4:	f000 f938 	bl	8005958 <__swsetup_r>
 80056e8:	b170      	cbz	r0, 8005708 <_vfiprintf_r+0x5c>
 80056ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056ec:	07dc      	lsls	r4, r3, #31
 80056ee:	d504      	bpl.n	80056fa <_vfiprintf_r+0x4e>
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	b01d      	add	sp, #116	@ 0x74
 80056f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fa:	89ab      	ldrh	r3, [r5, #12]
 80056fc:	0598      	lsls	r0, r3, #22
 80056fe:	d4f7      	bmi.n	80056f0 <_vfiprintf_r+0x44>
 8005700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005702:	f7fe fba5 	bl	8003e50 <__retarget_lock_release_recursive>
 8005706:	e7f3      	b.n	80056f0 <_vfiprintf_r+0x44>
 8005708:	2300      	movs	r3, #0
 800570a:	9309      	str	r3, [sp, #36]	@ 0x24
 800570c:	2320      	movs	r3, #32
 800570e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005712:	f8cd 800c 	str.w	r8, [sp, #12]
 8005716:	2330      	movs	r3, #48	@ 0x30
 8005718:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80058c8 <_vfiprintf_r+0x21c>
 800571c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005720:	f04f 0901 	mov.w	r9, #1
 8005724:	4623      	mov	r3, r4
 8005726:	469a      	mov	sl, r3
 8005728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800572c:	b10a      	cbz	r2, 8005732 <_vfiprintf_r+0x86>
 800572e:	2a25      	cmp	r2, #37	@ 0x25
 8005730:	d1f9      	bne.n	8005726 <_vfiprintf_r+0x7a>
 8005732:	ebba 0b04 	subs.w	fp, sl, r4
 8005736:	d00b      	beq.n	8005750 <_vfiprintf_r+0xa4>
 8005738:	465b      	mov	r3, fp
 800573a:	4622      	mov	r2, r4
 800573c:	4629      	mov	r1, r5
 800573e:	4630      	mov	r0, r6
 8005740:	f7ff ffa2 	bl	8005688 <__sfputs_r>
 8005744:	3001      	adds	r0, #1
 8005746:	f000 80a7 	beq.w	8005898 <_vfiprintf_r+0x1ec>
 800574a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800574c:	445a      	add	r2, fp
 800574e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005750:	f89a 3000 	ldrb.w	r3, [sl]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 809f 	beq.w	8005898 <_vfiprintf_r+0x1ec>
 800575a:	2300      	movs	r3, #0
 800575c:	f04f 32ff 	mov.w	r2, #4294967295
 8005760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005764:	f10a 0a01 	add.w	sl, sl, #1
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	9307      	str	r3, [sp, #28]
 800576c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005770:	931a      	str	r3, [sp, #104]	@ 0x68
 8005772:	4654      	mov	r4, sl
 8005774:	2205      	movs	r2, #5
 8005776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800577a:	4853      	ldr	r0, [pc, #332]	@ (80058c8 <_vfiprintf_r+0x21c>)
 800577c:	f7fa fd30 	bl	80001e0 <memchr>
 8005780:	9a04      	ldr	r2, [sp, #16]
 8005782:	b9d8      	cbnz	r0, 80057bc <_vfiprintf_r+0x110>
 8005784:	06d1      	lsls	r1, r2, #27
 8005786:	bf44      	itt	mi
 8005788:	2320      	movmi	r3, #32
 800578a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800578e:	0713      	lsls	r3, r2, #28
 8005790:	bf44      	itt	mi
 8005792:	232b      	movmi	r3, #43	@ 0x2b
 8005794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005798:	f89a 3000 	ldrb.w	r3, [sl]
 800579c:	2b2a      	cmp	r3, #42	@ 0x2a
 800579e:	d015      	beq.n	80057cc <_vfiprintf_r+0x120>
 80057a0:	9a07      	ldr	r2, [sp, #28]
 80057a2:	4654      	mov	r4, sl
 80057a4:	2000      	movs	r0, #0
 80057a6:	f04f 0c0a 	mov.w	ip, #10
 80057aa:	4621      	mov	r1, r4
 80057ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057b0:	3b30      	subs	r3, #48	@ 0x30
 80057b2:	2b09      	cmp	r3, #9
 80057b4:	d94b      	bls.n	800584e <_vfiprintf_r+0x1a2>
 80057b6:	b1b0      	cbz	r0, 80057e6 <_vfiprintf_r+0x13a>
 80057b8:	9207      	str	r2, [sp, #28]
 80057ba:	e014      	b.n	80057e6 <_vfiprintf_r+0x13a>
 80057bc:	eba0 0308 	sub.w	r3, r0, r8
 80057c0:	fa09 f303 	lsl.w	r3, r9, r3
 80057c4:	4313      	orrs	r3, r2
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	46a2      	mov	sl, r4
 80057ca:	e7d2      	b.n	8005772 <_vfiprintf_r+0xc6>
 80057cc:	9b03      	ldr	r3, [sp, #12]
 80057ce:	1d19      	adds	r1, r3, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	9103      	str	r1, [sp, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bfbb      	ittet	lt
 80057d8:	425b      	neglt	r3, r3
 80057da:	f042 0202 	orrlt.w	r2, r2, #2
 80057de:	9307      	strge	r3, [sp, #28]
 80057e0:	9307      	strlt	r3, [sp, #28]
 80057e2:	bfb8      	it	lt
 80057e4:	9204      	strlt	r2, [sp, #16]
 80057e6:	7823      	ldrb	r3, [r4, #0]
 80057e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80057ea:	d10a      	bne.n	8005802 <_vfiprintf_r+0x156>
 80057ec:	7863      	ldrb	r3, [r4, #1]
 80057ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80057f0:	d132      	bne.n	8005858 <_vfiprintf_r+0x1ac>
 80057f2:	9b03      	ldr	r3, [sp, #12]
 80057f4:	1d1a      	adds	r2, r3, #4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	9203      	str	r2, [sp, #12]
 80057fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057fe:	3402      	adds	r4, #2
 8005800:	9305      	str	r3, [sp, #20]
 8005802:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80058d8 <_vfiprintf_r+0x22c>
 8005806:	7821      	ldrb	r1, [r4, #0]
 8005808:	2203      	movs	r2, #3
 800580a:	4650      	mov	r0, sl
 800580c:	f7fa fce8 	bl	80001e0 <memchr>
 8005810:	b138      	cbz	r0, 8005822 <_vfiprintf_r+0x176>
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	eba0 000a 	sub.w	r0, r0, sl
 8005818:	2240      	movs	r2, #64	@ 0x40
 800581a:	4082      	lsls	r2, r0
 800581c:	4313      	orrs	r3, r2
 800581e:	3401      	adds	r4, #1
 8005820:	9304      	str	r3, [sp, #16]
 8005822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005826:	4829      	ldr	r0, [pc, #164]	@ (80058cc <_vfiprintf_r+0x220>)
 8005828:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800582c:	2206      	movs	r2, #6
 800582e:	f7fa fcd7 	bl	80001e0 <memchr>
 8005832:	2800      	cmp	r0, #0
 8005834:	d03f      	beq.n	80058b6 <_vfiprintf_r+0x20a>
 8005836:	4b26      	ldr	r3, [pc, #152]	@ (80058d0 <_vfiprintf_r+0x224>)
 8005838:	bb1b      	cbnz	r3, 8005882 <_vfiprintf_r+0x1d6>
 800583a:	9b03      	ldr	r3, [sp, #12]
 800583c:	3307      	adds	r3, #7
 800583e:	f023 0307 	bic.w	r3, r3, #7
 8005842:	3308      	adds	r3, #8
 8005844:	9303      	str	r3, [sp, #12]
 8005846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005848:	443b      	add	r3, r7
 800584a:	9309      	str	r3, [sp, #36]	@ 0x24
 800584c:	e76a      	b.n	8005724 <_vfiprintf_r+0x78>
 800584e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005852:	460c      	mov	r4, r1
 8005854:	2001      	movs	r0, #1
 8005856:	e7a8      	b.n	80057aa <_vfiprintf_r+0xfe>
 8005858:	2300      	movs	r3, #0
 800585a:	3401      	adds	r4, #1
 800585c:	9305      	str	r3, [sp, #20]
 800585e:	4619      	mov	r1, r3
 8005860:	f04f 0c0a 	mov.w	ip, #10
 8005864:	4620      	mov	r0, r4
 8005866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800586a:	3a30      	subs	r2, #48	@ 0x30
 800586c:	2a09      	cmp	r2, #9
 800586e:	d903      	bls.n	8005878 <_vfiprintf_r+0x1cc>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0c6      	beq.n	8005802 <_vfiprintf_r+0x156>
 8005874:	9105      	str	r1, [sp, #20]
 8005876:	e7c4      	b.n	8005802 <_vfiprintf_r+0x156>
 8005878:	fb0c 2101 	mla	r1, ip, r1, r2
 800587c:	4604      	mov	r4, r0
 800587e:	2301      	movs	r3, #1
 8005880:	e7f0      	b.n	8005864 <_vfiprintf_r+0x1b8>
 8005882:	ab03      	add	r3, sp, #12
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	462a      	mov	r2, r5
 8005888:	4b12      	ldr	r3, [pc, #72]	@ (80058d4 <_vfiprintf_r+0x228>)
 800588a:	a904      	add	r1, sp, #16
 800588c:	4630      	mov	r0, r6
 800588e:	f7fd fda3 	bl	80033d8 <_printf_float>
 8005892:	4607      	mov	r7, r0
 8005894:	1c78      	adds	r0, r7, #1
 8005896:	d1d6      	bne.n	8005846 <_vfiprintf_r+0x19a>
 8005898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800589a:	07d9      	lsls	r1, r3, #31
 800589c:	d405      	bmi.n	80058aa <_vfiprintf_r+0x1fe>
 800589e:	89ab      	ldrh	r3, [r5, #12]
 80058a0:	059a      	lsls	r2, r3, #22
 80058a2:	d402      	bmi.n	80058aa <_vfiprintf_r+0x1fe>
 80058a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058a6:	f7fe fad3 	bl	8003e50 <__retarget_lock_release_recursive>
 80058aa:	89ab      	ldrh	r3, [r5, #12]
 80058ac:	065b      	lsls	r3, r3, #25
 80058ae:	f53f af1f 	bmi.w	80056f0 <_vfiprintf_r+0x44>
 80058b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058b4:	e71e      	b.n	80056f4 <_vfiprintf_r+0x48>
 80058b6:	ab03      	add	r3, sp, #12
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	462a      	mov	r2, r5
 80058bc:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <_vfiprintf_r+0x228>)
 80058be:	a904      	add	r1, sp, #16
 80058c0:	4630      	mov	r0, r6
 80058c2:	f7fe f821 	bl	8003908 <_printf_i>
 80058c6:	e7e4      	b.n	8005892 <_vfiprintf_r+0x1e6>
 80058c8:	08005f0f 	.word	0x08005f0f
 80058cc:	08005f19 	.word	0x08005f19
 80058d0:	080033d9 	.word	0x080033d9
 80058d4:	08005689 	.word	0x08005689
 80058d8:	08005f15 	.word	0x08005f15

080058dc <__swbuf_r>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	460e      	mov	r6, r1
 80058e0:	4614      	mov	r4, r2
 80058e2:	4605      	mov	r5, r0
 80058e4:	b118      	cbz	r0, 80058ee <__swbuf_r+0x12>
 80058e6:	6a03      	ldr	r3, [r0, #32]
 80058e8:	b90b      	cbnz	r3, 80058ee <__swbuf_r+0x12>
 80058ea:	f7fe f9b9 	bl	8003c60 <__sinit>
 80058ee:	69a3      	ldr	r3, [r4, #24]
 80058f0:	60a3      	str	r3, [r4, #8]
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	071a      	lsls	r2, r3, #28
 80058f6:	d501      	bpl.n	80058fc <__swbuf_r+0x20>
 80058f8:	6923      	ldr	r3, [r4, #16]
 80058fa:	b943      	cbnz	r3, 800590e <__swbuf_r+0x32>
 80058fc:	4621      	mov	r1, r4
 80058fe:	4628      	mov	r0, r5
 8005900:	f000 f82a 	bl	8005958 <__swsetup_r>
 8005904:	b118      	cbz	r0, 800590e <__swbuf_r+0x32>
 8005906:	f04f 37ff 	mov.w	r7, #4294967295
 800590a:	4638      	mov	r0, r7
 800590c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	6922      	ldr	r2, [r4, #16]
 8005912:	1a98      	subs	r0, r3, r2
 8005914:	6963      	ldr	r3, [r4, #20]
 8005916:	b2f6      	uxtb	r6, r6
 8005918:	4283      	cmp	r3, r0
 800591a:	4637      	mov	r7, r6
 800591c:	dc05      	bgt.n	800592a <__swbuf_r+0x4e>
 800591e:	4621      	mov	r1, r4
 8005920:	4628      	mov	r0, r5
 8005922:	f7ff fdf7 	bl	8005514 <_fflush_r>
 8005926:	2800      	cmp	r0, #0
 8005928:	d1ed      	bne.n	8005906 <__swbuf_r+0x2a>
 800592a:	68a3      	ldr	r3, [r4, #8]
 800592c:	3b01      	subs	r3, #1
 800592e:	60a3      	str	r3, [r4, #8]
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	6022      	str	r2, [r4, #0]
 8005936:	701e      	strb	r6, [r3, #0]
 8005938:	6962      	ldr	r2, [r4, #20]
 800593a:	1c43      	adds	r3, r0, #1
 800593c:	429a      	cmp	r2, r3
 800593e:	d004      	beq.n	800594a <__swbuf_r+0x6e>
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	07db      	lsls	r3, r3, #31
 8005944:	d5e1      	bpl.n	800590a <__swbuf_r+0x2e>
 8005946:	2e0a      	cmp	r6, #10
 8005948:	d1df      	bne.n	800590a <__swbuf_r+0x2e>
 800594a:	4621      	mov	r1, r4
 800594c:	4628      	mov	r0, r5
 800594e:	f7ff fde1 	bl	8005514 <_fflush_r>
 8005952:	2800      	cmp	r0, #0
 8005954:	d0d9      	beq.n	800590a <__swbuf_r+0x2e>
 8005956:	e7d6      	b.n	8005906 <__swbuf_r+0x2a>

08005958 <__swsetup_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4b29      	ldr	r3, [pc, #164]	@ (8005a00 <__swsetup_r+0xa8>)
 800595c:	4605      	mov	r5, r0
 800595e:	6818      	ldr	r0, [r3, #0]
 8005960:	460c      	mov	r4, r1
 8005962:	b118      	cbz	r0, 800596c <__swsetup_r+0x14>
 8005964:	6a03      	ldr	r3, [r0, #32]
 8005966:	b90b      	cbnz	r3, 800596c <__swsetup_r+0x14>
 8005968:	f7fe f97a 	bl	8003c60 <__sinit>
 800596c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005970:	0719      	lsls	r1, r3, #28
 8005972:	d422      	bmi.n	80059ba <__swsetup_r+0x62>
 8005974:	06da      	lsls	r2, r3, #27
 8005976:	d407      	bmi.n	8005988 <__swsetup_r+0x30>
 8005978:	2209      	movs	r2, #9
 800597a:	602a      	str	r2, [r5, #0]
 800597c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005980:	81a3      	strh	r3, [r4, #12]
 8005982:	f04f 30ff 	mov.w	r0, #4294967295
 8005986:	e033      	b.n	80059f0 <__swsetup_r+0x98>
 8005988:	0758      	lsls	r0, r3, #29
 800598a:	d512      	bpl.n	80059b2 <__swsetup_r+0x5a>
 800598c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800598e:	b141      	cbz	r1, 80059a2 <__swsetup_r+0x4a>
 8005990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005994:	4299      	cmp	r1, r3
 8005996:	d002      	beq.n	800599e <__swsetup_r+0x46>
 8005998:	4628      	mov	r0, r5
 800599a:	f7ff f8b5 	bl	8004b08 <_free_r>
 800599e:	2300      	movs	r3, #0
 80059a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	2300      	movs	r3, #0
 80059ac:	6063      	str	r3, [r4, #4]
 80059ae:	6923      	ldr	r3, [r4, #16]
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	89a3      	ldrh	r3, [r4, #12]
 80059b4:	f043 0308 	orr.w	r3, r3, #8
 80059b8:	81a3      	strh	r3, [r4, #12]
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	b94b      	cbnz	r3, 80059d2 <__swsetup_r+0x7a>
 80059be:	89a3      	ldrh	r3, [r4, #12]
 80059c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059c8:	d003      	beq.n	80059d2 <__swsetup_r+0x7a>
 80059ca:	4621      	mov	r1, r4
 80059cc:	4628      	mov	r0, r5
 80059ce:	f000 f883 	bl	8005ad8 <__smakebuf_r>
 80059d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d6:	f013 0201 	ands.w	r2, r3, #1
 80059da:	d00a      	beq.n	80059f2 <__swsetup_r+0x9a>
 80059dc:	2200      	movs	r2, #0
 80059de:	60a2      	str	r2, [r4, #8]
 80059e0:	6962      	ldr	r2, [r4, #20]
 80059e2:	4252      	negs	r2, r2
 80059e4:	61a2      	str	r2, [r4, #24]
 80059e6:	6922      	ldr	r2, [r4, #16]
 80059e8:	b942      	cbnz	r2, 80059fc <__swsetup_r+0xa4>
 80059ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059ee:	d1c5      	bne.n	800597c <__swsetup_r+0x24>
 80059f0:	bd38      	pop	{r3, r4, r5, pc}
 80059f2:	0799      	lsls	r1, r3, #30
 80059f4:	bf58      	it	pl
 80059f6:	6962      	ldrpl	r2, [r4, #20]
 80059f8:	60a2      	str	r2, [r4, #8]
 80059fa:	e7f4      	b.n	80059e6 <__swsetup_r+0x8e>
 80059fc:	2000      	movs	r0, #0
 80059fe:	e7f7      	b.n	80059f0 <__swsetup_r+0x98>
 8005a00:	2000000c 	.word	0x2000000c

08005a04 <_raise_r>:
 8005a04:	291f      	cmp	r1, #31
 8005a06:	b538      	push	{r3, r4, r5, lr}
 8005a08:	4605      	mov	r5, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	d904      	bls.n	8005a18 <_raise_r+0x14>
 8005a0e:	2316      	movs	r3, #22
 8005a10:	6003      	str	r3, [r0, #0]
 8005a12:	f04f 30ff 	mov.w	r0, #4294967295
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005a1a:	b112      	cbz	r2, 8005a22 <_raise_r+0x1e>
 8005a1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a20:	b94b      	cbnz	r3, 8005a36 <_raise_r+0x32>
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 f830 	bl	8005a88 <_getpid_r>
 8005a28:	4622      	mov	r2, r4
 8005a2a:	4601      	mov	r1, r0
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a32:	f000 b817 	b.w	8005a64 <_kill_r>
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d00a      	beq.n	8005a50 <_raise_r+0x4c>
 8005a3a:	1c59      	adds	r1, r3, #1
 8005a3c:	d103      	bne.n	8005a46 <_raise_r+0x42>
 8005a3e:	2316      	movs	r3, #22
 8005a40:	6003      	str	r3, [r0, #0]
 8005a42:	2001      	movs	r0, #1
 8005a44:	e7e7      	b.n	8005a16 <_raise_r+0x12>
 8005a46:	2100      	movs	r1, #0
 8005a48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4798      	blx	r3
 8005a50:	2000      	movs	r0, #0
 8005a52:	e7e0      	b.n	8005a16 <_raise_r+0x12>

08005a54 <raise>:
 8005a54:	4b02      	ldr	r3, [pc, #8]	@ (8005a60 <raise+0xc>)
 8005a56:	4601      	mov	r1, r0
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	f7ff bfd3 	b.w	8005a04 <_raise_r>
 8005a5e:	bf00      	nop
 8005a60:	2000000c 	.word	0x2000000c

08005a64 <_kill_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4d07      	ldr	r5, [pc, #28]	@ (8005a84 <_kill_r+0x20>)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	4611      	mov	r1, r2
 8005a70:	602b      	str	r3, [r5, #0]
 8005a72:	f7fd fb19 	bl	80030a8 <_kill>
 8005a76:	1c43      	adds	r3, r0, #1
 8005a78:	d102      	bne.n	8005a80 <_kill_r+0x1c>
 8005a7a:	682b      	ldr	r3, [r5, #0]
 8005a7c:	b103      	cbz	r3, 8005a80 <_kill_r+0x1c>
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	bd38      	pop	{r3, r4, r5, pc}
 8005a82:	bf00      	nop
 8005a84:	2000051c 	.word	0x2000051c

08005a88 <_getpid_r>:
 8005a88:	f7fd bb06 	b.w	8003098 <_getpid>

08005a8c <__swhatbuf_r>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	460c      	mov	r4, r1
 8005a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a94:	2900      	cmp	r1, #0
 8005a96:	b096      	sub	sp, #88	@ 0x58
 8005a98:	4615      	mov	r5, r2
 8005a9a:	461e      	mov	r6, r3
 8005a9c:	da0d      	bge.n	8005aba <__swhatbuf_r+0x2e>
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005aa4:	f04f 0100 	mov.w	r1, #0
 8005aa8:	bf14      	ite	ne
 8005aaa:	2340      	movne	r3, #64	@ 0x40
 8005aac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	6031      	str	r1, [r6, #0]
 8005ab4:	602b      	str	r3, [r5, #0]
 8005ab6:	b016      	add	sp, #88	@ 0x58
 8005ab8:	bd70      	pop	{r4, r5, r6, pc}
 8005aba:	466a      	mov	r2, sp
 8005abc:	f000 f848 	bl	8005b50 <_fstat_r>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	dbec      	blt.n	8005a9e <__swhatbuf_r+0x12>
 8005ac4:	9901      	ldr	r1, [sp, #4]
 8005ac6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005aca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ace:	4259      	negs	r1, r3
 8005ad0:	4159      	adcs	r1, r3
 8005ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ad6:	e7eb      	b.n	8005ab0 <__swhatbuf_r+0x24>

08005ad8 <__smakebuf_r>:
 8005ad8:	898b      	ldrh	r3, [r1, #12]
 8005ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005adc:	079d      	lsls	r5, r3, #30
 8005ade:	4606      	mov	r6, r0
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	d507      	bpl.n	8005af4 <__smakebuf_r+0x1c>
 8005ae4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	6123      	str	r3, [r4, #16]
 8005aec:	2301      	movs	r3, #1
 8005aee:	6163      	str	r3, [r4, #20]
 8005af0:	b003      	add	sp, #12
 8005af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af4:	ab01      	add	r3, sp, #4
 8005af6:	466a      	mov	r2, sp
 8005af8:	f7ff ffc8 	bl	8005a8c <__swhatbuf_r>
 8005afc:	9f00      	ldr	r7, [sp, #0]
 8005afe:	4605      	mov	r5, r0
 8005b00:	4639      	mov	r1, r7
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7ff f874 	bl	8004bf0 <_malloc_r>
 8005b08:	b948      	cbnz	r0, 8005b1e <__smakebuf_r+0x46>
 8005b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b0e:	059a      	lsls	r2, r3, #22
 8005b10:	d4ee      	bmi.n	8005af0 <__smakebuf_r+0x18>
 8005b12:	f023 0303 	bic.w	r3, r3, #3
 8005b16:	f043 0302 	orr.w	r3, r3, #2
 8005b1a:	81a3      	strh	r3, [r4, #12]
 8005b1c:	e7e2      	b.n	8005ae4 <__smakebuf_r+0xc>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	6020      	str	r0, [r4, #0]
 8005b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b26:	81a3      	strh	r3, [r4, #12]
 8005b28:	9b01      	ldr	r3, [sp, #4]
 8005b2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b2e:	b15b      	cbz	r3, 8005b48 <__smakebuf_r+0x70>
 8005b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b34:	4630      	mov	r0, r6
 8005b36:	f000 f81d 	bl	8005b74 <_isatty_r>
 8005b3a:	b128      	cbz	r0, 8005b48 <__smakebuf_r+0x70>
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	f023 0303 	bic.w	r3, r3, #3
 8005b42:	f043 0301 	orr.w	r3, r3, #1
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	431d      	orrs	r5, r3
 8005b4c:	81a5      	strh	r5, [r4, #12]
 8005b4e:	e7cf      	b.n	8005af0 <__smakebuf_r+0x18>

08005b50 <_fstat_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d07      	ldr	r5, [pc, #28]	@ (8005b70 <_fstat_r+0x20>)
 8005b54:	2300      	movs	r3, #0
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	602b      	str	r3, [r5, #0]
 8005b5e:	f7fd fb03 	bl	8003168 <_fstat>
 8005b62:	1c43      	adds	r3, r0, #1
 8005b64:	d102      	bne.n	8005b6c <_fstat_r+0x1c>
 8005b66:	682b      	ldr	r3, [r5, #0]
 8005b68:	b103      	cbz	r3, 8005b6c <_fstat_r+0x1c>
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	bd38      	pop	{r3, r4, r5, pc}
 8005b6e:	bf00      	nop
 8005b70:	2000051c 	.word	0x2000051c

08005b74 <_isatty_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d06      	ldr	r5, [pc, #24]	@ (8005b90 <_isatty_r+0x1c>)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	f7fd fb02 	bl	8003188 <_isatty>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d102      	bne.n	8005b8e <_isatty_r+0x1a>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	b103      	cbz	r3, 8005b8e <_isatty_r+0x1a>
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	2000051c 	.word	0x2000051c

08005b94 <_init>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	bf00      	nop
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr

08005ba0 <_fini>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	bf00      	nop
 8005ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba6:	bc08      	pop	{r3}
 8005ba8:	469e      	mov	lr, r3
 8005baa:	4770      	bx	lr
