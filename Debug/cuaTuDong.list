
cuaTuDong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c4c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08005df0  08005df0  00006df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006160  08006160  000081cc  2**0
                  CONTENTS
  4 .ARM          00000008  08006160  08006160  00007160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006168  08006168  000081cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006168  08006168  00007168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800616c  0800616c  0000716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08006170  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001cc  0800633c  000081cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800633c  00008530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005abc  00000000  00000000  000081fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c46  00000000  00000000  0000dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  0000f900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000428  00000000  00000000  0000fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001182e  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b392  00000000  00000000  00021b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872f2  00000000  00000000  0002cec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b41b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002214  00000000  00000000  000b41f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b640c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005dd4 	.word	0x08005dd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d0 	.word	0x200001d0
 80001dc:	08005dd4 	.word	0x08005dd4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <change_door_state>:
static void process_state_opening(bool just_enter_state);
static void process_state_open(bool just_enter_state);
static void process_state_closing(bool just_enter_state);
static void process_state_error(bool just_enter_state);

static void change_door_state(DoorState_t new_state) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
    if(g_current_door_state != new_state) {
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <change_door_state+0x34>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d00b      	beq.n	8000be4 <change_door_state+0x2c>
        g_previous_door_state = g_current_door_state; // Lưu trạng thái cũ
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <change_door_state+0x34>)
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <change_door_state+0x38>)
 8000bd2:	701a      	strb	r2, [r3, #0]
        g_current_door_state = new_state; // Cập nhật trạng thái mới
 8000bd4:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <change_door_state+0x34>)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	7013      	strb	r3, [r2, #0]
        g_state_timer_start_tick = GetTick(); // Reset timer khi chuyển trạng thái
 8000bda:	f001 fb8b 	bl	80022f4 <GetTick>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <change_door_state+0x3c>)
 8000be2:	6013      	str	r3, [r2, #0]
    }
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000001 	.word	0x20000001
 8000bf4:	200001ec 	.word	0x200001ec

08000bf8 <DoorFSM_Init>:

void DoorFSM_Init(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    // Xác định trạng thái ban đầu dựa trên công tắc hành trình
    if (LimitSwitchService_IsDoorFullyClosed()) {
 8000bfc:	f001 fffc 	bl	8002bf8 <LimitSwitchService_IsDoorFullyClosed>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <DoorFSM_Init+0x16>
        g_current_door_state = DOOR_STATE_CLOSED;
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <DoorFSM_Init+0x44>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	e00b      	b.n	8000c26 <DoorFSM_Init+0x2e>
    } else if (LimitSwitchService_IsDoorFullyOpen()) {
 8000c0e:	f001 ffdf 	bl	8002bd0 <LimitSwitchService_IsDoorFullyOpen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <DoorFSM_Init+0x28>
        g_current_door_state = DOOR_STATE_OPEN;
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <DoorFSM_Init+0x44>)
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e002      	b.n	8000c26 <DoorFSM_Init+0x2e>
    } else {
        g_current_door_state = DOOR_STATE_ERROR;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <DoorFSM_Init+0x44>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	701a      	strb	r2, [r3, #0]
    }
    g_previous_door_state = g_current_door_state; 
 8000c26:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <DoorFSM_Init+0x44>)
 8000c28:	781a      	ldrb	r2, [r3, #0]
 8000c2a:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <DoorFSM_Init+0x48>)
 8000c2c:	701a      	strb	r2, [r3, #0]

    g_state_timer_start_tick = GetTick(); // Bắt đầu timer
 8000c2e:	f001 fb61 	bl	80022f4 <GetTick>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a03      	ldr	r2, [pc, #12]	@ (8000c44 <DoorFSM_Init+0x4c>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000001 	.word	0x20000001
 8000c44:	200001ec 	.word	0x200001ec

08000c48 <DoorFSM_Process>:

void DoorFSM_Process(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
    bool just_enter_state = (g_current_door_state != g_previous_door_state);
 8000c4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d38 <DoorFSM_Process+0xf0>)
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	4b3a      	ldr	r3, [pc, #232]	@ (8000d3c <DoorFSM_Process+0xf4>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	bf14      	ite	ne
 8000c5a:	2301      	movne	r3, #1
 8000c5c:	2300      	moveq	r3, #0
 8000c5e:	71fb      	strb	r3, [r7, #7]
    if(just_enter_state){
    }

    // Xử lý ưu tiên: nếu đang ở chế độ FORCE_OPEN hoặc FORCE_CLOSE, cần xử lý trước
    if (g_current_system_mode == SYSTEM_MODE_FORCE_OPEN) {
 8000c60:	4b37      	ldr	r3, [pc, #220]	@ (8000d40 <DoorFSM_Process+0xf8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d10f      	bne.n	8000c88 <DoorFSM_Process+0x40>
        if (g_current_door_state != DOOR_STATE_OPEN && g_current_door_state != DOOR_STATE_OPENING) {
 8000c68:	4b33      	ldr	r3, [pc, #204]	@ (8000d38 <DoorFSM_Process+0xf0>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d01e      	beq.n	8000cae <DoorFSM_Process+0x66>
 8000c70:	4b31      	ldr	r3, [pc, #196]	@ (8000d38 <DoorFSM_Process+0xf0>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d01a      	beq.n	8000cae <DoorFSM_Process+0x66>
            if (g_current_door_state != DOOR_STATE_ERROR) { 
 8000c78:	4b2f      	ldr	r3, [pc, #188]	@ (8000d38 <DoorFSM_Process+0xf0>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d016      	beq.n	8000cae <DoorFSM_Process+0x66>
                 change_door_state(DOOR_STATE_OPENING);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff ff99 	bl	8000bb8 <change_door_state>
 8000c86:	e012      	b.n	8000cae <DoorFSM_Process+0x66>
            }
        }
    } else if (g_current_system_mode == SYSTEM_MODE_FORCE_CLOSE) {
 8000c88:	4b2d      	ldr	r3, [pc, #180]	@ (8000d40 <DoorFSM_Process+0xf8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d10e      	bne.n	8000cae <DoorFSM_Process+0x66>
        if (g_current_door_state != DOOR_STATE_CLOSED && g_current_door_state != DOOR_STATE_CLOSING) {
 8000c90:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <DoorFSM_Process+0xf0>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00a      	beq.n	8000cae <DoorFSM_Process+0x66>
 8000c98:	4b27      	ldr	r3, [pc, #156]	@ (8000d38 <DoorFSM_Process+0xf0>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d006      	beq.n	8000cae <DoorFSM_Process+0x66>
             if (g_current_door_state != DOOR_STATE_ERROR) {
 8000ca0:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <DoorFSM_Process+0xf0>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d002      	beq.n	8000cae <DoorFSM_Process+0x66>
                change_door_state(DOOR_STATE_CLOSING);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f7ff ff85 	bl	8000bb8 <change_door_state>
             }
        }
    }

    // Logic xử lý trạng thái hiện tại
    switch (g_current_door_state) {
 8000cae:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <DoorFSM_Process+0xf0>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b05      	cmp	r3, #5
 8000cb4:	d834      	bhi.n	8000d20 <DoorFSM_Process+0xd8>
 8000cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cbc <DoorFSM_Process+0x74>)
 8000cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbc:	08000cef 	.word	0x08000cef
 8000cc0:	08000cf9 	.word	0x08000cf9
 8000cc4:	08000d03 	.word	0x08000d03
 8000cc8:	08000d0d 	.word	0x08000d0d
 8000ccc:	08000d17 	.word	0x08000d17
 8000cd0:	08000cd5 	.word	0x08000cd5
        case DOOR_STATE_INIT:
            // Trạng thái INIT chỉ để khởi tạo, không xử lý gì thêm
            if (LimitSwitchService_IsDoorFullyClosed()) {
 8000cd4:	f001 ff90 	bl	8002bf8 <LimitSwitchService_IsDoorFullyClosed>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <DoorFSM_Process+0x9e>
                 change_door_state(DOOR_STATE_CLOSED);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff ff6a 	bl	8000bb8 <change_door_state>
            } else {
                 change_door_state(DOOR_STATE_CLOSING); // Thử đóng lại
            }
            break;
 8000ce4:	e01c      	b.n	8000d20 <DoorFSM_Process+0xd8>
                 change_door_state(DOOR_STATE_CLOSING); // Thử đóng lại
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f7ff ff66 	bl	8000bb8 <change_door_state>
            break;
 8000cec:	e018      	b.n	8000d20 <DoorFSM_Process+0xd8>

        case DOOR_STATE_CLOSED:
            process_state_closed(just_enter_state);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f871 	bl	8000dd8 <process_state_closed>
            break;
 8000cf6:	e013      	b.n	8000d20 <DoorFSM_Process+0xd8>

        case DOOR_STATE_OPENING:
            process_state_opening(just_enter_state);
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f884 	bl	8000e08 <process_state_opening>
            break;
 8000d00:	e00e      	b.n	8000d20 <DoorFSM_Process+0xd8>

        case DOOR_STATE_OPEN:
            process_state_open(just_enter_state);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f8ad 	bl	8000e64 <process_state_open>
            break;
 8000d0a:	e009      	b.n	8000d20 <DoorFSM_Process+0xd8>

        case DOOR_STATE_CLOSING:
            process_state_closing(just_enter_state);
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f8f6 	bl	8000f00 <process_state_closing>
            break;
 8000d14:	e004      	b.n	8000d20 <DoorFSM_Process+0xd8>

        case DOOR_STATE_ERROR:
            process_state_error(just_enter_state);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f93f 	bl	8000f9c <process_state_error>
            break;
 8000d1e:	bf00      	nop
    }
    if (just_enter_state) { // Nếu vừa vào trạng thái mới (được set bởi change_door_state)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <DoorFSM_Process+0xe6>
        g_previous_door_state = g_current_door_state; // Đảm bảo previous được cập nhật cho lần Process tiếp theo
 8000d26:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <DoorFSM_Process+0xf0>)
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <DoorFSM_Process+0xf4>)
 8000d2c:	701a      	strb	r2, [r3, #0]
    }
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000001 	.word	0x20000001
 8000d40:	200001e8 	.word	0x200001e8

08000d44 <DoorFSM_GetState>:

DoorState_t DoorFSM_GetState(void) { 
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
    return g_current_door_state; 
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <DoorFSM_GetState+0x14>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000000 	.word	0x20000000

08000d5c <DoorFSM_NotifySystemModeChange>:

void DoorFSM_NotifySystemModeChange(SystemOpMode_t new_mode) {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
    if (g_current_system_mode != new_mode) {
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <DoorFSM_NotifySystemModeChange+0x28>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	79fa      	ldrb	r2, [r7, #7]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d002      	beq.n	8000d76 <DoorFSM_NotifySystemModeChange+0x1a>
        g_current_system_mode = new_mode;
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <DoorFSM_NotifySystemModeChange+0x28>)
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	7013      	strb	r3, [r2, #0]
    }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200001e8 	.word	0x200001e8

08000d88 <DoorFSM_NotifyPersonDetectedPassing>:

void DoorFSM_NotifyPersonDetectedPassing(void) { 
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
    if (g_current_system_mode == SYSTEM_MODE_NORMAL) {
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <DoorFSM_NotifyPersonDetectedPassing+0x44>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d118      	bne.n	8000dc6 <DoorFSM_NotifyPersonDetectedPassing+0x3e>
        if (g_current_door_state == DOOR_STATE_CLOSED) {
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <DoorFSM_NotifyPersonDetectedPassing+0x48>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d103      	bne.n	8000da4 <DoorFSM_NotifyPersonDetectedPassing+0x1c>
            change_door_state(DOOR_STATE_OPENING);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff ff0b 	bl	8000bb8 <change_door_state>
            change_door_state(DOOR_STATE_OPENING); // Mở lại ngay nếu đang đóng mà có người đi qua
        } else if (g_current_door_state == DOOR_STATE_OPEN) {
            g_state_timer_start_tick = GetTick(); // Reset auto-close timer
        }
    }
}
 8000da2:	e010      	b.n	8000dc6 <DoorFSM_NotifyPersonDetectedPassing+0x3e>
        } else if (g_current_door_state == DOOR_STATE_CLOSING) {
 8000da4:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <DoorFSM_NotifyPersonDetectedPassing+0x48>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d103      	bne.n	8000db4 <DoorFSM_NotifyPersonDetectedPassing+0x2c>
            change_door_state(DOOR_STATE_OPENING); // Mở lại ngay nếu đang đóng mà có người đi qua
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff ff03 	bl	8000bb8 <change_door_state>
}
 8000db2:	e008      	b.n	8000dc6 <DoorFSM_NotifyPersonDetectedPassing+0x3e>
        } else if (g_current_door_state == DOOR_STATE_OPEN) {
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <DoorFSM_NotifyPersonDetectedPassing+0x48>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d104      	bne.n	8000dc6 <DoorFSM_NotifyPersonDetectedPassing+0x3e>
            g_state_timer_start_tick = GetTick(); // Reset auto-close timer
 8000dbc:	f001 fa9a 	bl	80022f4 <GetTick>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <DoorFSM_NotifyPersonDetectedPassing+0x4c>)
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200001e8 	.word	0x200001e8
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	200001ec 	.word	0x200001ec

08000dd8 <process_state_closed>:

static void process_state_closed(bool just_enter_state) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
    if (just_enter_state) {
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <process_state_closed+0x14>
        Motor_Stop();
 8000de8:	f001 ffec 	bl	8002dc4 <Motor_Stop>
    }

    if (g_current_system_mode == SYSTEM_MODE_FORCE_OPEN) {
 8000dec:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <process_state_closed+0x2c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d102      	bne.n	8000dfa <process_state_closed+0x22>
        change_door_state(DOOR_STATE_OPENING);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f7ff fedf 	bl	8000bb8 <change_door_state>
    } 
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200001e8 	.word	0x200001e8

08000e08 <process_state_opening>:

static void process_state_opening(bool just_enter_state) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
    if (just_enter_state) {
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <process_state_opening+0x1e>
        Motor_SetDirection(MOTOR_FORWARD); // Đặt hướng mở cửa
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f001 ff81 	bl	8002d20 <Motor_SetDirection>
        Motor_SetSpeed(100.0f); // Bắt đầu mở cửa
 8000e1e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000e5c <process_state_opening+0x54>
 8000e22:	f001 ff55 	bl	8002cd0 <Motor_SetSpeed>
    }

    if (LimitSwitchService_IsDoorFullyOpen()) {
 8000e26:	f001 fed3 	bl	8002bd0 <LimitSwitchService_IsDoorFullyOpen>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <process_state_opening+0x30>
        change_door_state(DOOR_STATE_OPEN);
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff fec1 	bl	8000bb8 <change_door_state>
    } else if (GetTick() - g_state_timer_start_tick > DOOR_MAX_TRAVEL_TIME_MS) {
        change_door_state(DOOR_STATE_ERROR); // Quá thời gian mở cửa
    }
}
 8000e36:	e00c      	b.n	8000e52 <process_state_opening+0x4a>
    } else if (GetTick() - g_state_timer_start_tick > DOOR_MAX_TRAVEL_TIME_MS) {
 8000e38:	f001 fa5c 	bl	80022f4 <GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <process_state_opening+0x58>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d902      	bls.n	8000e52 <process_state_opening+0x4a>
        change_door_state(DOOR_STATE_ERROR); // Quá thời gian mở cửa
 8000e4c:	2004      	movs	r0, #4
 8000e4e:	f7ff feb3 	bl	8000bb8 <change_door_state>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	42c80000 	.word	0x42c80000
 8000e60:	200001ec 	.word	0x200001ec

08000e64 <process_state_open>:

static void process_state_open(bool just_enter_state) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
    if (just_enter_state) {
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d006      	beq.n	8000e82 <process_state_open+0x1e>
        Motor_Stop(); // Dừng động cơ khi đã mở
 8000e74:	f001 ffa6 	bl	8002dc4 <Motor_Stop>
        g_state_timer_start_tick = GetTick(); // Reset auto-close timer
 8000e78:	f001 fa3c 	bl	80022f4 <GetTick>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef8 <process_state_open+0x94>)
 8000e80:	6013      	str	r3, [r2, #0]
    }

    if (g_current_system_mode == SYSTEM_MODE_FORCE_CLOSE) {
 8000e82:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <process_state_open+0x98>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d103      	bne.n	8000e92 <process_state_open+0x2e>
        change_door_state(DOOR_STATE_CLOSING);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f7ff fe94 	bl	8000bb8 <change_door_state>
            if (GetTick() - g_state_timer_start_tick > DOOR_AUTO_CLOSE_TIMEOUT_MS) {
            change_door_state(DOOR_STATE_CLOSING); // Tự động đóng cửa sau thời gian quy định
           }
        }
    }
}
 8000e90:	e02d      	b.n	8000eee <process_state_open+0x8a>
    } else if (g_current_system_mode == SYSTEM_MODE_NORMAL) {
 8000e92:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <process_state_open+0x98>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d129      	bne.n	8000eee <process_state_open+0x8a>
        bool is_person_detected = PIRService_IsMotionDetected(PIR_SENSOR_IN) || PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f002 f82a 	bl	8002ef4 <PIRService_IsMotionDetected>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d105      	bne.n	8000eb2 <process_state_open+0x4e>
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f002 f824 	bl	8002ef4 <PIRService_IsMotionDetected>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <process_state_open+0x52>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <process_state_open+0x54>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
        if (is_person_detected) {
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d005      	beq.n	8000ed4 <process_state_open+0x70>
            g_state_timer_start_tick = GetTick(); // Reset auto-close timer nếu có người
 8000ec8:	f001 fa14 	bl	80022f4 <GetTick>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <process_state_open+0x94>)
 8000ed0:	6013      	str	r3, [r2, #0]
}
 8000ed2:	e00c      	b.n	8000eee <process_state_open+0x8a>
            if (GetTick() - g_state_timer_start_tick > DOOR_AUTO_CLOSE_TIMEOUT_MS) {
 8000ed4:	f001 fa0e 	bl	80022f4 <GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <process_state_open+0x94>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d902      	bls.n	8000eee <process_state_open+0x8a>
            change_door_state(DOOR_STATE_CLOSING); // Tự động đóng cửa sau thời gian quy định
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f7ff fe65 	bl	8000bb8 <change_door_state>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200001ec 	.word	0x200001ec
 8000efc:	200001e8 	.word	0x200001e8

08000f00 <process_state_closing>:

static void process_state_closing(bool just_enter_state) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
    if (just_enter_state) {
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d006      	beq.n	8000f1e <process_state_closing+0x1e>
        Motor_SetDirection(MOTOR_REVERSE); // Đặt hướng đóng cửa
 8000f10:	2001      	movs	r0, #1
 8000f12:	f001 ff05 	bl	8002d20 <Motor_SetDirection>
        Motor_SetSpeed(100.0f); // Bắt đầu đóng cửa
 8000f16:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8000f90 <process_state_closing+0x90>
 8000f1a:	f001 fed9 	bl	8002cd0 <Motor_SetSpeed>
    }

    if (g_current_system_mode == SYSTEM_MODE_NORMAL) {
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <process_state_closing+0x94>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d11a      	bne.n	8000f5c <process_state_closing+0x5c>
        bool is_person_detected = PIRService_IsMotionDetected(PIR_SENSOR_IN) || PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f001 ffe4 	bl	8002ef4 <PIRService_IsMotionDetected>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d105      	bne.n	8000f3e <process_state_closing+0x3e>
 8000f32:	2001      	movs	r0, #1
 8000f34:	f001 ffde 	bl	8002ef4 <PIRService_IsMotionDetected>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <process_state_closing+0x42>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <process_state_closing+0x44>
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
        if (is_person_detected) {
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <process_state_closing+0x5c>
            change_door_state(DOOR_STATE_OPENING); // Nếu có người, mở cửa lại
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff fe2f 	bl	8000bb8 <change_door_state>
            return;
 8000f5a:	e015      	b.n	8000f88 <process_state_closing+0x88>
        }
    }

    if (LimitSwitchService_IsDoorFullyClosed()) {
 8000f5c:	f001 fe4c 	bl	8002bf8 <LimitSwitchService_IsDoorFullyClosed>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <process_state_closing+0x6e>
        change_door_state(DOOR_STATE_CLOSED);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fe26 	bl	8000bb8 <change_door_state>
 8000f6c:	e00c      	b.n	8000f88 <process_state_closing+0x88>
    } else if (GetTick() - g_state_timer_start_tick > DOOR_MAX_TRAVEL_TIME_MS) {
 8000f6e:	f001 f9c1 	bl	80022f4 <GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <process_state_closing+0x98>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d902      	bls.n	8000f88 <process_state_closing+0x88>
        change_door_state(DOOR_STATE_ERROR); // Quá thời gian đóng cửa
 8000f82:	2004      	movs	r0, #4
 8000f84:	f7ff fe18 	bl	8000bb8 <change_door_state>
    }
}
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	42c80000 	.word	0x42c80000
 8000f94:	200001e8 	.word	0x200001e8
 8000f98:	200001ec 	.word	0x200001ec

08000f9c <process_state_error>:

static void process_state_error(bool just_enter_state) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
    if (just_enter_state) {
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <process_state_error+0x14>
        Motor_Stop(); // Dừng động cơ khi ở trạng thái lỗi
 8000fac:	f001 ff0a 	bl	8002dc4 <Motor_Stop>
    }

    if (g_current_system_mode == SYSTEM_MODE_FORCE_OPEN) {
 8000fb0:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <process_state_error+0x3c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d103      	bne.n	8000fc0 <process_state_error+0x24>
        change_door_state(DOOR_STATE_OPENING); // Chuyển sang mở cửa nếu ở chế độ FORCE_OPEN
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff fdfd 	bl	8000bb8 <change_door_state>
    } else if (g_current_system_mode == SYSTEM_MODE_FORCE_CLOSE) {
        change_door_state(DOOR_STATE_CLOSING); // Chuyển sang đóng cửa nếu ở chế độ FORCE_CLOSE
    }
}
 8000fbe:	e006      	b.n	8000fce <process_state_error+0x32>
    } else if (g_current_system_mode == SYSTEM_MODE_FORCE_CLOSE) {
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <process_state_error+0x3c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d102      	bne.n	8000fce <process_state_error+0x32>
        change_door_state(DOOR_STATE_CLOSING); // Chuyển sang đóng cửa nếu ở chế độ FORCE_CLOSE
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f7ff fdf5 	bl	8000bb8 <change_door_state>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001e8 	.word	0x200001e8

08000fdc <LightingLogic_Init>:
#include "lighting_logic.h"
#include "people_counter.h"
#include "light_control_service.h"
#include "uart_protocol_service.h"

void LightingLogic_Init(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
    int16_t current_person_count = PeopleCounter_GetCount();
 8000fe2:	f000 f95f 	bl	80012a4 <PeopleCounter_GetCount>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]

    if (current_person_count > 0) {
 8000fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	dd02      	ble.n	8000ff8 <LightingLogic_Init+0x1c>
        LightService_TurnOn();
 8000ff2:	f001 fc9d 	bl	8002930 <LightService_TurnOn>
    } else {
        LightService_TurnOff();
    }
}
 8000ff6:	e001      	b.n	8000ffc <LightingLogic_Init+0x20>
        LightService_TurnOff();
 8000ff8:	f001 fcb4 	bl	8002964 <LightService_TurnOff>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <LightingLogic_Process>:

void LightingLogic_Process(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
    int16_t current_person_count = PeopleCounter_GetCount();
 800100a:	f000 f94b 	bl	80012a4 <PeopleCounter_GetCount>
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
    bool current_light_hw_state = LightService_GetState(); // Lấy trạng thái thực tế của đèn từ service
 8001012:	f001 fcc1 	bl	8002998 <LightService_GetState>
 8001016:	4603      	mov	r3, r0
 8001018:	717b      	strb	r3, [r7, #5]

    if (current_person_count > 0) {
 800101a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101e:	2b00      	cmp	r3, #0
 8001020:	dd08      	ble.n	8001034 <LightingLogic_Process+0x30>
        if (!current_light_hw_state) {
 8001022:	797b      	ldrb	r3, [r7, #5]
 8001024:	f083 0301 	eor.w	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d007      	beq.n	800103e <LightingLogic_Process+0x3a>
            LightService_TurnOn();
 800102e:	f001 fc7f 	bl	8002930 <LightService_TurnOn>
    } else {
        if (current_light_hw_state) {
            LightService_TurnOff();
        }
    }
}
 8001032:	e004      	b.n	800103e <LightingLogic_Process+0x3a>
        if (current_light_hw_state) {
 8001034:	797b      	ldrb	r3, [r7, #5]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <LightingLogic_Process+0x3a>
            LightService_TurnOff();
 800103a:	f001 fc93 	bl	8002964 <LightService_TurnOff>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <LightingLogic_IsLightIntendedToBeOn>:

// Hàm trả về trạng thái logic mà module này muốn đèn có.
bool LightingLogic_IsLightIntendedToBeOn(void) {
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
    if (PeopleCounter_GetCount() > 0) {
 800104a:	f000 f92b 	bl	80012a4 <PeopleCounter_GetCount>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <LightingLogic_IsLightIntendedToBeOn+0x12>
        return true;
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <LightingLogic_IsLightIntendedToBeOn+0x14>
    } else {
        return false;
 8001058:	2300      	movs	r3, #0
    }
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <PeopleCounter_Init>:
static bool g_pir_outside_last_state = false;
static bool g_pir_inside_last_state = false;

static person_passed_callback_t g_person_passed_cb = NULL;

void PeopleCounter_Init(person_passed_callback_t callback) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    g_person_count = 0;
 8001068:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <PeopleCounter_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
    g_detection_state = DETECTION_STATE_IDLE;
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <PeopleCounter_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
    g_first_pir_activation_tick = 0;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <PeopleCounter_Init+0x54>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
    g_last_detection_time = 0; // Để cooldown hoạt động ngay từ đầu nếu cần
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <PeopleCounter_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
    g_person_passed_cb = callback;
 8001080:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <PeopleCounter_Init+0x5c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]

    // Khởi tạo trạng thái PIR ban đầu
    g_pir_outside_last_state = PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 8001086:	2001      	movs	r0, #1
 8001088:	f001 ff34 	bl	8002ef4 <PIRService_IsMotionDetected>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <PeopleCounter_Init+0x60>)
 8001092:	701a      	strb	r2, [r3, #0]
    g_pir_inside_last_state = PIRService_IsMotionDetected(PIR_SENSOR_IN);
 8001094:	2000      	movs	r0, #0
 8001096:	f001 ff2d 	bl	8002ef4 <PIRService_IsMotionDetected>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <PeopleCounter_Init+0x64>)
 80010a0:	701a      	strb	r2, [r3, #0]
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001f0 	.word	0x200001f0
 80010b0:	200001f1 	.word	0x200001f1
 80010b4:	200001f4 	.word	0x200001f4
 80010b8:	200001f8 	.word	0x200001f8
 80010bc:	20000200 	.word	0x20000200
 80010c0:	200001fc 	.word	0x200001fc
 80010c4:	200001fd 	.word	0x200001fd

080010c8 <PeopleCounter_Process>:

void PeopleCounter_Process() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
    bool pir_outside_current_state = PIRService_IsMotionDetected(PIR_SENSOR_OUT);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f001 ff10 	bl	8002ef4 <PIRService_IsMotionDetected>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
    bool pir_inside_current_state = PIRService_IsMotionDetected(PIR_SENSOR_IN);
 80010d8:	2000      	movs	r0, #0
 80010da:	f001 ff0b 	bl	8002ef4 <PIRService_IsMotionDetected>
 80010de:	4603      	mov	r3, r0
 80010e0:	73bb      	strb	r3, [r7, #14]
    uint32_t current_tick = GetTick();
 80010e2:	f001 f907 	bl	80022f4 <GetTick>
 80010e6:	60b8      	str	r0, [r7, #8]

    // Phát hiện sườn lên (rising edge)
    bool pir_outside_triggered = (pir_outside_current_state && !g_pir_outside_last_state);
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <PeopleCounter_Process+0x38>
 80010ee:	4b66      	ldr	r3, [pc, #408]	@ (8001288 <PeopleCounter_Process+0x1c0>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <PeopleCounter_Process+0x38>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <PeopleCounter_Process+0x3a>
 8001100:	2300      	movs	r3, #0
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	71fb      	strb	r3, [r7, #7]
    bool pir_inside_triggered = (pir_inside_current_state && !g_pir_inside_last_state);
 800110c:	7bbb      	ldrb	r3, [r7, #14]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d008      	beq.n	8001124 <PeopleCounter_Process+0x5c>
 8001112:	4b5e      	ldr	r3, [pc, #376]	@ (800128c <PeopleCounter_Process+0x1c4>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	f083 0301 	eor.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <PeopleCounter_Process+0x5c>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <PeopleCounter_Process+0x5e>
 8001124:	2300      	movs	r3, #0
 8001126:	71bb      	strb	r3, [r7, #6]
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	71bb      	strb	r3, [r7, #6]

    // Cooldown: Nếu vừa mới đếm xong, bỏ qua các trigger mới trong một khoảng thời gian
    if ((current_tick - g_last_detection_time) < PERSON_COUNTER_COOLDOWN_MS) {
 8001130:	4b57      	ldr	r3, [pc, #348]	@ (8001290 <PeopleCounter_Process+0x1c8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800113c:	d206      	bcs.n	800114c <PeopleCounter_Process+0x84>
        // Cập nhật trạng thái cuối cùng để không bỏ lỡ sườn lên sau cooldown
        g_pir_outside_last_state = pir_outside_current_state;
 800113e:	4a52      	ldr	r2, [pc, #328]	@ (8001288 <PeopleCounter_Process+0x1c0>)
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	7013      	strb	r3, [r2, #0]
        g_pir_inside_last_state = pir_inside_current_state;
 8001144:	4a51      	ldr	r2, [pc, #324]	@ (800128c <PeopleCounter_Process+0x1c4>)
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	7013      	strb	r3, [r2, #0]
        return;
 800114a:	e099      	b.n	8001280 <PeopleCounter_Process+0x1b8>
    }


    switch (g_detection_state) {
 800114c:	4b51      	ldr	r3, [pc, #324]	@ (8001294 <PeopleCounter_Process+0x1cc>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d050      	beq.n	80011f6 <PeopleCounter_Process+0x12e>
 8001154:	2b02      	cmp	r3, #2
 8001156:	f300 808d 	bgt.w	8001274 <PeopleCounter_Process+0x1ac>
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <PeopleCounter_Process+0x9c>
 800115e:	2b01      	cmp	r3, #1
 8001160:	d014      	beq.n	800118c <PeopleCounter_Process+0xc4>
 8001162:	e087      	b.n	8001274 <PeopleCounter_Process+0x1ac>
        case DETECTION_STATE_IDLE:
            if (pir_outside_triggered) {
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <PeopleCounter_Process+0xb0>
                g_detection_state = DETECTION_STATE_EXPECTING_PIR_INSIDE;
 800116a:	4b4a      	ldr	r3, [pc, #296]	@ (8001294 <PeopleCounter_Process+0x1cc>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
                g_first_pir_activation_tick = current_tick;
 8001170:	4a49      	ldr	r2, [pc, #292]	@ (8001298 <PeopleCounter_Process+0x1d0>)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	6013      	str	r3, [r2, #0]
            } else if (pir_inside_triggered) {
                g_detection_state = DETECTION_STATE_EXPECTING_PIR_OUTSIDE;
                g_first_pir_activation_tick = current_tick;
            }
            break;
 8001176:	e078      	b.n	800126a <PeopleCounter_Process+0x1a2>
            } else if (pir_inside_triggered) {
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d075      	beq.n	800126a <PeopleCounter_Process+0x1a2>
                g_detection_state = DETECTION_STATE_EXPECTING_PIR_OUTSIDE;
 800117e:	4b45      	ldr	r3, [pc, #276]	@ (8001294 <PeopleCounter_Process+0x1cc>)
 8001180:	2202      	movs	r2, #2
 8001182:	701a      	strb	r2, [r3, #0]
                g_first_pir_activation_tick = current_tick;
 8001184:	4a44      	ldr	r2, [pc, #272]	@ (8001298 <PeopleCounter_Process+0x1d0>)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	6013      	str	r3, [r2, #0]
            break;
 800118a:	e06e      	b.n	800126a <PeopleCounter_Process+0x1a2>

        case DETECTION_STATE_EXPECTING_PIR_INSIDE: // PIR_OUTSIDE đã active, chờ PIR_INSIDE
            if (pir_inside_triggered) { // PIR_INSIDE cũng active -> Người vào
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d015      	beq.n	80011be <PeopleCounter_Process+0xf6>
                g_person_count++;
 8001192:	4b42      	ldr	r3, [pc, #264]	@ (800129c <PeopleCounter_Process+0x1d4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	3301      	adds	r3, #1
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b3f      	ldr	r3, [pc, #252]	@ (800129c <PeopleCounter_Process+0x1d4>)
 800119e:	701a      	strb	r2, [r3, #0]
                g_detection_state = DETECTION_STATE_IDLE;
 80011a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001294 <PeopleCounter_Process+0x1cc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
                g_last_detection_time = current_tick;
 80011a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001290 <PeopleCounter_Process+0x1c8>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	6013      	str	r3, [r2, #0]
                if (g_person_passed_cb) g_person_passed_cb(PERSON_PASSED_ENTERED);
 80011ac:	4b3c      	ldr	r3, [pc, #240]	@ (80012a0 <PeopleCounter_Process+0x1d8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d05c      	beq.n	800126e <PeopleCounter_Process+0x1a6>
 80011b4:	4b3a      	ldr	r3, [pc, #232]	@ (80012a0 <PeopleCounter_Process+0x1d8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2001      	movs	r0, #1
 80011ba:	4798      	blx	r3
            } else if (!pir_outside_current_state && !pir_inside_current_state) {
                // Nếu cả 2 PIR đều tắt trước khi PIR_INSIDE kịp active (hiếm, nhưng có thể)
                // Hoặc nếu người dùng quay lại sau khi kích hoạt PIR_OUTSIDE
                g_detection_state = DETECTION_STATE_IDLE;
            }
            break;
 80011bc:	e057      	b.n	800126e <PeopleCounter_Process+0x1a6>
            } else if ((current_tick - g_first_pir_activation_tick) > PERSON_COUNTER_MAX_TRANSITION_TIME_MS) {
 80011be:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <PeopleCounter_Process+0x1d0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d903      	bls.n	80011d6 <PeopleCounter_Process+0x10e>
                g_detection_state = DETECTION_STATE_IDLE;
 80011ce:	4b31      	ldr	r3, [pc, #196]	@ (8001294 <PeopleCounter_Process+0x1cc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
            break;
 80011d4:	e04b      	b.n	800126e <PeopleCounter_Process+0x1a6>
            } else if (!pir_outside_current_state && !pir_inside_current_state) {
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	f083 0301 	eor.w	r3, r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d045      	beq.n	800126e <PeopleCounter_Process+0x1a6>
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d03f      	beq.n	800126e <PeopleCounter_Process+0x1a6>
                g_detection_state = DETECTION_STATE_IDLE;
 80011ee:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <PeopleCounter_Process+0x1cc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
            break;
 80011f4:	e03b      	b.n	800126e <PeopleCounter_Process+0x1a6>

        case DETECTION_STATE_EXPECTING_PIR_OUTSIDE: // PIR_INSIDE đã active, chờ PIR_OUTSIDE
            if (pir_outside_triggered) { // PIR_OUTSIDE cũng active -> Người ra
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d01a      	beq.n	8001232 <PeopleCounter_Process+0x16a>
                if (g_person_count > 0) {
 80011fc:	4b27      	ldr	r3, [pc, #156]	@ (800129c <PeopleCounter_Process+0x1d4>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <PeopleCounter_Process+0x14c>
                    g_person_count--;
 8001206:	4b25      	ldr	r3, [pc, #148]	@ (800129c <PeopleCounter_Process+0x1d4>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	3b01      	subs	r3, #1
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b22      	ldr	r3, [pc, #136]	@ (800129c <PeopleCounter_Process+0x1d4>)
 8001212:	701a      	strb	r2, [r3, #0]
                }
                g_detection_state = DETECTION_STATE_IDLE;
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <PeopleCounter_Process+0x1cc>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
                g_last_detection_time = current_tick;
 800121a:	4a1d      	ldr	r2, [pc, #116]	@ (8001290 <PeopleCounter_Process+0x1c8>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	6013      	str	r3, [r2, #0]
                if (g_person_passed_cb) g_person_passed_cb(PERSON_PASSED_EXITED);
 8001220:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <PeopleCounter_Process+0x1d8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d024      	beq.n	8001272 <PeopleCounter_Process+0x1aa>
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <PeopleCounter_Process+0x1d8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2002      	movs	r0, #2
 800122e:	4798      	blx	r3
                g_detection_state = DETECTION_STATE_IDLE;
            } else if (!pir_outside_current_state && !pir_inside_current_state) {
                // Nếu cả 2 PIR đều tắt trước khi PIR_OUTSIDE kịp active
                g_detection_state = DETECTION_STATE_IDLE;
            }
            break;
 8001230:	e01f      	b.n	8001272 <PeopleCounter_Process+0x1aa>
            } else if ((current_tick - g_first_pir_activation_tick) > PERSON_COUNTER_MAX_TRANSITION_TIME_MS) {
 8001232:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <PeopleCounter_Process+0x1d0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800123e:	4293      	cmp	r3, r2
 8001240:	d903      	bls.n	800124a <PeopleCounter_Process+0x182>
                g_detection_state = DETECTION_STATE_IDLE;
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <PeopleCounter_Process+0x1cc>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
            break;
 8001248:	e013      	b.n	8001272 <PeopleCounter_Process+0x1aa>
            } else if (!pir_outside_current_state && !pir_inside_current_state) {
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	f083 0301 	eor.w	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00d      	beq.n	8001272 <PeopleCounter_Process+0x1aa>
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	f083 0301 	eor.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <PeopleCounter_Process+0x1aa>
                g_detection_state = DETECTION_STATE_IDLE;
 8001262:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <PeopleCounter_Process+0x1cc>)
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
            break;
 8001268:	e003      	b.n	8001272 <PeopleCounter_Process+0x1aa>
            break;
 800126a:	bf00      	nop
 800126c:	e002      	b.n	8001274 <PeopleCounter_Process+0x1ac>
            break;
 800126e:	bf00      	nop
 8001270:	e000      	b.n	8001274 <PeopleCounter_Process+0x1ac>
            break;
 8001272:	bf00      	nop
    }

    // Cập nhật trạng thái cuối cùng của PIR cho lần gọi Process tiếp theo
    g_pir_outside_last_state = pir_outside_current_state;
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <PeopleCounter_Process+0x1c0>)
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	7013      	strb	r3, [r2, #0]
    g_pir_inside_last_state = pir_inside_current_state;
 800127a:	4a04      	ldr	r2, [pc, #16]	@ (800128c <PeopleCounter_Process+0x1c4>)
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	7013      	strb	r3, [r2, #0]
}
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200001fc 	.word	0x200001fc
 800128c:	200001fd 	.word	0x200001fd
 8001290:	200001f8 	.word	0x200001f8
 8001294:	200001f1 	.word	0x200001f1
 8001298:	200001f4 	.word	0x200001f4
 800129c:	200001f0 	.word	0x200001f0
 80012a0:	20000200 	.word	0x20000200

080012a4 <PeopleCounter_GetCount>:

uint8_t PeopleCounter_GetCount(void) {
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
    return g_person_count;
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <PeopleCounter_GetCount+0x14>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	200001f0 	.word	0x200001f0

080012bc <PeopleCounter_Reset>:

void PeopleCounter_Reset(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
    // Critical section
    __disable_irq();
    g_person_count = 0;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <PeopleCounter_Reset+0x34>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
    UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_PERSON_COUNT, (uint8_t*)&g_person_count, 1);
 80012ca:	2301      	movs	r3, #1
 80012cc:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <PeopleCounter_Reset+0x34>)
 80012ce:	2103      	movs	r1, #3
 80012d0:	2001      	movs	r0, #1
 80012d2:	f001 fe95 	bl	8003000 <UARTProto_SendFrame>
    g_detection_state = DETECTION_STATE_IDLE; // Reset cả máy trạng thái phát hiện
 80012d6:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <PeopleCounter_Reset+0x38>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
    g_last_detection_time = GetTick(); // Reset cooldown để lệnh reset có hiệu lực ngay
 80012dc:	f001 f80a 	bl	80022f4 <GetTick>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <PeopleCounter_Reset+0x3c>)
 80012e4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012e6:	b662      	cpsie	i
}
 80012e8:	bf00      	nop
    __enable_irq();
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001f0 	.word	0x200001f0
 80012f4:	200001f1 	.word	0x200001f1
 80012f8:	200001f8 	.word	0x200001f8

080012fc <app_person_passed_handler>:

static DoorState_t g_prev_door_state = DOOR_STATE_INIT;
static DoorState_t g_current_door_state = DOOR_STATE_INIT;

// Callback được people_counter gọi khi có người đi qua
void app_person_passed_handler(PersonPassedDirection_t direction) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
    if (g_cur_system_op_mode == SYSTEM_MODE_NORMAL) {
 8001306:	4b05      	ldr	r3, [pc, #20]	@ (800131c <app_person_passed_handler+0x20>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <app_person_passed_handler+0x16>
        // Chỉ thông báo cho FSM nếu đang ở chế độ NORMAL
        DoorFSM_NotifyPersonDetectedPassing();
 800130e:	f7ff fd3b 	bl	8000d88 <DoorFSM_NotifyPersonDetectedPassing>
    }
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000205 	.word	0x20000205

08001320 <SystemManager_Init>:

void SendFrameToLabVIEWProcess(void);

void SystemManager_Init(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af02      	add	r7, sp, #8
    UARTProto_Init(SystemManager_HandleLabVIEWCommand);
 8001326:	4832      	ldr	r0, [pc, #200]	@ (80013f0 <SystemManager_Init+0xd0>)
 8001328:	f001 fdfa 	bl	8002f20 <UARTProto_Init>

    PIRService_Init(PIR_IN_PORT, PIR_IN_PIN, PIR_OUT_PORT, PIR_OUT_PIN, PIR_IRQ_PRIO);
 800132c:	230a      	movs	r3, #10
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2305      	movs	r3, #5
 8001332:	4a30      	ldr	r2, [pc, #192]	@ (80013f4 <SystemManager_Init+0xd4>)
 8001334:	2106      	movs	r1, #6
 8001336:	482f      	ldr	r0, [pc, #188]	@ (80013f4 <SystemManager_Init+0xd4>)
 8001338:	f001 fd9a 	bl	8002e70 <PIRService_Init>
    LimitSwitchService_Init(LS_OPEN_PORT, LS_OPEN_PIN, LS_CLOSED_PORT, LS_CLOSED_PIN, LS_IRQ_PRIO);
 800133c:	230b      	movs	r3, #11
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2305      	movs	r3, #5
 8001342:	4a2d      	ldr	r2, [pc, #180]	@ (80013f8 <SystemManager_Init+0xd8>)
 8001344:	2104      	movs	r1, #4
 8001346:	482c      	ldr	r0, [pc, #176]	@ (80013f8 <SystemManager_Init+0xd8>)
 8001348:	f001 fb86 	bl	8002a58 <LimitSwitchService_Init>
    Motor_Init(MOTOR_DIR1_PORT, MOTOR_DIR1_PIN, MOTOR_DIR2_PORT, MOTOR_DIR2_PIN);
 800134c:	2309      	movs	r3, #9
 800134e:	4a2a      	ldr	r2, [pc, #168]	@ (80013f8 <SystemManager_Init+0xd8>)
 8001350:	2108      	movs	r1, #8
 8001352:	4829      	ldr	r0, [pc, #164]	@ (80013f8 <SystemManager_Init+0xd8>)
 8001354:	f001 fc64 	bl	8002c20 <Motor_Init>
    LightService_Init(LIGHT_RELAY_PORT, LIGHT_RELAY_PIN);
 8001358:	2109      	movs	r1, #9
 800135a:	4828      	ldr	r0, [pc, #160]	@ (80013fc <SystemManager_Init+0xdc>)
 800135c:	f001 faae 	bl	80028bc <LightService_Init>

    PeopleCounter_Init(app_person_passed_handler);
 8001360:	4827      	ldr	r0, [pc, #156]	@ (8001400 <SystemManager_Init+0xe0>)
 8001362:	f7ff fe7d 	bl	8001060 <PeopleCounter_Init>
    DoorFSM_Init();
 8001366:	f7ff fc47 	bl	8000bf8 <DoorFSM_Init>
    LightingLogic_Init();
 800136a:	f7ff fe37 	bl	8000fdc <LightingLogic_Init>

    g_prev_system_op_mode = SYSTEM_MODE_NORMAL; // Chế độ hệ thống ban đầu
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <SystemManager_Init+0xe4>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
    g_cur_system_op_mode = g_prev_system_op_mode; // Chế độ hệ thống hiện tại
 8001374:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <SystemManager_Init+0xe4>)
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <SystemManager_Init+0xe8>)
 800137a:	701a      	strb	r2, [r3, #0]
    DoorFSM_NotifySystemModeChange(g_cur_system_op_mode); // Thông báo cho FSM
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <SystemManager_Init+0xe8>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fceb 	bl	8000d5c <DoorFSM_NotifySystemModeChange>

    g_prev_perCnt = PeopleCounter_GetCount();
 8001386:	f7ff ff8d 	bl	80012a4 <PeopleCounter_GetCount>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <SystemManager_Init+0xec>)
 8001390:	701a      	strb	r2, [r3, #0]
    g_cur_perCnt = g_prev_perCnt;
 8001392:	4b1e      	ldr	r3, [pc, #120]	@ (800140c <SystemManager_Init+0xec>)
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <SystemManager_Init+0xf0>)
 8001398:	701a      	strb	r2, [r3, #0]

    g_prev_light_state = LightingLogic_IsLightIntendedToBeOn() ? PAYLOAD_LIGHT_ON : PAYLOAD_LIGHT_OFF;
 800139a:	f7ff fe54 	bl	8001046 <LightingLogic_IsLightIntendedToBeOn>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <SystemManager_Init+0xf4>)
 80013a4:	701a      	strb	r2, [r3, #0]
    g_cur_light_state = g_prev_light_state;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <SystemManager_Init+0xf4>)
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <SystemManager_Init+0xf8>)
 80013ac:	701a      	strb	r2, [r3, #0]

    g_prev_door_state = DoorFSM_GetState();
 80013ae:	f7ff fcc9 	bl	8000d44 <DoorFSM_GetState>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <SystemManager_Init+0xfc>)
 80013b8:	701a      	strb	r2, [r3, #0]
    g_current_door_state = g_prev_door_state;
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <SystemManager_Init+0xfc>)
 80013bc:	781a      	ldrb	r2, [r3, #0]
 80013be:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <SystemManager_Init+0x100>)
 80013c0:	701a      	strb	r2, [r3, #0]

    // Gửi trạng thái ban đầu của hệ thống
    uint8_t initial_status_payload[4];
    initial_status_payload[0] = g_cur_system_op_mode; // Chế độ hệ thống
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <SystemManager_Init+0xe8>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	713b      	strb	r3, [r7, #4]
    initial_status_payload[1] = g_current_door_state; // Trạng thái cửa
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <SystemManager_Init+0x100>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	717b      	strb	r3, [r7, #5]
    initial_status_payload[2] = g_cur_perCnt; // Số người hiện tại
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <SystemManager_Init+0xf0>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	71bb      	strb	r3, [r7, #6]
    initial_status_payload[3] = g_cur_light_state; // Trạng thái đèn
 80013d4:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <SystemManager_Init+0xf8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	71fb      	strb	r3, [r7, #7]

    UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_FULL_SNAPSHOT, initial_status_payload, 4);
 80013da:	1d3a      	adds	r2, r7, #4
 80013dc:	2304      	movs	r3, #4
 80013de:	2105      	movs	r1, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	f001 fe0d 	bl	8003000 <UARTProto_SendFrame>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	08001511 	.word	0x08001511
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020000 	.word	0x40020000
 8001400:	080012fd 	.word	0x080012fd
 8001404:	20000204 	.word	0x20000204
 8001408:	20000205 	.word	0x20000205
 800140c:	20000206 	.word	0x20000206
 8001410:	20000207 	.word	0x20000207
 8001414:	20000208 	.word	0x20000208
 8001418:	20000209 	.word	0x20000209
 800141c:	20000002 	.word	0x20000002
 8001420:	20000003 	.word	0x20000003

08001424 <SystemManager_Process>:

void SystemManager_Process(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
    UARTProto_Process();
 8001428:	f001 fe4e 	bl	80030c8 <UARTProto_Process>
    LimitSwitchService_ProcessDebounce();
 800142c:	f001 fb9a 	bl	8002b64 <LimitSwitchService_ProcessDebounce>
    PeopleCounter_Process();
 8001430:	f7ff fe4a 	bl	80010c8 <PeopleCounter_Process>
    DoorFSM_Process();
 8001434:	f7ff fc08 	bl	8000c48 <DoorFSM_Process>
    LightingLogic_Process();
 8001438:	f7ff fde4 	bl	8001004 <LightingLogic_Process>
    SendFrameToLabVIEWProcess();
 800143c:	f000 f802 	bl	8001444 <SendFrameToLabVIEWProcess>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <SendFrameToLabVIEWProcess>:

void SendFrameToLabVIEWProcess(void) {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
    g_cur_perCnt = PeopleCounter_GetCount();
 8001448:	f7ff ff2c 	bl	80012a4 <PeopleCounter_GetCount>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <SendFrameToLabVIEWProcess+0xac>)
 8001452:	701a      	strb	r2, [r3, #0]
    g_cur_light_state = LightingLogic_IsLightIntendedToBeOn() ? PAYLOAD_LIGHT_ON : PAYLOAD_LIGHT_OFF;
 8001454:	f7ff fdf7 	bl	8001046 <LightingLogic_IsLightIntendedToBeOn>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b25      	ldr	r3, [pc, #148]	@ (80014f4 <SendFrameToLabVIEWProcess+0xb0>)
 800145e:	701a      	strb	r2, [r3, #0]
    g_current_door_state = DoorFSM_GetState();
 8001460:	f7ff fc70 	bl	8000d44 <DoorFSM_GetState>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <SendFrameToLabVIEWProcess+0xb4>)
 800146a:	701a      	strb	r2, [r3, #0]

    // Chỉ gửi frame nếu có thay đổi
    if (g_current_door_state != g_prev_door_state)  {
 800146c:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <SendFrameToLabVIEWProcess+0xb4>)
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <SendFrameToLabVIEWProcess+0xb8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d009      	beq.n	800148c <SendFrameToLabVIEWProcess+0x48>
        UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_DOOR_STATE, 
 8001478:	2301      	movs	r3, #1
 800147a:	4a1f      	ldr	r2, [pc, #124]	@ (80014f8 <SendFrameToLabVIEWProcess+0xb4>)
 800147c:	2101      	movs	r1, #1
 800147e:	2001      	movs	r0, #1
 8001480:	f001 fdbe 	bl	8003000 <UARTProto_SendFrame>
                            (uint8_t*)&g_current_door_state, 1);
        // Cập nhật trạng thái cũ
        g_prev_door_state = g_current_door_state;
 8001484:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <SendFrameToLabVIEWProcess+0xb4>)
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <SendFrameToLabVIEWProcess+0xb8>)
 800148a:	701a      	strb	r2, [r3, #0]
    }

    if (g_cur_perCnt != g_prev_perCnt) {
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <SendFrameToLabVIEWProcess+0xac>)
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <SendFrameToLabVIEWProcess+0xbc>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d009      	beq.n	80014ac <SendFrameToLabVIEWProcess+0x68>
        UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_PERSON_COUNT,
 8001498:	2301      	movs	r3, #1
 800149a:	4a15      	ldr	r2, [pc, #84]	@ (80014f0 <SendFrameToLabVIEWProcess+0xac>)
 800149c:	2103      	movs	r1, #3
 800149e:	2001      	movs	r0, #1
 80014a0:	f001 fdae 	bl	8003000 <UARTProto_SendFrame>
                            (uint8_t*)&g_cur_perCnt, 1);
        // Cập nhật số người cũ
        g_prev_perCnt = g_cur_perCnt;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <SendFrameToLabVIEWProcess+0xac>)
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <SendFrameToLabVIEWProcess+0xbc>)
 80014aa:	701a      	strb	r2, [r3, #0]
    }

    if (g_cur_light_state != g_prev_light_state) {
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <SendFrameToLabVIEWProcess+0xb0>)
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <SendFrameToLabVIEWProcess+0xc0>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d009      	beq.n	80014cc <SendFrameToLabVIEWProcess+0x88>
        UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_LIGHT_STATE, 
 80014b8:	2301      	movs	r3, #1
 80014ba:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <SendFrameToLabVIEWProcess+0xb0>)
 80014bc:	2102      	movs	r1, #2
 80014be:	2001      	movs	r0, #1
 80014c0:	f001 fd9e 	bl	8003000 <UARTProto_SendFrame>
                            (uint8_t*)&g_cur_light_state, 1);
        // Cập nhật trạng thái đèn cũ
        g_prev_light_state = g_cur_light_state;
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <SendFrameToLabVIEWProcess+0xb0>)
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <SendFrameToLabVIEWProcess+0xc0>)
 80014ca:	701a      	strb	r2, [r3, #0]
    }

    if (g_cur_system_op_mode != g_prev_system_op_mode) {
 80014cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <SendFrameToLabVIEWProcess+0xc4>)
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <SendFrameToLabVIEWProcess+0xc8>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d009      	beq.n	80014ec <SendFrameToLabVIEWProcess+0xa8>
        // Gửi frame thông báo chế độ hệ thống
        UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_SYSTEM_MODE, 
 80014d8:	2301      	movs	r3, #1
 80014da:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <SendFrameToLabVIEWProcess+0xc4>)
 80014dc:	2104      	movs	r1, #4
 80014de:	2001      	movs	r0, #1
 80014e0:	f001 fd8e 	bl	8003000 <UARTProto_SendFrame>
                            (uint8_t*)&g_cur_system_op_mode, 1);
        // Cập nhật chế độ cũ
        g_prev_system_op_mode = g_cur_system_op_mode;
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <SendFrameToLabVIEWProcess+0xc4>)
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <SendFrameToLabVIEWProcess+0xc8>)
 80014ea:	701a      	strb	r2, [r3, #0]
    }
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000207 	.word	0x20000207
 80014f4:	20000209 	.word	0x20000209
 80014f8:	20000003 	.word	0x20000003
 80014fc:	20000002 	.word	0x20000002
 8001500:	20000206 	.word	0x20000206
 8001504:	20000208 	.word	0x20000208
 8001508:	20000205 	.word	0x20000205
 800150c:	20000204 	.word	0x20000204

08001510 <SystemManager_HandleLabVIEWCommand>:

bool SystemManager_HandleLabVIEWCommand(const ParsedFrame_t* frame) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
    if (frame->type != FRAME_TYPE_LABVIEW_TO_STM) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d001      	beq.n	8001524 <SystemManager_HandleLabVIEWCommand+0x14>
        return false; // Không phải lệnh, bỏ qua
 8001520:	2300      	movs	r3, #0
 8001522:	e047      	b.n	80015b4 <SystemManager_HandleLabVIEWCommand+0xa4>
    }

    bool cmd_processed_ok = false;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

    switch (frame->id) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	2b10      	cmp	r3, #16
 800152e:	d002      	beq.n	8001536 <SystemManager_HandleLabVIEWCommand+0x26>
 8001530:	2b13      	cmp	r3, #19
 8001532:	d028      	beq.n	8001586 <SystemManager_HandleLabVIEWCommand+0x76>
 8001534:	e03a      	b.n	80015ac <SystemManager_HandleLabVIEWCommand+0x9c>
        case FRAME_ID_LABVIEW_SET_MODE:
            if (frame->length == 1) {
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	799b      	ldrb	r3, [r3, #6]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d120      	bne.n	8001580 <SystemManager_HandleLabVIEWCommand+0x70>
                SystemOpMode_t requested_mode = (SystemOpMode_t)frame->payload[0];
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	789b      	ldrb	r3, [r3, #2]
 8001542:	73bb      	strb	r3, [r7, #14]
                // Kiểm tra xem mode có hợp lệ không
                if (requested_mode == SYSTEM_MODE_NORMAL ||
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <SystemManager_HandleLabVIEWCommand+0x46>
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d002      	beq.n	8001556 <SystemManager_HandleLabVIEWCommand+0x46>
                    requested_mode == SYSTEM_MODE_FORCE_OPEN ||
 8001550:	7bbb      	ldrb	r3, [r7, #14]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d111      	bne.n	800157a <SystemManager_HandleLabVIEWCommand+0x6a>
                    requested_mode == SYSTEM_MODE_FORCE_CLOSE) {
                    // Gửi ACK về LabVIEW
                    UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_COMMAND_ACK, &frame->id, 1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	2301      	movs	r3, #1
 800155c:	2100      	movs	r1, #0
 800155e:	2001      	movs	r0, #1
 8001560:	f001 fd4e 	bl	8003000 <UARTProto_SendFrame>
                    // Cập nhật chế độ hệ thống
                    g_cur_system_op_mode = requested_mode;
 8001564:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <SystemManager_HandleLabVIEWCommand+0xac>)
 8001566:	7bbb      	ldrb	r3, [r7, #14]
 8001568:	7013      	strb	r3, [r2, #0]
                    DoorFSM_NotifySystemModeChange(g_cur_system_op_mode);
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <SystemManager_HandleLabVIEWCommand+0xac>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fbf4 	bl	8000d5c <DoorFSM_NotifySystemModeChange>
                    cmd_processed_ok = true;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
                    cmd_processed_ok = false; // Mode không hợp lệ
                }
            } else {
                cmd_processed_ok = false; // Payload length sai
            }
            break;
 8001578:	e01b      	b.n	80015b2 <SystemManager_HandleLabVIEWCommand+0xa2>
                    cmd_processed_ok = false; // Mode không hợp lệ
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
            break;
 800157e:	e018      	b.n	80015b2 <SystemManager_HandleLabVIEWCommand+0xa2>
                cmd_processed_ok = false; // Payload length sai
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
            break;
 8001584:	e015      	b.n	80015b2 <SystemManager_HandleLabVIEWCommand+0xa2>

        case FRAME_ID_LABVIEW_RESET_COUNT:
            if (frame->length == 0) { // Lệnh này không cần payload
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	799b      	ldrb	r3, [r3, #6]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10b      	bne.n	80015a6 <SystemManager_HandleLabVIEWCommand+0x96>
                // Gửi ACK về LabVIEW
                UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_COMMAND_ACK, &frame->id, 1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	2301      	movs	r3, #1
 8001594:	2100      	movs	r1, #0
 8001596:	2001      	movs	r0, #1
 8001598:	f001 fd32 	bl	8003000 <UARTProto_SendFrame>
                // Reset bộ đếm người
                PeopleCounter_Reset();
 800159c:	f7ff fe8e 	bl	80012bc <PeopleCounter_Reset>
                cmd_processed_ok = true;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
            } else {
                cmd_processed_ok = false; // Có payload không mong muốn
            }
            break;
 80015a4:	e005      	b.n	80015b2 <SystemManager_HandleLabVIEWCommand+0xa2>
                cmd_processed_ok = false; // Có payload không mong muốn
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
            break;
 80015aa:	e002      	b.n	80015b2 <SystemManager_HandleLabVIEWCommand+0xa2>

        default:
            cmd_processed_ok = false; // ID lệnh không xác định
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
            break;
 80015b0:	bf00      	nop
    }
    return cmd_processed_ok;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000205 	.word	0x20000205

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	@ (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	@ (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	@ (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <get_gpio_port_source>:

// Mảng lưu trữ các callback cho từng EXTI line (0-15)
static exti_callback_t g_exti_callbacks[16] = {NULL};

// Helper function để lấy port source cho SYSCFG_EXTICR
static uint8_t get_gpio_port_source(GPIO_TypeDef* GPIOx) {
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    if (GPIOx == GPIOA) return 0x00U;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a15      	ldr	r2, [pc, #84]	@ (80016b0 <get_gpio_port_source+0x60>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <get_gpio_port_source+0x14>
 8001660:	2300      	movs	r3, #0
 8001662:	e01e      	b.n	80016a2 <get_gpio_port_source+0x52>
    if (GPIOx == GPIOB) return 0x01U;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a13      	ldr	r2, [pc, #76]	@ (80016b4 <get_gpio_port_source+0x64>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d101      	bne.n	8001670 <get_gpio_port_source+0x20>
 800166c:	2301      	movs	r3, #1
 800166e:	e018      	b.n	80016a2 <get_gpio_port_source+0x52>
    if (GPIOx == GPIOC) return 0x02U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <get_gpio_port_source+0x68>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d101      	bne.n	800167c <get_gpio_port_source+0x2c>
 8001678:	2302      	movs	r3, #2
 800167a:	e012      	b.n	80016a2 <get_gpio_port_source+0x52>
    if (GPIOx == GPIOD) return 0x03U;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a0f      	ldr	r2, [pc, #60]	@ (80016bc <get_gpio_port_source+0x6c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d101      	bne.n	8001688 <get_gpio_port_source+0x38>
 8001684:	2303      	movs	r3, #3
 8001686:	e00c      	b.n	80016a2 <get_gpio_port_source+0x52>
    if (GPIOx == GPIOE) return 0x04U;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <get_gpio_port_source+0x70>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d101      	bne.n	8001694 <get_gpio_port_source+0x44>
 8001690:	2304      	movs	r3, #4
 8001692:	e006      	b.n	80016a2 <get_gpio_port_source+0x52>
    if (GPIOx == GPIOH) return 0x07U; // GPIOH là 0b111
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a0b      	ldr	r2, [pc, #44]	@ (80016c4 <get_gpio_port_source+0x74>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d101      	bne.n	80016a0 <get_gpio_port_source+0x50>
 800169c:	2307      	movs	r3, #7
 800169e:	e000      	b.n	80016a2 <get_gpio_port_source+0x52>
    return 0xFFU; // Lỗi
 80016a0:	23ff      	movs	r3, #255	@ 0xff
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40021c00 	.word	0x40021c00

080016c8 <EXTI_InitPin>:

void EXTI_InitPin(GPIO_TypeDef* GPIOx, uint8_t pin_number, uint8_t trigger_type,
                  uint8_t priority, exti_callback_t callback) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af04      	add	r7, sp, #16
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	4608      	mov	r0, r1
 80016d2:	4611      	mov	r1, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	70fb      	strb	r3, [r7, #3]
 80016da:	460b      	mov	r3, r1
 80016dc:	70bb      	strb	r3, [r7, #2]
 80016de:	4613      	mov	r3, r2
 80016e0:	707b      	strb	r3, [r7, #1]
    if (pin_number > 15) return; // Chỉ hỗ trợ pin 0-15
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	f200 80aa 	bhi.w	800183e <EXTI_InitPin+0x176>

    // 1. Cấu hình chân GPIO làm input (thường có pull-up hoặc pull-down)
    // Giả sử người dùng đã bật clock cho GPIOx hoặc GPIO_InitPin sẽ làm điều đó.
    // Ví dụ, cấu hình input với pull-up:
    GPIO_InitPin(GPIOx, (1U << pin_number), GPIO_MODE_INPUT, GPIO_PULL_UP,
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	2201      	movs	r2, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	b299      	uxth	r1, r3
 80016f4:	2300      	movs	r3, #0
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2300      	movs	r3, #0
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	2300      	movs	r3, #0
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2301      	movs	r3, #1
 8001702:	2200      	movs	r2, #0
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f9c5 	bl	8001a94 <GPIO_InitPin>
                 GPIO_SPEED_LOW, 0, 0); // otype và alt_func không dùng cho input thường

    // 2. Bật clock cho SYSCFG
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800170a:	4b50      	ldr	r3, [pc, #320]	@ (800184c <EXTI_InitPin+0x184>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170e:	4a4f      	ldr	r2, [pc, #316]	@ (800184c <EXTI_InitPin+0x184>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001714:	6453      	str	r3, [r2, #68]	@ 0x44

    // 3. Kết nối EXTI Line với chân GPIO thông qua SYSCFG
    // SYSCFG_EXTICRx có 4 trường, mỗi trường 4 bit, cho 4 EXTI line.
    // EXTICR[0] cho lines 0-3, EXTICR[1] cho lines 4-7, ...
    uint8_t exti_cr_index = pin_number / 4; // 0, 1, 2, 3
 8001716:	78fb      	ldrb	r3, [r7, #3]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	73bb      	strb	r3, [r7, #14]
    uint8_t exti_cr_pos = (pin_number % 4) * 4; // 0, 4, 8, 12
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	737b      	strb	r3, [r7, #13]
    uint8_t port_source = get_gpio_port_source(GPIOx);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff91 	bl	8001650 <get_gpio_port_source>
 800172e:	4603      	mov	r3, r0
 8001730:	733b      	strb	r3, [r7, #12]

    if (port_source == 0xFFU) return; // Port không hợp lệ
 8001732:	7b3b      	ldrb	r3, [r7, #12]
 8001734:	2bff      	cmp	r3, #255	@ 0xff
 8001736:	f000 8084 	beq.w	8001842 <EXTI_InitPin+0x17a>

    // Xóa các bit cũ và set port source mới
    SYSCFG->EXTICR[exti_cr_index] &= ~(0x0FU << exti_cr_pos);
 800173a:	4a45      	ldr	r2, [pc, #276]	@ (8001850 <EXTI_InitPin+0x188>)
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	3302      	adds	r3, #2
 8001740:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001744:	7b7b      	ldrb	r3, [r7, #13]
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43da      	mvns	r2, r3
 800174e:	4840      	ldr	r0, [pc, #256]	@ (8001850 <EXTI_InitPin+0x188>)
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	400a      	ands	r2, r1
 8001754:	3302      	adds	r3, #2
 8001756:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    SYSCFG->EXTICR[exti_cr_index] |= (port_source << exti_cr_pos);
 800175a:	4a3d      	ldr	r2, [pc, #244]	@ (8001850 <EXTI_InitPin+0x188>)
 800175c:	7bbb      	ldrb	r3, [r7, #14]
 800175e:	3302      	adds	r3, #2
 8001760:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001764:	7b39      	ldrb	r1, [r7, #12]
 8001766:	7b7b      	ldrb	r3, [r7, #13]
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	4618      	mov	r0, r3
 800176e:	4938      	ldr	r1, [pc, #224]	@ (8001850 <EXTI_InitPin+0x188>)
 8001770:	7bbb      	ldrb	r3, [r7, #14]
 8001772:	4302      	orrs	r2, r0
 8001774:	3302      	adds	r3, #2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // 4. Cấu hình EXTI Line
    // Bỏ mask ngắt (cho phép ngắt)
    EXTI->IMR |= (1U << pin_number);
 800177a:	4b36      	ldr	r3, [pc, #216]	@ (8001854 <EXTI_InitPin+0x18c>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	2101      	movs	r1, #1
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	4933      	ldr	r1, [pc, #204]	@ (8001854 <EXTI_InitPin+0x18c>)
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
    // Không dùng event mask ở đây
    // EXTI->EMR &= ~(1U << pin_number);

    // Cấu hình trigger type
    if (trigger_type == EXTI_TRIGGER_RISING || trigger_type == EXTI_TRIGGER_BOTH) {
 800178c:	78bb      	ldrb	r3, [r7, #2]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d002      	beq.n	8001798 <EXTI_InitPin+0xd0>
 8001792:	78bb      	ldrb	r3, [r7, #2]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d109      	bne.n	80017ac <EXTI_InitPin+0xe4>
        EXTI->RTSR |= (1U << pin_number);
 8001798:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <EXTI_InitPin+0x18c>)
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	492b      	ldr	r1, [pc, #172]	@ (8001854 <EXTI_InitPin+0x18c>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
 80017aa:	e009      	b.n	80017c0 <EXTI_InitPin+0xf8>
    } else {
        EXTI->RTSR &= ~(1U << pin_number); // Clear nếu không phải rising
 80017ac:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <EXTI_InitPin+0x18c>)
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4926      	ldr	r1, [pc, #152]	@ (8001854 <EXTI_InitPin+0x18c>)
 80017bc:	4013      	ands	r3, r2
 80017be:	608b      	str	r3, [r1, #8]
    }

    if (trigger_type == EXTI_TRIGGER_FALLING || trigger_type == EXTI_TRIGGER_BOTH) {
 80017c0:	78bb      	ldrb	r3, [r7, #2]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d002      	beq.n	80017cc <EXTI_InitPin+0x104>
 80017c6:	78bb      	ldrb	r3, [r7, #2]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d109      	bne.n	80017e0 <EXTI_InitPin+0x118>
        EXTI->FTSR |= (1U << pin_number);
 80017cc:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <EXTI_InitPin+0x18c>)
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	2101      	movs	r1, #1
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	491e      	ldr	r1, [pc, #120]	@ (8001854 <EXTI_InitPin+0x18c>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	60cb      	str	r3, [r1, #12]
 80017de:	e009      	b.n	80017f4 <EXTI_InitPin+0x12c>
    } else {
        EXTI->FTSR &= ~(1U << pin_number); // Clear nếu không phải falling
 80017e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <EXTI_InitPin+0x18c>)
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	2101      	movs	r1, #1
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4919      	ldr	r1, [pc, #100]	@ (8001854 <EXTI_InitPin+0x18c>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	60cb      	str	r3, [r1, #12]
    }

    // 5. Đăng ký callback
    if (pin_number < 16) {
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	d804      	bhi.n	8001804 <EXTI_InitPin+0x13c>
        g_exti_callbacks[pin_number] = callback;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	4916      	ldr	r1, [pc, #88]	@ (8001858 <EXTI_InitPin+0x190>)
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    // 6. Cấu hình và kích hoạt ngắt trong NVIC
    IRQn_Type irq_number;
    if (pin_number <= 4) { // EXTI0 đến EXTI4
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	2b04      	cmp	r3, #4
 8001808:	d804      	bhi.n	8001814 <EXTI_InitPin+0x14c>
        irq_number = (IRQn_Type)(EXTI0_IRQn + pin_number);
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	3306      	adds	r3, #6
 800180e:	b2db      	uxtb	r3, r3
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	e007      	b.n	8001824 <EXTI_InitPin+0x15c>
    } else if (pin_number <= 9) { // EXTI5 đến EXTI9
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	2b09      	cmp	r3, #9
 8001818:	d802      	bhi.n	8001820 <EXTI_InitPin+0x158>
        irq_number = EXTI9_5_IRQn;
 800181a:	2317      	movs	r3, #23
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	e001      	b.n	8001824 <EXTI_InitPin+0x15c>
    } else { // EXTI10 đến EXTI15
        irq_number = EXTI15_10_IRQn;
 8001820:	2328      	movs	r3, #40	@ 0x28
 8001822:	73fb      	strb	r3, [r7, #15]
    }

    NVIC_SetPriority(irq_number, priority);
 8001824:	787a      	ldrb	r2, [r7, #1]
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fee5 	bl	80015fc <__NVIC_SetPriority>
    NVIC_EnableIRQ(irq_number);
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fec2 	bl	80015c0 <__NVIC_EnableIRQ>
 800183c:	e002      	b.n	8001844 <EXTI_InitPin+0x17c>
    if (pin_number > 15) return; // Chỉ hỗ trợ pin 0-15
 800183e:	bf00      	nop
 8001840:	e000      	b.n	8001844 <EXTI_InitPin+0x17c>
    if (port_source == 0xFFU) return; // Port không hợp lệ
 8001842:	bf00      	nop
}
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40013800 	.word	0x40013800
 8001854:	40013c00 	.word	0x40013c00
 8001858:	2000020c 	.word	0x2000020c

0800185c <EXTI_ClearPendingBit>:

void EXTI_ClearPendingBit(uint8_t exti_line) {
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
    if (exti_line > 15) return;
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d806      	bhi.n	800187a <EXTI_ClearPendingBit+0x1e>
    // Ghi 1 vào bit tương ứng trong Pending Register để xóa nó
    EXTI->PR = (1U << exti_line);
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4a06      	ldr	r2, [pc, #24]	@ (8001888 <EXTI_ClearPendingBit+0x2c>)
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	6153      	str	r3, [r2, #20]
 8001878:	e000      	b.n	800187c <EXTI_ClearPendingBit+0x20>
    if (exti_line > 15) return;
 800187a:	bf00      	nop
}
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40013c00 	.word	0x40013c00

0800188c <EXTI_IRQHandler_Helper>:
// --- Trình xử lý ngắt (ISRs) ---
// Các hàm này cần được định nghĩa với tên chính xác như trong vector ngắt.
// Chúng sẽ kiểm tra cờ pending và gọi callback tương ứng.

// Helper function để xử lý logic chung trong ISR
static void EXTI_IRQHandler_Helper(uint8_t exti_line_start, uint8_t exti_line_end) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	4613      	mov	r3, r2
 800189a:	71bb      	strb	r3, [r7, #6]
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e01c      	b.n	80018dc <EXTI_IRQHandler_Helper+0x50>
        // Kiểm tra cờ Pending Bit cho từng line
        if ((EXTI->PR & (1U << line)) != 0) {
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <EXTI_IRQHandler_Helper+0x64>)
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	2101      	movs	r1, #1
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d010      	beq.n	80018d6 <EXTI_IRQHandler_Helper+0x4a>
            // Xóa Pending Bit trước khi gọi callback (quan trọng!)
            EXTI_ClearPendingBit(line);
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ffd0 	bl	800185c <EXTI_ClearPendingBit>

            // Gọi callback nếu có
            if (g_exti_callbacks[line] != NULL) {
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	4a0d      	ldr	r2, [pc, #52]	@ (80018f4 <EXTI_IRQHandler_Helper+0x68>)
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <EXTI_IRQHandler_Helper+0x4a>
                g_exti_callbacks[line](line);
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <EXTI_IRQHandler_Helper+0x68>)
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	4610      	mov	r0, r2
 80018d4:	4798      	blx	r3
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	3301      	adds	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	79bb      	ldrb	r3, [r7, #6]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d9de      	bls.n	80018a2 <EXTI_IRQHandler_Helper+0x16>
            }
        }
    }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40013c00 	.word	0x40013c00
 80018f4:	2000020c 	.word	0x2000020c

080018f8 <EXTI0_IRQHandler>:

// ISR cho EXTI Line 0
void EXTI0_IRQHandler(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(0, 0);
 80018fc:	2100      	movs	r1, #0
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff ffc4 	bl	800188c <EXTI_IRQHandler_Helper>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <EXTI1_IRQHandler>:

// ISR cho EXTI Line 1
void EXTI1_IRQHandler(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(1, 1);
 800190c:	2101      	movs	r1, #1
 800190e:	2001      	movs	r0, #1
 8001910:	f7ff ffbc 	bl	800188c <EXTI_IRQHandler_Helper>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <EXTI2_IRQHandler>:

// ISR cho EXTI Line 2
void EXTI2_IRQHandler(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(2, 2);
 800191c:	2102      	movs	r1, #2
 800191e:	2002      	movs	r0, #2
 8001920:	f7ff ffb4 	bl	800188c <EXTI_IRQHandler_Helper>
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <EXTI3_IRQHandler>:

// ISR cho EXTI Line 3
void EXTI3_IRQHandler(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(3, 3);
 800192c:	2103      	movs	r1, #3
 800192e:	2003      	movs	r0, #3
 8001930:	f7ff ffac 	bl	800188c <EXTI_IRQHandler_Helper>
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <EXTI4_IRQHandler>:

// ISR cho EXTI Line 4
void EXTI4_IRQHandler(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(4, 4);
 800193c:	2104      	movs	r1, #4
 800193e:	2004      	movs	r0, #4
 8001940:	f7ff ffa4 	bl	800188c <EXTI_IRQHandler_Helper>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <EXTI9_5_IRQHandler>:

// ISR cho EXTI Lines 5 đến 9
void EXTI9_5_IRQHandler(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(5, 9);
 800194c:	2109      	movs	r1, #9
 800194e:	2005      	movs	r0, #5
 8001950:	f7ff ff9c 	bl	800188c <EXTI_IRQHandler_Helper>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <EXTI15_10_IRQHandler>:

// ISR cho EXTI Lines 10 đến 15
void EXTI15_10_IRQHandler(void) {
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(10, 15);
 800195c:	210f      	movs	r1, #15
 800195e:	200a      	movs	r0, #10
 8001960:	f7ff ff94 	bl	800188c <EXTI_IRQHandler_Helper>
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <GPIO_ClockCmd>:
 */

#include "gpio_driver.h"

// Helper function to enable/disable clock for GPIO port
void GPIO_ClockCmd(GPIO_TypeDef* GPIOx, uint8_t NewState) {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	70fb      	strb	r3, [r7, #3]
    if (NewState == CLOCK_CMD_ENABLE) {
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d141      	bne.n	80019fe <GPIO_ClockCmd+0x96>
        if (GPIOx == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a3e      	ldr	r2, [pc, #248]	@ (8001a78 <GPIO_ClockCmd+0x110>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d106      	bne.n	8001990 <GPIO_ClockCmd+0x28>
 8001982:	4b3e      	ldr	r3, [pc, #248]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a3d      	ldr	r2, [pc, #244]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
        // ...
    }
}
 800198e:	e06c      	b.n	8001a6a <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3b      	ldr	r2, [pc, #236]	@ (8001a80 <GPIO_ClockCmd+0x118>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d106      	bne.n	80019a6 <GPIO_ClockCmd+0x3e>
 8001998:	4b38      	ldr	r3, [pc, #224]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199c:	4a37      	ldr	r2, [pc, #220]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80019a4:	e061      	b.n	8001a6a <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a36      	ldr	r2, [pc, #216]	@ (8001a84 <GPIO_ClockCmd+0x11c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d106      	bne.n	80019bc <GPIO_ClockCmd+0x54>
 80019ae:	4b33      	ldr	r3, [pc, #204]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a32      	ldr	r2, [pc, #200]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80019ba:	e056      	b.n	8001a6a <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a32      	ldr	r2, [pc, #200]	@ (8001a88 <GPIO_ClockCmd+0x120>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d106      	bne.n	80019d2 <GPIO_ClockCmd+0x6a>
 80019c4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	4a2c      	ldr	r2, [pc, #176]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80019d0:	e04b      	b.n	8001a6a <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a8c <GPIO_ClockCmd+0x124>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d106      	bne.n	80019e8 <GPIO_ClockCmd+0x80>
 80019da:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a27      	ldr	r2, [pc, #156]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80019e6:	e040      	b.n	8001a6a <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a29      	ldr	r2, [pc, #164]	@ (8001a90 <GPIO_ClockCmd+0x128>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d13c      	bne.n	8001a6a <GPIO_ClockCmd+0x102>
 80019f0:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	4a21      	ldr	r2, [pc, #132]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 80019f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80019fc:	e035      	b.n	8001a6a <GPIO_ClockCmd+0x102>
        if (GPIOx == GPIOA) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a1d      	ldr	r2, [pc, #116]	@ (8001a78 <GPIO_ClockCmd+0x110>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d106      	bne.n	8001a14 <GPIO_ClockCmd+0xac>
 8001a06:	4b1d      	ldr	r3, [pc, #116]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a12:	e02a      	b.n	8001a6a <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOBEN;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a1a      	ldr	r2, [pc, #104]	@ (8001a80 <GPIO_ClockCmd+0x118>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d106      	bne.n	8001a2a <GPIO_ClockCmd+0xc2>
 8001a1c:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a20:	4a16      	ldr	r2, [pc, #88]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001a22:	f023 0302 	bic.w	r3, r3, #2
 8001a26:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a28:	e01f      	b.n	8001a6a <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a15      	ldr	r2, [pc, #84]	@ (8001a84 <GPIO_ClockCmd+0x11c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d106      	bne.n	8001a40 <GPIO_ClockCmd+0xd8>
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a11      	ldr	r2, [pc, #68]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a3e:	e014      	b.n	8001a6a <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a11      	ldr	r2, [pc, #68]	@ (8001a88 <GPIO_ClockCmd+0x120>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d106      	bne.n	8001a56 <GPIO_ClockCmd+0xee>
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001a4e:	f023 0308 	bic.w	r3, r3, #8
 8001a52:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a54:	e009      	b.n	8001a6a <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a0c      	ldr	r2, [pc, #48]	@ (8001a8c <GPIO_ClockCmd+0x124>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d105      	bne.n	8001a6a <GPIO_ClockCmd+0x102>
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a06      	ldr	r2, [pc, #24]	@ (8001a7c <GPIO_ClockCmd+0x114>)
 8001a64:	f023 0310 	bic.w	r3, r3, #16
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020400 	.word	0x40020400
 8001a84:	40020800 	.word	0x40020800
 8001a88:	40020c00 	.word	0x40020c00
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40021c00 	.word	0x40021c00

08001a94 <GPIO_InitPin>:


void GPIO_InitPin(GPIO_TypeDef* GPIOx, uint16_t pin, uint32_t mode, uint32_t pull,
                  uint32_t speed, uint32_t otype, uint32_t alt_func) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	817b      	strh	r3, [r7, #10]
    uint32_t position;
    uint32_t iocurrent;
    uint32_t temp;

    // Enable clock for the GPIO port
    GPIO_ClockCmd(GPIOx, CLOCK_CMD_ENABLE);
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff ff5e 	bl	8001968 <GPIO_ClockCmd>

    for (position = 0; position < 16; position++) {
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	e0a4      	b.n	8001bfc <GPIO_InitPin+0x168>
        iocurrent = (0x1U << position); // Mask for current pin
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	61bb      	str	r3, [r7, #24]
        if (pin & iocurrent) {          // If this pin is selected
 8001abc:	897a      	ldrh	r2, [r7, #10]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8097 	beq.w	8001bf6 <GPIO_InitPin+0x162>
            // 1. Configure Mode (Input, Output, AF, Analog)
            temp = GPIOx->MODER;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2)); // Clear mode bits for this pin
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4013      	ands	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]
            temp |= (mode << (position * 2));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
            GPIOx->MODER = temp;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]

            if ((mode == GPIO_MODE_OUTPUT) || (mode == GPIO_MODE_AF)) {
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d002      	beq.n	8001b02 <GPIO_InitPin+0x6e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d12b      	bne.n	8001b5a <GPIO_InitPin+0xc6>
                // 2. Configure Speed
                temp = GPIOx->OSPEEDR;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	617b      	str	r3, [r7, #20]
                temp &= ~(0x03U << (position * 2));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	4013      	ands	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]
                temp |= (speed << (position * 2));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
                GPIOx->OSPEEDR = temp;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	609a      	str	r2, [r3, #8]

                // 3. Configure Output Type (Push-Pull or Open-Drain)
                temp = GPIOx->OTYPER;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	617b      	str	r3, [r7, #20]
                temp &= ~(0x01U << position);
 8001b36:	2201      	movs	r2, #1
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4013      	ands	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
                temp |= (otype << position);
 8001b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]
                GPIOx->OTYPER = temp;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	605a      	str	r2, [r3, #4]
            }

            // 4. Configure Pull-up/Pull-down
            temp = GPIOx->PUPDR;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]
            temp |= (pull << (position * 2));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]
            GPIOx->PUPDR = temp;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	60da      	str	r2, [r3, #12]

            // 5. Configure Alternate Function (if AF mode)
            if (mode == GPIO_MODE_AF) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d133      	bne.n	8001bf6 <GPIO_InitPin+0x162>
                if (position < 8) { // AFR[0] for pins 0-7
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	2b07      	cmp	r3, #7
 8001b92:	d817      	bhi.n	8001bc4 <GPIO_InitPin+0x130>
                    temp = GPIOx->AFR[0];
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << (position * 4));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << (position * 4));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[0] = temp;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	621a      	str	r2, [r3, #32]
 8001bc2:	e018      	b.n	8001bf6 <GPIO_InitPin+0x162>
                } else { // AFR[1] for pins 8-15
                    temp = GPIOx->AFR[1];
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << ((position - 8) * 4));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b08      	subs	r3, #8
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << ((position - 8) * 4));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b08      	subs	r3, #8
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[1] = temp;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	625a      	str	r2, [r3, #36]	@ 0x24
    for (position = 0; position < 16; position++) {
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	f67f af57 	bls.w	8001ab2 <GPIO_InitPin+0x1e>
                }
            }
        }
    }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <GPIO_ReadPin>:

uint8_t GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t pin) {
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	807b      	strh	r3, [r7, #2]
    if ((GPIOx->IDR & pin) != 0x00U) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <GPIO_ReadPin+0x1c>
        return GPIO_PIN_SET;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <GPIO_ReadPin+0x1e>
    } else {
        return GPIO_PIN_RESET;
 8001c2a:	2300      	movs	r3, #0
    }
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <GPIO_WritePin>:

void GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t pin, uint8_t state) {
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
 8001c44:	4613      	mov	r3, r2
 8001c46:	707b      	strb	r3, [r7, #1]
    if (state == GPIO_PIN_SET) {
 8001c48:	787b      	ldrb	r3, [r7, #1]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d103      	bne.n	8001c56 <GPIO_WritePin+0x1e>
        GPIOx->BSRR = (uint32_t)pin; // Set bit
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
    }
}
 8001c54:	e003      	b.n	8001c5e <GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
 8001c56:	887b      	ldrh	r3, [r7, #2]
 8001c58:	041a      	lsls	r2, r3, #16
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	619a      	str	r2, [r3, #24]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <get_timer_peripheral>:

#include "pwm_driver.h"
#include <stdio.h>

// Helper function để lấy con trỏ đến Timer dựa trên enum
static TIM_TypeDef* get_timer_peripheral(PWM_TimerInstance_e timer_instance) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
    switch (timer_instance) {
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d814      	bhi.n	8001ca6 <get_timer_peripheral+0x3a>
 8001c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c84 <get_timer_peripheral+0x18>)
 8001c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c82:	bf00      	nop
 8001c84:	08001c95 	.word	0x08001c95
 8001c88:	08001c9b 	.word	0x08001c9b
 8001c8c:	08001c9f 	.word	0x08001c9f
 8001c90:	08001ca3 	.word	0x08001ca3
        case PWM_TIMER2: return TIM2;
 8001c94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c98:	e006      	b.n	8001ca8 <get_timer_peripheral+0x3c>
        case PWM_TIMER3: return TIM3;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <get_timer_peripheral+0x48>)
 8001c9c:	e004      	b.n	8001ca8 <get_timer_peripheral+0x3c>
        case PWM_TIMER4: return TIM4;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <get_timer_peripheral+0x4c>)
 8001ca0:	e002      	b.n	8001ca8 <get_timer_peripheral+0x3c>
        case PWM_TIMER5: return TIM5;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <get_timer_peripheral+0x50>)
 8001ca4:	e000      	b.n	8001ca8 <get_timer_peripheral+0x3c>
        default: return NULL;
 8001ca6:	2300      	movs	r3, #0
    }
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40000c00 	.word	0x40000c00

08001cc0 <pwm_timer_clock_cmd>:

// Helper function để bật clock cho Timer
static void pwm_timer_clock_cmd(PWM_TimerInstance_e timer_instance, uint8_t enable_disable) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	460a      	mov	r2, r1
 8001cca:	71fb      	strb	r3, [r7, #7]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	71bb      	strb	r3, [r7, #6]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ffca 	bl	8001c6c <get_timer_peripheral>
 8001cd8:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL) return;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01f      	beq.n	8001d20 <pwm_timer_clock_cmd+0x60>

    if (enable_disable == CLOCK_CMD_ENABLE) { // Giả sử CLOCK_CMD_ENABLE = 1
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d11d      	bne.n	8001d22 <pwm_timer_clock_cmd+0x62>
        if (TIMx == TIM2 || TIMx == TIM3 || TIMx == TIM4 || TIMx == TIM5) {
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cec:	d00b      	beq.n	8001d06 <pwm_timer_clock_cmd+0x46>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <pwm_timer_clock_cmd+0x68>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <pwm_timer_clock_cmd+0x46>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d2c <pwm_timer_clock_cmd+0x6c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d003      	beq.n	8001d06 <pwm_timer_clock_cmd+0x46>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4a0b      	ldr	r2, [pc, #44]	@ (8001d30 <pwm_timer_clock_cmd+0x70>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d10d      	bne.n	8001d22 <pwm_timer_clock_cmd+0x62>
            RCC->APB1ENR |= (1U << ( ( (uint32_t)TIMx - APB1PERIPH_BASE ) / 0x400UL) );
 8001d06:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <pwm_timer_clock_cmd+0x74>)
 8001d08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8001d10:	0a9b      	lsrs	r3, r3, #10
 8001d12:	2101      	movs	r1, #1
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	4906      	ldr	r1, [pc, #24]	@ (8001d34 <pwm_timer_clock_cmd+0x74>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	640b      	str	r3, [r1, #64]	@ 0x40
 8001d1e:	e000      	b.n	8001d22 <pwm_timer_clock_cmd+0x62>
    if (TIMx == NULL) return;
 8001d20:	bf00      	nop
        }
        // Thêm cho các timer trên APB2 nếu cần (TIM1, TIM8, TIM9, TIM10, TIM11)
    } else {
        // Logic để tắt clock (ít dùng hơn)
    }
}
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40023800 	.word	0x40023800

08001d38 <PWM_InitChannel>:
// Cần khởi tạo các giá trị này trong PWM_InitChannel
static uint32_t g_timer_arr_values[4] = {0}; // TIM2, TIM3, TIM4, TIM5

int8_t PWM_InitChannel(PWM_TimerInstance_e timer_instance, PWM_TimerChannel_e channel,
                       uint32_t pwm_frequency_hz,
                       GPIO_TypeDef* gpio_port, uint8_t gpio_pin_number, uint8_t gpio_af_mode) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b090      	sub	sp, #64	@ 0x40
 8001d3c:	af04      	add	r7, sp, #16
 8001d3e:	60ba      	str	r2, [r7, #8]
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	4603      	mov	r3, r0
 8001d44:	73fb      	strb	r3, [r7, #15]
 8001d46:	460b      	mov	r3, r1
 8001d48:	73bb      	strb	r3, [r7, #14]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff8d 	bl	8001c6c <get_timer_peripheral>
 8001d52:	61b8      	str	r0, [r7, #24]
    if (TIMx == NULL || channel < PWM_CHANNEL_1 || channel > PWM_CHANNEL_4 || pwm_frequency_hz == 0) {
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <PWM_InitChannel+0x34>
 8001d5a:	7bbb      	ldrb	r3, [r7, #14]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <PWM_InitChannel+0x34>
 8001d60:	7bbb      	ldrb	r3, [r7, #14]
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d802      	bhi.n	8001d6c <PWM_InitChannel+0x34>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <PWM_InitChannel+0x3a>
        return -1; // Tham số không hợp lệ
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d70:	e117      	b.n	8001fa2 <PWM_InitChannel+0x26a>
    }

    // 1. Bật clock cho Timer và GPIO Port
    pwm_timer_clock_cmd(timer_instance, CLOCK_CMD_ENABLE);
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	2101      	movs	r1, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ffa2 	bl	8001cc0 <pwm_timer_clock_cmd>
    GPIO_ClockCmd(gpio_port, CLOCK_CMD_ENABLE); // Giả sử hàm này tồn tại và hoạt động
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fdf2 	bl	8001968 <GPIO_ClockCmd>

    // 2. Cấu hình chân GPIO ở chế độ Alternate Function
    GPIO_InitPin(gpio_port, (1U << gpio_pin_number), GPIO_MODE_AF, GPIO_PULL_NO,
 8001d84:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001d88:	2201      	movs	r2, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	b299      	uxth	r1, r3
 8001d90:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	2300      	movs	r3, #0
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2202      	movs	r2, #2
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fe76 	bl	8001a94 <GPIO_InitPin>
    // 3. Tính toán Prescaler (PSC) và Auto-Reload Register (ARR)
    // Tần số clock của Timer (ví dụ PCLK1 cho TIM2/3/4/5)
    // Nếu Prescaler của APB1 khác 1, PCLK1_TIMER_CLOCK = PCLK1_FREQUENCY_HZ * 2
    // (Tham khảo mục "Timer clock" trong Reference Manual)
    uint32_t timer_clock_hz;
    if (TIMx == TIM2 || TIMx == TIM3 || TIMx == TIM4 || TIMx == TIM5) { // Thuộc APB1
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dae:	d00b      	beq.n	8001dc8 <PWM_InitChannel+0x90>
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fac <PWM_InitChannel+0x274>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d007      	beq.n	8001dc8 <PWM_InitChannel+0x90>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	4a7d      	ldr	r2, [pc, #500]	@ (8001fb0 <PWM_InitChannel+0x278>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d003      	beq.n	8001dc8 <PWM_InitChannel+0x90>
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8001fb4 <PWM_InitChannel+0x27c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d10b      	bne.n	8001de0 <PWM_InitChannel+0xa8>
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 8001dc8:	4b7b      	ldr	r3, [pc, #492]	@ (8001fb8 <PWM_InitChannel+0x280>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <PWM_InitChannel+0xa2>
            timer_clock_hz = PCLK1_FREQUENCY_HZ;
 8001dd4:	4b79      	ldr	r3, [pc, #484]	@ (8001fbc <PWM_InitChannel+0x284>)
 8001dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 8001dd8:	e005      	b.n	8001de6 <PWM_InitChannel+0xae>
        } else { // APB1 Prescaler > 1
            timer_clock_hz = PCLK1_FREQUENCY_HZ * 2;
 8001dda:	4b79      	ldr	r3, [pc, #484]	@ (8001fc0 <PWM_InitChannel+0x288>)
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if ((RCC->CFGR & RCC_CFGR_PPRE1) == RCC_CFGR_PPRE1_DIV1) { // APB1 Prescaler = 1
 8001dde:	e002      	b.n	8001de6 <PWM_InitChannel+0xae>
        }
    } else {
        // Thêm logic cho timer trên APB2 (ví dụ TIM1)
        // if ((RCC->CFGR & RCC_CFGR_PPRE2) == RCC_CFGR_PPRE2_DIV1) { ... }
        return -1; // Timer không được hỗ trợ
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
 8001de4:	e0dd      	b.n	8001fa2 <PWM_InitChannel+0x26a>
    }

    // Tìm PSC và ARR. Ưu tiên ARR lớn để có độ phân giải duty cycle tốt hơn.
    // pwm_frequency = timer_clock_hz / ((PSC + 1) * (ARR + 1))
    // Giả sử ARR khoảng 1000-65535. PSC = (timer_clock_hz / (pwm_frequency * (ARR+1))) - 1
    uint32_t arr_val = (timer_clock_hz / pwm_frequency_hz) / 1000U; // Thử ARR ~1000
 8001de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	4a75      	ldr	r2, [pc, #468]	@ (8001fc4 <PWM_InitChannel+0x28c>)
 8001df0:	fba2 2303 	umull	r2, r3, r2, r3
 8001df4:	099b      	lsrs	r3, r3, #6
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val > 0xFFFFU) arr_val = 0xFFFFU; // Giới hạn ARR
 8001df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dfe:	d302      	bcc.n	8001e06 <PWM_InitChannel+0xce>
 8001e00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val < 100U && pwm_frequency_hz < 1000) arr_val = 999; // Tăng ARR nếu tần số PWM thấp
 8001e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e08:	2b63      	cmp	r3, #99	@ 0x63
 8001e0a:	d806      	bhi.n	8001e1a <PWM_InitChannel+0xe2>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e12:	d202      	bcs.n	8001e1a <PWM_InitChannel+0xe2>
 8001e14:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (arr_val == 0) arr_val = 1; // Tránh chia cho 0
 8001e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <PWM_InitChannel+0xec>
 8001e20:	2301      	movs	r3, #1
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint32_t psc_val = (timer_clock_hz / (pwm_frequency_hz * (arr_val + 1))) -1;
 8001e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e26:	3301      	adds	r3, #1
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
    if (psc_val > 0xFFFFU) psc_val = 0xFFFFU;
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e3e:	d302      	bcc.n	8001e46 <PWM_InitChannel+0x10e>
 8001e40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24


    g_timer_arr_values[timer_instance] = arr_val; // Lưu lại ARR
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	495f      	ldr	r1, [pc, #380]	@ (8001fc8 <PWM_InitChannel+0x290>)
 8001e4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // 4. Cấu hình Timer cơ bản
    TIMx->PSC = (uint16_t)psc_val;
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->ARR = (uint16_t)arr_val;
 8001e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIMx->CNT = 0; // Reset bộ đếm
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24
    // 5. Cấu hình kênh Output Compare cho PWM
    volatile uint16_t* ccmr_reg;
    volatile uint16_t* ccer_reg;
    volatile uint32_t* ccr_reg; // CCRx là 32-bit nhưng chỉ dùng 16-bit thấp

    if (channel == PWM_CHANNEL_1 || channel == PWM_CHANNEL_2) {
 8001e6a:	7bbb      	ldrb	r3, [r7, #14]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d002      	beq.n	8001e76 <PWM_InitChannel+0x13e>
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d103      	bne.n	8001e7e <PWM_InitChannel+0x146>
        ccmr_reg = (volatile uint16_t*)&(TIMx->CCMR1);
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	3318      	adds	r3, #24
 8001e7a:	623b      	str	r3, [r7, #32]
 8001e7c:	e002      	b.n	8001e84 <PWM_InitChannel+0x14c>
    } else { // Kênh 3 hoặc 4
        ccmr_reg = (volatile uint16_t*)&(TIMx->CCMR2);
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	331c      	adds	r3, #28
 8001e82:	623b      	str	r3, [r7, #32]
    }
    ccer_reg = (volatile uint16_t*)&(TIMx->CCER);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	3320      	adds	r3, #32
 8001e88:	617b      	str	r3, [r7, #20]

    switch (channel) {
 8001e8a:	7bbb      	ldrb	r3, [r7, #14]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d81a      	bhi.n	8001ec8 <PWM_InitChannel+0x190>
 8001e92:	a201      	add	r2, pc, #4	@ (adr r2, 8001e98 <PWM_InitChannel+0x160>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001ea9 	.word	0x08001ea9
 8001e9c:	08001eb1 	.word	0x08001eb1
 8001ea0:	08001eb9 	.word	0x08001eb9
 8001ea4:	08001ec1 	.word	0x08001ec1
        case PWM_CHANNEL_1: ccr_reg = &(TIMx->CCR1); break;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	3334      	adds	r3, #52	@ 0x34
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e00e      	b.n	8001ece <PWM_InitChannel+0x196>
        case PWM_CHANNEL_2: ccr_reg = &(TIMx->CCR2); break;
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	3338      	adds	r3, #56	@ 0x38
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e00a      	b.n	8001ece <PWM_InitChannel+0x196>
        case PWM_CHANNEL_3: ccr_reg = &(TIMx->CCR3); break;
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	333c      	adds	r3, #60	@ 0x3c
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	e006      	b.n	8001ece <PWM_InitChannel+0x196>
        case PWM_CHANNEL_4: ccr_reg = &(TIMx->CCR4); break;
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	3340      	adds	r3, #64	@ 0x40
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e002      	b.n	8001ece <PWM_InitChannel+0x196>
        default: return -1; // Should not happen
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ecc:	e069      	b.n	8001fa2 <PWM_InitChannel+0x26a>
    }

    // Cấu hình PWM Mode 1 (OCxM = 110) và bật Preload Enable (OCxPE = 1)
    // Preload cho phép cập nhật CCRx một cách an toàn vào cuối mỗi chu kỳ PWM
    uint16_t oc_mode_bits = TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1PE;
 8001ece:	2368      	movs	r3, #104	@ 0x68
 8001ed0:	827b      	strh	r3, [r7, #18]
    uint16_t ccer_enable_bit = TIM_CCER_CC1E << ((channel - 1) * 4);
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	2201      	movs	r2, #1
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	823b      	strh	r3, [r7, #16]

    if (channel == PWM_CHANNEL_1 || channel == PWM_CHANNEL_3) { // Kênh 1 và 3 dùng 8 bit thấp của CCMRx
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d002      	beq.n	8001eec <PWM_InitChannel+0x1b4>
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d121      	bne.n	8001f30 <PWM_InitChannel+0x1f8>
        *ccmr_reg &= ~(0xFFU << ((channel == PWM_CHANNEL_3) ? 8 : 0)); // Xóa bit cũ (OCxM, OCxPE, OCxFE, CCxS)
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	7bba      	ldrb	r2, [r7, #14]
 8001ef4:	2a03      	cmp	r2, #3
 8001ef6:	d101      	bne.n	8001efc <PWM_InitChannel+0x1c4>
 8001ef8:	22ff      	movs	r2, #255	@ 0xff
 8001efa:	e001      	b.n	8001f00 <PWM_InitChannel+0x1c8>
 8001efc:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001f00:	4013      	ands	r3, r2
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	801a      	strh	r2, [r3, #0]
        *ccmr_reg |= (oc_mode_bits << ((channel == PWM_CHANNEL_3) ? 8 : 0));
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	8a79      	ldrh	r1, [r7, #18]
 8001f12:	7bbb      	ldrb	r3, [r7, #14]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d101      	bne.n	8001f1c <PWM_InitChannel+0x1e4>
 8001f18:	2308      	movs	r3, #8
 8001f1a:	e000      	b.n	8001f1e <PWM_InitChannel+0x1e6>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	4313      	orrs	r3, r2
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	801a      	strh	r2, [r3, #0]
 8001f2e:	e020      	b.n	8001f72 <PWM_InitChannel+0x23a>
    } else { // Kênh 2 và 4 dùng 8 bit cao của CCMRx
        *ccmr_reg &= ~(0xFF00U >> ((channel == PWM_CHANNEL_4) ? 0 : 8)); // Xóa bit cũ
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	7bba      	ldrb	r2, [r7, #14]
 8001f38:	2a04      	cmp	r2, #4
 8001f3a:	d101      	bne.n	8001f40 <PWM_InitChannel+0x208>
 8001f3c:	22ff      	movs	r2, #255	@ 0xff
 8001f3e:	e001      	b.n	8001f44 <PWM_InitChannel+0x20c>
 8001f40:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001f44:	4013      	ands	r3, r2
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	801a      	strh	r2, [r3, #0]
        *ccmr_reg |= (oc_mode_bits << ((channel == PWM_CHANNEL_4) ? 8 : 0));
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	8a79      	ldrh	r1, [r7, #18]
 8001f56:	7bbb      	ldrb	r3, [r7, #14]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d101      	bne.n	8001f60 <PWM_InitChannel+0x228>
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	e000      	b.n	8001f62 <PWM_InitChannel+0x22a>
 8001f60:	2300      	movs	r3, #0
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	801a      	strh	r2, [r3, #0]
    }

    // Bật output cho kênh
    *ccer_reg |= ccer_enable_bit;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	8a3b      	ldrh	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	801a      	strh	r2, [r3, #0]

    // Đặt duty cycle ban đầu là 0%
    *ccr_reg = 0;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

    // Bật bit ARPE (Auto-Reload Preload Enable) trong CR1 để ARR được buffer
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	601a      	str	r2, [r3, #0]

    // (Tùy chọn) Tạo một update event để nạp các giá trị preload vào shadow registers
    TIMx->EGR |= TIM_EGR_UG;
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	615a      	str	r2, [r3, #20]

    // Timer chưa được start ở đây, sẽ start bằng PWM_Start()

    return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3730      	adds	r7, #48	@ 0x30
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	40000800 	.word	0x40000800
 8001fb4:	40000c00 	.word	0x40000c00
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	0280de80 	.word	0x0280de80
 8001fc0:	0501bd00 	.word	0x0501bd00
 8001fc4:	10624dd3 	.word	0x10624dd3
 8001fc8:	2000024c 	.word	0x2000024c

08001fcc <PWM_SetDutyCycle>:

int8_t PWM_SetDutyCycle(PWM_TimerInstance_e timer_instance, PWM_TimerChannel_e channel, float duty_cycle_percent) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	ed87 0a00 	vstr	s0, [r7]
 8001fda:	71fb      	strb	r3, [r7, #7]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71bb      	strb	r3, [r7, #6]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fe42 	bl	8001c6c <get_timer_peripheral>
 8001fe8:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL || channel < PWM_CHANNEL_1 || channel > PWM_CHANNEL_4) {
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <PWM_SetDutyCycle+0x30>
 8001ff0:	79bb      	ldrb	r3, [r7, #6]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <PWM_SetDutyCycle+0x30>
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d902      	bls.n	8002002 <PWM_SetDutyCycle+0x36>
        return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8002000:	e05f      	b.n	80020c2 <PWM_SetDutyCycle+0xf6>
    }

    if (duty_cycle_percent < 0.0f) duty_cycle_percent = 0.0f;
 8002002:	edd7 7a00 	vldr	s15, [r7]
 8002006:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800200a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200e:	d502      	bpl.n	8002016 <PWM_SetDutyCycle+0x4a>
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
    if (duty_cycle_percent > 100.0f) duty_cycle_percent = 100.0f;
 8002016:	edd7 7a00 	vldr	s15, [r7]
 800201a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80020cc <PWM_SetDutyCycle+0x100>
 800201e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	dd01      	ble.n	800202c <PWM_SetDutyCycle+0x60>
 8002028:	4b29      	ldr	r3, [pc, #164]	@ (80020d0 <PWM_SetDutyCycle+0x104>)
 800202a:	603b      	str	r3, [r7, #0]

    uint32_t arr_val = g_timer_arr_values[timer_instance];
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	4a29      	ldr	r2, [pc, #164]	@ (80020d4 <PWM_SetDutyCycle+0x108>)
 8002030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002034:	60bb      	str	r3, [r7, #8]
    if (arr_val == 0) return -1; // Timer chưa được init đúng cách
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <PWM_SetDutyCycle+0x76>
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
 8002040:	e03f      	b.n	80020c2 <PWM_SetDutyCycle+0xf6>

    uint32_t ccr_val = (uint32_t)((duty_cycle_percent / 100.0f) * (float)(arr_val +1));
 8002042:	edd7 7a00 	vldr	s15, [r7]
 8002046:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80020cc <PWM_SetDutyCycle+0x100>
 800204a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	3301      	adds	r3, #1
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002062:	ee17 3a90 	vmov	r3, s15
 8002066:	617b      	str	r3, [r7, #20]
    // arr_val+1 vì duty cycle 100% ứng với CCR = ARR+1 (hoặc ARR nếu dùng PWM mode khác)
    // Với PWM Mode 1 (đếm lên): 0% -> CCR=0; 100% -> CCR = ARR+1 (hoặc lớn hơn ARR)
    // Để đơn giản, nếu CCR > ARR, thì nó sẽ là 100% duty.

    if (ccr_val > arr_val) ccr_val = arr_val +1; // Đảm bảo 100% là CCR > ARR
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	429a      	cmp	r2, r3
 800206e:	d902      	bls.n	8002076 <PWM_SetDutyCycle+0xaa>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	3301      	adds	r3, #1
 8002074:	617b      	str	r3, [r7, #20]

    volatile uint32_t* ccr_reg;
    switch (channel) {
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	3b01      	subs	r3, #1
 800207a:	2b03      	cmp	r3, #3
 800207c:	d81a      	bhi.n	80020b4 <PWM_SetDutyCycle+0xe8>
 800207e:	a201      	add	r2, pc, #4	@ (adr r2, 8002084 <PWM_SetDutyCycle+0xb8>)
 8002080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002084:	08002095 	.word	0x08002095
 8002088:	0800209d 	.word	0x0800209d
 800208c:	080020a5 	.word	0x080020a5
 8002090:	080020ad 	.word	0x080020ad
        case PWM_CHANNEL_1: ccr_reg = &(TIMx->CCR1); break;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3334      	adds	r3, #52	@ 0x34
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	e00e      	b.n	80020ba <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_2: ccr_reg = &(TIMx->CCR2); break;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3338      	adds	r3, #56	@ 0x38
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	e00a      	b.n	80020ba <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_3: ccr_reg = &(TIMx->CCR3); break;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	333c      	adds	r3, #60	@ 0x3c
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	e006      	b.n	80020ba <PWM_SetDutyCycle+0xee>
        case PWM_CHANNEL_4: ccr_reg = &(TIMx->CCR4); break;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3340      	adds	r3, #64	@ 0x40
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e002      	b.n	80020ba <PWM_SetDutyCycle+0xee>
        default: return -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
 80020b8:	e003      	b.n	80020c2 <PWM_SetDutyCycle+0xf6>
    }

    *ccr_reg = ccr_val;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	601a      	str	r2, [r3, #0]
    return 0;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	42c80000 	.word	0x42c80000
 80020d0:	42c80000 	.word	0x42c80000
 80020d4:	2000024c 	.word	0x2000024c

080020d8 <PWM_Start>:

int8_t PWM_Start(PWM_TimerInstance_e timer_instance) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
    TIM_TypeDef* TIMx = get_timer_peripheral(timer_instance);
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fdc1 	bl	8001c6c <get_timer_peripheral>
 80020ea:	60f8      	str	r0, [r7, #12]
    if (TIMx == NULL) return -1;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <PWM_Start+0x20>
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	e006      	b.n	8002106 <PWM_Start+0x2e>

    // Bật bộ đếm
    TIMx->CR1 |= TIM_CR1_CEN;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]
    return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <SystemClock_Config>:
  #define PLL_P_REG_VAL 0x03U
#else
  #error "Invalid PLL_P_VAL. Must be 2, 4, 6, or 8."
#endif

void SystemClock_Config(void) {
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
    uint32_t temp_reg; // Biến tạm, tránh warning unused nếu không có MODIFY_REG

    // 1. Bật HSE và đợi nó ổn định (nếu dùng HSE là nguồn PLL)
    RCC->CR |= RCC_CR_HSEON;
 8002116:	4b47      	ldr	r3, [pc, #284]	@ (8002234 <SystemClock_Config+0x124>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a46      	ldr	r2, [pc, #280]	@ (8002234 <SystemClock_Config+0x124>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002120:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8002122:	bf00      	nop
 8002124:	4b43      	ldr	r3, [pc, #268]	@ (8002234 <SystemClock_Config+0x124>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f9      	beq.n	8002124 <SystemClock_Config+0x14>

    // 2. Cấu hình Power Control Register
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002130:	4b40      	ldr	r3, [pc, #256]	@ (8002234 <SystemClock_Config+0x124>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	4a3f      	ldr	r2, [pc, #252]	@ (8002234 <SystemClock_Config+0x124>)
 8002136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800213a:	6413      	str	r3, [r2, #64]	@ 0x40
    temp_reg = PWR->CR;
 800213c:	4b3e      	ldr	r3, [pc, #248]	@ (8002238 <SystemClock_Config+0x128>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	607b      	str	r3, [r7, #4]
    temp_reg &= ~PWR_CR_VOS;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002148:	607b      	str	r3, [r7, #4]
    temp_reg |= PWR_CR_VOS_1; // Scale 2
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002150:	607b      	str	r3, [r7, #4]
    PWR->CR = temp_reg;
 8002152:	4a39      	ldr	r2, [pc, #228]	@ (8002238 <SystemClock_Config+0x128>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6013      	str	r3, [r2, #0]

    // 3. Cấu hình các hệ số chia cho HCLK, PCLK1, PCLK2
    temp_reg = RCC->CFGR;
 8002158:	4b36      	ldr	r3, [pc, #216]	@ (8002234 <SystemClock_Config+0x124>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_HPRE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002164:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_HPRE_DIV1;
    RCC->CFGR = temp_reg;
 8002166:	4a33      	ldr	r2, [pc, #204]	@ (8002234 <SystemClock_Config+0x124>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 800216c:	4b31      	ldr	r3, [pc, #196]	@ (8002234 <SystemClock_Config+0x124>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002178:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE1_DIV2;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002180:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 8002182:	4a2c      	ldr	r2, [pc, #176]	@ (8002234 <SystemClock_Config+0x124>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 8002188:	4b2a      	ldr	r3, [pc, #168]	@ (8002234 <SystemClock_Config+0x124>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002194:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE2_DIV1;
    RCC->CFGR = temp_reg;
 8002196:	4a27      	ldr	r2, [pc, #156]	@ (8002234 <SystemClock_Config+0x124>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6093      	str	r3, [r2, #8]

    // 4. Cấu hình PLL
    RCC->CR &= ~RCC_CR_PLLON;
 800219c:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <SystemClock_Config+0x124>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a24      	ldr	r2, [pc, #144]	@ (8002234 <SystemClock_Config+0x124>)
 80021a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021a6:	6013      	str	r3, [r2, #0]
    while(RCC->CR & RCC_CR_PLLRDY);
 80021a8:	bf00      	nop
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <SystemClock_Config+0x124>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f9      	bne.n	80021aa <SystemClock_Config+0x9a>

    RCC->PLLCFGR = (PLL_Q_VAL << RCC_PLLCFGR_PLLQ_Pos) |
 80021b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002234 <SystemClock_Config+0x124>)
 80021b8:	4a20      	ldr	r2, [pc, #128]	@ (800223c <SystemClock_Config+0x12c>)
 80021ba:	605a      	str	r2, [r3, #4]
                   (PLL_P_REG_VAL << RCC_PLLCFGR_PLLP_Pos)|
                   (PLL_N_VAL << RCC_PLLCFGR_PLLN_Pos) |
                   (PLL_M_VAL << RCC_PLLCFGR_PLLM_Pos);

    // 5. Bật PLL và đợi nó ổn định
    RCC->CR |= RCC_CR_PLLON;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <SystemClock_Config+0x124>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002234 <SystemClock_Config+0x124>)
 80021c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 80021c8:	bf00      	nop
 80021ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <SystemClock_Config+0x124>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f9      	beq.n	80021ca <SystemClock_Config+0xba>

    // 6. Cấu hình Flash latency
    temp_reg = FLASH->ACR;
 80021d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <SystemClock_Config+0x130>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	607b      	str	r3, [r7, #4]
    temp_reg &= ~FLASH_ACR_LATENCY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f023 0307 	bic.w	r3, r3, #7
 80021e2:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_LATENCY_2WS;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_PRFTEN;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f2:	607b      	str	r3, [r7, #4]
    FLASH->ACR = temp_reg;
 80021f4:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <SystemClock_Config+0x130>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]

    // 7. Chọn PLL làm nguồn SYSCLK
    temp_reg = RCC->CFGR;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <SystemClock_Config+0x124>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_SW;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f023 0303 	bic.w	r3, r3, #3
 8002206:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_SW_PLL;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 8002210:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <SystemClock_Config+0x124>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8002216:	bf00      	nop
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <SystemClock_Config+0x124>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d1f9      	bne.n	8002218 <SystemClock_Config+0x108>
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000
 800223c:	07415408 	.word	0x07415408
 8002240:	40023c00 	.word	0x40023c00

08002244 <__NVIC_SetPriority>:
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	db0a      	blt.n	800226e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	490c      	ldr	r1, [pc, #48]	@ (8002290 <__NVIC_SetPriority+0x4c>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	440b      	add	r3, r1
 8002268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800226c:	e00a      	b.n	8002284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4908      	ldr	r1, [pc, #32]	@ (8002294 <__NVIC_SetPriority+0x50>)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	3b04      	subs	r3, #4
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	440b      	add	r3, r1
 8002282:	761a      	strb	r2, [r3, #24]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <SysTick_Init>:
#include "stm32f401xe.h"
#include "rcc_config.h"

static volatile uint32_t g_sysTickCounter = 0;

void SysTick_Init(void){
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
	// 1. Tính toán giá trị nạp cho SysTick để có tick mỗi 1ms
	// (HCLK / 1000) - 1 vì SysTick đếm từ LOAD_VAL về 0 (LOAD_VAL + 1 chu kỳ)
	uint32_t reload_value = (HCLK_FREQUENCY_HZ / 1000U) - 1U;
 800229e:	4b13      	ldr	r3, [pc, #76]	@ (80022ec <SysTick_Init+0x54>)
 80022a0:	607b      	str	r3, [r7, #4]

	// 2. Cấu hình SysTick
    // Vô hiệu hóa SysTick trước khi cấu hình
    SysTick->CTRL = 0;
 80022a2:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <SysTick_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

    // Nạp giá trị reload
    SysTick->LOAD = reload_value;
 80022a8:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <SysTick_Init+0x58>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6053      	str	r3, [r2, #4]

    // Đặt ưu tiên ngắt SysTick cho Cortex-M4 (4 bit ưu tiên)
    NVIC_SetPriority(SysTick_IRQn, 15); // Mức ưu tiên 15 (thấp nhất nếu 4 bit prio)
 80022ae:	210f      	movs	r1, #15
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f7ff ffc6 	bl	8002244 <__NVIC_SetPriority>

    // Reset bộ đếm SysTick hiện tại
    SysTick->VAL = 0;
 80022b8:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <SysTick_Init+0x58>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]

    // Kích hoạt SysTick với nguồn clock là HCLK và bật ngắt
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // CLKSOURCE = AHB clock
 80022be:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <SysTick_Init+0x58>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a0b      	ldr	r2, [pc, #44]	@ (80022f0 <SysTick_Init+0x58>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;   // Enable SysTick interrupt
 80022ca:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <SysTick_Init+0x58>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a08      	ldr	r2, [pc, #32]	@ (80022f0 <SysTick_Init+0x58>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;    // Enable SysTick
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <SysTick_Init+0x58>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a05      	ldr	r2, [pc, #20]	@ (80022f0 <SysTick_Init+0x58>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6013      	str	r3, [r2, #0]
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	0001481f 	.word	0x0001481f
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <GetTick>:
	while ((g_sysTickCounter - start_tick) < ms){

	}
}

uint32_t GetTick(void){
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
	return g_sysTickCounter;
 80022f8:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <GetTick+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	2000025c 	.word	0x2000025c

0800230c <IncTick>:

void IncTick(void){
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
	g_sysTickCounter ++;
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <IncTick+0x18>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	4a03      	ldr	r2, [pc, #12]	@ (8002324 <IncTick+0x18>)
 8002318:	6013      	str	r3, [r2, #0]
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	2000025c 	.word	0x2000025c

08002328 <SysTick_Handler>:

void SysTick_Handler(void){
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	IncTick();
 800232c:	f7ff ffee 	bl	800230c <IncTick>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <__NVIC_EnableIRQ>:
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db0b      	blt.n	800235e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4907      	ldr	r1, [pc, #28]	@ (800236c <__NVIC_EnableIRQ+0x38>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2001      	movs	r0, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_DisableIRQ>:
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	2b00      	cmp	r3, #0
 8002380:	db12      	blt.n	80023a8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	490a      	ldr	r1, [pc, #40]	@ (80023b4 <__NVIC_DisableIRQ+0x44>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	2001      	movs	r0, #1
 8002392:	fa00 f202 	lsl.w	r2, r0, r2
 8002396:	3320      	adds	r3, #32
 8002398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800239c:	f3bf 8f4f 	dsb	sy
}
 80023a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023a2:	f3bf 8f6f 	isb	sy
}
 80023a6:	bf00      	nop
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	@ (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	@ (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <UART2_Init>:
static uart_tx_complete_callback_t g_uart2_tx_complete_callback = NULL;

// Thêm biến theo dõi lỗi UART
static volatile uint8_t g_uart2_error_flags = 0;

void UART2_Init(uint32_t baudrate, uint32_t word_length, uint32_t parity, uint32_t stop_bits) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b08c      	sub	sp, #48	@ 0x30
 8002410:	af04      	add	r7, sp, #16
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
    // 1. Bật clock cho USART2 và GPIOA
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800241a:	4b51      	ldr	r3, [pc, #324]	@ (8002560 <UART2_Init+0x154>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	4a50      	ldr	r2, [pc, #320]	@ (8002560 <UART2_Init+0x154>)
 8002420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002424:	6413      	str	r3, [r2, #64]	@ 0x40
    GPIO_ClockCmd(GPIOA, CLOCK_CMD_ENABLE);
 8002426:	2101      	movs	r1, #1
 8002428:	484e      	ldr	r0, [pc, #312]	@ (8002564 <UART2_Init+0x158>)
 800242a:	f7ff fa9d 	bl	8001968 <GPIO_ClockCmd>

    // 2. Cấu hình chân GPIOA PA2 (TX) và PA3 (RX) cho AF7 (USART2)
    GPIO_InitPin(GPIOA, (1U << 2), GPIO_MODE_AF, GPIO_PULL_UP, GPIO_SPEED_HIGH, GPIO_OTYPE_PUSHPULL, 7); // PA2 TX
 800242e:	2307      	movs	r3, #7
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	2300      	movs	r3, #0
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	2302      	movs	r3, #2
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2301      	movs	r3, #1
 800243c:	2202      	movs	r2, #2
 800243e:	2104      	movs	r1, #4
 8002440:	4848      	ldr	r0, [pc, #288]	@ (8002564 <UART2_Init+0x158>)
 8002442:	f7ff fb27 	bl	8001a94 <GPIO_InitPin>
    GPIO_InitPin(GPIOA, (1U << 3), GPIO_MODE_AF, GPIO_PULL_UP, GPIO_SPEED_HIGH, GPIO_OTYPE_PUSHPULL, 7); // PA3 RX
 8002446:	2307      	movs	r3, #7
 8002448:	9302      	str	r3, [sp, #8]
 800244a:	2300      	movs	r3, #0
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	2302      	movs	r3, #2
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2301      	movs	r3, #1
 8002454:	2202      	movs	r2, #2
 8002456:	2108      	movs	r1, #8
 8002458:	4842      	ldr	r0, [pc, #264]	@ (8002564 <UART2_Init+0x158>)
 800245a:	f7ff fb1b 	bl	8001a94 <GPIO_InitPin>

    // 3. Vô hiệu hóa UART trước khi cấu hình
    USART2->CR1 &= ~USART_CR1_UE;
 800245e:	4b42      	ldr	r3, [pc, #264]	@ (8002568 <UART2_Init+0x15c>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	4a41      	ldr	r2, [pc, #260]	@ (8002568 <UART2_Init+0x15c>)
 8002464:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002468:	60d3      	str	r3, [r2, #12]

    // 4. Cấu hình Word Length, Parity
    USART2->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS);
 800246a:	4b3f      	ldr	r3, [pc, #252]	@ (8002568 <UART2_Init+0x15c>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a3e      	ldr	r2, [pc, #248]	@ (8002568 <UART2_Init+0x15c>)
 8002470:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002474:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= word_length;
 8002476:	4b3c      	ldr	r3, [pc, #240]	@ (8002568 <UART2_Init+0x15c>)
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	493b      	ldr	r1, [pc, #236]	@ (8002568 <UART2_Init+0x15c>)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
 8002480:	60cb      	str	r3, [r1, #12]
    USART2->CR1 |= parity;
 8002482:	4b39      	ldr	r3, [pc, #228]	@ (8002568 <UART2_Init+0x15c>)
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	4938      	ldr	r1, [pc, #224]	@ (8002568 <UART2_Init+0x15c>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4313      	orrs	r3, r2
 800248c:	60cb      	str	r3, [r1, #12]

    // 5. Cấu hình Stop Bits
    USART2->CR2 &= ~USART_CR2_STOP;
 800248e:	4b36      	ldr	r3, [pc, #216]	@ (8002568 <UART2_Init+0x15c>)
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	4a35      	ldr	r2, [pc, #212]	@ (8002568 <UART2_Init+0x15c>)
 8002494:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002498:	6113      	str	r3, [r2, #16]
    USART2->CR2 |= stop_bits;
 800249a:	4b33      	ldr	r3, [pc, #204]	@ (8002568 <UART2_Init+0x15c>)
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	4932      	ldr	r1, [pc, #200]	@ (8002568 <UART2_Init+0x15c>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	610b      	str	r3, [r1, #16]

    // 6. Cấu hình Baud Rate với độ chính xác cao hơn
    uint32_t pclk1_freq = PCLK1_FREQUENCY_HZ; // Lấy từ rcc_config.h
 80024a6:	4b31      	ldr	r3, [pc, #196]	@ (800256c <UART2_Init+0x160>)
 80024a8:	617b      	str	r3, [r7, #20]
    // Tính toán USARTDIV với độ chính xác cao hơn
    uint32_t integer_div = (25 * pclk1_freq) / (4 * baudrate);
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	009a      	lsls	r2, r3, #2
 80024b4:	441a      	add	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	613b      	str	r3, [r7, #16]
    uint32_t mantissa = integer_div / 100;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4a2b      	ldr	r2, [pc, #172]	@ (8002570 <UART2_Init+0x164>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	61fb      	str	r3, [r7, #28]
    uint32_t fraction = ((integer_div - (mantissa * 100)) * 16 + 50) / 100;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	2264      	movs	r2, #100	@ 0x64
 80024d0:	fb02 f303 	mul.w	r3, r2, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	3332      	adds	r3, #50	@ 0x32
 80024dc:	4a24      	ldr	r2, [pc, #144]	@ (8002570 <UART2_Init+0x164>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	61bb      	str	r3, [r7, #24]
        
    // Xử lý trường hợp fraction = 16
    if (fraction == 16) {
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d104      	bne.n	80024f6 <UART2_Init+0xea>
        mantissa++;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
        fraction = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
    }
        
    USART2->BRR = (mantissa << 4) | (fraction & 0xFU);
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	011a      	lsls	r2, r3, #4
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	4919      	ldr	r1, [pc, #100]	@ (8002568 <UART2_Init+0x15c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]

    // 7. Cấu hình Control Register: Bật TX, RX và RXNE Interrupt
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 8002506:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <UART2_Init+0x15c>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	4a17      	ldr	r2, [pc, #92]	@ (8002568 <UART2_Init+0x15c>)
 800250c:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 8002510:	60d3      	str	r3, [r2, #12]
    // USART2->CR3 &= ~USART_CR3_CTSE; // Tắt CTS flow control
    // USART2->CR3 &= ~USART_CR3_RTSE; // Tắt RTS flow control

    // 8. Reset trạng thái buffer
    g_uart2_rx_buffer_head = 0;
 8002512:	4b18      	ldr	r3, [pc, #96]	@ (8002574 <UART2_Init+0x168>)
 8002514:	2200      	movs	r2, #0
 8002516:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_tail = 0;
 8002518:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <UART2_Init+0x16c>)
 800251a:	2200      	movs	r2, #0
 800251c:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_count = 0;
 800251e:	4b17      	ldr	r3, [pc, #92]	@ (800257c <UART2_Init+0x170>)
 8002520:	2200      	movs	r2, #0
 8002522:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_head = 0;
 8002524:	4b16      	ldr	r3, [pc, #88]	@ (8002580 <UART2_Init+0x174>)
 8002526:	2200      	movs	r2, #0
 8002528:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_tail = 0;
 800252a:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <UART2_Init+0x178>)
 800252c:	2200      	movs	r2, #0
 800252e:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_count = 0;
 8002530:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <UART2_Init+0x17c>)
 8002532:	2200      	movs	r2, #0
 8002534:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_busy = false;
 8002536:	4b15      	ldr	r3, [pc, #84]	@ (800258c <UART2_Init+0x180>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]

    // 9. Cấu hình ngắt trong NVIC
    NVIC_SetPriority(USART2_IRQn, 14); // Đặt mức ưu tiên
 800253c:	210e      	movs	r1, #14
 800253e:	2026      	movs	r0, #38	@ 0x26
 8002540:	f7ff ff3a 	bl	80023b8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 8002544:	2026      	movs	r0, #38	@ 0x26
 8002546:	f7ff fef5 	bl	8002334 <__NVIC_EnableIRQ>

    // 10. Bật UART
    USART2->CR1 |= USART_CR1_UE;
 800254a:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <UART2_Init+0x15c>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4a06      	ldr	r2, [pc, #24]	@ (8002568 <UART2_Init+0x15c>)
 8002550:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002554:	60d3      	str	r3, [r2, #12]
}
 8002556:	bf00      	nop
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000
 8002568:	40004400 	.word	0x40004400
 800256c:	0280de80 	.word	0x0280de80
 8002570:	51eb851f 	.word	0x51eb851f
 8002574:	200002e0 	.word	0x200002e0
 8002578:	200002e2 	.word	0x200002e2
 800257c:	200002e4 	.word	0x200002e4
 8002580:	20000368 	.word	0x20000368
 8002584:	2000036a 	.word	0x2000036a
 8002588:	2000036c 	.word	0x2000036c
 800258c:	2000036e 	.word	0x2000036e

08002590 <UART2_SendBuffer_IT>:

bool UART2_SendBuffer_IT(const uint8_t* buffer, uint16_t length) {
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
    if (length == 0) return true;
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <UART2_SendBuffer_IT+0x16>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e04b      	b.n	800263e <UART2_SendBuffer_IT+0xae>
    if (g_uart2_tx_busy || (UART2_TX_BUFFER_SIZE - g_uart2_tx_buffer_count) < length) {
 80025a6:	4b29      	ldr	r3, [pc, #164]	@ (800264c <UART2_SendBuffer_IT+0xbc>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d107      	bne.n	80025c0 <UART2_SendBuffer_IT+0x30>
 80025b0:	4b27      	ldr	r3, [pc, #156]	@ (8002650 <UART2_SendBuffer_IT+0xc0>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f1c3 0280 	rsb	r2, r3, #128	@ 0x80
 80025ba:	887b      	ldrh	r3, [r7, #2]
 80025bc:	429a      	cmp	r2, r3
 80025be:	da01      	bge.n	80025c4 <UART2_SendBuffer_IT+0x34>
        return false;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e03c      	b.n	800263e <UART2_SendBuffer_IT+0xae>
    }

    // Tạm thời vô hiệu hóa ngắt TXE để cập nhật buffer an toàn
    USART2->CR1 &= ~USART_CR1_TXEIE;
 80025c4:	4b23      	ldr	r3, [pc, #140]	@ (8002654 <UART2_SendBuffer_IT+0xc4>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a22      	ldr	r2, [pc, #136]	@ (8002654 <UART2_SendBuffer_IT+0xc4>)
 80025ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025ce:	60d3      	str	r3, [r2, #12]

    for (uint16_t i = 0; i < length; i++) {
 80025d0:	2300      	movs	r3, #0
 80025d2:	81fb      	strh	r3, [r7, #14]
 80025d4:	e019      	b.n	800260a <UART2_SendBuffer_IT+0x7a>
        g_uart2_tx_buffer[g_uart2_tx_buffer_tail] = buffer[i];
 80025d6:	89fb      	ldrh	r3, [r7, #14]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002658 <UART2_SendBuffer_IT+0xc8>)
 80025de:	8812      	ldrh	r2, [r2, #0]
 80025e0:	b292      	uxth	r2, r2
 80025e2:	7819      	ldrb	r1, [r3, #0]
 80025e4:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <UART2_SendBuffer_IT+0xcc>)
 80025e6:	5499      	strb	r1, [r3, r2]
        g_uart2_tx_buffer_tail = (g_uart2_tx_buffer_tail + 1) % UART2_TX_BUFFER_SIZE;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002658 <UART2_SendBuffer_IT+0xc8>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	425a      	negs	r2, r3
 80025f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025fa:	bf58      	it	pl
 80025fc:	4253      	negpl	r3, r2
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <UART2_SendBuffer_IT+0xc8>)
 8002602:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 8002604:	89fb      	ldrh	r3, [r7, #14]
 8002606:	3301      	adds	r3, #1
 8002608:	81fb      	strh	r3, [r7, #14]
 800260a:	89fa      	ldrh	r2, [r7, #14]
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	429a      	cmp	r2, r3
 8002610:	d3e1      	bcc.n	80025d6 <UART2_SendBuffer_IT+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8002612:	b672      	cpsid	i
}
 8002614:	bf00      	nop
    }
    // đảm bảo critical section
    __disable_irq(); // Critical section
    g_uart2_tx_buffer_count += length;
 8002616:	4b0e      	ldr	r3, [pc, #56]	@ (8002650 <UART2_SendBuffer_IT+0xc0>)
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29a      	uxth	r2, r3
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	4413      	add	r3, r2
 8002620:	b29a      	uxth	r2, r3
 8002622:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <UART2_SendBuffer_IT+0xc0>)
 8002624:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_busy = true;
 8002626:	4b09      	ldr	r3, [pc, #36]	@ (800264c <UART2_SendBuffer_IT+0xbc>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800262c:	b662      	cpsie	i
}
 800262e:	bf00      	nop
    __enable_irq();  // End critical section

    // Kích hoạt ngắt TXE để bắt đầu gửi byte đầu tiên từ ISR
    USART2->CR1 |= USART_CR1_TXEIE;
 8002630:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <UART2_SendBuffer_IT+0xc4>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a07      	ldr	r2, [pc, #28]	@ (8002654 <UART2_SendBuffer_IT+0xc4>)
 8002636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800263a:	60d3      	str	r3, [r2, #12]

    return true;
 800263c:	2301      	movs	r3, #1
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	2000036e 	.word	0x2000036e
 8002650:	2000036c 	.word	0x2000036c
 8002654:	40004400 	.word	0x40004400
 8002658:	2000036a 	.word	0x2000036a
 800265c:	200002e8 	.word	0x200002e8

08002660 <UART2_ReadByte_FromBuffer>:

bool UART2_IsTxBusy(void) {
    return g_uart2_tx_busy;
}

bool UART2_ReadByte_FromBuffer(uint8_t* data) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
    if (g_uart2_rx_buffer_count == 0) {
 8002668:	4b17      	ldr	r3, [pc, #92]	@ (80026c8 <UART2_ReadByte_FromBuffer+0x68>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <UART2_ReadByte_FromBuffer+0x16>
        return false; // Buffer rỗng
 8002672:	2300      	movs	r3, #0
 8002674:	e024      	b.n	80026c0 <UART2_ReadByte_FromBuffer+0x60>
    }

    // Vô hiệu hóa chỉ ngắt UART2 thay vì tất cả các ngắt
    NVIC_DisableIRQ(USART2_IRQn);
 8002676:	2026      	movs	r0, #38	@ 0x26
 8002678:	f7ff fe7a 	bl	8002370 <__NVIC_DisableIRQ>
    
    *data = g_uart2_rx_buffer[g_uart2_rx_buffer_head];
 800267c:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <UART2_ReadByte_FromBuffer+0x6c>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <UART2_ReadByte_FromBuffer+0x70>)
 8002686:	5c9b      	ldrb	r3, [r3, r2]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	701a      	strb	r2, [r3, #0]
    g_uart2_rx_buffer_head = (g_uart2_rx_buffer_head + 1) % UART2_RX_BUFFER_SIZE;
 800268e:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <UART2_ReadByte_FromBuffer+0x6c>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	3301      	adds	r3, #1
 8002696:	425a      	negs	r2, r3
 8002698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800269c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026a0:	bf58      	it	pl
 80026a2:	4253      	negpl	r3, r2
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <UART2_ReadByte_FromBuffer+0x6c>)
 80026a8:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_count--;
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <UART2_ReadByte_FromBuffer+0x68>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <UART2_ReadByte_FromBuffer+0x68>)
 80026b6:	801a      	strh	r2, [r3, #0]
    
    // Kích hoạt lại ngắt UART2
    NVIC_EnableIRQ(USART2_IRQn);
 80026b8:	2026      	movs	r0, #38	@ 0x26
 80026ba:	f7ff fe3b 	bl	8002334 <__NVIC_EnableIRQ>

    return true;
 80026be:	2301      	movs	r3, #1
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200002e4 	.word	0x200002e4
 80026cc:	200002e0 	.word	0x200002e0
 80026d0:	20000260 	.word	0x20000260

080026d4 <USART2_IRQHandler>:
    __disable_irq();
    g_uart2_error_flags &= ~flags;
    __enable_irq();
}

void USART2_IRQHandler(void) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
    uint32_t sr_reg = USART2->SR; // Đọc thanh ghi SR một lần
 80026da:	4b6e      	ldr	r3, [pc, #440]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]

    // --- Xử lý ngắt RXNE (Receive Data Register Not Empty) ---
    if ((sr_reg & USART_SR_RXNE) && (USART2->CR1 & USART_CR1_RXNEIE)) {
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d032      	beq.n	8002750 <USART2_IRQHandler+0x7c>
 80026ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d02c      	beq.n	8002750 <USART2_IRQHandler+0x7c>
        uint8_t received_byte = (uint8_t)(USART2->DR & 0xFFU);
 80026f6:	4b67      	ldr	r3, [pc, #412]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	72fb      	strb	r3, [r7, #11]

        if (g_uart2_rx_buffer_count < UART2_RX_BUFFER_SIZE) {
 80026fc:	4b66      	ldr	r3, [pc, #408]	@ (8002898 <USART2_IRQHandler+0x1c4>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b7f      	cmp	r3, #127	@ 0x7f
 8002704:	d81c      	bhi.n	8002740 <USART2_IRQHandler+0x6c>
            g_uart2_rx_buffer[g_uart2_rx_buffer_tail] = received_byte;
 8002706:	4b65      	ldr	r3, [pc, #404]	@ (800289c <USART2_IRQHandler+0x1c8>)
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	4a64      	ldr	r2, [pc, #400]	@ (80028a0 <USART2_IRQHandler+0x1cc>)
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	5453      	strb	r3, [r2, r1]
            g_uart2_rx_buffer_tail = (g_uart2_rx_buffer_tail + 1) % UART2_RX_BUFFER_SIZE;
 8002714:	4b61      	ldr	r3, [pc, #388]	@ (800289c <USART2_IRQHandler+0x1c8>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	3301      	adds	r3, #1
 800271c:	425a      	negs	r2, r3
 800271e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002722:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002726:	bf58      	it	pl
 8002728:	4253      	negpl	r3, r2
 800272a:	b29a      	uxth	r2, r3
 800272c:	4b5b      	ldr	r3, [pc, #364]	@ (800289c <USART2_IRQHandler+0x1c8>)
 800272e:	801a      	strh	r2, [r3, #0]
            g_uart2_rx_buffer_count++;
 8002730:	4b59      	ldr	r3, [pc, #356]	@ (8002898 <USART2_IRQHandler+0x1c4>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	3301      	adds	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	4b57      	ldr	r3, [pc, #348]	@ (8002898 <USART2_IRQHandler+0x1c4>)
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	e007      	b.n	8002750 <USART2_IRQHandler+0x7c>
        } else {
            // Buffer RX đầy, đánh dấu lỗi bằng cách thêm cờ
            g_uart2_error_flags |= UART_ERROR_BUFFER_FULL;
 8002740:	4b58      	ldr	r3, [pc, #352]	@ (80028a4 <USART2_IRQHandler+0x1d0>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f043 0310 	orr.w	r3, r3, #16
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b55      	ldr	r3, [pc, #340]	@ (80028a4 <USART2_IRQHandler+0x1d0>)
 800274e:	701a      	strb	r2, [r3, #0]
        }
        // Cờ RXNE tự xóa khi đọc DR.
    }

    // --- Xử lý ngắt TXE (Transmit Data Register Empty) ---
    if ((sr_reg & USART_SR_TXE) && (USART2->CR1 & USART_CR1_TXEIE)) {
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002756:	2b00      	cmp	r3, #0
 8002758:	d039      	beq.n	80027ce <USART2_IRQHandler+0xfa>
 800275a:	4b4e      	ldr	r3, [pc, #312]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002762:	2b00      	cmp	r3, #0
 8002764:	d033      	beq.n	80027ce <USART2_IRQHandler+0xfa>
        if (g_uart2_tx_buffer_count > 0) {
 8002766:	4b50      	ldr	r3, [pc, #320]	@ (80028a8 <USART2_IRQHandler+0x1d4>)
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d02e      	beq.n	80027ce <USART2_IRQHandler+0xfa>
            USART2->DR = g_uart2_tx_buffer[g_uart2_tx_buffer_head];
 8002770:	4b4e      	ldr	r3, [pc, #312]	@ (80028ac <USART2_IRQHandler+0x1d8>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	4b4d      	ldr	r3, [pc, #308]	@ (80028b0 <USART2_IRQHandler+0x1dc>)
 800277a:	5c9b      	ldrb	r3, [r3, r2]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b45      	ldr	r3, [pc, #276]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 8002780:	605a      	str	r2, [r3, #4]
            g_uart2_tx_buffer_head = (g_uart2_tx_buffer_head + 1) % UART2_TX_BUFFER_SIZE;
 8002782:	4b4a      	ldr	r3, [pc, #296]	@ (80028ac <USART2_IRQHandler+0x1d8>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	3301      	adds	r3, #1
 800278a:	425a      	negs	r2, r3
 800278c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002790:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002794:	bf58      	it	pl
 8002796:	4253      	negpl	r3, r2
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b44      	ldr	r3, [pc, #272]	@ (80028ac <USART2_IRQHandler+0x1d8>)
 800279c:	801a      	strh	r2, [r3, #0]
            g_uart2_tx_buffer_count--;
 800279e:	4b42      	ldr	r3, [pc, #264]	@ (80028a8 <USART2_IRQHandler+0x1d4>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b3f      	ldr	r3, [pc, #252]	@ (80028a8 <USART2_IRQHandler+0x1d4>)
 80027aa:	801a      	strh	r2, [r3, #0]

            if (g_uart2_tx_buffer_count == 0) {
 80027ac:	4b3e      	ldr	r3, [pc, #248]	@ (80028a8 <USART2_IRQHandler+0x1d4>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10b      	bne.n	80027ce <USART2_IRQHandler+0xfa>
                // Đã gửi hết buffer, tắt ngắt TXE
                USART2->CR1 &= ~USART_CR1_TXEIE;
 80027b6:	4b37      	ldr	r3, [pc, #220]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	4a36      	ldr	r2, [pc, #216]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 80027bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027c0:	60d3      	str	r3, [r2, #12]
                // Bật ngắt TC (Transmission Complete) để biết khi nào byte cuối cùng thực sự ra khỏi shift register
                USART2->CR1 |= USART_CR1_TCIE;
 80027c2:	4b34      	ldr	r3, [pc, #208]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a33      	ldr	r2, [pc, #204]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 80027c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027cc:	60d3      	str	r3, [r2, #12]
        }
        // Cờ TXE tự xóa khi ghi vào DR.
    }

    // --- Xử lý ngắt TC (Transmission Complete) ---
    if ((sr_reg & USART_SR_TC) && (USART2->CR1 & USART_CR1_TCIE)) {
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01b      	beq.n	8002810 <USART2_IRQHandler+0x13c>
 80027d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d015      	beq.n	8002810 <USART2_IRQHandler+0x13c>
        // Byte cuối cùng đã được gửi hoàn toàn
        USART2->CR1 &= ~USART_CR1_TCIE; // Tắt ngắt TC
 80027e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 80027ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027ee:	60d3      	str	r3, [r2, #12]
        g_uart2_tx_busy = false;      // Đánh dấu  không còn bận gửi
 80027f0:	4b30      	ldr	r3, [pc, #192]	@ (80028b4 <USART2_IRQHandler+0x1e0>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]

        if (g_uart2_tx_complete_callback != NULL) {
 80027f6:	4b30      	ldr	r3, [pc, #192]	@ (80028b8 <USART2_IRQHandler+0x1e4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <USART2_IRQHandler+0x130>
            g_uart2_tx_complete_callback();
 80027fe:	4b2e      	ldr	r3, [pc, #184]	@ (80028b8 <USART2_IRQHandler+0x1e4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4798      	blx	r3
        }
        // Cờ TC được xóa bằng cách ghi 0 vào nó (hoặc đọc SR rồi ghi vào DR - nhưng ở đây đã xong TX)
        USART2->SR &= ~USART_SR_TC; // Xóa cờ TC
 8002804:	4b23      	ldr	r3, [pc, #140]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a22      	ldr	r2, [pc, #136]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 800280a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800280e:	6013      	str	r3, [r2, #0]
    }


    // --- Xử lý các cờ lỗi (Overrun, Noise, Framing, Parity) ---
    if (sr_reg & (USART_SR_ORE | USART_SR_NE | USART_SR_FE | USART_SR_PE)) {
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	2b00      	cmp	r3, #0
 8002818:	d037      	beq.n	800288a <USART2_IRQHandler+0x1b6>
        // Lưu lại lỗi để ứng dụng có thể kiểm tra
        if (sr_reg & USART_SR_ORE) g_uart2_error_flags |= UART_ERROR_OVERRUN;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	d007      	beq.n	8002834 <USART2_IRQHandler+0x160>
 8002824:	4b1f      	ldr	r3, [pc, #124]	@ (80028a4 <USART2_IRQHandler+0x1d0>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b1c      	ldr	r3, [pc, #112]	@ (80028a4 <USART2_IRQHandler+0x1d0>)
 8002832:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_NE) g_uart2_error_flags |= UART_ERROR_NOISE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <USART2_IRQHandler+0x17a>
 800283e:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <USART2_IRQHandler+0x1d0>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b16      	ldr	r3, [pc, #88]	@ (80028a4 <USART2_IRQHandler+0x1d0>)
 800284c:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_FE) g_uart2_error_flags |= UART_ERROR_FRAMING;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <USART2_IRQHandler+0x194>
 8002858:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <USART2_IRQHandler+0x1d0>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	b2da      	uxtb	r2, r3
 8002864:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <USART2_IRQHandler+0x1d0>)
 8002866:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_PE) g_uart2_error_flags |= UART_ERROR_PARITY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <USART2_IRQHandler+0x1ae>
 8002872:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <USART2_IRQHandler+0x1d0>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f043 0308 	orr.w	r3, r3, #8
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <USART2_IRQHandler+0x1d0>)
 8002880:	701a      	strb	r2, [r3, #0]
        
        // Đọc DR để xóa cờ lỗi
        volatile uint32_t temp_dr = USART2->DR;
 8002882:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <USART2_IRQHandler+0x1c0>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	607b      	str	r3, [r7, #4]
        (void)temp_dr; // Tránh warning
 8002888:	687b      	ldr	r3, [r7, #4]
    }
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40004400 	.word	0x40004400
 8002898:	200002e4 	.word	0x200002e4
 800289c:	200002e2 	.word	0x200002e2
 80028a0:	20000260 	.word	0x20000260
 80028a4:	20000374 	.word	0x20000374
 80028a8:	2000036c 	.word	0x2000036c
 80028ac:	20000368 	.word	0x20000368
 80028b0:	200002e8 	.word	0x200002e8
 80028b4:	2000036e 	.word	0x2000036e
 80028b8:	20000370 	.word	0x20000370

080028bc <LightService_Init>:
// --- Biến nội bộ lưu trữ thông tin chân GPIO và trạng thái đèn ---
static GPIO_TypeDef* g_light_relay_port = NULL;
static uint16_t      g_light_relay_pin_mask = 0;  // Sẽ là (1U << pin_number)
static bool          g_is_light_on = false;     // Trạng thái hiện tại của đèn

void LightService_Init(GPIO_TypeDef* light_relay_port, uint8_t light_relay_pin_number) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af04      	add	r7, sp, #16
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	70fb      	strb	r3, [r7, #3]
    if (light_relay_port == NULL || light_relay_pin_number > 15) {
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d026      	beq.n	800291c <LightService_Init+0x60>
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	2b0f      	cmp	r3, #15
 80028d2:	d823      	bhi.n	800291c <LightService_Init+0x60>
        return;
    }

    g_light_relay_port = light_relay_port;
 80028d4:	4a13      	ldr	r2, [pc, #76]	@ (8002924 <LightService_Init+0x68>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6013      	str	r3, [r2, #0]
    g_light_relay_pin_mask = (1U << light_relay_pin_number);
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	2201      	movs	r2, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <LightService_Init+0x6c>)
 80028e6:	801a      	strh	r2, [r3, #0]

    // Cấu hình chân GPIO làm output, push-pull, không pull, tốc độ thấp
    // GPIO_ClockCmd sẽ được gọi bên trong GPIO_InitPin
    GPIO_InitPin(g_light_relay_port, g_light_relay_pin_mask,
 80028e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002924 <LightService_Init+0x68>)
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <LightService_Init+0x6c>)
 80028ee:	8819      	ldrh	r1, [r3, #0]
 80028f0:	2300      	movs	r3, #0
 80028f2:	9302      	str	r3, [sp, #8]
 80028f4:	2300      	movs	r3, #0
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	2300      	movs	r3, #0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2300      	movs	r3, #0
 80028fe:	2201      	movs	r2, #1
 8002900:	f7ff f8c8 	bl	8001a94 <GPIO_InitPin>
                 GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW,
                 GPIO_OTYPE_PUSHPULL, 0); // AF không dùng

    // Đặt trạng thái ban đầu cho relay
    GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_INACTIVE_LEVEL);
 8002904:	4b07      	ldr	r3, [pc, #28]	@ (8002924 <LightService_Init+0x68>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a07      	ldr	r2, [pc, #28]	@ (8002928 <LightService_Init+0x6c>)
 800290a:	8811      	ldrh	r1, [r2, #0]
 800290c:	2200      	movs	r2, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f992 	bl	8001c38 <GPIO_WritePin>
    g_is_light_on = false;
 8002914:	4b05      	ldr	r3, [pc, #20]	@ (800292c <LightService_Init+0x70>)
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]
 800291a:	e000      	b.n	800291e <LightService_Init+0x62>
        return;
 800291c:	bf00      	nop
}
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000378 	.word	0x20000378
 8002928:	2000037c 	.word	0x2000037c
 800292c:	2000037e 	.word	0x2000037e

08002930 <LightService_TurnOn>:

void LightService_TurnOn(void) {
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
    if (g_light_relay_port != NULL) {
 8002934:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <LightService_TurnOn+0x28>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <LightService_TurnOn+0x22>
        GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_ACTIVE_LEVEL);
 800293c:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <LightService_TurnOn+0x28>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a06      	ldr	r2, [pc, #24]	@ (800295c <LightService_TurnOn+0x2c>)
 8002942:	8811      	ldrh	r1, [r2, #0]
 8002944:	2201      	movs	r2, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f976 	bl	8001c38 <GPIO_WritePin>
        g_is_light_on = true;
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <LightService_TurnOn+0x30>)
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
    }
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000378 	.word	0x20000378
 800295c:	2000037c 	.word	0x2000037c
 8002960:	2000037e 	.word	0x2000037e

08002964 <LightService_TurnOff>:

void LightService_TurnOff(void) {
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
    if (g_light_relay_port != NULL) {
 8002968:	4b08      	ldr	r3, [pc, #32]	@ (800298c <LightService_TurnOff+0x28>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <LightService_TurnOff+0x22>
        GPIO_WritePin(g_light_relay_port, g_light_relay_pin_mask, RELAY_INACTIVE_LEVEL);
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <LightService_TurnOff+0x28>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a06      	ldr	r2, [pc, #24]	@ (8002990 <LightService_TurnOff+0x2c>)
 8002976:	8811      	ldrh	r1, [r2, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff f95c 	bl	8001c38 <GPIO_WritePin>
        g_is_light_on = false;
 8002980:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <LightService_TurnOff+0x30>)
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
    }
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000378 	.word	0x20000378
 8002990:	2000037c 	.word	0x2000037c
 8002994:	2000037e 	.word	0x2000037e

08002998 <LightService_GetState>:

bool LightService_GetState(void) {
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
    return g_is_light_on;
 800299c:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <LightService_GetState+0x14>)
 800299e:	781b      	ldrb	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	2000037e 	.word	0x2000037e

080029b0 <ls_open_exti_handler>:

// Giả định: Công tắc là ACTIVE LOW (khi nhấn thì nối với GND, dùng PULL_UP nội)
#define LIMIT_SWITCH_ACTIVE_LEVEL GPIO_PIN_RESET // 0

// Callback cho công tắc "Cửa Mở Hoàn Toàn"
static void ls_open_exti_handler(uint8_t exti_line) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
    (void)exti_line; // Tránh warning
    LimitSwitch_Internal_t* ls = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN];
 80029ba:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <ls_open_exti_handler+0x50>)
 80029bc:	60fb      	str	r3, [r7, #12]

    // Đọc trạng thái thô của pin ngay lập tức
    ls->last_raw_pin_state = GPIO_ReadPin(ls->port, (1U << ls->pin_number));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	791b      	ldrb	r3, [r3, #4]
 80029c6:	4619      	mov	r1, r3
 80029c8:	2301      	movs	r3, #1
 80029ca:	408b      	lsls	r3, r1
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f7ff f91c 	bl	8001c0e <GPIO_ReadPin>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	731a      	strb	r2, [r3, #12]

    // Nếu đang IDLE (chưa debounce), bắt đầu quá trình debounce
    if (ls->debounce_state == DEBOUNCE_STATE_IDLE) {
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	79db      	ldrb	r3, [r3, #7]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d107      	bne.n	80029f6 <ls_open_exti_handler+0x46>
        ls->debounce_state = DEBOUNCE_STATE_WAITING;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	71da      	strb	r2, [r3, #7]
        ls->debounce_start_tick = GetTick();
 80029ec:	f7ff fc82 	bl	80022f4 <GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	609a      	str	r2, [r3, #8]
    }
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000380 	.word	0x20000380

08002a04 <ls_closed_exti_handler>:

// Callback cho công tắc "Cửa Đóng Hoàn Toàn"
static void ls_closed_exti_handler(uint8_t exti_line) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
    (void)exti_line;
    LimitSwitch_Internal_t* ls = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED];
 8002a0e:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <ls_closed_exti_handler+0x50>)
 8002a10:	60fb      	str	r3, [r7, #12]
    ls->last_raw_pin_state = GPIO_ReadPin(ls->port, (1U << ls->pin_number));
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	791b      	ldrb	r3, [r3, #4]
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	408b      	lsls	r3, r1
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	4610      	mov	r0, r2
 8002a26:	f7ff f8f2 	bl	8001c0e <GPIO_ReadPin>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	731a      	strb	r2, [r3, #12]
    if (ls->debounce_state == DEBOUNCE_STATE_IDLE) {
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	79db      	ldrb	r3, [r3, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <ls_closed_exti_handler+0x46>
        ls->debounce_state = DEBOUNCE_STATE_WAITING;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	71da      	strb	r2, [r3, #7]
        ls->debounce_start_tick = GetTick();
 8002a40:	f7ff fc58 	bl	80022f4 <GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	609a      	str	r2, [r3, #8]
    }
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000390 	.word	0x20000390

08002a58 <LimitSwitchService_Init>:

void LimitSwitchService_Init(GPIO_TypeDef* open_ls_port, uint8_t open_ls_pin_number,
                             GPIO_TypeDef* closed_ls_port, uint8_t closed_ls_pin_number,
                             uint8_t nvic_priority) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	461a      	mov	r2, r3
 8002a64:	460b      	mov	r3, r1
 8002a66:	72fb      	strb	r3, [r7, #11]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	72bb      	strb	r3, [r7, #10]
    // --- Cấu hình cho Công tắc Cửa Mở ---
    LimitSwitch_Internal_t* ls_open = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN];
 8002a6c:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <LimitSwitchService_Init+0xfc>)
 8002a6e:	617b      	str	r3, [r7, #20]
    ls_open->port = open_ls_port;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	601a      	str	r2, [r3, #0]
    ls_open->pin_number = open_ls_pin_number;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	7afa      	ldrb	r2, [r7, #11]
 8002a7a:	711a      	strb	r2, [r3, #4]
    ls_open->exti_line = open_ls_pin_number; // EXTI line thường trùng pin_number
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	7afa      	ldrb	r2, [r7, #11]
 8002a80:	715a      	strb	r2, [r3, #5]
    ls_open->current_stable_state = (GPIO_ReadPin(ls_open->port, (1U << ls_open->pin_number)) == LIMIT_SWITCH_ACTIVE_LEVEL); // Đọc trạng thái ban đầu
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	791b      	ldrb	r3, [r3, #4]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	408b      	lsls	r3, r1
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	4619      	mov	r1, r3
 8002a94:	4610      	mov	r0, r2
 8002a96:	f7ff f8ba 	bl	8001c0e <GPIO_ReadPin>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	719a      	strb	r2, [r3, #6]
    ls_open->debounce_state = DEBOUNCE_STATE_IDLE;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2200      	movs	r2, #0
 8002aae:	71da      	strb	r2, [r3, #7]
    ls_open->debounce_start_tick = 0;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
    ls_open->last_raw_pin_state = (ls_open->current_stable_state ? LIMIT_SWITCH_ACTIVE_LEVEL : !LIMIT_SWITCH_ACTIVE_LEVEL);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	799b      	ldrb	r3, [r3, #6]
 8002aba:	f083 0301 	eor.w	r3, r3, #1
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	731a      	strb	r2, [r3, #12]

    // EXTI_InitPin sẽ cấu hình GPIO là input, PULL_UP vì công tắc active LOW.
    // Trigger trên cả hai sườn để bắt đầu debounce khi có bất kỳ thay đổi nào.
    EXTI_InitPin(ls_open->port, ls_open->pin_number, EXTI_TRIGGER_BOTH,
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	7919      	ldrb	r1, [r3, #4]
 8002ace:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ad2:	4a21      	ldr	r2, [pc, #132]	@ (8002b58 <LimitSwitchService_Init+0x100>)
 8002ad4:	9200      	str	r2, [sp, #0]
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	f7fe fdf6 	bl	80016c8 <EXTI_InitPin>
                 nvic_priority, ls_open_exti_handler);


    // --- Cấu hình cho Công tắc Cửa Đóng ---
    LimitSwitch_Internal_t* ls_closed = &g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED];
 8002adc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b5c <LimitSwitchService_Init+0x104>)
 8002ade:	613b      	str	r3, [r7, #16]
    ls_closed->port = closed_ls_port;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	601a      	str	r2, [r3, #0]
    ls_closed->pin_number = closed_ls_pin_number;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	7aba      	ldrb	r2, [r7, #10]
 8002aea:	711a      	strb	r2, [r3, #4]
    ls_closed->exti_line = closed_ls_pin_number;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	7aba      	ldrb	r2, [r7, #10]
 8002af0:	715a      	strb	r2, [r3, #5]
    ls_closed->current_stable_state = (GPIO_ReadPin(ls_closed->port, (1U << ls_closed->pin_number)) == LIMIT_SWITCH_ACTIVE_LEVEL);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	791b      	ldrb	r3, [r3, #4]
 8002afa:	4619      	mov	r1, r3
 8002afc:	2301      	movs	r3, #1
 8002afe:	408b      	lsls	r3, r1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f7ff f882 	bl	8001c0e <GPIO_ReadPin>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	719a      	strb	r2, [r3, #6]
    ls_closed->debounce_state = DEBOUNCE_STATE_IDLE;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	71da      	strb	r2, [r3, #7]
    ls_closed->debounce_start_tick = 0;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
    ls_closed->last_raw_pin_state = (ls_closed->current_stable_state ? LIMIT_SWITCH_ACTIVE_LEVEL : !LIMIT_SWITCH_ACTIVE_LEVEL);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	799b      	ldrb	r3, [r3, #6]
 8002b2a:	f083 0301 	eor.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	731a      	strb	r2, [r3, #12]

    EXTI_InitPin(ls_closed->port, ls_closed->pin_number, EXTI_TRIGGER_BOTH,
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	7919      	ldrb	r1, [r3, #4]
 8002b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b42:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <LimitSwitchService_Init+0x108>)
 8002b44:	9200      	str	r2, [sp, #0]
 8002b46:	2203      	movs	r2, #3
 8002b48:	f7fe fdbe 	bl	80016c8 <EXTI_InitPin>
                 nvic_priority, ls_closed_exti_handler);
}
 8002b4c:	bf00      	nop
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000380 	.word	0x20000380
 8002b58:	080029b1 	.word	0x080029b1
 8002b5c:	20000390 	.word	0x20000390
 8002b60:	08002a05 	.word	0x08002a05

08002b64 <LimitSwitchService_ProcessDebounce>:

void LimitSwitchService_ProcessDebounce(void) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
    for (int i = 0; i < LIMIT_SWITCH_COUNT; ++i) {
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	e025      	b.n	8002bbc <LimitSwitchService_ProcessDebounce+0x58>
        LimitSwitch_Internal_t* ls = &g_limit_switches[i];
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	4a15      	ldr	r2, [pc, #84]	@ (8002bcc <LimitSwitchService_ProcessDebounce+0x68>)
 8002b76:	4413      	add	r3, r2
 8002b78:	60bb      	str	r3, [r7, #8]

        if (ls->debounce_state == DEBOUNCE_STATE_WAITING) {
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	79db      	ldrb	r3, [r3, #7]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d119      	bne.n	8002bb6 <LimitSwitchService_ProcessDebounce+0x52>
            if ((GetTick() - ls->debounce_start_tick) >= DEBOUNCE_TIME_MS) {
 8002b82:	f7ff fbb7 	bl	80022f4 <GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b31      	cmp	r3, #49	@ 0x31
 8002b90:	d911      	bls.n	8002bb6 <LimitSwitchService_ProcessDebounce+0x52>
                // Thời gian debounce đã hết.
                // Sử dụng trạng thái pin cuối cùng được ghi nhận bởi ISR.
                // ISR đã cập nhật ls->last_raw_pin_state với mỗi lần trigger ngắt.
                // Vì vậy, sau DEBOUNCE_TIME_MS, ls->last_raw_pin_state
                // sẽ giữ trạng thái của lần trigger cuối cùng trong khoảng thời gian đó.
                bool new_stable_state = (ls->last_raw_pin_state == LIMIT_SWITCH_ACTIVE_LEVEL);
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	7b1b      	ldrb	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	71fb      	strb	r3, [r7, #7]

                if (ls->current_stable_state != new_stable_state) {
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	799b      	ldrb	r3, [r3, #6]
 8002ba4:	79fa      	ldrb	r2, [r7, #7]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d002      	beq.n	8002bb0 <LimitSwitchService_ProcessDebounce+0x4c>
                    ls->current_stable_state = new_stable_state;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	79fa      	ldrb	r2, [r7, #7]
 8002bae:	719a      	strb	r2, [r3, #6]
                    // TODO: Có thể gọi một callback ở đây để báo cho Application biết
                    // trạng thái công tắc đã thay đổi ổn định.
                    // Ví dụ: if (ls_state_change_callback[i]) ls_state_change_callback[i](ls->current_stable_state);
                }
                ls->debounce_state = DEBOUNCE_STATE_IDLE; // Quay lại chờ ngắt tiếp theo
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	71da      	strb	r2, [r3, #7]
    for (int i = 0; i < LIMIT_SWITCH_COUNT; ++i) {
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	ddd6      	ble.n	8002b70 <LimitSwitchService_ProcessDebounce+0xc>
            }
        }
    }
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000380 	.word	0x20000380

08002bd0 <LimitSwitchService_IsDoorFullyOpen>:

bool LimitSwitchService_IsDoorFullyOpen(void) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd6:	b672      	cpsid	i
}
 8002bd8:	bf00      	nop
    bool state;
    __disable_irq(); // critical section
    state = g_limit_switches[LIMIT_SWITCH_ID_DOOR_OPEN].current_stable_state;
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <LimitSwitchService_IsDoorFullyOpen+0x24>)
 8002bdc:	799b      	ldrb	r3, [r3, #6]
 8002bde:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 8002be0:	b662      	cpsie	i
}
 8002be2:	bf00      	nop
    __enable_irq();
    return state;
 8002be4:	79fb      	ldrb	r3, [r7, #7]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000380 	.word	0x20000380

08002bf8 <LimitSwitchService_IsDoorFullyClosed>:

bool LimitSwitchService_IsDoorFullyClosed(void) {
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bfe:	b672      	cpsid	i
}
 8002c00:	bf00      	nop
    bool state;
    __disable_irq();
    state = g_limit_switches[LIMIT_SWITCH_ID_DOOR_CLOSED].current_stable_state;
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <LimitSwitchService_IsDoorFullyClosed+0x24>)
 8002c04:	7d9b      	ldrb	r3, [r3, #22]
 8002c06:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c08:	b662      	cpsie	i
}
 8002c0a:	bf00      	nop
    __enable_irq();
    return state;
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20000380 	.word	0x20000380

08002c20 <Motor_Init>:
static uint16_t      g_motor_dir1_pin_mask = 0;
static GPIO_TypeDef* g_motor_dir2_port = NULL;
static uint16_t      g_motor_dir2_pin_mask = 0;

void Motor_Init(GPIO_TypeDef* dir_1_port, uint8_t dir_1_pin_number,
                GPIO_TypeDef* dir_2_port, uint8_t dir_2_pin_number) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	72fb      	strb	r3, [r7, #11]
 8002c30:	4613      	mov	r3, r2
 8002c32:	72bb      	strb	r3, [r7, #10]
    // Lưu thông tin chân điều khiển hướng
    g_motor_dir1_port = dir_1_port;
 8002c34:	4a21      	ldr	r2, [pc, #132]	@ (8002cbc <Motor_Init+0x9c>)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6013      	str	r3, [r2, #0]
    g_motor_dir1_pin_mask = (1U << dir_1_pin_number);
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <Motor_Init+0xa0>)
 8002c46:	801a      	strh	r2, [r3, #0]
    g_motor_dir2_port = dir_2_port;
 8002c48:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc4 <Motor_Init+0xa4>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6013      	str	r3, [r2, #0]
    g_motor_dir2_pin_mask = (1U << dir_2_pin_number);
 8002c4e:	7abb      	ldrb	r3, [r7, #10]
 8002c50:	2201      	movs	r2, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <Motor_Init+0xa8>)
 8002c5a:	801a      	strh	r2, [r3, #0]

    // Khởi tạo chân PWM
    PWM_InitChannel(MOTOR_PWM_TIMER, MOTOR_PWM_CHANNEL, MOTOR_PWM_FREQ_HZ,
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	2306      	movs	r3, #6
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <Motor_Init+0xac>)
 8002c66:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	f7ff f863 	bl	8001d38 <PWM_InitChannel>
                    MOTOR_PWM_GPIO_PORT, MOTOR_PWM_GPIO_PIN, MOTOR_PWM_AF);
    
    // Khởi tạo các chân điều khiển hướng là output
    GPIO_InitPin(g_motor_dir1_port, g_motor_dir1_pin_mask,
 8002c72:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <Motor_Init+0x9c>)
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <Motor_Init+0xa0>)
 8002c78:	8819      	ldrh	r1, [r3, #0]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	9302      	str	r3, [sp, #8]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2300      	movs	r3, #0
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f7fe ff03 	bl	8001a94 <GPIO_InitPin>
                 GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW,
                 GPIO_OTYPE_PUSHPULL, 0);
    GPIO_InitPin(g_motor_dir2_port, g_motor_dir2_pin_mask,
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc4 <Motor_Init+0xa4>)
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <Motor_Init+0xa8>)
 8002c94:	8819      	ldrh	r1, [r3, #0]
 8002c96:	2300      	movs	r3, #0
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f7fe fef5 	bl	8001a94 <GPIO_InitPin>
                 GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW,
                 GPIO_OTYPE_PUSHPULL, 0);

    Motor_Stop(); // Đặt trạng thái ban đầu là dừng và coast
 8002caa:	f000 f88b 	bl	8002dc4 <Motor_Stop>
    PWM_Start(MOTOR_PWM_TIMER);
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f7ff fa12 	bl	80020d8 <PWM_Start>
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200003a0 	.word	0x200003a0
 8002cc0:	200003a4 	.word	0x200003a4
 8002cc4:	200003a8 	.word	0x200003a8
 8002cc8:	200003ac 	.word	0x200003ac
 8002ccc:	40020000 	.word	0x40020000

08002cd0 <Motor_SetSpeed>:

void Motor_SetSpeed(float percent) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (percent < 0.0f) percent = 0.0f;
 8002cda:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce6:	d502      	bpl.n	8002cee <Motor_SetSpeed+0x1e>
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
    if (percent > 100.0f) percent = 100.0f;
 8002cee:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cf2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002d18 <Motor_SetSpeed+0x48>
 8002cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfe:	dd01      	ble.n	8002d04 <Motor_SetSpeed+0x34>
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <Motor_SetSpeed+0x4c>)
 8002d02:	607b      	str	r3, [r7, #4]
    PWM_SetDutyCycle(MOTOR_PWM_TIMER, MOTOR_PWM_CHANNEL, percent);
 8002d04:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	f7ff f95e 	bl	8001fcc <PWM_SetDutyCycle>
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	42c80000 	.word	0x42c80000
 8002d1c:	42c80000 	.word	0x42c80000

08002d20 <Motor_SetDirection>:

void Motor_SetDirection(MotorDirection_t direction) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
    if (g_motor_dir1_port == NULL || g_motor_dir2_port == NULL) return;
 8002d2a:	4b22      	ldr	r3, [pc, #136]	@ (8002db4 <Motor_SetDirection+0x94>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d03c      	beq.n	8002dac <Motor_SetDirection+0x8c>
 8002d32:	4b21      	ldr	r3, [pc, #132]	@ (8002db8 <Motor_SetDirection+0x98>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d038      	beq.n	8002dac <Motor_SetDirection+0x8c>

    switch (direction) {
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <Motor_SetDirection+0x26>
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d011      	beq.n	8002d68 <Motor_SetDirection+0x48>
 8002d44:	e021      	b.n	8002d8a <Motor_SetDirection+0x6a>
        case MOTOR_FORWARD:
            GPIO_WritePin(g_motor_dir1_port, g_motor_dir1_pin_mask, GPIO_PIN_SET);
 8002d46:	4b1b      	ldr	r3, [pc, #108]	@ (8002db4 <Motor_SetDirection+0x94>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dbc <Motor_SetDirection+0x9c>)
 8002d4c:	8811      	ldrh	r1, [r2, #0]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe ff71 	bl	8001c38 <GPIO_WritePin>
            GPIO_WritePin(g_motor_dir2_port, g_motor_dir2_pin_mask, GPIO_PIN_RESET);
 8002d56:	4b18      	ldr	r3, [pc, #96]	@ (8002db8 <Motor_SetDirection+0x98>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a19      	ldr	r2, [pc, #100]	@ (8002dc0 <Motor_SetDirection+0xa0>)
 8002d5c:	8811      	ldrh	r1, [r2, #0]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe ff69 	bl	8001c38 <GPIO_WritePin>
            break;
 8002d66:	e022      	b.n	8002dae <Motor_SetDirection+0x8e>
        case MOTOR_REVERSE:
            GPIO_WritePin(g_motor_dir1_port, g_motor_dir1_pin_mask, GPIO_PIN_RESET);
 8002d68:	4b12      	ldr	r3, [pc, #72]	@ (8002db4 <Motor_SetDirection+0x94>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a13      	ldr	r2, [pc, #76]	@ (8002dbc <Motor_SetDirection+0x9c>)
 8002d6e:	8811      	ldrh	r1, [r2, #0]
 8002d70:	2200      	movs	r2, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe ff60 	bl	8001c38 <GPIO_WritePin>
            GPIO_WritePin(g_motor_dir2_port, g_motor_dir2_pin_mask, GPIO_PIN_SET);
 8002d78:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <Motor_SetDirection+0x98>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a10      	ldr	r2, [pc, #64]	@ (8002dc0 <Motor_SetDirection+0xa0>)
 8002d7e:	8811      	ldrh	r1, [r2, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe ff58 	bl	8001c38 <GPIO_WritePin>
            break;
 8002d88:	e011      	b.n	8002dae <Motor_SetDirection+0x8e>
        case MOTOR_COAST:
        default:
            GPIO_WritePin(g_motor_dir1_port, g_motor_dir1_pin_mask, GPIO_PIN_RESET);
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002db4 <Motor_SetDirection+0x94>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8002dbc <Motor_SetDirection+0x9c>)
 8002d90:	8811      	ldrh	r1, [r2, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fe ff4f 	bl	8001c38 <GPIO_WritePin>
            GPIO_WritePin(g_motor_dir2_port, g_motor_dir2_pin_mask, GPIO_PIN_RESET);
 8002d9a:	4b07      	ldr	r3, [pc, #28]	@ (8002db8 <Motor_SetDirection+0x98>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a08      	ldr	r2, [pc, #32]	@ (8002dc0 <Motor_SetDirection+0xa0>)
 8002da0:	8811      	ldrh	r1, [r2, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe ff47 	bl	8001c38 <GPIO_WritePin>
            break;
 8002daa:	e000      	b.n	8002dae <Motor_SetDirection+0x8e>
    if (g_motor_dir1_port == NULL || g_motor_dir2_port == NULL) return;
 8002dac:	bf00      	nop
    }
}
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200003a0 	.word	0x200003a0
 8002db8:	200003a8 	.word	0x200003a8
 8002dbc:	200003a4 	.word	0x200003a4
 8002dc0:	200003ac 	.word	0x200003ac

08002dc4 <Motor_Stop>:

void Motor_Stop(void) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
    Motor_SetSpeed(0.0f);
 8002dc8:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8002ddc <Motor_Stop+0x18>
 8002dcc:	f7ff ff80 	bl	8002cd0 <Motor_SetSpeed>
    Motor_SetDirection(MOTOR_COAST); // Đưa về trạng thái coast khi dừng
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f7ff ffa5 	bl	8002d20 <Motor_SetDirection>
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	00000000 	.word	0x00000000

08002de0 <pir1_exti_event_handler>:
} PIR_GpioConfig_t;

static PIR_GpioConfig_t g_pir_configs[PIR_SENSOR_COUNT];

// Callback cho PIR 1
static void pir1_exti_event_handler(uint8_t exti_line) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]

    if (GPIO_ReadPin(g_pir_configs[PIR_SENSOR_IN].port, (1U << g_pir_configs[PIR_SENSOR_IN].pin_number)) == GPIO_PIN_SET) {
 8002dea:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <pir1_exti_event_handler+0x40>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a0c      	ldr	r2, [pc, #48]	@ (8002e20 <pir1_exti_event_handler+0x40>)
 8002df0:	7912      	ldrb	r2, [r2, #4]
 8002df2:	4611      	mov	r1, r2
 8002df4:	2201      	movs	r2, #1
 8002df6:	408a      	lsls	r2, r1
 8002df8:	b292      	uxth	r2, r2
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fe ff06 	bl	8001c0e <GPIO_ReadPin>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d103      	bne.n	8002e10 <pir1_exti_event_handler+0x30>
        g_pir_motion_detected_state[PIR_SENSOR_IN] = true;
 8002e08:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <pir1_exti_event_handler+0x44>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	701a      	strb	r2, [r3, #0]
    } else {
        g_pir_motion_detected_state[PIR_SENSOR_IN] = false;
    }
}
 8002e0e:	e002      	b.n	8002e16 <pir1_exti_event_handler+0x36>
        g_pir_motion_detected_state[PIR_SENSOR_IN] = false;
 8002e10:	4b04      	ldr	r3, [pc, #16]	@ (8002e24 <pir1_exti_event_handler+0x44>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200003b4 	.word	0x200003b4
 8002e24:	200003b0 	.word	0x200003b0

08002e28 <pir2_exti_event_handler>:

// Callback cho PIR 2
static void pir2_exti_event_handler(uint8_t exti_line) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
    if (GPIO_ReadPin(g_pir_configs[PIR_SENSOR_OUT].port, (1U << g_pir_configs[PIR_SENSOR_OUT].pin_number)) == GPIO_PIN_SET) {
 8002e32:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <pir2_exti_event_handler+0x40>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	4a0c      	ldr	r2, [pc, #48]	@ (8002e68 <pir2_exti_event_handler+0x40>)
 8002e38:	7b12      	ldrb	r2, [r2, #12]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	408a      	lsls	r2, r1
 8002e40:	b292      	uxth	r2, r2
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fee2 	bl	8001c0e <GPIO_ReadPin>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d103      	bne.n	8002e58 <pir2_exti_event_handler+0x30>
        g_pir_motion_detected_state[PIR_SENSOR_OUT] = true;
 8002e50:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <pir2_exti_event_handler+0x44>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	705a      	strb	r2, [r3, #1]
    } else {
        g_pir_motion_detected_state[PIR_SENSOR_OUT] = false;
    }
}
 8002e56:	e002      	b.n	8002e5e <pir2_exti_event_handler+0x36>
        g_pir_motion_detected_state[PIR_SENSOR_OUT] = false;
 8002e58:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <pir2_exti_event_handler+0x44>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	705a      	strb	r2, [r3, #1]
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200003b4 	.word	0x200003b4
 8002e6c:	200003b0 	.word	0x200003b0

08002e70 <PIRService_Init>:

void PIRService_Init(GPIO_TypeDef* pir_in_port, uint8_t pir_in_pin_number,
                     GPIO_TypeDef* pir_out_port, uint8_t pir_out_pin_number,
                     uint8_t nvic_priority) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	72fb      	strb	r3, [r7, #11]
 8002e80:	4613      	mov	r3, r2
 8002e82:	72bb      	strb	r3, [r7, #10]
    // Lưu cấu hình chân
    g_pir_configs[PIR_SENSOR_IN].port = pir_in_port;
 8002e84:	4a17      	ldr	r2, [pc, #92]	@ (8002ee4 <PIRService_Init+0x74>)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6013      	str	r3, [r2, #0]
    g_pir_configs[PIR_SENSOR_IN].pin_number = pir_in_pin_number;
 8002e8a:	4a16      	ldr	r2, [pc, #88]	@ (8002ee4 <PIRService_Init+0x74>)
 8002e8c:	7afb      	ldrb	r3, [r7, #11]
 8002e8e:	7113      	strb	r3, [r2, #4]
    g_pir_configs[PIR_SENSOR_IN].exti_line = pir_in_pin_number; // EXTI line thường trùng pin_number
 8002e90:	4a14      	ldr	r2, [pc, #80]	@ (8002ee4 <PIRService_Init+0x74>)
 8002e92:	7afb      	ldrb	r3, [r7, #11]
 8002e94:	7153      	strb	r3, [r2, #5]

    g_pir_configs[PIR_SENSOR_OUT].port = pir_out_port;
 8002e96:	4a13      	ldr	r2, [pc, #76]	@ (8002ee4 <PIRService_Init+0x74>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6093      	str	r3, [r2, #8]
    g_pir_configs[PIR_SENSOR_OUT].pin_number = pir_out_pin_number;
 8002e9c:	4a11      	ldr	r2, [pc, #68]	@ (8002ee4 <PIRService_Init+0x74>)
 8002e9e:	7abb      	ldrb	r3, [r7, #10]
 8002ea0:	7313      	strb	r3, [r2, #12]
    g_pir_configs[PIR_SENSOR_OUT].exti_line = pir_out_pin_number;
 8002ea2:	4a10      	ldr	r2, [pc, #64]	@ (8002ee4 <PIRService_Init+0x74>)
 8002ea4:	7abb      	ldrb	r3, [r7, #10]
 8002ea6:	7353      	strb	r3, [r2, #13]

    // Reset trạng thái ban đầu
    g_pir_motion_detected_state[PIR_SENSOR_IN] = false;
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <PIRService_Init+0x78>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
    g_pir_motion_detected_state[PIR_SENSOR_OUT] = false;
 8002eae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee8 <PIRService_Init+0x78>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	705a      	strb	r2, [r3, #1]

    // Chân GPIO sẽ được EXTI_InitPin cấu hình là input (pull-up là lựa chọn an toàn).
    EXTI_InitPin(g_pir_configs[PIR_SENSOR_IN].port,
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <PIRService_Init+0x74>)
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <PIRService_Init+0x74>)
 8002eba:	7919      	ldrb	r1, [r3, #4]
 8002ebc:	7e3b      	ldrb	r3, [r7, #24]
 8002ebe:	4a0b      	ldr	r2, [pc, #44]	@ (8002eec <PIRService_Init+0x7c>)
 8002ec0:	9200      	str	r2, [sp, #0]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	f7fe fc00 	bl	80016c8 <EXTI_InitPin>
                 EXTI_TRIGGER_BOTH, // <<<< Sườn lên và xuống
                 nvic_priority,
                 pir1_exti_event_handler);

    // Khởi tạo EXTI cho PIR2
    EXTI_InitPin(g_pir_configs[PIR_SENSOR_OUT].port,
 8002ec8:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <PIRService_Init+0x74>)
 8002eca:	6898      	ldr	r0, [r3, #8]
 8002ecc:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <PIRService_Init+0x74>)
 8002ece:	7b19      	ldrb	r1, [r3, #12]
 8002ed0:	7e3b      	ldrb	r3, [r7, #24]
 8002ed2:	4a07      	ldr	r2, [pc, #28]	@ (8002ef0 <PIRService_Init+0x80>)
 8002ed4:	9200      	str	r2, [sp, #0]
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	f7fe fbf6 	bl	80016c8 <EXTI_InitPin>
                 g_pir_configs[PIR_SENSOR_OUT].pin_number,
                 EXTI_TRIGGER_BOTH, // <<<< Sườn lên và xuống
                 nvic_priority,     // Có thể dùng cùng priority hoặc khác
                 pir2_exti_event_handler);
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	200003b4 	.word	0x200003b4
 8002ee8:	200003b0 	.word	0x200003b0
 8002eec:	08002de1 	.word	0x08002de1
 8002ef0:	08002e29 	.word	0x08002e29

08002ef4 <PIRService_IsMotionDetected>:

bool PIRService_IsMotionDetected(PIR_SensorID_t sensor_id) {
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
    if (sensor_id < PIR_SENSOR_COUNT) {
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d804      	bhi.n	8002f0e <PIRService_IsMotionDetected+0x1a>
        return g_pir_motion_detected_state[sensor_id];
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	4a05      	ldr	r2, [pc, #20]	@ (8002f1c <PIRService_IsMotionDetected+0x28>)
 8002f08:	5cd3      	ldrb	r3, [r2, r3]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	e000      	b.n	8002f10 <PIRService_IsMotionDetected+0x1c>
    }
    return false; // ID không hợp lệ
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	200003b0 	.word	0x200003b0

08002f20 <UARTProto_Init>:
// Forward declarations of static helper functions
static void reset_rx_parser(void);
static void process_received_frame_logic(void);
static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length);

void UARTProto_Init(uart_command_handler_callback_t command_callback) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	g_app_command_callback = command_callback;
 8002f28:	4a07      	ldr	r2, [pc, #28]	@ (8002f48 <UARTProto_Init+0x28>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6013      	str	r3, [r2, #0]
    reset_rx_parser();
 8002f2e:	f000 f883 	bl	8003038 <reset_rx_parser>
    UART2_Init(115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 8002f32:	2300      	movs	r3, #0
 8002f34:	2200      	movs	r2, #0
 8002f36:	2100      	movs	r1, #0
 8002f38:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8002f3c:	f7ff fa66 	bl	800240c <UART2_Init>
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	200003dc 	.word	0x200003dc

08002f4c <actually_send_frame>:

static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	603a      	str	r2, [r7, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	71bb      	strb	r3, [r7, #6]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	717b      	strb	r3, [r7, #5]
    if (length > MAX_PAYLOAD_LENGTH) {
 8002f62:	797b      	ldrb	r3, [r7, #5]
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d901      	bls.n	8002f6c <actually_send_frame+0x20>
        return false;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e045      	b.n	8002ff8 <actually_send_frame+0xac>
    }

    uint8_t frame_buffer[MAX_FRAME_LENGTH];
    uint8_t frame_idx = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	75fb      	strb	r3, [r7, #23]

    frame_buffer[frame_idx++] = FRAME_START_BYTE;
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	75fa      	strb	r2, [r7, #23]
 8002f76:	3318      	adds	r3, #24
 8002f78:	443b      	add	r3, r7
 8002f7a:	227e      	movs	r2, #126	@ 0x7e
 8002f7c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = (uint8_t)type;
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	75fa      	strb	r2, [r7, #23]
 8002f86:	3318      	adds	r3, #24
 8002f88:	443b      	add	r3, r7
 8002f8a:	79fa      	ldrb	r2, [r7, #7]
 8002f8c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = id;
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	75fa      	strb	r2, [r7, #23]
 8002f96:	3318      	adds	r3, #24
 8002f98:	443b      	add	r3, r7
 8002f9a:	79ba      	ldrb	r2, [r7, #6]
 8002f9c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = length;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	75fa      	strb	r2, [r7, #23]
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	443b      	add	r3, r7
 8002faa:	797a      	ldrb	r2, [r7, #5]
 8002fac:	f803 2c0c 	strb.w	r2, [r3, #-12]

    if (length > 0 && payload != NULL) {
 8002fb0:	797b      	ldrb	r3, [r7, #5]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00f      	beq.n	8002fd6 <actually_send_frame+0x8a>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00c      	beq.n	8002fd6 <actually_send_frame+0x8a>
        memcpy(&frame_buffer[frame_idx], payload, length);
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	f107 020c 	add.w	r2, r7, #12
 8002fc2:	4413      	add	r3, r2
 8002fc4:	797a      	ldrb	r2, [r7, #5]
 8002fc6:	6839      	ldr	r1, [r7, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 f862 	bl	8004092 <memcpy>
        frame_idx += length;
 8002fce:	7dfa      	ldrb	r2, [r7, #23]
 8002fd0:	797b      	ldrb	r3, [r7, #5]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	75fb      	strb	r3, [r7, #23]
    }
    frame_buffer[frame_idx++] = FRAME_END_BYTE;
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	75fa      	strb	r2, [r7, #23]
 8002fdc:	3318      	adds	r3, #24
 8002fde:	443b      	add	r3, r7
 8002fe0:	227f      	movs	r2, #127	@ 0x7f
 8002fe2:	f803 2c0c 	strb.w	r2, [r3, #-12]

    return UART2_SendBuffer_IT(frame_buffer, frame_idx);
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	f107 030c 	add.w	r3, r7, #12
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff facd 	bl	8002590 <UART2_SendBuffer_IT>
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <UARTProto_SendFrame>:

bool UARTProto_SendFrame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	603a      	str	r2, [r7, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
 800300e:	460b      	mov	r3, r1
 8003010:	71bb      	strb	r3, [r7, #6]
 8003012:	4613      	mov	r3, r2
 8003014:	717b      	strb	r3, [r7, #5]
    if (length > MAX_PAYLOAD_LENGTH) {
 8003016:	797b      	ldrb	r3, [r7, #5]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d901      	bls.n	8003020 <UARTProto_SendFrame+0x20>
        return false; // Payload too long
 800301c:	2300      	movs	r3, #0
 800301e:	e006      	b.n	800302e <UARTProto_SendFrame+0x2e>
    }
    return actually_send_frame(type, id, payload, length);
 8003020:	797b      	ldrb	r3, [r7, #5]
 8003022:	79b9      	ldrb	r1, [r7, #6]
 8003024:	79f8      	ldrb	r0, [r7, #7]
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	f7ff ff90 	bl	8002f4c <actually_send_frame>
 800302c:	4603      	mov	r3, r0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <reset_rx_parser>:

static void reset_rx_parser(void) {
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
    g_rx_state = STATE_WAIT_START;
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <reset_rx_parser+0x20>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
    g_rx_buffer_idx = 0;
 8003042:	4b06      	ldr	r3, [pc, #24]	@ (800305c <reset_rx_parser+0x24>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
    g_expected_payload_len = 0;
 8003048:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <reset_rx_parser+0x28>)
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	200003c4 	.word	0x200003c4
 800305c:	200003d1 	.word	0x200003d1
 8003060:	200003db 	.word	0x200003db

08003064 <process_received_frame_logic>:

static void process_received_frame_logic(void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
    // This function is called when a complete, structurally valid frame
    // of type FRAME_TYPE_LABVIEW_TO_STM has been received.
    // Frame data is in g_current_rx_frame.

    // Only expect to process commands from LabVIEW.
    if (g_current_rx_frame.type != FRAME_TYPE_LABVIEW_TO_STM) {
 8003068:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <process_received_frame_logic+0x5c>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d120      	bne.n	80030b2 <process_received_frame_logic+0x4e>
        return; 
    }

    switch (g_current_rx_frame.id) {
 8003070:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <process_received_frame_logic+0x5c>)
 8003072:	785b      	ldrb	r3, [r3, #1]
 8003074:	2b10      	cmp	r3, #16
 8003076:	d002      	beq.n	800307e <process_received_frame_logic+0x1a>
 8003078:	2b13      	cmp	r3, #19
 800307a:	d00d      	beq.n	8003098 <process_received_frame_logic+0x34>
            }
            break;

        default:
            // Unknown command ID received from LabVIEW. Silently ignore or log.
            break;
 800307c:	e01e      	b.n	80030bc <process_received_frame_logic+0x58>
            if (g_current_rx_frame.length == 1) {
 800307e:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <process_received_frame_logic+0x5c>)
 8003080:	799b      	ldrb	r3, [r3, #6]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d117      	bne.n	80030b6 <process_received_frame_logic+0x52>
                if (g_app_command_callback != NULL) {
 8003086:	4b0f      	ldr	r3, [pc, #60]	@ (80030c4 <process_received_frame_logic+0x60>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d013      	beq.n	80030b6 <process_received_frame_logic+0x52>
                    g_app_command_callback(&g_current_rx_frame);
 800308e:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <process_received_frame_logic+0x60>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	480b      	ldr	r0, [pc, #44]	@ (80030c0 <process_received_frame_logic+0x5c>)
 8003094:	4798      	blx	r3
            break;
 8003096:	e00e      	b.n	80030b6 <process_received_frame_logic+0x52>
            if (g_current_rx_frame.length == 0) {
 8003098:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <process_received_frame_logic+0x5c>)
 800309a:	799b      	ldrb	r3, [r3, #6]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10c      	bne.n	80030ba <process_received_frame_logic+0x56>
                if (g_app_command_callback != NULL) {
 80030a0:	4b08      	ldr	r3, [pc, #32]	@ (80030c4 <process_received_frame_logic+0x60>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <process_received_frame_logic+0x56>
                    g_app_command_callback(&g_current_rx_frame);
 80030a8:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <process_received_frame_logic+0x60>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4804      	ldr	r0, [pc, #16]	@ (80030c0 <process_received_frame_logic+0x5c>)
 80030ae:	4798      	blx	r3
            break;
 80030b0:	e003      	b.n	80030ba <process_received_frame_logic+0x56>
        return; 
 80030b2:	bf00      	nop
 80030b4:	e002      	b.n	80030bc <process_received_frame_logic+0x58>
            break;
 80030b6:	bf00      	nop
 80030b8:	e000      	b.n	80030bc <process_received_frame_logic+0x58>
            break;
 80030ba:	bf00      	nop
    }
}
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200003d4 	.word	0x200003d4
 80030c4:	200003dc 	.word	0x200003dc

080030c8 <UARTProto_Process>:

void UARTProto_Process(void) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
    uint8_t byte;
    while (UART2_ReadByte_FromBuffer(&byte)) {
 80030ce:	e0b8      	b.n	8003242 <UARTProto_Process+0x17a>
        // Prevent buffer overflow if a malformed frame is too long
        if (g_rx_state != STATE_WAIT_START && g_rx_buffer_idx >= MAX_FRAME_LENGTH) {
 80030d0:	4b62      	ldr	r3, [pc, #392]	@ (800325c <UARTProto_Process+0x194>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <UARTProto_Process+0x1c>
 80030d8:	4b61      	ldr	r3, [pc, #388]	@ (8003260 <UARTProto_Process+0x198>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d901      	bls.n	80030e4 <UARTProto_Process+0x1c>
            reset_rx_parser();
 80030e0:	f7ff ffaa 	bl	8003038 <reset_rx_parser>
            // After reset, the current 'byte' might be a START_BYTE
        }

        switch (g_rx_state) {
 80030e4:	4b5d      	ldr	r3, [pc, #372]	@ (800325c <UARTProto_Process+0x194>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b05      	cmp	r3, #5
 80030ea:	f200 80a4 	bhi.w	8003236 <UARTProto_Process+0x16e>
 80030ee:	a201      	add	r2, pc, #4	@ (adr r2, 80030f4 <UARTProto_Process+0x2c>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	0800310d 	.word	0x0800310d
 80030f8:	08003131 	.word	0x08003131
 80030fc:	08003161 	.word	0x08003161
 8003100:	08003183 	.word	0x08003183
 8003104:	080031c7 	.word	0x080031c7
 8003108:	08003209 	.word	0x08003209
            case STATE_WAIT_START:
                if (byte == FRAME_START_BYTE) {
 800310c:	79bb      	ldrb	r3, [r7, #6]
 800310e:	2b7e      	cmp	r3, #126	@ 0x7e
 8003110:	f040 8094 	bne.w	800323c <UARTProto_Process+0x174>
                    // g_rx_buffer_idx is 0 due to reset_rx_parser()
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 8003114:	4b52      	ldr	r3, [pc, #328]	@ (8003260 <UARTProto_Process+0x198>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	b2d1      	uxtb	r1, r2
 800311c:	4a50      	ldr	r2, [pc, #320]	@ (8003260 <UARTProto_Process+0x198>)
 800311e:	7011      	strb	r1, [r2, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	79b9      	ldrb	r1, [r7, #6]
 8003124:	4b4f      	ldr	r3, [pc, #316]	@ (8003264 <UARTProto_Process+0x19c>)
 8003126:	5499      	strb	r1, [r3, r2]
                    g_rx_state = STATE_WAIT_TYPE;
 8003128:	4b4c      	ldr	r3, [pc, #304]	@ (800325c <UARTProto_Process+0x194>)
 800312a:	2201      	movs	r2, #1
 800312c:	701a      	strb	r2, [r3, #0]
                }
                break;
 800312e:	e085      	b.n	800323c <UARTProto_Process+0x174>

            case STATE_WAIT_TYPE:
                g_current_rx_frame.type = (FrameType_t)byte;
 8003130:	79ba      	ldrb	r2, [r7, #6]
 8003132:	4b4d      	ldr	r3, [pc, #308]	@ (8003268 <UARTProto_Process+0x1a0>)
 8003134:	701a      	strb	r2, [r3, #0]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 8003136:	4b4a      	ldr	r3, [pc, #296]	@ (8003260 <UARTProto_Process+0x198>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	b2d1      	uxtb	r1, r2
 800313e:	4a48      	ldr	r2, [pc, #288]	@ (8003260 <UARTProto_Process+0x198>)
 8003140:	7011      	strb	r1, [r2, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	79b9      	ldrb	r1, [r7, #6]
 8003146:	4b47      	ldr	r3, [pc, #284]	@ (8003264 <UARTProto_Process+0x19c>)
 8003148:	5499      	strb	r1, [r3, r2]
                if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 800314a:	4b47      	ldr	r3, [pc, #284]	@ (8003268 <UARTProto_Process+0x1a0>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d103      	bne.n	800315a <UARTProto_Process+0x92>
                    g_rx_state = STATE_WAIT_ID;
 8003152:	4b42      	ldr	r3, [pc, #264]	@ (800325c <UARTProto_Process+0x194>)
 8003154:	2202      	movs	r2, #2
 8003156:	701a      	strb	r2, [r3, #0]
                } else {
                    // Received an unexpected frame type (e.g., STM_TO_LABVIEW type, or invalid)
                    reset_rx_parser();
                }
                break;
 8003158:	e073      	b.n	8003242 <UARTProto_Process+0x17a>
                    reset_rx_parser();
 800315a:	f7ff ff6d 	bl	8003038 <reset_rx_parser>
                break;
 800315e:	e070      	b.n	8003242 <UARTProto_Process+0x17a>

            case STATE_WAIT_ID:
                g_current_rx_frame.id = byte;
 8003160:	79ba      	ldrb	r2, [r7, #6]
 8003162:	4b41      	ldr	r3, [pc, #260]	@ (8003268 <UARTProto_Process+0x1a0>)
 8003164:	705a      	strb	r2, [r3, #1]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 8003166:	4b3e      	ldr	r3, [pc, #248]	@ (8003260 <UARTProto_Process+0x198>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	b2d1      	uxtb	r1, r2
 800316e:	4a3c      	ldr	r2, [pc, #240]	@ (8003260 <UARTProto_Process+0x198>)
 8003170:	7011      	strb	r1, [r2, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	79b9      	ldrb	r1, [r7, #6]
 8003176:	4b3b      	ldr	r3, [pc, #236]	@ (8003264 <UARTProto_Process+0x19c>)
 8003178:	5499      	strb	r1, [r3, r2]
                g_rx_state = STATE_WAIT_LENGTH;
 800317a:	4b38      	ldr	r3, [pc, #224]	@ (800325c <UARTProto_Process+0x194>)
 800317c:	2203      	movs	r2, #3
 800317e:	701a      	strb	r2, [r3, #0]
                break;
 8003180:	e05f      	b.n	8003242 <UARTProto_Process+0x17a>

            case STATE_WAIT_LENGTH:
                if (byte > MAX_PAYLOAD_LENGTH) {
 8003182:	79bb      	ldrb	r3, [r7, #6]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d902      	bls.n	800318e <UARTProto_Process+0xc6>
                    reset_rx_parser(); // Error: payload length field is too large
 8003188:	f7ff ff56 	bl	8003038 <reset_rx_parser>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
                    } else {
                        g_rx_state = STATE_WAIT_PAYLOAD;
                    }
                }
                break;
 800318c:	e059      	b.n	8003242 <UARTProto_Process+0x17a>
                    g_current_rx_frame.length = byte;
 800318e:	79ba      	ldrb	r2, [r7, #6]
 8003190:	4b35      	ldr	r3, [pc, #212]	@ (8003268 <UARTProto_Process+0x1a0>)
 8003192:	719a      	strb	r2, [r3, #6]
                    g_expected_payload_len = byte;
 8003194:	79ba      	ldrb	r2, [r7, #6]
 8003196:	4b35      	ldr	r3, [pc, #212]	@ (800326c <UARTProto_Process+0x1a4>)
 8003198:	701a      	strb	r2, [r3, #0]
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 800319a:	4b31      	ldr	r3, [pc, #196]	@ (8003260 <UARTProto_Process+0x198>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	b2d1      	uxtb	r1, r2
 80031a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003260 <UARTProto_Process+0x198>)
 80031a4:	7011      	strb	r1, [r2, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	79b9      	ldrb	r1, [r7, #6]
 80031aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003264 <UARTProto_Process+0x19c>)
 80031ac:	5499      	strb	r1, [r3, r2]
                    if (g_expected_payload_len == 0) {
 80031ae:	4b2f      	ldr	r3, [pc, #188]	@ (800326c <UARTProto_Process+0x1a4>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <UARTProto_Process+0xf6>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
 80031b6:	4b29      	ldr	r3, [pc, #164]	@ (800325c <UARTProto_Process+0x194>)
 80031b8:	2205      	movs	r2, #5
 80031ba:	701a      	strb	r2, [r3, #0]
                break;
 80031bc:	e041      	b.n	8003242 <UARTProto_Process+0x17a>
                        g_rx_state = STATE_WAIT_PAYLOAD;
 80031be:	4b27      	ldr	r3, [pc, #156]	@ (800325c <UARTProto_Process+0x194>)
 80031c0:	2204      	movs	r2, #4
 80031c2:	701a      	strb	r2, [r3, #0]
                break;
 80031c4:	e03d      	b.n	8003242 <UARTProto_Process+0x17a>

            case STATE_WAIT_PAYLOAD:
                // Current payload byte's 0-based index in the payload array.
                // Header (START,TYPE,ID,LENGTH) is 4 bytes.
                // g_rx_buffer_idx is count of bytes in g_rx_buffer *before* adding current 'byte'.
                uint8_t payload_byte_index = g_rx_buffer_idx - 4;
 80031c6:	4b26      	ldr	r3, [pc, #152]	@ (8003260 <UARTProto_Process+0x198>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	3b04      	subs	r3, #4
 80031cc:	71fb      	strb	r3, [r7, #7]

                if (payload_byte_index < MAX_PAYLOAD_LENGTH) {
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d805      	bhi.n	80031e0 <UARTProto_Process+0x118>
                     g_current_rx_frame.payload[payload_byte_index] = byte;
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	79b9      	ldrb	r1, [r7, #6]
 80031d8:	4a23      	ldr	r2, [pc, #140]	@ (8003268 <UARTProto_Process+0x1a0>)
 80031da:	4413      	add	r3, r2
 80031dc:	460a      	mov	r2, r1
 80031de:	709a      	strb	r2, [r3, #2]
                }
                g_rx_buffer[g_rx_buffer_idx++] = byte; // Store current payload byte in raw buffer
 80031e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003260 <UARTProto_Process+0x198>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	b2d1      	uxtb	r1, r2
 80031e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003260 <UARTProto_Process+0x198>)
 80031ea:	7011      	strb	r1, [r2, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	79b9      	ldrb	r1, [r7, #6]
 80031f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <UARTProto_Process+0x19c>)
 80031f2:	5499      	strb	r1, [r3, r2]

                if ((payload_byte_index + 1) >= g_expected_payload_len) {
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	3301      	adds	r3, #1
 80031f8:	4a1c      	ldr	r2, [pc, #112]	@ (800326c <UARTProto_Process+0x1a4>)
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	4293      	cmp	r3, r2
 80031fe:	db1f      	blt.n	8003240 <UARTProto_Process+0x178>
                    g_rx_state = STATE_WAIT_END; // All expected payload bytes received
 8003200:	4b16      	ldr	r3, [pc, #88]	@ (800325c <UARTProto_Process+0x194>)
 8003202:	2205      	movs	r2, #5
 8003204:	701a      	strb	r2, [r3, #0]
                }
                break;
 8003206:	e01b      	b.n	8003240 <UARTProto_Process+0x178>

            case STATE_WAIT_END:
                if (byte == FRAME_END_BYTE) {
 8003208:	79bb      	ldrb	r3, [r7, #6]
 800320a:	2b7f      	cmp	r3, #127	@ 0x7f
 800320c:	d110      	bne.n	8003230 <UARTProto_Process+0x168>
                    // Frame is structurally complete.
                    // g_rx_buffer_idx is count of (START,TYPE,ID,LENGTH,PAYLOAD bytes).
                    // Expected count = 4 + g_current_rx_frame.length.
                    if (g_rx_buffer_idx == (4 + g_current_rx_frame.length)) {
 800320e:	4b14      	ldr	r3, [pc, #80]	@ (8003260 <UARTProto_Process+0x198>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <UARTProto_Process+0x1a0>)
 8003216:	799b      	ldrb	r3, [r3, #6]
 8003218:	3304      	adds	r3, #4
 800321a:	429a      	cmp	r2, r3
 800321c:	d106      	bne.n	800322c <UARTProto_Process+0x164>
                        // Only process if it's a command from LabVIEW (already checked at TYPE stage)
                        if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 800321e:	4b12      	ldr	r3, [pc, #72]	@ (8003268 <UARTProto_Process+0x1a0>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d104      	bne.n	8003230 <UARTProto_Process+0x168>
                            process_received_frame_logic();
 8003226:	f7ff ff1d 	bl	8003064 <process_received_frame_logic>
 800322a:	e001      	b.n	8003230 <UARTProto_Process+0x168>
                        }
                    } else {
                        // Error: Frame length mismatch. Reset parser.
                        reset_rx_parser();
 800322c:	f7ff ff04 	bl	8003038 <reset_rx_parser>
                    }
                } else {
                    // Error: Expected FRAME_END_BYTE but received something else.
                }
                reset_rx_parser(); // Always reset for the next frame, regardless of END byte correctness.
 8003230:	f7ff ff02 	bl	8003038 <reset_rx_parser>
                break;
 8003234:	e005      	b.n	8003242 <UARTProto_Process+0x17a>

            default: 
                reset_rx_parser();
 8003236:	f7ff feff 	bl	8003038 <reset_rx_parser>
                break;
 800323a:	e002      	b.n	8003242 <UARTProto_Process+0x17a>
                break;
 800323c:	bf00      	nop
 800323e:	e000      	b.n	8003242 <UARTProto_Process+0x17a>
                break;
 8003240:	bf00      	nop
    while (UART2_ReadByte_FromBuffer(&byte)) {
 8003242:	1dbb      	adds	r3, r7, #6
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fa0b 	bl	8002660 <UART2_ReadByte_FromBuffer>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	f47f af3f 	bne.w	80030d0 <UARTProto_Process+0x8>
        }
    }
}
 8003252:	bf00      	nop
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200003c4 	.word	0x200003c4
 8003260:	200003d1 	.word	0x200003d1
 8003264:	200003c8 	.word	0x200003c8
 8003268:	200003d4 	.word	0x200003d4
 800326c:	200003db 	.word	0x200003db

08003270 <main>:
#include "system_manager.h"       // Module điều phối chính
#include "people_counter.h"
#include "door_fsm.h"
#include "lighting_logic.h"

int main(void) {
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
   // Khởi tạo hệ thống
   SystemClock_Config();
 8003274:	f7fe ff4c 	bl	8002110 <SystemClock_Config>
   SysTick_Init();       
 8003278:	f7ff f80e 	bl	8002298 <SysTick_Init>
   SystemManager_Init();
 800327c:	f7fe f850 	bl	8001320 <SystemManager_Init>

   // Vòng lặp chính
   while (1) {
       SystemManager_Process();
 8003280:	f7fe f8d0 	bl	8001424 <SystemManager_Process>
 8003284:	e7fc      	b.n	8003280 <main+0x10>

08003286 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800328a:	bf00      	nop
 800328c:	e7fd      	b.n	800328a <NMI_Handler+0x4>

0800328e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003292:	bf00      	nop
 8003294:	e7fd      	b.n	8003292 <HardFault_Handler+0x4>

08003296 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800329a:	bf00      	nop
 800329c:	e7fd      	b.n	800329a <MemManage_Handler+0x4>

0800329e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032a2:	bf00      	nop
 80032a4:	e7fd      	b.n	80032a2 <BusFault_Handler+0x4>

080032a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032aa:	bf00      	nop
 80032ac:	e7fd      	b.n	80032aa <UsageFault_Handler+0x4>

080032ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return 1;
 80032dc:	2301      	movs	r3, #1
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <_kill>:

int _kill(int pid, int sig)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032f2:	f000 fea1 	bl	8004038 <__errno>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2216      	movs	r2, #22
 80032fa:	601a      	str	r2, [r3, #0]
  return -1;
 80032fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <_exit>:

void _exit (int status)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003310:	f04f 31ff 	mov.w	r1, #4294967295
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ffe7 	bl	80032e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800331a:	bf00      	nop
 800331c:	e7fd      	b.n	800331a <_exit+0x12>

0800331e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e00a      	b.n	8003346 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003330:	f3af 8000 	nop.w
 8003334:	4601      	mov	r1, r0
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	60ba      	str	r2, [r7, #8]
 800333c:	b2ca      	uxtb	r2, r1
 800333e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	3301      	adds	r3, #1
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	429a      	cmp	r2, r3
 800334c:	dbf0      	blt.n	8003330 <_read+0x12>
  }

  return len;
 800334e:	687b      	ldr	r3, [r7, #4]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e009      	b.n	800337e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	60ba      	str	r2, [r7, #8]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3301      	adds	r3, #1
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	429a      	cmp	r2, r3
 8003384:	dbf1      	blt.n	800336a <_write+0x12>
  }
  return len;
 8003386:	687b      	ldr	r3, [r7, #4]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <_close>:

int _close(int file)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033b8:	605a      	str	r2, [r3, #4]
  return 0;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <_isatty>:

int _isatty(int file)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033d0:	2301      	movs	r3, #1
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003400:	4a14      	ldr	r2, [pc, #80]	@ (8003454 <_sbrk+0x5c>)
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <_sbrk+0x60>)
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800340c:	4b13      	ldr	r3, [pc, #76]	@ (800345c <_sbrk+0x64>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003414:	4b11      	ldr	r3, [pc, #68]	@ (800345c <_sbrk+0x64>)
 8003416:	4a12      	ldr	r2, [pc, #72]	@ (8003460 <_sbrk+0x68>)
 8003418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800341a:	4b10      	ldr	r3, [pc, #64]	@ (800345c <_sbrk+0x64>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	429a      	cmp	r2, r3
 8003426:	d207      	bcs.n	8003438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003428:	f000 fe06 	bl	8004038 <__errno>
 800342c:	4603      	mov	r3, r0
 800342e:	220c      	movs	r2, #12
 8003430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003432:	f04f 33ff 	mov.w	r3, #4294967295
 8003436:	e009      	b.n	800344c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003438:	4b08      	ldr	r3, [pc, #32]	@ (800345c <_sbrk+0x64>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800343e:	4b07      	ldr	r3, [pc, #28]	@ (800345c <_sbrk+0x64>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	4a05      	ldr	r2, [pc, #20]	@ (800345c <_sbrk+0x64>)
 8003448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20018000 	.word	0x20018000
 8003458:	00000400 	.word	0x00000400
 800345c:	200003e0 	.word	0x200003e0
 8003460:	20000530 	.word	0x20000530

08003464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003468:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <SystemInit+0x20>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346e:	4a05      	ldr	r2, [pc, #20]	@ (8003484 <SystemInit+0x20>)
 8003470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003478:	bf00      	nop
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003488:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800348c:	f7ff ffea 	bl	8003464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003490:	480c      	ldr	r0, [pc, #48]	@ (80034c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003492:	490d      	ldr	r1, [pc, #52]	@ (80034c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003494:	4a0d      	ldr	r2, [pc, #52]	@ (80034cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003498:	e002      	b.n	80034a0 <LoopCopyDataInit>

0800349a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800349a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800349c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349e:	3304      	adds	r3, #4

080034a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a4:	d3f9      	bcc.n	800349a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034a6:	4a0a      	ldr	r2, [pc, #40]	@ (80034d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034a8:	4c0a      	ldr	r4, [pc, #40]	@ (80034d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034ac:	e001      	b.n	80034b2 <LoopFillZerobss>

080034ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034b0:	3204      	adds	r2, #4

080034b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b4:	d3fb      	bcc.n	80034ae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80034b6:	f000 fdc5 	bl	8004044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ba:	f7ff fed9 	bl	8003270 <main>
  bx  lr    
 80034be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80034c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80034cc:	08006170 	.word	0x08006170
  ldr r2, =_sbss
 80034d0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80034d4:	20000530 	.word	0x20000530

080034d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034d8:	e7fe      	b.n	80034d8 <ADC_IRQHandler>

080034da <__cvt>:
 80034da:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034de:	ec57 6b10 	vmov	r6, r7, d0
 80034e2:	2f00      	cmp	r7, #0
 80034e4:	460c      	mov	r4, r1
 80034e6:	4619      	mov	r1, r3
 80034e8:	463b      	mov	r3, r7
 80034ea:	bfbb      	ittet	lt
 80034ec:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80034f0:	461f      	movlt	r7, r3
 80034f2:	2300      	movge	r3, #0
 80034f4:	232d      	movlt	r3, #45	@ 0x2d
 80034f6:	700b      	strb	r3, [r1, #0]
 80034f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80034fa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80034fe:	4691      	mov	r9, r2
 8003500:	f023 0820 	bic.w	r8, r3, #32
 8003504:	bfbc      	itt	lt
 8003506:	4632      	movlt	r2, r6
 8003508:	4616      	movlt	r6, r2
 800350a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800350e:	d005      	beq.n	800351c <__cvt+0x42>
 8003510:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003514:	d100      	bne.n	8003518 <__cvt+0x3e>
 8003516:	3401      	adds	r4, #1
 8003518:	2102      	movs	r1, #2
 800351a:	e000      	b.n	800351e <__cvt+0x44>
 800351c:	2103      	movs	r1, #3
 800351e:	ab03      	add	r3, sp, #12
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	ab02      	add	r3, sp, #8
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	ec47 6b10 	vmov	d0, r6, r7
 800352a:	4653      	mov	r3, sl
 800352c:	4622      	mov	r2, r4
 800352e:	f000 fe47 	bl	80041c0 <_dtoa_r>
 8003532:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003536:	4605      	mov	r5, r0
 8003538:	d119      	bne.n	800356e <__cvt+0x94>
 800353a:	f019 0f01 	tst.w	r9, #1
 800353e:	d00e      	beq.n	800355e <__cvt+0x84>
 8003540:	eb00 0904 	add.w	r9, r0, r4
 8003544:	2200      	movs	r2, #0
 8003546:	2300      	movs	r3, #0
 8003548:	4630      	mov	r0, r6
 800354a:	4639      	mov	r1, r7
 800354c:	f7fd fac4 	bl	8000ad8 <__aeabi_dcmpeq>
 8003550:	b108      	cbz	r0, 8003556 <__cvt+0x7c>
 8003552:	f8cd 900c 	str.w	r9, [sp, #12]
 8003556:	2230      	movs	r2, #48	@ 0x30
 8003558:	9b03      	ldr	r3, [sp, #12]
 800355a:	454b      	cmp	r3, r9
 800355c:	d31e      	bcc.n	800359c <__cvt+0xc2>
 800355e:	9b03      	ldr	r3, [sp, #12]
 8003560:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003562:	1b5b      	subs	r3, r3, r5
 8003564:	4628      	mov	r0, r5
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	b004      	add	sp, #16
 800356a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800356e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003572:	eb00 0904 	add.w	r9, r0, r4
 8003576:	d1e5      	bne.n	8003544 <__cvt+0x6a>
 8003578:	7803      	ldrb	r3, [r0, #0]
 800357a:	2b30      	cmp	r3, #48	@ 0x30
 800357c:	d10a      	bne.n	8003594 <__cvt+0xba>
 800357e:	2200      	movs	r2, #0
 8003580:	2300      	movs	r3, #0
 8003582:	4630      	mov	r0, r6
 8003584:	4639      	mov	r1, r7
 8003586:	f7fd faa7 	bl	8000ad8 <__aeabi_dcmpeq>
 800358a:	b918      	cbnz	r0, 8003594 <__cvt+0xba>
 800358c:	f1c4 0401 	rsb	r4, r4, #1
 8003590:	f8ca 4000 	str.w	r4, [sl]
 8003594:	f8da 3000 	ldr.w	r3, [sl]
 8003598:	4499      	add	r9, r3
 800359a:	e7d3      	b.n	8003544 <__cvt+0x6a>
 800359c:	1c59      	adds	r1, r3, #1
 800359e:	9103      	str	r1, [sp, #12]
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e7d9      	b.n	8003558 <__cvt+0x7e>

080035a4 <__exponent>:
 80035a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035a6:	2900      	cmp	r1, #0
 80035a8:	bfba      	itte	lt
 80035aa:	4249      	neglt	r1, r1
 80035ac:	232d      	movlt	r3, #45	@ 0x2d
 80035ae:	232b      	movge	r3, #43	@ 0x2b
 80035b0:	2909      	cmp	r1, #9
 80035b2:	7002      	strb	r2, [r0, #0]
 80035b4:	7043      	strb	r3, [r0, #1]
 80035b6:	dd29      	ble.n	800360c <__exponent+0x68>
 80035b8:	f10d 0307 	add.w	r3, sp, #7
 80035bc:	461d      	mov	r5, r3
 80035be:	270a      	movs	r7, #10
 80035c0:	461a      	mov	r2, r3
 80035c2:	fbb1 f6f7 	udiv	r6, r1, r7
 80035c6:	fb07 1416 	mls	r4, r7, r6, r1
 80035ca:	3430      	adds	r4, #48	@ 0x30
 80035cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80035d0:	460c      	mov	r4, r1
 80035d2:	2c63      	cmp	r4, #99	@ 0x63
 80035d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80035d8:	4631      	mov	r1, r6
 80035da:	dcf1      	bgt.n	80035c0 <__exponent+0x1c>
 80035dc:	3130      	adds	r1, #48	@ 0x30
 80035de:	1e94      	subs	r4, r2, #2
 80035e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80035e4:	1c41      	adds	r1, r0, #1
 80035e6:	4623      	mov	r3, r4
 80035e8:	42ab      	cmp	r3, r5
 80035ea:	d30a      	bcc.n	8003602 <__exponent+0x5e>
 80035ec:	f10d 0309 	add.w	r3, sp, #9
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	42ac      	cmp	r4, r5
 80035f4:	bf88      	it	hi
 80035f6:	2300      	movhi	r3, #0
 80035f8:	3302      	adds	r3, #2
 80035fa:	4403      	add	r3, r0
 80035fc:	1a18      	subs	r0, r3, r0
 80035fe:	b003      	add	sp, #12
 8003600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003602:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003606:	f801 6f01 	strb.w	r6, [r1, #1]!
 800360a:	e7ed      	b.n	80035e8 <__exponent+0x44>
 800360c:	2330      	movs	r3, #48	@ 0x30
 800360e:	3130      	adds	r1, #48	@ 0x30
 8003610:	7083      	strb	r3, [r0, #2]
 8003612:	70c1      	strb	r1, [r0, #3]
 8003614:	1d03      	adds	r3, r0, #4
 8003616:	e7f1      	b.n	80035fc <__exponent+0x58>

08003618 <_printf_float>:
 8003618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361c:	b08d      	sub	sp, #52	@ 0x34
 800361e:	460c      	mov	r4, r1
 8003620:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003624:	4616      	mov	r6, r2
 8003626:	461f      	mov	r7, r3
 8003628:	4605      	mov	r5, r0
 800362a:	f000 fcbb 	bl	8003fa4 <_localeconv_r>
 800362e:	6803      	ldr	r3, [r0, #0]
 8003630:	9304      	str	r3, [sp, #16]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fc fe24 	bl	8000280 <strlen>
 8003638:	2300      	movs	r3, #0
 800363a:	930a      	str	r3, [sp, #40]	@ 0x28
 800363c:	f8d8 3000 	ldr.w	r3, [r8]
 8003640:	9005      	str	r0, [sp, #20]
 8003642:	3307      	adds	r3, #7
 8003644:	f023 0307 	bic.w	r3, r3, #7
 8003648:	f103 0208 	add.w	r2, r3, #8
 800364c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003650:	f8d4 b000 	ldr.w	fp, [r4]
 8003654:	f8c8 2000 	str.w	r2, [r8]
 8003658:	e9d3 8900 	ldrd	r8, r9, [r3]
 800365c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003660:	9307      	str	r3, [sp, #28]
 8003662:	f8cd 8018 	str.w	r8, [sp, #24]
 8003666:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800366a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800366e:	4b9c      	ldr	r3, [pc, #624]	@ (80038e0 <_printf_float+0x2c8>)
 8003670:	f04f 32ff 	mov.w	r2, #4294967295
 8003674:	f7fd fa62 	bl	8000b3c <__aeabi_dcmpun>
 8003678:	bb70      	cbnz	r0, 80036d8 <_printf_float+0xc0>
 800367a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800367e:	4b98      	ldr	r3, [pc, #608]	@ (80038e0 <_printf_float+0x2c8>)
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	f7fd fa3c 	bl	8000b00 <__aeabi_dcmple>
 8003688:	bb30      	cbnz	r0, 80036d8 <_printf_float+0xc0>
 800368a:	2200      	movs	r2, #0
 800368c:	2300      	movs	r3, #0
 800368e:	4640      	mov	r0, r8
 8003690:	4649      	mov	r1, r9
 8003692:	f7fd fa2b 	bl	8000aec <__aeabi_dcmplt>
 8003696:	b110      	cbz	r0, 800369e <_printf_float+0x86>
 8003698:	232d      	movs	r3, #45	@ 0x2d
 800369a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800369e:	4a91      	ldr	r2, [pc, #580]	@ (80038e4 <_printf_float+0x2cc>)
 80036a0:	4b91      	ldr	r3, [pc, #580]	@ (80038e8 <_printf_float+0x2d0>)
 80036a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80036a6:	bf94      	ite	ls
 80036a8:	4690      	movls	r8, r2
 80036aa:	4698      	movhi	r8, r3
 80036ac:	2303      	movs	r3, #3
 80036ae:	6123      	str	r3, [r4, #16]
 80036b0:	f02b 0304 	bic.w	r3, fp, #4
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	f04f 0900 	mov.w	r9, #0
 80036ba:	9700      	str	r7, [sp, #0]
 80036bc:	4633      	mov	r3, r6
 80036be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80036c0:	4621      	mov	r1, r4
 80036c2:	4628      	mov	r0, r5
 80036c4:	f000 f9d2 	bl	8003a6c <_printf_common>
 80036c8:	3001      	adds	r0, #1
 80036ca:	f040 808d 	bne.w	80037e8 <_printf_float+0x1d0>
 80036ce:	f04f 30ff 	mov.w	r0, #4294967295
 80036d2:	b00d      	add	sp, #52	@ 0x34
 80036d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036d8:	4642      	mov	r2, r8
 80036da:	464b      	mov	r3, r9
 80036dc:	4640      	mov	r0, r8
 80036de:	4649      	mov	r1, r9
 80036e0:	f7fd fa2c 	bl	8000b3c <__aeabi_dcmpun>
 80036e4:	b140      	cbz	r0, 80036f8 <_printf_float+0xe0>
 80036e6:	464b      	mov	r3, r9
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bfbc      	itt	lt
 80036ec:	232d      	movlt	r3, #45	@ 0x2d
 80036ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80036f2:	4a7e      	ldr	r2, [pc, #504]	@ (80038ec <_printf_float+0x2d4>)
 80036f4:	4b7e      	ldr	r3, [pc, #504]	@ (80038f0 <_printf_float+0x2d8>)
 80036f6:	e7d4      	b.n	80036a2 <_printf_float+0x8a>
 80036f8:	6863      	ldr	r3, [r4, #4]
 80036fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80036fe:	9206      	str	r2, [sp, #24]
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	d13b      	bne.n	800377c <_printf_float+0x164>
 8003704:	2306      	movs	r3, #6
 8003706:	6063      	str	r3, [r4, #4]
 8003708:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800370c:	2300      	movs	r3, #0
 800370e:	6022      	str	r2, [r4, #0]
 8003710:	9303      	str	r3, [sp, #12]
 8003712:	ab0a      	add	r3, sp, #40	@ 0x28
 8003714:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003718:	ab09      	add	r3, sp, #36	@ 0x24
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	6861      	ldr	r1, [r4, #4]
 800371e:	ec49 8b10 	vmov	d0, r8, r9
 8003722:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003726:	4628      	mov	r0, r5
 8003728:	f7ff fed7 	bl	80034da <__cvt>
 800372c:	9b06      	ldr	r3, [sp, #24]
 800372e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003730:	2b47      	cmp	r3, #71	@ 0x47
 8003732:	4680      	mov	r8, r0
 8003734:	d129      	bne.n	800378a <_printf_float+0x172>
 8003736:	1cc8      	adds	r0, r1, #3
 8003738:	db02      	blt.n	8003740 <_printf_float+0x128>
 800373a:	6863      	ldr	r3, [r4, #4]
 800373c:	4299      	cmp	r1, r3
 800373e:	dd41      	ble.n	80037c4 <_printf_float+0x1ac>
 8003740:	f1aa 0a02 	sub.w	sl, sl, #2
 8003744:	fa5f fa8a 	uxtb.w	sl, sl
 8003748:	3901      	subs	r1, #1
 800374a:	4652      	mov	r2, sl
 800374c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003750:	9109      	str	r1, [sp, #36]	@ 0x24
 8003752:	f7ff ff27 	bl	80035a4 <__exponent>
 8003756:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003758:	1813      	adds	r3, r2, r0
 800375a:	2a01      	cmp	r2, #1
 800375c:	4681      	mov	r9, r0
 800375e:	6123      	str	r3, [r4, #16]
 8003760:	dc02      	bgt.n	8003768 <_printf_float+0x150>
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	07d2      	lsls	r2, r2, #31
 8003766:	d501      	bpl.n	800376c <_printf_float+0x154>
 8003768:	3301      	adds	r3, #1
 800376a:	6123      	str	r3, [r4, #16]
 800376c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0a2      	beq.n	80036ba <_printf_float+0xa2>
 8003774:	232d      	movs	r3, #45	@ 0x2d
 8003776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800377a:	e79e      	b.n	80036ba <_printf_float+0xa2>
 800377c:	9a06      	ldr	r2, [sp, #24]
 800377e:	2a47      	cmp	r2, #71	@ 0x47
 8003780:	d1c2      	bne.n	8003708 <_printf_float+0xf0>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1c0      	bne.n	8003708 <_printf_float+0xf0>
 8003786:	2301      	movs	r3, #1
 8003788:	e7bd      	b.n	8003706 <_printf_float+0xee>
 800378a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800378e:	d9db      	bls.n	8003748 <_printf_float+0x130>
 8003790:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003794:	d118      	bne.n	80037c8 <_printf_float+0x1b0>
 8003796:	2900      	cmp	r1, #0
 8003798:	6863      	ldr	r3, [r4, #4]
 800379a:	dd0b      	ble.n	80037b4 <_printf_float+0x19c>
 800379c:	6121      	str	r1, [r4, #16]
 800379e:	b913      	cbnz	r3, 80037a6 <_printf_float+0x18e>
 80037a0:	6822      	ldr	r2, [r4, #0]
 80037a2:	07d0      	lsls	r0, r2, #31
 80037a4:	d502      	bpl.n	80037ac <_printf_float+0x194>
 80037a6:	3301      	adds	r3, #1
 80037a8:	440b      	add	r3, r1
 80037aa:	6123      	str	r3, [r4, #16]
 80037ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80037ae:	f04f 0900 	mov.w	r9, #0
 80037b2:	e7db      	b.n	800376c <_printf_float+0x154>
 80037b4:	b913      	cbnz	r3, 80037bc <_printf_float+0x1a4>
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	07d2      	lsls	r2, r2, #31
 80037ba:	d501      	bpl.n	80037c0 <_printf_float+0x1a8>
 80037bc:	3302      	adds	r3, #2
 80037be:	e7f4      	b.n	80037aa <_printf_float+0x192>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e7f2      	b.n	80037aa <_printf_float+0x192>
 80037c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80037c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037ca:	4299      	cmp	r1, r3
 80037cc:	db05      	blt.n	80037da <_printf_float+0x1c2>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	6121      	str	r1, [r4, #16]
 80037d2:	07d8      	lsls	r0, r3, #31
 80037d4:	d5ea      	bpl.n	80037ac <_printf_float+0x194>
 80037d6:	1c4b      	adds	r3, r1, #1
 80037d8:	e7e7      	b.n	80037aa <_printf_float+0x192>
 80037da:	2900      	cmp	r1, #0
 80037dc:	bfd4      	ite	le
 80037de:	f1c1 0202 	rsble	r2, r1, #2
 80037e2:	2201      	movgt	r2, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	e7e0      	b.n	80037aa <_printf_float+0x192>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	055a      	lsls	r2, r3, #21
 80037ec:	d407      	bmi.n	80037fe <_printf_float+0x1e6>
 80037ee:	6923      	ldr	r3, [r4, #16]
 80037f0:	4642      	mov	r2, r8
 80037f2:	4631      	mov	r1, r6
 80037f4:	4628      	mov	r0, r5
 80037f6:	47b8      	blx	r7
 80037f8:	3001      	adds	r0, #1
 80037fa:	d12b      	bne.n	8003854 <_printf_float+0x23c>
 80037fc:	e767      	b.n	80036ce <_printf_float+0xb6>
 80037fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003802:	f240 80dd 	bls.w	80039c0 <_printf_float+0x3a8>
 8003806:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800380a:	2200      	movs	r2, #0
 800380c:	2300      	movs	r3, #0
 800380e:	f7fd f963 	bl	8000ad8 <__aeabi_dcmpeq>
 8003812:	2800      	cmp	r0, #0
 8003814:	d033      	beq.n	800387e <_printf_float+0x266>
 8003816:	4a37      	ldr	r2, [pc, #220]	@ (80038f4 <_printf_float+0x2dc>)
 8003818:	2301      	movs	r3, #1
 800381a:	4631      	mov	r1, r6
 800381c:	4628      	mov	r0, r5
 800381e:	47b8      	blx	r7
 8003820:	3001      	adds	r0, #1
 8003822:	f43f af54 	beq.w	80036ce <_printf_float+0xb6>
 8003826:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800382a:	4543      	cmp	r3, r8
 800382c:	db02      	blt.n	8003834 <_printf_float+0x21c>
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	07d8      	lsls	r0, r3, #31
 8003832:	d50f      	bpl.n	8003854 <_printf_float+0x23c>
 8003834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003838:	4631      	mov	r1, r6
 800383a:	4628      	mov	r0, r5
 800383c:	47b8      	blx	r7
 800383e:	3001      	adds	r0, #1
 8003840:	f43f af45 	beq.w	80036ce <_printf_float+0xb6>
 8003844:	f04f 0900 	mov.w	r9, #0
 8003848:	f108 38ff 	add.w	r8, r8, #4294967295
 800384c:	f104 0a1a 	add.w	sl, r4, #26
 8003850:	45c8      	cmp	r8, r9
 8003852:	dc09      	bgt.n	8003868 <_printf_float+0x250>
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	079b      	lsls	r3, r3, #30
 8003858:	f100 8103 	bmi.w	8003a62 <_printf_float+0x44a>
 800385c:	68e0      	ldr	r0, [r4, #12]
 800385e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003860:	4298      	cmp	r0, r3
 8003862:	bfb8      	it	lt
 8003864:	4618      	movlt	r0, r3
 8003866:	e734      	b.n	80036d2 <_printf_float+0xba>
 8003868:	2301      	movs	r3, #1
 800386a:	4652      	mov	r2, sl
 800386c:	4631      	mov	r1, r6
 800386e:	4628      	mov	r0, r5
 8003870:	47b8      	blx	r7
 8003872:	3001      	adds	r0, #1
 8003874:	f43f af2b 	beq.w	80036ce <_printf_float+0xb6>
 8003878:	f109 0901 	add.w	r9, r9, #1
 800387c:	e7e8      	b.n	8003850 <_printf_float+0x238>
 800387e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003880:	2b00      	cmp	r3, #0
 8003882:	dc39      	bgt.n	80038f8 <_printf_float+0x2e0>
 8003884:	4a1b      	ldr	r2, [pc, #108]	@ (80038f4 <_printf_float+0x2dc>)
 8003886:	2301      	movs	r3, #1
 8003888:	4631      	mov	r1, r6
 800388a:	4628      	mov	r0, r5
 800388c:	47b8      	blx	r7
 800388e:	3001      	adds	r0, #1
 8003890:	f43f af1d 	beq.w	80036ce <_printf_float+0xb6>
 8003894:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003898:	ea59 0303 	orrs.w	r3, r9, r3
 800389c:	d102      	bne.n	80038a4 <_printf_float+0x28c>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	07d9      	lsls	r1, r3, #31
 80038a2:	d5d7      	bpl.n	8003854 <_printf_float+0x23c>
 80038a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038a8:	4631      	mov	r1, r6
 80038aa:	4628      	mov	r0, r5
 80038ac:	47b8      	blx	r7
 80038ae:	3001      	adds	r0, #1
 80038b0:	f43f af0d 	beq.w	80036ce <_printf_float+0xb6>
 80038b4:	f04f 0a00 	mov.w	sl, #0
 80038b8:	f104 0b1a 	add.w	fp, r4, #26
 80038bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038be:	425b      	negs	r3, r3
 80038c0:	4553      	cmp	r3, sl
 80038c2:	dc01      	bgt.n	80038c8 <_printf_float+0x2b0>
 80038c4:	464b      	mov	r3, r9
 80038c6:	e793      	b.n	80037f0 <_printf_float+0x1d8>
 80038c8:	2301      	movs	r3, #1
 80038ca:	465a      	mov	r2, fp
 80038cc:	4631      	mov	r1, r6
 80038ce:	4628      	mov	r0, r5
 80038d0:	47b8      	blx	r7
 80038d2:	3001      	adds	r0, #1
 80038d4:	f43f aefb 	beq.w	80036ce <_printf_float+0xb6>
 80038d8:	f10a 0a01 	add.w	sl, sl, #1
 80038dc:	e7ee      	b.n	80038bc <_printf_float+0x2a4>
 80038de:	bf00      	nop
 80038e0:	7fefffff 	.word	0x7fefffff
 80038e4:	08005df0 	.word	0x08005df0
 80038e8:	08005df4 	.word	0x08005df4
 80038ec:	08005df8 	.word	0x08005df8
 80038f0:	08005dfc 	.word	0x08005dfc
 80038f4:	08005e00 	.word	0x08005e00
 80038f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80038fe:	4553      	cmp	r3, sl
 8003900:	bfa8      	it	ge
 8003902:	4653      	movge	r3, sl
 8003904:	2b00      	cmp	r3, #0
 8003906:	4699      	mov	r9, r3
 8003908:	dc36      	bgt.n	8003978 <_printf_float+0x360>
 800390a:	f04f 0b00 	mov.w	fp, #0
 800390e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003912:	f104 021a 	add.w	r2, r4, #26
 8003916:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003918:	9306      	str	r3, [sp, #24]
 800391a:	eba3 0309 	sub.w	r3, r3, r9
 800391e:	455b      	cmp	r3, fp
 8003920:	dc31      	bgt.n	8003986 <_printf_float+0x36e>
 8003922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003924:	459a      	cmp	sl, r3
 8003926:	dc3a      	bgt.n	800399e <_printf_float+0x386>
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	07da      	lsls	r2, r3, #31
 800392c:	d437      	bmi.n	800399e <_printf_float+0x386>
 800392e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003930:	ebaa 0903 	sub.w	r9, sl, r3
 8003934:	9b06      	ldr	r3, [sp, #24]
 8003936:	ebaa 0303 	sub.w	r3, sl, r3
 800393a:	4599      	cmp	r9, r3
 800393c:	bfa8      	it	ge
 800393e:	4699      	movge	r9, r3
 8003940:	f1b9 0f00 	cmp.w	r9, #0
 8003944:	dc33      	bgt.n	80039ae <_printf_float+0x396>
 8003946:	f04f 0800 	mov.w	r8, #0
 800394a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800394e:	f104 0b1a 	add.w	fp, r4, #26
 8003952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003954:	ebaa 0303 	sub.w	r3, sl, r3
 8003958:	eba3 0309 	sub.w	r3, r3, r9
 800395c:	4543      	cmp	r3, r8
 800395e:	f77f af79 	ble.w	8003854 <_printf_float+0x23c>
 8003962:	2301      	movs	r3, #1
 8003964:	465a      	mov	r2, fp
 8003966:	4631      	mov	r1, r6
 8003968:	4628      	mov	r0, r5
 800396a:	47b8      	blx	r7
 800396c:	3001      	adds	r0, #1
 800396e:	f43f aeae 	beq.w	80036ce <_printf_float+0xb6>
 8003972:	f108 0801 	add.w	r8, r8, #1
 8003976:	e7ec      	b.n	8003952 <_printf_float+0x33a>
 8003978:	4642      	mov	r2, r8
 800397a:	4631      	mov	r1, r6
 800397c:	4628      	mov	r0, r5
 800397e:	47b8      	blx	r7
 8003980:	3001      	adds	r0, #1
 8003982:	d1c2      	bne.n	800390a <_printf_float+0x2f2>
 8003984:	e6a3      	b.n	80036ce <_printf_float+0xb6>
 8003986:	2301      	movs	r3, #1
 8003988:	4631      	mov	r1, r6
 800398a:	4628      	mov	r0, r5
 800398c:	9206      	str	r2, [sp, #24]
 800398e:	47b8      	blx	r7
 8003990:	3001      	adds	r0, #1
 8003992:	f43f ae9c 	beq.w	80036ce <_printf_float+0xb6>
 8003996:	9a06      	ldr	r2, [sp, #24]
 8003998:	f10b 0b01 	add.w	fp, fp, #1
 800399c:	e7bb      	b.n	8003916 <_printf_float+0x2fe>
 800399e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039a2:	4631      	mov	r1, r6
 80039a4:	4628      	mov	r0, r5
 80039a6:	47b8      	blx	r7
 80039a8:	3001      	adds	r0, #1
 80039aa:	d1c0      	bne.n	800392e <_printf_float+0x316>
 80039ac:	e68f      	b.n	80036ce <_printf_float+0xb6>
 80039ae:	9a06      	ldr	r2, [sp, #24]
 80039b0:	464b      	mov	r3, r9
 80039b2:	4442      	add	r2, r8
 80039b4:	4631      	mov	r1, r6
 80039b6:	4628      	mov	r0, r5
 80039b8:	47b8      	blx	r7
 80039ba:	3001      	adds	r0, #1
 80039bc:	d1c3      	bne.n	8003946 <_printf_float+0x32e>
 80039be:	e686      	b.n	80036ce <_printf_float+0xb6>
 80039c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80039c4:	f1ba 0f01 	cmp.w	sl, #1
 80039c8:	dc01      	bgt.n	80039ce <_printf_float+0x3b6>
 80039ca:	07db      	lsls	r3, r3, #31
 80039cc:	d536      	bpl.n	8003a3c <_printf_float+0x424>
 80039ce:	2301      	movs	r3, #1
 80039d0:	4642      	mov	r2, r8
 80039d2:	4631      	mov	r1, r6
 80039d4:	4628      	mov	r0, r5
 80039d6:	47b8      	blx	r7
 80039d8:	3001      	adds	r0, #1
 80039da:	f43f ae78 	beq.w	80036ce <_printf_float+0xb6>
 80039de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039e2:	4631      	mov	r1, r6
 80039e4:	4628      	mov	r0, r5
 80039e6:	47b8      	blx	r7
 80039e8:	3001      	adds	r0, #1
 80039ea:	f43f ae70 	beq.w	80036ce <_printf_float+0xb6>
 80039ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80039f2:	2200      	movs	r2, #0
 80039f4:	2300      	movs	r3, #0
 80039f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80039fa:	f7fd f86d 	bl	8000ad8 <__aeabi_dcmpeq>
 80039fe:	b9c0      	cbnz	r0, 8003a32 <_printf_float+0x41a>
 8003a00:	4653      	mov	r3, sl
 8003a02:	f108 0201 	add.w	r2, r8, #1
 8003a06:	4631      	mov	r1, r6
 8003a08:	4628      	mov	r0, r5
 8003a0a:	47b8      	blx	r7
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d10c      	bne.n	8003a2a <_printf_float+0x412>
 8003a10:	e65d      	b.n	80036ce <_printf_float+0xb6>
 8003a12:	2301      	movs	r3, #1
 8003a14:	465a      	mov	r2, fp
 8003a16:	4631      	mov	r1, r6
 8003a18:	4628      	mov	r0, r5
 8003a1a:	47b8      	blx	r7
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	f43f ae56 	beq.w	80036ce <_printf_float+0xb6>
 8003a22:	f108 0801 	add.w	r8, r8, #1
 8003a26:	45d0      	cmp	r8, sl
 8003a28:	dbf3      	blt.n	8003a12 <_printf_float+0x3fa>
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003a30:	e6df      	b.n	80037f2 <_printf_float+0x1da>
 8003a32:	f04f 0800 	mov.w	r8, #0
 8003a36:	f104 0b1a 	add.w	fp, r4, #26
 8003a3a:	e7f4      	b.n	8003a26 <_printf_float+0x40e>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	4642      	mov	r2, r8
 8003a40:	e7e1      	b.n	8003a06 <_printf_float+0x3ee>
 8003a42:	2301      	movs	r3, #1
 8003a44:	464a      	mov	r2, r9
 8003a46:	4631      	mov	r1, r6
 8003a48:	4628      	mov	r0, r5
 8003a4a:	47b8      	blx	r7
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	f43f ae3e 	beq.w	80036ce <_printf_float+0xb6>
 8003a52:	f108 0801 	add.w	r8, r8, #1
 8003a56:	68e3      	ldr	r3, [r4, #12]
 8003a58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003a5a:	1a5b      	subs	r3, r3, r1
 8003a5c:	4543      	cmp	r3, r8
 8003a5e:	dcf0      	bgt.n	8003a42 <_printf_float+0x42a>
 8003a60:	e6fc      	b.n	800385c <_printf_float+0x244>
 8003a62:	f04f 0800 	mov.w	r8, #0
 8003a66:	f104 0919 	add.w	r9, r4, #25
 8003a6a:	e7f4      	b.n	8003a56 <_printf_float+0x43e>

08003a6c <_printf_common>:
 8003a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a70:	4616      	mov	r6, r2
 8003a72:	4698      	mov	r8, r3
 8003a74:	688a      	ldr	r2, [r1, #8]
 8003a76:	690b      	ldr	r3, [r1, #16]
 8003a78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bfb8      	it	lt
 8003a80:	4613      	movlt	r3, r2
 8003a82:	6033      	str	r3, [r6, #0]
 8003a84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a88:	4607      	mov	r7, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	b10a      	cbz	r2, 8003a92 <_printf_common+0x26>
 8003a8e:	3301      	adds	r3, #1
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	0699      	lsls	r1, r3, #26
 8003a96:	bf42      	ittt	mi
 8003a98:	6833      	ldrmi	r3, [r6, #0]
 8003a9a:	3302      	addmi	r3, #2
 8003a9c:	6033      	strmi	r3, [r6, #0]
 8003a9e:	6825      	ldr	r5, [r4, #0]
 8003aa0:	f015 0506 	ands.w	r5, r5, #6
 8003aa4:	d106      	bne.n	8003ab4 <_printf_common+0x48>
 8003aa6:	f104 0a19 	add.w	sl, r4, #25
 8003aaa:	68e3      	ldr	r3, [r4, #12]
 8003aac:	6832      	ldr	r2, [r6, #0]
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	42ab      	cmp	r3, r5
 8003ab2:	dc26      	bgt.n	8003b02 <_printf_common+0x96>
 8003ab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ab8:	6822      	ldr	r2, [r4, #0]
 8003aba:	3b00      	subs	r3, #0
 8003abc:	bf18      	it	ne
 8003abe:	2301      	movne	r3, #1
 8003ac0:	0692      	lsls	r2, r2, #26
 8003ac2:	d42b      	bmi.n	8003b1c <_printf_common+0xb0>
 8003ac4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ac8:	4641      	mov	r1, r8
 8003aca:	4638      	mov	r0, r7
 8003acc:	47c8      	blx	r9
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d01e      	beq.n	8003b10 <_printf_common+0xa4>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	6922      	ldr	r2, [r4, #16]
 8003ad6:	f003 0306 	and.w	r3, r3, #6
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf02      	ittt	eq
 8003ade:	68e5      	ldreq	r5, [r4, #12]
 8003ae0:	6833      	ldreq	r3, [r6, #0]
 8003ae2:	1aed      	subeq	r5, r5, r3
 8003ae4:	68a3      	ldr	r3, [r4, #8]
 8003ae6:	bf0c      	ite	eq
 8003ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003aec:	2500      	movne	r5, #0
 8003aee:	4293      	cmp	r3, r2
 8003af0:	bfc4      	itt	gt
 8003af2:	1a9b      	subgt	r3, r3, r2
 8003af4:	18ed      	addgt	r5, r5, r3
 8003af6:	2600      	movs	r6, #0
 8003af8:	341a      	adds	r4, #26
 8003afa:	42b5      	cmp	r5, r6
 8003afc:	d11a      	bne.n	8003b34 <_printf_common+0xc8>
 8003afe:	2000      	movs	r0, #0
 8003b00:	e008      	b.n	8003b14 <_printf_common+0xa8>
 8003b02:	2301      	movs	r3, #1
 8003b04:	4652      	mov	r2, sl
 8003b06:	4641      	mov	r1, r8
 8003b08:	4638      	mov	r0, r7
 8003b0a:	47c8      	blx	r9
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d103      	bne.n	8003b18 <_printf_common+0xac>
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b18:	3501      	adds	r5, #1
 8003b1a:	e7c6      	b.n	8003aaa <_printf_common+0x3e>
 8003b1c:	18e1      	adds	r1, r4, r3
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	2030      	movs	r0, #48	@ 0x30
 8003b22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b26:	4422      	add	r2, r4
 8003b28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b30:	3302      	adds	r3, #2
 8003b32:	e7c7      	b.n	8003ac4 <_printf_common+0x58>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4622      	mov	r2, r4
 8003b38:	4641      	mov	r1, r8
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	47c8      	blx	r9
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d0e6      	beq.n	8003b10 <_printf_common+0xa4>
 8003b42:	3601      	adds	r6, #1
 8003b44:	e7d9      	b.n	8003afa <_printf_common+0x8e>
	...

08003b48 <_printf_i>:
 8003b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	7e0f      	ldrb	r7, [r1, #24]
 8003b4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b50:	2f78      	cmp	r7, #120	@ 0x78
 8003b52:	4691      	mov	r9, r2
 8003b54:	4680      	mov	r8, r0
 8003b56:	460c      	mov	r4, r1
 8003b58:	469a      	mov	sl, r3
 8003b5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b5e:	d807      	bhi.n	8003b70 <_printf_i+0x28>
 8003b60:	2f62      	cmp	r7, #98	@ 0x62
 8003b62:	d80a      	bhi.n	8003b7a <_printf_i+0x32>
 8003b64:	2f00      	cmp	r7, #0
 8003b66:	f000 80d2 	beq.w	8003d0e <_printf_i+0x1c6>
 8003b6a:	2f58      	cmp	r7, #88	@ 0x58
 8003b6c:	f000 80b9 	beq.w	8003ce2 <_printf_i+0x19a>
 8003b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b78:	e03a      	b.n	8003bf0 <_printf_i+0xa8>
 8003b7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b7e:	2b15      	cmp	r3, #21
 8003b80:	d8f6      	bhi.n	8003b70 <_printf_i+0x28>
 8003b82:	a101      	add	r1, pc, #4	@ (adr r1, 8003b88 <_printf_i+0x40>)
 8003b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b88:	08003be1 	.word	0x08003be1
 8003b8c:	08003bf5 	.word	0x08003bf5
 8003b90:	08003b71 	.word	0x08003b71
 8003b94:	08003b71 	.word	0x08003b71
 8003b98:	08003b71 	.word	0x08003b71
 8003b9c:	08003b71 	.word	0x08003b71
 8003ba0:	08003bf5 	.word	0x08003bf5
 8003ba4:	08003b71 	.word	0x08003b71
 8003ba8:	08003b71 	.word	0x08003b71
 8003bac:	08003b71 	.word	0x08003b71
 8003bb0:	08003b71 	.word	0x08003b71
 8003bb4:	08003cf5 	.word	0x08003cf5
 8003bb8:	08003c1f 	.word	0x08003c1f
 8003bbc:	08003caf 	.word	0x08003caf
 8003bc0:	08003b71 	.word	0x08003b71
 8003bc4:	08003b71 	.word	0x08003b71
 8003bc8:	08003d17 	.word	0x08003d17
 8003bcc:	08003b71 	.word	0x08003b71
 8003bd0:	08003c1f 	.word	0x08003c1f
 8003bd4:	08003b71 	.word	0x08003b71
 8003bd8:	08003b71 	.word	0x08003b71
 8003bdc:	08003cb7 	.word	0x08003cb7
 8003be0:	6833      	ldr	r3, [r6, #0]
 8003be2:	1d1a      	adds	r2, r3, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6032      	str	r2, [r6, #0]
 8003be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e09d      	b.n	8003d30 <_printf_i+0x1e8>
 8003bf4:	6833      	ldr	r3, [r6, #0]
 8003bf6:	6820      	ldr	r0, [r4, #0]
 8003bf8:	1d19      	adds	r1, r3, #4
 8003bfa:	6031      	str	r1, [r6, #0]
 8003bfc:	0606      	lsls	r6, r0, #24
 8003bfe:	d501      	bpl.n	8003c04 <_printf_i+0xbc>
 8003c00:	681d      	ldr	r5, [r3, #0]
 8003c02:	e003      	b.n	8003c0c <_printf_i+0xc4>
 8003c04:	0645      	lsls	r5, r0, #25
 8003c06:	d5fb      	bpl.n	8003c00 <_printf_i+0xb8>
 8003c08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	da03      	bge.n	8003c18 <_printf_i+0xd0>
 8003c10:	232d      	movs	r3, #45	@ 0x2d
 8003c12:	426d      	negs	r5, r5
 8003c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c18:	4859      	ldr	r0, [pc, #356]	@ (8003d80 <_printf_i+0x238>)
 8003c1a:	230a      	movs	r3, #10
 8003c1c:	e011      	b.n	8003c42 <_printf_i+0xfa>
 8003c1e:	6821      	ldr	r1, [r4, #0]
 8003c20:	6833      	ldr	r3, [r6, #0]
 8003c22:	0608      	lsls	r0, r1, #24
 8003c24:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c28:	d402      	bmi.n	8003c30 <_printf_i+0xe8>
 8003c2a:	0649      	lsls	r1, r1, #25
 8003c2c:	bf48      	it	mi
 8003c2e:	b2ad      	uxthmi	r5, r5
 8003c30:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c32:	4853      	ldr	r0, [pc, #332]	@ (8003d80 <_printf_i+0x238>)
 8003c34:	6033      	str	r3, [r6, #0]
 8003c36:	bf14      	ite	ne
 8003c38:	230a      	movne	r3, #10
 8003c3a:	2308      	moveq	r3, #8
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c42:	6866      	ldr	r6, [r4, #4]
 8003c44:	60a6      	str	r6, [r4, #8]
 8003c46:	2e00      	cmp	r6, #0
 8003c48:	bfa2      	ittt	ge
 8003c4a:	6821      	ldrge	r1, [r4, #0]
 8003c4c:	f021 0104 	bicge.w	r1, r1, #4
 8003c50:	6021      	strge	r1, [r4, #0]
 8003c52:	b90d      	cbnz	r5, 8003c58 <_printf_i+0x110>
 8003c54:	2e00      	cmp	r6, #0
 8003c56:	d04b      	beq.n	8003cf0 <_printf_i+0x1a8>
 8003c58:	4616      	mov	r6, r2
 8003c5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c5e:	fb03 5711 	mls	r7, r3, r1, r5
 8003c62:	5dc7      	ldrb	r7, [r0, r7]
 8003c64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c68:	462f      	mov	r7, r5
 8003c6a:	42bb      	cmp	r3, r7
 8003c6c:	460d      	mov	r5, r1
 8003c6e:	d9f4      	bls.n	8003c5a <_printf_i+0x112>
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d10b      	bne.n	8003c8c <_printf_i+0x144>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	07df      	lsls	r7, r3, #31
 8003c78:	d508      	bpl.n	8003c8c <_printf_i+0x144>
 8003c7a:	6923      	ldr	r3, [r4, #16]
 8003c7c:	6861      	ldr	r1, [r4, #4]
 8003c7e:	4299      	cmp	r1, r3
 8003c80:	bfde      	ittt	le
 8003c82:	2330      	movle	r3, #48	@ 0x30
 8003c84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c8c:	1b92      	subs	r2, r2, r6
 8003c8e:	6122      	str	r2, [r4, #16]
 8003c90:	f8cd a000 	str.w	sl, [sp]
 8003c94:	464b      	mov	r3, r9
 8003c96:	aa03      	add	r2, sp, #12
 8003c98:	4621      	mov	r1, r4
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	f7ff fee6 	bl	8003a6c <_printf_common>
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	d14a      	bne.n	8003d3a <_printf_i+0x1f2>
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	b004      	add	sp, #16
 8003caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	f043 0320 	orr.w	r3, r3, #32
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	4833      	ldr	r0, [pc, #204]	@ (8003d84 <_printf_i+0x23c>)
 8003cb8:	2778      	movs	r7, #120	@ 0x78
 8003cba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	6831      	ldr	r1, [r6, #0]
 8003cc2:	061f      	lsls	r7, r3, #24
 8003cc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8003cc8:	d402      	bmi.n	8003cd0 <_printf_i+0x188>
 8003cca:	065f      	lsls	r7, r3, #25
 8003ccc:	bf48      	it	mi
 8003cce:	b2ad      	uxthmi	r5, r5
 8003cd0:	6031      	str	r1, [r6, #0]
 8003cd2:	07d9      	lsls	r1, r3, #31
 8003cd4:	bf44      	itt	mi
 8003cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8003cda:	6023      	strmi	r3, [r4, #0]
 8003cdc:	b11d      	cbz	r5, 8003ce6 <_printf_i+0x19e>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	e7ac      	b.n	8003c3c <_printf_i+0xf4>
 8003ce2:	4827      	ldr	r0, [pc, #156]	@ (8003d80 <_printf_i+0x238>)
 8003ce4:	e7e9      	b.n	8003cba <_printf_i+0x172>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f023 0320 	bic.w	r3, r3, #32
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	e7f6      	b.n	8003cde <_printf_i+0x196>
 8003cf0:	4616      	mov	r6, r2
 8003cf2:	e7bd      	b.n	8003c70 <_printf_i+0x128>
 8003cf4:	6833      	ldr	r3, [r6, #0]
 8003cf6:	6825      	ldr	r5, [r4, #0]
 8003cf8:	6961      	ldr	r1, [r4, #20]
 8003cfa:	1d18      	adds	r0, r3, #4
 8003cfc:	6030      	str	r0, [r6, #0]
 8003cfe:	062e      	lsls	r6, r5, #24
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	d501      	bpl.n	8003d08 <_printf_i+0x1c0>
 8003d04:	6019      	str	r1, [r3, #0]
 8003d06:	e002      	b.n	8003d0e <_printf_i+0x1c6>
 8003d08:	0668      	lsls	r0, r5, #25
 8003d0a:	d5fb      	bpl.n	8003d04 <_printf_i+0x1bc>
 8003d0c:	8019      	strh	r1, [r3, #0]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6123      	str	r3, [r4, #16]
 8003d12:	4616      	mov	r6, r2
 8003d14:	e7bc      	b.n	8003c90 <_printf_i+0x148>
 8003d16:	6833      	ldr	r3, [r6, #0]
 8003d18:	1d1a      	adds	r2, r3, #4
 8003d1a:	6032      	str	r2, [r6, #0]
 8003d1c:	681e      	ldr	r6, [r3, #0]
 8003d1e:	6862      	ldr	r2, [r4, #4]
 8003d20:	2100      	movs	r1, #0
 8003d22:	4630      	mov	r0, r6
 8003d24:	f7fc fa5c 	bl	80001e0 <memchr>
 8003d28:	b108      	cbz	r0, 8003d2e <_printf_i+0x1e6>
 8003d2a:	1b80      	subs	r0, r0, r6
 8003d2c:	6060      	str	r0, [r4, #4]
 8003d2e:	6863      	ldr	r3, [r4, #4]
 8003d30:	6123      	str	r3, [r4, #16]
 8003d32:	2300      	movs	r3, #0
 8003d34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d38:	e7aa      	b.n	8003c90 <_printf_i+0x148>
 8003d3a:	6923      	ldr	r3, [r4, #16]
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	4649      	mov	r1, r9
 8003d40:	4640      	mov	r0, r8
 8003d42:	47d0      	blx	sl
 8003d44:	3001      	adds	r0, #1
 8003d46:	d0ad      	beq.n	8003ca4 <_printf_i+0x15c>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	079b      	lsls	r3, r3, #30
 8003d4c:	d413      	bmi.n	8003d76 <_printf_i+0x22e>
 8003d4e:	68e0      	ldr	r0, [r4, #12]
 8003d50:	9b03      	ldr	r3, [sp, #12]
 8003d52:	4298      	cmp	r0, r3
 8003d54:	bfb8      	it	lt
 8003d56:	4618      	movlt	r0, r3
 8003d58:	e7a6      	b.n	8003ca8 <_printf_i+0x160>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4632      	mov	r2, r6
 8003d5e:	4649      	mov	r1, r9
 8003d60:	4640      	mov	r0, r8
 8003d62:	47d0      	blx	sl
 8003d64:	3001      	adds	r0, #1
 8003d66:	d09d      	beq.n	8003ca4 <_printf_i+0x15c>
 8003d68:	3501      	adds	r5, #1
 8003d6a:	68e3      	ldr	r3, [r4, #12]
 8003d6c:	9903      	ldr	r1, [sp, #12]
 8003d6e:	1a5b      	subs	r3, r3, r1
 8003d70:	42ab      	cmp	r3, r5
 8003d72:	dcf2      	bgt.n	8003d5a <_printf_i+0x212>
 8003d74:	e7eb      	b.n	8003d4e <_printf_i+0x206>
 8003d76:	2500      	movs	r5, #0
 8003d78:	f104 0619 	add.w	r6, r4, #25
 8003d7c:	e7f5      	b.n	8003d6a <_printf_i+0x222>
 8003d7e:	bf00      	nop
 8003d80:	08005e02 	.word	0x08005e02
 8003d84:	08005e13 	.word	0x08005e13

08003d88 <std>:
 8003d88:	2300      	movs	r3, #0
 8003d8a:	b510      	push	{r4, lr}
 8003d8c:	4604      	mov	r4, r0
 8003d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d96:	6083      	str	r3, [r0, #8]
 8003d98:	8181      	strh	r1, [r0, #12]
 8003d9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d9c:	81c2      	strh	r2, [r0, #14]
 8003d9e:	6183      	str	r3, [r0, #24]
 8003da0:	4619      	mov	r1, r3
 8003da2:	2208      	movs	r2, #8
 8003da4:	305c      	adds	r0, #92	@ 0x5c
 8003da6:	f000 f8f4 	bl	8003f92 <memset>
 8003daa:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <std+0x58>)
 8003dac:	6263      	str	r3, [r4, #36]	@ 0x24
 8003dae:	4b0d      	ldr	r3, [pc, #52]	@ (8003de4 <std+0x5c>)
 8003db0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003db2:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <std+0x60>)
 8003db4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003db6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dec <std+0x64>)
 8003db8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003dba:	4b0d      	ldr	r3, [pc, #52]	@ (8003df0 <std+0x68>)
 8003dbc:	6224      	str	r4, [r4, #32]
 8003dbe:	429c      	cmp	r4, r3
 8003dc0:	d006      	beq.n	8003dd0 <std+0x48>
 8003dc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003dc6:	4294      	cmp	r4, r2
 8003dc8:	d002      	beq.n	8003dd0 <std+0x48>
 8003dca:	33d0      	adds	r3, #208	@ 0xd0
 8003dcc:	429c      	cmp	r4, r3
 8003dce:	d105      	bne.n	8003ddc <std+0x54>
 8003dd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dd8:	f000 b958 	b.w	800408c <__retarget_lock_init_recursive>
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	bf00      	nop
 8003de0:	08003f0d 	.word	0x08003f0d
 8003de4:	08003f2f 	.word	0x08003f2f
 8003de8:	08003f67 	.word	0x08003f67
 8003dec:	08003f8b 	.word	0x08003f8b
 8003df0:	200003e4 	.word	0x200003e4

08003df4 <stdio_exit_handler>:
 8003df4:	4a02      	ldr	r2, [pc, #8]	@ (8003e00 <stdio_exit_handler+0xc>)
 8003df6:	4903      	ldr	r1, [pc, #12]	@ (8003e04 <stdio_exit_handler+0x10>)
 8003df8:	4803      	ldr	r0, [pc, #12]	@ (8003e08 <stdio_exit_handler+0x14>)
 8003dfa:	f000 b869 	b.w	8003ed0 <_fwalk_sglue>
 8003dfe:	bf00      	nop
 8003e00:	20000004 	.word	0x20000004
 8003e04:	08005755 	.word	0x08005755
 8003e08:	20000014 	.word	0x20000014

08003e0c <cleanup_stdio>:
 8003e0c:	6841      	ldr	r1, [r0, #4]
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <cleanup_stdio+0x34>)
 8003e10:	4299      	cmp	r1, r3
 8003e12:	b510      	push	{r4, lr}
 8003e14:	4604      	mov	r4, r0
 8003e16:	d001      	beq.n	8003e1c <cleanup_stdio+0x10>
 8003e18:	f001 fc9c 	bl	8005754 <_fflush_r>
 8003e1c:	68a1      	ldr	r1, [r4, #8]
 8003e1e:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <cleanup_stdio+0x38>)
 8003e20:	4299      	cmp	r1, r3
 8003e22:	d002      	beq.n	8003e2a <cleanup_stdio+0x1e>
 8003e24:	4620      	mov	r0, r4
 8003e26:	f001 fc95 	bl	8005754 <_fflush_r>
 8003e2a:	68e1      	ldr	r1, [r4, #12]
 8003e2c:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <cleanup_stdio+0x3c>)
 8003e2e:	4299      	cmp	r1, r3
 8003e30:	d004      	beq.n	8003e3c <cleanup_stdio+0x30>
 8003e32:	4620      	mov	r0, r4
 8003e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e38:	f001 bc8c 	b.w	8005754 <_fflush_r>
 8003e3c:	bd10      	pop	{r4, pc}
 8003e3e:	bf00      	nop
 8003e40:	200003e4 	.word	0x200003e4
 8003e44:	2000044c 	.word	0x2000044c
 8003e48:	200004b4 	.word	0x200004b4

08003e4c <global_stdio_init.part.0>:
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e7c <global_stdio_init.part.0+0x30>)
 8003e50:	4c0b      	ldr	r4, [pc, #44]	@ (8003e80 <global_stdio_init.part.0+0x34>)
 8003e52:	4a0c      	ldr	r2, [pc, #48]	@ (8003e84 <global_stdio_init.part.0+0x38>)
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	4620      	mov	r0, r4
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2104      	movs	r1, #4
 8003e5c:	f7ff ff94 	bl	8003d88 <std>
 8003e60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e64:	2201      	movs	r2, #1
 8003e66:	2109      	movs	r1, #9
 8003e68:	f7ff ff8e 	bl	8003d88 <std>
 8003e6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e70:	2202      	movs	r2, #2
 8003e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e76:	2112      	movs	r1, #18
 8003e78:	f7ff bf86 	b.w	8003d88 <std>
 8003e7c:	2000051c 	.word	0x2000051c
 8003e80:	200003e4 	.word	0x200003e4
 8003e84:	08003df5 	.word	0x08003df5

08003e88 <__sfp_lock_acquire>:
 8003e88:	4801      	ldr	r0, [pc, #4]	@ (8003e90 <__sfp_lock_acquire+0x8>)
 8003e8a:	f000 b900 	b.w	800408e <__retarget_lock_acquire_recursive>
 8003e8e:	bf00      	nop
 8003e90:	20000525 	.word	0x20000525

08003e94 <__sfp_lock_release>:
 8003e94:	4801      	ldr	r0, [pc, #4]	@ (8003e9c <__sfp_lock_release+0x8>)
 8003e96:	f000 b8fb 	b.w	8004090 <__retarget_lock_release_recursive>
 8003e9a:	bf00      	nop
 8003e9c:	20000525 	.word	0x20000525

08003ea0 <__sinit>:
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	f7ff fff0 	bl	8003e88 <__sfp_lock_acquire>
 8003ea8:	6a23      	ldr	r3, [r4, #32]
 8003eaa:	b11b      	cbz	r3, 8003eb4 <__sinit+0x14>
 8003eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb0:	f7ff bff0 	b.w	8003e94 <__sfp_lock_release>
 8003eb4:	4b04      	ldr	r3, [pc, #16]	@ (8003ec8 <__sinit+0x28>)
 8003eb6:	6223      	str	r3, [r4, #32]
 8003eb8:	4b04      	ldr	r3, [pc, #16]	@ (8003ecc <__sinit+0x2c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f5      	bne.n	8003eac <__sinit+0xc>
 8003ec0:	f7ff ffc4 	bl	8003e4c <global_stdio_init.part.0>
 8003ec4:	e7f2      	b.n	8003eac <__sinit+0xc>
 8003ec6:	bf00      	nop
 8003ec8:	08003e0d 	.word	0x08003e0d
 8003ecc:	2000051c 	.word	0x2000051c

08003ed0 <_fwalk_sglue>:
 8003ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed4:	4607      	mov	r7, r0
 8003ed6:	4688      	mov	r8, r1
 8003ed8:	4614      	mov	r4, r2
 8003eda:	2600      	movs	r6, #0
 8003edc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ee0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ee4:	d505      	bpl.n	8003ef2 <_fwalk_sglue+0x22>
 8003ee6:	6824      	ldr	r4, [r4, #0]
 8003ee8:	2c00      	cmp	r4, #0
 8003eea:	d1f7      	bne.n	8003edc <_fwalk_sglue+0xc>
 8003eec:	4630      	mov	r0, r6
 8003eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ef2:	89ab      	ldrh	r3, [r5, #12]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d907      	bls.n	8003f08 <_fwalk_sglue+0x38>
 8003ef8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003efc:	3301      	adds	r3, #1
 8003efe:	d003      	beq.n	8003f08 <_fwalk_sglue+0x38>
 8003f00:	4629      	mov	r1, r5
 8003f02:	4638      	mov	r0, r7
 8003f04:	47c0      	blx	r8
 8003f06:	4306      	orrs	r6, r0
 8003f08:	3568      	adds	r5, #104	@ 0x68
 8003f0a:	e7e9      	b.n	8003ee0 <_fwalk_sglue+0x10>

08003f0c <__sread>:
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	460c      	mov	r4, r1
 8003f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f14:	f000 f86c 	bl	8003ff0 <_read_r>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	bfab      	itete	ge
 8003f1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f20:	181b      	addge	r3, r3, r0
 8003f22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f26:	bfac      	ite	ge
 8003f28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f2a:	81a3      	strhlt	r3, [r4, #12]
 8003f2c:	bd10      	pop	{r4, pc}

08003f2e <__swrite>:
 8003f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f32:	461f      	mov	r7, r3
 8003f34:	898b      	ldrh	r3, [r1, #12]
 8003f36:	05db      	lsls	r3, r3, #23
 8003f38:	4605      	mov	r5, r0
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	4616      	mov	r6, r2
 8003f3e:	d505      	bpl.n	8003f4c <__swrite+0x1e>
 8003f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f44:	2302      	movs	r3, #2
 8003f46:	2200      	movs	r2, #0
 8003f48:	f000 f840 	bl	8003fcc <_lseek_r>
 8003f4c:	89a3      	ldrh	r3, [r4, #12]
 8003f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f56:	81a3      	strh	r3, [r4, #12]
 8003f58:	4632      	mov	r2, r6
 8003f5a:	463b      	mov	r3, r7
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f62:	f000 b857 	b.w	8004014 <_write_r>

08003f66 <__sseek>:
 8003f66:	b510      	push	{r4, lr}
 8003f68:	460c      	mov	r4, r1
 8003f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6e:	f000 f82d 	bl	8003fcc <_lseek_r>
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	bf15      	itete	ne
 8003f78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f82:	81a3      	strheq	r3, [r4, #12]
 8003f84:	bf18      	it	ne
 8003f86:	81a3      	strhne	r3, [r4, #12]
 8003f88:	bd10      	pop	{r4, pc}

08003f8a <__sclose>:
 8003f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8e:	f000 b80d 	b.w	8003fac <_close_r>

08003f92 <memset>:
 8003f92:	4402      	add	r2, r0
 8003f94:	4603      	mov	r3, r0
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d100      	bne.n	8003f9c <memset+0xa>
 8003f9a:	4770      	bx	lr
 8003f9c:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa0:	e7f9      	b.n	8003f96 <memset+0x4>
	...

08003fa4 <_localeconv_r>:
 8003fa4:	4800      	ldr	r0, [pc, #0]	@ (8003fa8 <_localeconv_r+0x4>)
 8003fa6:	4770      	bx	lr
 8003fa8:	20000150 	.word	0x20000150

08003fac <_close_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4d06      	ldr	r5, [pc, #24]	@ (8003fc8 <_close_r+0x1c>)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	4608      	mov	r0, r1
 8003fb6:	602b      	str	r3, [r5, #0]
 8003fb8:	f7ff f9ea 	bl	8003390 <_close>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d102      	bne.n	8003fc6 <_close_r+0x1a>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	b103      	cbz	r3, 8003fc6 <_close_r+0x1a>
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	20000520 	.word	0x20000520

08003fcc <_lseek_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4d07      	ldr	r5, [pc, #28]	@ (8003fec <_lseek_r+0x20>)
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	4608      	mov	r0, r1
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	602a      	str	r2, [r5, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f7ff f9ff 	bl	80033de <_lseek>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_lseek_r+0x1e>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_lseek_r+0x1e>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	20000520 	.word	0x20000520

08003ff0 <_read_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4d07      	ldr	r5, [pc, #28]	@ (8004010 <_read_r+0x20>)
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	4608      	mov	r0, r1
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	602a      	str	r2, [r5, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f7ff f98d 	bl	800331e <_read>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d102      	bne.n	800400e <_read_r+0x1e>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	b103      	cbz	r3, 800400e <_read_r+0x1e>
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	20000520 	.word	0x20000520

08004014 <_write_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4d07      	ldr	r5, [pc, #28]	@ (8004034 <_write_r+0x20>)
 8004018:	4604      	mov	r4, r0
 800401a:	4608      	mov	r0, r1
 800401c:	4611      	mov	r1, r2
 800401e:	2200      	movs	r2, #0
 8004020:	602a      	str	r2, [r5, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f7ff f998 	bl	8003358 <_write>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_write_r+0x1e>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_write_r+0x1e>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	20000520 	.word	0x20000520

08004038 <__errno>:
 8004038:	4b01      	ldr	r3, [pc, #4]	@ (8004040 <__errno+0x8>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000010 	.word	0x20000010

08004044 <__libc_init_array>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	4d0d      	ldr	r5, [pc, #52]	@ (800407c <__libc_init_array+0x38>)
 8004048:	4c0d      	ldr	r4, [pc, #52]	@ (8004080 <__libc_init_array+0x3c>)
 800404a:	1b64      	subs	r4, r4, r5
 800404c:	10a4      	asrs	r4, r4, #2
 800404e:	2600      	movs	r6, #0
 8004050:	42a6      	cmp	r6, r4
 8004052:	d109      	bne.n	8004068 <__libc_init_array+0x24>
 8004054:	4d0b      	ldr	r5, [pc, #44]	@ (8004084 <__libc_init_array+0x40>)
 8004056:	4c0c      	ldr	r4, [pc, #48]	@ (8004088 <__libc_init_array+0x44>)
 8004058:	f001 febc 	bl	8005dd4 <_init>
 800405c:	1b64      	subs	r4, r4, r5
 800405e:	10a4      	asrs	r4, r4, #2
 8004060:	2600      	movs	r6, #0
 8004062:	42a6      	cmp	r6, r4
 8004064:	d105      	bne.n	8004072 <__libc_init_array+0x2e>
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	f855 3b04 	ldr.w	r3, [r5], #4
 800406c:	4798      	blx	r3
 800406e:	3601      	adds	r6, #1
 8004070:	e7ee      	b.n	8004050 <__libc_init_array+0xc>
 8004072:	f855 3b04 	ldr.w	r3, [r5], #4
 8004076:	4798      	blx	r3
 8004078:	3601      	adds	r6, #1
 800407a:	e7f2      	b.n	8004062 <__libc_init_array+0x1e>
 800407c:	08006168 	.word	0x08006168
 8004080:	08006168 	.word	0x08006168
 8004084:	08006168 	.word	0x08006168
 8004088:	0800616c 	.word	0x0800616c

0800408c <__retarget_lock_init_recursive>:
 800408c:	4770      	bx	lr

0800408e <__retarget_lock_acquire_recursive>:
 800408e:	4770      	bx	lr

08004090 <__retarget_lock_release_recursive>:
 8004090:	4770      	bx	lr

08004092 <memcpy>:
 8004092:	440a      	add	r2, r1
 8004094:	4291      	cmp	r1, r2
 8004096:	f100 33ff 	add.w	r3, r0, #4294967295
 800409a:	d100      	bne.n	800409e <memcpy+0xc>
 800409c:	4770      	bx	lr
 800409e:	b510      	push	{r4, lr}
 80040a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040a8:	4291      	cmp	r1, r2
 80040aa:	d1f9      	bne.n	80040a0 <memcpy+0xe>
 80040ac:	bd10      	pop	{r4, pc}

080040ae <quorem>:
 80040ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b2:	6903      	ldr	r3, [r0, #16]
 80040b4:	690c      	ldr	r4, [r1, #16]
 80040b6:	42a3      	cmp	r3, r4
 80040b8:	4607      	mov	r7, r0
 80040ba:	db7e      	blt.n	80041ba <quorem+0x10c>
 80040bc:	3c01      	subs	r4, #1
 80040be:	f101 0814 	add.w	r8, r1, #20
 80040c2:	00a3      	lsls	r3, r4, #2
 80040c4:	f100 0514 	add.w	r5, r0, #20
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80040d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040d8:	3301      	adds	r3, #1
 80040da:	429a      	cmp	r2, r3
 80040dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80040e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80040e4:	d32e      	bcc.n	8004144 <quorem+0x96>
 80040e6:	f04f 0a00 	mov.w	sl, #0
 80040ea:	46c4      	mov	ip, r8
 80040ec:	46ae      	mov	lr, r5
 80040ee:	46d3      	mov	fp, sl
 80040f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80040f4:	b298      	uxth	r0, r3
 80040f6:	fb06 a000 	mla	r0, r6, r0, sl
 80040fa:	0c02      	lsrs	r2, r0, #16
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	fb06 2303 	mla	r3, r6, r3, r2
 8004102:	f8de 2000 	ldr.w	r2, [lr]
 8004106:	b280      	uxth	r0, r0
 8004108:	b292      	uxth	r2, r2
 800410a:	1a12      	subs	r2, r2, r0
 800410c:	445a      	add	r2, fp
 800410e:	f8de 0000 	ldr.w	r0, [lr]
 8004112:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004116:	b29b      	uxth	r3, r3
 8004118:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800411c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004120:	b292      	uxth	r2, r2
 8004122:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004126:	45e1      	cmp	r9, ip
 8004128:	f84e 2b04 	str.w	r2, [lr], #4
 800412c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004130:	d2de      	bcs.n	80040f0 <quorem+0x42>
 8004132:	9b00      	ldr	r3, [sp, #0]
 8004134:	58eb      	ldr	r3, [r5, r3]
 8004136:	b92b      	cbnz	r3, 8004144 <quorem+0x96>
 8004138:	9b01      	ldr	r3, [sp, #4]
 800413a:	3b04      	subs	r3, #4
 800413c:	429d      	cmp	r5, r3
 800413e:	461a      	mov	r2, r3
 8004140:	d32f      	bcc.n	80041a2 <quorem+0xf4>
 8004142:	613c      	str	r4, [r7, #16]
 8004144:	4638      	mov	r0, r7
 8004146:	f001 f979 	bl	800543c <__mcmp>
 800414a:	2800      	cmp	r0, #0
 800414c:	db25      	blt.n	800419a <quorem+0xec>
 800414e:	4629      	mov	r1, r5
 8004150:	2000      	movs	r0, #0
 8004152:	f858 2b04 	ldr.w	r2, [r8], #4
 8004156:	f8d1 c000 	ldr.w	ip, [r1]
 800415a:	fa1f fe82 	uxth.w	lr, r2
 800415e:	fa1f f38c 	uxth.w	r3, ip
 8004162:	eba3 030e 	sub.w	r3, r3, lr
 8004166:	4403      	add	r3, r0
 8004168:	0c12      	lsrs	r2, r2, #16
 800416a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800416e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004172:	b29b      	uxth	r3, r3
 8004174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004178:	45c1      	cmp	r9, r8
 800417a:	f841 3b04 	str.w	r3, [r1], #4
 800417e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004182:	d2e6      	bcs.n	8004152 <quorem+0xa4>
 8004184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004188:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800418c:	b922      	cbnz	r2, 8004198 <quorem+0xea>
 800418e:	3b04      	subs	r3, #4
 8004190:	429d      	cmp	r5, r3
 8004192:	461a      	mov	r2, r3
 8004194:	d30b      	bcc.n	80041ae <quorem+0x100>
 8004196:	613c      	str	r4, [r7, #16]
 8004198:	3601      	adds	r6, #1
 800419a:	4630      	mov	r0, r6
 800419c:	b003      	add	sp, #12
 800419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	3b04      	subs	r3, #4
 80041a6:	2a00      	cmp	r2, #0
 80041a8:	d1cb      	bne.n	8004142 <quorem+0x94>
 80041aa:	3c01      	subs	r4, #1
 80041ac:	e7c6      	b.n	800413c <quorem+0x8e>
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	3b04      	subs	r3, #4
 80041b2:	2a00      	cmp	r2, #0
 80041b4:	d1ef      	bne.n	8004196 <quorem+0xe8>
 80041b6:	3c01      	subs	r4, #1
 80041b8:	e7ea      	b.n	8004190 <quorem+0xe2>
 80041ba:	2000      	movs	r0, #0
 80041bc:	e7ee      	b.n	800419c <quorem+0xee>
	...

080041c0 <_dtoa_r>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	69c7      	ldr	r7, [r0, #28]
 80041c6:	b099      	sub	sp, #100	@ 0x64
 80041c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80041cc:	ec55 4b10 	vmov	r4, r5, d0
 80041d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80041d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80041d4:	4683      	mov	fp, r0
 80041d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80041d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80041da:	b97f      	cbnz	r7, 80041fc <_dtoa_r+0x3c>
 80041dc:	2010      	movs	r0, #16
 80041de:	f000 fdfd 	bl	8004ddc <malloc>
 80041e2:	4602      	mov	r2, r0
 80041e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80041e8:	b920      	cbnz	r0, 80041f4 <_dtoa_r+0x34>
 80041ea:	4ba7      	ldr	r3, [pc, #668]	@ (8004488 <_dtoa_r+0x2c8>)
 80041ec:	21ef      	movs	r1, #239	@ 0xef
 80041ee:	48a7      	ldr	r0, [pc, #668]	@ (800448c <_dtoa_r+0x2cc>)
 80041f0:	f001 fae8 	bl	80057c4 <__assert_func>
 80041f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80041f8:	6007      	str	r7, [r0, #0]
 80041fa:	60c7      	str	r7, [r0, #12]
 80041fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004200:	6819      	ldr	r1, [r3, #0]
 8004202:	b159      	cbz	r1, 800421c <_dtoa_r+0x5c>
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	604a      	str	r2, [r1, #4]
 8004208:	2301      	movs	r3, #1
 800420a:	4093      	lsls	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
 800420e:	4658      	mov	r0, fp
 8004210:	f000 feda 	bl	8004fc8 <_Bfree>
 8004214:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	1e2b      	subs	r3, r5, #0
 800421e:	bfb9      	ittee	lt
 8004220:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004224:	9303      	strlt	r3, [sp, #12]
 8004226:	2300      	movge	r3, #0
 8004228:	6033      	strge	r3, [r6, #0]
 800422a:	9f03      	ldr	r7, [sp, #12]
 800422c:	4b98      	ldr	r3, [pc, #608]	@ (8004490 <_dtoa_r+0x2d0>)
 800422e:	bfbc      	itt	lt
 8004230:	2201      	movlt	r2, #1
 8004232:	6032      	strlt	r2, [r6, #0]
 8004234:	43bb      	bics	r3, r7
 8004236:	d112      	bne.n	800425e <_dtoa_r+0x9e>
 8004238:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800423a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004244:	4323      	orrs	r3, r4
 8004246:	f000 854d 	beq.w	8004ce4 <_dtoa_r+0xb24>
 800424a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800424c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80044a4 <_dtoa_r+0x2e4>
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 854f 	beq.w	8004cf4 <_dtoa_r+0xb34>
 8004256:	f10a 0303 	add.w	r3, sl, #3
 800425a:	f000 bd49 	b.w	8004cf0 <_dtoa_r+0xb30>
 800425e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004262:	2200      	movs	r2, #0
 8004264:	ec51 0b17 	vmov	r0, r1, d7
 8004268:	2300      	movs	r3, #0
 800426a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800426e:	f7fc fc33 	bl	8000ad8 <__aeabi_dcmpeq>
 8004272:	4680      	mov	r8, r0
 8004274:	b158      	cbz	r0, 800428e <_dtoa_r+0xce>
 8004276:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004278:	2301      	movs	r3, #1
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800427e:	b113      	cbz	r3, 8004286 <_dtoa_r+0xc6>
 8004280:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004282:	4b84      	ldr	r3, [pc, #528]	@ (8004494 <_dtoa_r+0x2d4>)
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80044a8 <_dtoa_r+0x2e8>
 800428a:	f000 bd33 	b.w	8004cf4 <_dtoa_r+0xb34>
 800428e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004292:	aa16      	add	r2, sp, #88	@ 0x58
 8004294:	a917      	add	r1, sp, #92	@ 0x5c
 8004296:	4658      	mov	r0, fp
 8004298:	f001 f980 	bl	800559c <__d2b>
 800429c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80042a0:	4681      	mov	r9, r0
 80042a2:	2e00      	cmp	r6, #0
 80042a4:	d077      	beq.n	8004396 <_dtoa_r+0x1d6>
 80042a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80042ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80042b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80042bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80042c0:	4619      	mov	r1, r3
 80042c2:	2200      	movs	r2, #0
 80042c4:	4b74      	ldr	r3, [pc, #464]	@ (8004498 <_dtoa_r+0x2d8>)
 80042c6:	f7fb ffe7 	bl	8000298 <__aeabi_dsub>
 80042ca:	a369      	add	r3, pc, #420	@ (adr r3, 8004470 <_dtoa_r+0x2b0>)
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f7fc f99a 	bl	8000608 <__aeabi_dmul>
 80042d4:	a368      	add	r3, pc, #416	@ (adr r3, 8004478 <_dtoa_r+0x2b8>)
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f7fb ffdf 	bl	800029c <__adddf3>
 80042de:	4604      	mov	r4, r0
 80042e0:	4630      	mov	r0, r6
 80042e2:	460d      	mov	r5, r1
 80042e4:	f7fc f926 	bl	8000534 <__aeabi_i2d>
 80042e8:	a365      	add	r3, pc, #404	@ (adr r3, 8004480 <_dtoa_r+0x2c0>)
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f7fc f98b 	bl	8000608 <__aeabi_dmul>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4620      	mov	r0, r4
 80042f8:	4629      	mov	r1, r5
 80042fa:	f7fb ffcf 	bl	800029c <__adddf3>
 80042fe:	4604      	mov	r4, r0
 8004300:	460d      	mov	r5, r1
 8004302:	f7fc fc31 	bl	8000b68 <__aeabi_d2iz>
 8004306:	2200      	movs	r2, #0
 8004308:	4607      	mov	r7, r0
 800430a:	2300      	movs	r3, #0
 800430c:	4620      	mov	r0, r4
 800430e:	4629      	mov	r1, r5
 8004310:	f7fc fbec 	bl	8000aec <__aeabi_dcmplt>
 8004314:	b140      	cbz	r0, 8004328 <_dtoa_r+0x168>
 8004316:	4638      	mov	r0, r7
 8004318:	f7fc f90c 	bl	8000534 <__aeabi_i2d>
 800431c:	4622      	mov	r2, r4
 800431e:	462b      	mov	r3, r5
 8004320:	f7fc fbda 	bl	8000ad8 <__aeabi_dcmpeq>
 8004324:	b900      	cbnz	r0, 8004328 <_dtoa_r+0x168>
 8004326:	3f01      	subs	r7, #1
 8004328:	2f16      	cmp	r7, #22
 800432a:	d851      	bhi.n	80043d0 <_dtoa_r+0x210>
 800432c:	4b5b      	ldr	r3, [pc, #364]	@ (800449c <_dtoa_r+0x2dc>)
 800432e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800433a:	f7fc fbd7 	bl	8000aec <__aeabi_dcmplt>
 800433e:	2800      	cmp	r0, #0
 8004340:	d048      	beq.n	80043d4 <_dtoa_r+0x214>
 8004342:	3f01      	subs	r7, #1
 8004344:	2300      	movs	r3, #0
 8004346:	9312      	str	r3, [sp, #72]	@ 0x48
 8004348:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800434a:	1b9b      	subs	r3, r3, r6
 800434c:	1e5a      	subs	r2, r3, #1
 800434e:	bf44      	itt	mi
 8004350:	f1c3 0801 	rsbmi	r8, r3, #1
 8004354:	2300      	movmi	r3, #0
 8004356:	9208      	str	r2, [sp, #32]
 8004358:	bf54      	ite	pl
 800435a:	f04f 0800 	movpl.w	r8, #0
 800435e:	9308      	strmi	r3, [sp, #32]
 8004360:	2f00      	cmp	r7, #0
 8004362:	db39      	blt.n	80043d8 <_dtoa_r+0x218>
 8004364:	9b08      	ldr	r3, [sp, #32]
 8004366:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004368:	443b      	add	r3, r7
 800436a:	9308      	str	r3, [sp, #32]
 800436c:	2300      	movs	r3, #0
 800436e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004372:	2b09      	cmp	r3, #9
 8004374:	d864      	bhi.n	8004440 <_dtoa_r+0x280>
 8004376:	2b05      	cmp	r3, #5
 8004378:	bfc4      	itt	gt
 800437a:	3b04      	subgt	r3, #4
 800437c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800437e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004380:	f1a3 0302 	sub.w	r3, r3, #2
 8004384:	bfcc      	ite	gt
 8004386:	2400      	movgt	r4, #0
 8004388:	2401      	movle	r4, #1
 800438a:	2b03      	cmp	r3, #3
 800438c:	d863      	bhi.n	8004456 <_dtoa_r+0x296>
 800438e:	e8df f003 	tbb	[pc, r3]
 8004392:	372a      	.short	0x372a
 8004394:	5535      	.short	0x5535
 8004396:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800439a:	441e      	add	r6, r3
 800439c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	bfc1      	itttt	gt
 80043a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80043a8:	409f      	lslgt	r7, r3
 80043aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80043ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80043b2:	bfd6      	itet	le
 80043b4:	f1c3 0320 	rsble	r3, r3, #32
 80043b8:	ea47 0003 	orrgt.w	r0, r7, r3
 80043bc:	fa04 f003 	lslle.w	r0, r4, r3
 80043c0:	f7fc f8a8 	bl	8000514 <__aeabi_ui2d>
 80043c4:	2201      	movs	r2, #1
 80043c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80043ca:	3e01      	subs	r6, #1
 80043cc:	9214      	str	r2, [sp, #80]	@ 0x50
 80043ce:	e777      	b.n	80042c0 <_dtoa_r+0x100>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e7b8      	b.n	8004346 <_dtoa_r+0x186>
 80043d4:	9012      	str	r0, [sp, #72]	@ 0x48
 80043d6:	e7b7      	b.n	8004348 <_dtoa_r+0x188>
 80043d8:	427b      	negs	r3, r7
 80043da:	930a      	str	r3, [sp, #40]	@ 0x28
 80043dc:	2300      	movs	r3, #0
 80043de:	eba8 0807 	sub.w	r8, r8, r7
 80043e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80043e4:	e7c4      	b.n	8004370 <_dtoa_r+0x1b0>
 80043e6:	2300      	movs	r3, #0
 80043e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	dc35      	bgt.n	800445c <_dtoa_r+0x29c>
 80043f0:	2301      	movs	r3, #1
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	9307      	str	r3, [sp, #28]
 80043f6:	461a      	mov	r2, r3
 80043f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80043fa:	e00b      	b.n	8004414 <_dtoa_r+0x254>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e7f3      	b.n	80043e8 <_dtoa_r+0x228>
 8004400:	2300      	movs	r3, #0
 8004402:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004404:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	9307      	str	r3, [sp, #28]
 8004410:	bfb8      	it	lt
 8004412:	2301      	movlt	r3, #1
 8004414:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004418:	2100      	movs	r1, #0
 800441a:	2204      	movs	r2, #4
 800441c:	f102 0514 	add.w	r5, r2, #20
 8004420:	429d      	cmp	r5, r3
 8004422:	d91f      	bls.n	8004464 <_dtoa_r+0x2a4>
 8004424:	6041      	str	r1, [r0, #4]
 8004426:	4658      	mov	r0, fp
 8004428:	f000 fd8e 	bl	8004f48 <_Balloc>
 800442c:	4682      	mov	sl, r0
 800442e:	2800      	cmp	r0, #0
 8004430:	d13c      	bne.n	80044ac <_dtoa_r+0x2ec>
 8004432:	4b1b      	ldr	r3, [pc, #108]	@ (80044a0 <_dtoa_r+0x2e0>)
 8004434:	4602      	mov	r2, r0
 8004436:	f240 11af 	movw	r1, #431	@ 0x1af
 800443a:	e6d8      	b.n	80041ee <_dtoa_r+0x2e>
 800443c:	2301      	movs	r3, #1
 800443e:	e7e0      	b.n	8004402 <_dtoa_r+0x242>
 8004440:	2401      	movs	r4, #1
 8004442:	2300      	movs	r3, #0
 8004444:	9309      	str	r3, [sp, #36]	@ 0x24
 8004446:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004448:	f04f 33ff 	mov.w	r3, #4294967295
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	9307      	str	r3, [sp, #28]
 8004450:	2200      	movs	r2, #0
 8004452:	2312      	movs	r3, #18
 8004454:	e7d0      	b.n	80043f8 <_dtoa_r+0x238>
 8004456:	2301      	movs	r3, #1
 8004458:	930b      	str	r3, [sp, #44]	@ 0x2c
 800445a:	e7f5      	b.n	8004448 <_dtoa_r+0x288>
 800445c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	9307      	str	r3, [sp, #28]
 8004462:	e7d7      	b.n	8004414 <_dtoa_r+0x254>
 8004464:	3101      	adds	r1, #1
 8004466:	0052      	lsls	r2, r2, #1
 8004468:	e7d8      	b.n	800441c <_dtoa_r+0x25c>
 800446a:	bf00      	nop
 800446c:	f3af 8000 	nop.w
 8004470:	636f4361 	.word	0x636f4361
 8004474:	3fd287a7 	.word	0x3fd287a7
 8004478:	8b60c8b3 	.word	0x8b60c8b3
 800447c:	3fc68a28 	.word	0x3fc68a28
 8004480:	509f79fb 	.word	0x509f79fb
 8004484:	3fd34413 	.word	0x3fd34413
 8004488:	08005e31 	.word	0x08005e31
 800448c:	08005e48 	.word	0x08005e48
 8004490:	7ff00000 	.word	0x7ff00000
 8004494:	08005e01 	.word	0x08005e01
 8004498:	3ff80000 	.word	0x3ff80000
 800449c:	08005f40 	.word	0x08005f40
 80044a0:	08005ea0 	.word	0x08005ea0
 80044a4:	08005e2d 	.word	0x08005e2d
 80044a8:	08005e00 	.word	0x08005e00
 80044ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044b0:	6018      	str	r0, [r3, #0]
 80044b2:	9b07      	ldr	r3, [sp, #28]
 80044b4:	2b0e      	cmp	r3, #14
 80044b6:	f200 80a4 	bhi.w	8004602 <_dtoa_r+0x442>
 80044ba:	2c00      	cmp	r4, #0
 80044bc:	f000 80a1 	beq.w	8004602 <_dtoa_r+0x442>
 80044c0:	2f00      	cmp	r7, #0
 80044c2:	dd33      	ble.n	800452c <_dtoa_r+0x36c>
 80044c4:	4bad      	ldr	r3, [pc, #692]	@ (800477c <_dtoa_r+0x5bc>)
 80044c6:	f007 020f 	and.w	r2, r7, #15
 80044ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044ce:	ed93 7b00 	vldr	d7, [r3]
 80044d2:	05f8      	lsls	r0, r7, #23
 80044d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80044d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80044dc:	d516      	bpl.n	800450c <_dtoa_r+0x34c>
 80044de:	4ba8      	ldr	r3, [pc, #672]	@ (8004780 <_dtoa_r+0x5c0>)
 80044e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80044e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044e8:	f7fc f9b8 	bl	800085c <__aeabi_ddiv>
 80044ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044f0:	f004 040f 	and.w	r4, r4, #15
 80044f4:	2603      	movs	r6, #3
 80044f6:	4da2      	ldr	r5, [pc, #648]	@ (8004780 <_dtoa_r+0x5c0>)
 80044f8:	b954      	cbnz	r4, 8004510 <_dtoa_r+0x350>
 80044fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004502:	f7fc f9ab 	bl	800085c <__aeabi_ddiv>
 8004506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800450a:	e028      	b.n	800455e <_dtoa_r+0x39e>
 800450c:	2602      	movs	r6, #2
 800450e:	e7f2      	b.n	80044f6 <_dtoa_r+0x336>
 8004510:	07e1      	lsls	r1, r4, #31
 8004512:	d508      	bpl.n	8004526 <_dtoa_r+0x366>
 8004514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004518:	e9d5 2300 	ldrd	r2, r3, [r5]
 800451c:	f7fc f874 	bl	8000608 <__aeabi_dmul>
 8004520:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004524:	3601      	adds	r6, #1
 8004526:	1064      	asrs	r4, r4, #1
 8004528:	3508      	adds	r5, #8
 800452a:	e7e5      	b.n	80044f8 <_dtoa_r+0x338>
 800452c:	f000 80d2 	beq.w	80046d4 <_dtoa_r+0x514>
 8004530:	427c      	negs	r4, r7
 8004532:	4b92      	ldr	r3, [pc, #584]	@ (800477c <_dtoa_r+0x5bc>)
 8004534:	4d92      	ldr	r5, [pc, #584]	@ (8004780 <_dtoa_r+0x5c0>)
 8004536:	f004 020f 	and.w	r2, r4, #15
 800453a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004546:	f7fc f85f 	bl	8000608 <__aeabi_dmul>
 800454a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800454e:	1124      	asrs	r4, r4, #4
 8004550:	2300      	movs	r3, #0
 8004552:	2602      	movs	r6, #2
 8004554:	2c00      	cmp	r4, #0
 8004556:	f040 80b2 	bne.w	80046be <_dtoa_r+0x4fe>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1d3      	bne.n	8004506 <_dtoa_r+0x346>
 800455e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004560:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80b7 	beq.w	80046d8 <_dtoa_r+0x518>
 800456a:	4b86      	ldr	r3, [pc, #536]	@ (8004784 <_dtoa_r+0x5c4>)
 800456c:	2200      	movs	r2, #0
 800456e:	4620      	mov	r0, r4
 8004570:	4629      	mov	r1, r5
 8004572:	f7fc fabb 	bl	8000aec <__aeabi_dcmplt>
 8004576:	2800      	cmp	r0, #0
 8004578:	f000 80ae 	beq.w	80046d8 <_dtoa_r+0x518>
 800457c:	9b07      	ldr	r3, [sp, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80aa 	beq.w	80046d8 <_dtoa_r+0x518>
 8004584:	9b00      	ldr	r3, [sp, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	dd37      	ble.n	80045fa <_dtoa_r+0x43a>
 800458a:	1e7b      	subs	r3, r7, #1
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	4620      	mov	r0, r4
 8004590:	4b7d      	ldr	r3, [pc, #500]	@ (8004788 <_dtoa_r+0x5c8>)
 8004592:	2200      	movs	r2, #0
 8004594:	4629      	mov	r1, r5
 8004596:	f7fc f837 	bl	8000608 <__aeabi_dmul>
 800459a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800459e:	9c00      	ldr	r4, [sp, #0]
 80045a0:	3601      	adds	r6, #1
 80045a2:	4630      	mov	r0, r6
 80045a4:	f7fb ffc6 	bl	8000534 <__aeabi_i2d>
 80045a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045ac:	f7fc f82c 	bl	8000608 <__aeabi_dmul>
 80045b0:	4b76      	ldr	r3, [pc, #472]	@ (800478c <_dtoa_r+0x5cc>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	f7fb fe72 	bl	800029c <__adddf3>
 80045b8:	4605      	mov	r5, r0
 80045ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80045be:	2c00      	cmp	r4, #0
 80045c0:	f040 808d 	bne.w	80046de <_dtoa_r+0x51e>
 80045c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045c8:	4b71      	ldr	r3, [pc, #452]	@ (8004790 <_dtoa_r+0x5d0>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	f7fb fe64 	bl	8000298 <__aeabi_dsub>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045d8:	462a      	mov	r2, r5
 80045da:	4633      	mov	r3, r6
 80045dc:	f7fc faa4 	bl	8000b28 <__aeabi_dcmpgt>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	f040 828b 	bne.w	8004afc <_dtoa_r+0x93c>
 80045e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045ea:	462a      	mov	r2, r5
 80045ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80045f0:	f7fc fa7c 	bl	8000aec <__aeabi_dcmplt>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	f040 8128 	bne.w	800484a <_dtoa_r+0x68a>
 80045fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80045fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004602:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004604:	2b00      	cmp	r3, #0
 8004606:	f2c0 815a 	blt.w	80048be <_dtoa_r+0x6fe>
 800460a:	2f0e      	cmp	r7, #14
 800460c:	f300 8157 	bgt.w	80048be <_dtoa_r+0x6fe>
 8004610:	4b5a      	ldr	r3, [pc, #360]	@ (800477c <_dtoa_r+0x5bc>)
 8004612:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004616:	ed93 7b00 	vldr	d7, [r3]
 800461a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800461c:	2b00      	cmp	r3, #0
 800461e:	ed8d 7b00 	vstr	d7, [sp]
 8004622:	da03      	bge.n	800462c <_dtoa_r+0x46c>
 8004624:	9b07      	ldr	r3, [sp, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f340 8101 	ble.w	800482e <_dtoa_r+0x66e>
 800462c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004630:	4656      	mov	r6, sl
 8004632:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004636:	4620      	mov	r0, r4
 8004638:	4629      	mov	r1, r5
 800463a:	f7fc f90f 	bl	800085c <__aeabi_ddiv>
 800463e:	f7fc fa93 	bl	8000b68 <__aeabi_d2iz>
 8004642:	4680      	mov	r8, r0
 8004644:	f7fb ff76 	bl	8000534 <__aeabi_i2d>
 8004648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800464c:	f7fb ffdc 	bl	8000608 <__aeabi_dmul>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4620      	mov	r0, r4
 8004656:	4629      	mov	r1, r5
 8004658:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800465c:	f7fb fe1c 	bl	8000298 <__aeabi_dsub>
 8004660:	f806 4b01 	strb.w	r4, [r6], #1
 8004664:	9d07      	ldr	r5, [sp, #28]
 8004666:	eba6 040a 	sub.w	r4, r6, sl
 800466a:	42a5      	cmp	r5, r4
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	f040 8117 	bne.w	80048a2 <_dtoa_r+0x6e2>
 8004674:	f7fb fe12 	bl	800029c <__adddf3>
 8004678:	e9dd 2300 	ldrd	r2, r3, [sp]
 800467c:	4604      	mov	r4, r0
 800467e:	460d      	mov	r5, r1
 8004680:	f7fc fa52 	bl	8000b28 <__aeabi_dcmpgt>
 8004684:	2800      	cmp	r0, #0
 8004686:	f040 80f9 	bne.w	800487c <_dtoa_r+0x6bc>
 800468a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800468e:	4620      	mov	r0, r4
 8004690:	4629      	mov	r1, r5
 8004692:	f7fc fa21 	bl	8000ad8 <__aeabi_dcmpeq>
 8004696:	b118      	cbz	r0, 80046a0 <_dtoa_r+0x4e0>
 8004698:	f018 0f01 	tst.w	r8, #1
 800469c:	f040 80ee 	bne.w	800487c <_dtoa_r+0x6bc>
 80046a0:	4649      	mov	r1, r9
 80046a2:	4658      	mov	r0, fp
 80046a4:	f000 fc90 	bl	8004fc8 <_Bfree>
 80046a8:	2300      	movs	r3, #0
 80046aa:	7033      	strb	r3, [r6, #0]
 80046ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80046ae:	3701      	adds	r7, #1
 80046b0:	601f      	str	r7, [r3, #0]
 80046b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 831d 	beq.w	8004cf4 <_dtoa_r+0xb34>
 80046ba:	601e      	str	r6, [r3, #0]
 80046bc:	e31a      	b.n	8004cf4 <_dtoa_r+0xb34>
 80046be:	07e2      	lsls	r2, r4, #31
 80046c0:	d505      	bpl.n	80046ce <_dtoa_r+0x50e>
 80046c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046c6:	f7fb ff9f 	bl	8000608 <__aeabi_dmul>
 80046ca:	3601      	adds	r6, #1
 80046cc:	2301      	movs	r3, #1
 80046ce:	1064      	asrs	r4, r4, #1
 80046d0:	3508      	adds	r5, #8
 80046d2:	e73f      	b.n	8004554 <_dtoa_r+0x394>
 80046d4:	2602      	movs	r6, #2
 80046d6:	e742      	b.n	800455e <_dtoa_r+0x39e>
 80046d8:	9c07      	ldr	r4, [sp, #28]
 80046da:	9704      	str	r7, [sp, #16]
 80046dc:	e761      	b.n	80045a2 <_dtoa_r+0x3e2>
 80046de:	4b27      	ldr	r3, [pc, #156]	@ (800477c <_dtoa_r+0x5bc>)
 80046e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80046e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80046e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80046ea:	4454      	add	r4, sl
 80046ec:	2900      	cmp	r1, #0
 80046ee:	d053      	beq.n	8004798 <_dtoa_r+0x5d8>
 80046f0:	4928      	ldr	r1, [pc, #160]	@ (8004794 <_dtoa_r+0x5d4>)
 80046f2:	2000      	movs	r0, #0
 80046f4:	f7fc f8b2 	bl	800085c <__aeabi_ddiv>
 80046f8:	4633      	mov	r3, r6
 80046fa:	462a      	mov	r2, r5
 80046fc:	f7fb fdcc 	bl	8000298 <__aeabi_dsub>
 8004700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004704:	4656      	mov	r6, sl
 8004706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800470a:	f7fc fa2d 	bl	8000b68 <__aeabi_d2iz>
 800470e:	4605      	mov	r5, r0
 8004710:	f7fb ff10 	bl	8000534 <__aeabi_i2d>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800471c:	f7fb fdbc 	bl	8000298 <__aeabi_dsub>
 8004720:	3530      	adds	r5, #48	@ 0x30
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800472a:	f806 5b01 	strb.w	r5, [r6], #1
 800472e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004732:	f7fc f9db 	bl	8000aec <__aeabi_dcmplt>
 8004736:	2800      	cmp	r0, #0
 8004738:	d171      	bne.n	800481e <_dtoa_r+0x65e>
 800473a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800473e:	4911      	ldr	r1, [pc, #68]	@ (8004784 <_dtoa_r+0x5c4>)
 8004740:	2000      	movs	r0, #0
 8004742:	f7fb fda9 	bl	8000298 <__aeabi_dsub>
 8004746:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800474a:	f7fc f9cf 	bl	8000aec <__aeabi_dcmplt>
 800474e:	2800      	cmp	r0, #0
 8004750:	f040 8095 	bne.w	800487e <_dtoa_r+0x6be>
 8004754:	42a6      	cmp	r6, r4
 8004756:	f43f af50 	beq.w	80045fa <_dtoa_r+0x43a>
 800475a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800475e:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <_dtoa_r+0x5c8>)
 8004760:	2200      	movs	r2, #0
 8004762:	f7fb ff51 	bl	8000608 <__aeabi_dmul>
 8004766:	4b08      	ldr	r3, [pc, #32]	@ (8004788 <_dtoa_r+0x5c8>)
 8004768:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800476c:	2200      	movs	r2, #0
 800476e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004772:	f7fb ff49 	bl	8000608 <__aeabi_dmul>
 8004776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800477a:	e7c4      	b.n	8004706 <_dtoa_r+0x546>
 800477c:	08005f40 	.word	0x08005f40
 8004780:	08005f18 	.word	0x08005f18
 8004784:	3ff00000 	.word	0x3ff00000
 8004788:	40240000 	.word	0x40240000
 800478c:	401c0000 	.word	0x401c0000
 8004790:	40140000 	.word	0x40140000
 8004794:	3fe00000 	.word	0x3fe00000
 8004798:	4631      	mov	r1, r6
 800479a:	4628      	mov	r0, r5
 800479c:	f7fb ff34 	bl	8000608 <__aeabi_dmul>
 80047a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80047a6:	4656      	mov	r6, sl
 80047a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ac:	f7fc f9dc 	bl	8000b68 <__aeabi_d2iz>
 80047b0:	4605      	mov	r5, r0
 80047b2:	f7fb febf 	bl	8000534 <__aeabi_i2d>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047be:	f7fb fd6b 	bl	8000298 <__aeabi_dsub>
 80047c2:	3530      	adds	r5, #48	@ 0x30
 80047c4:	f806 5b01 	strb.w	r5, [r6], #1
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	42a6      	cmp	r6, r4
 80047ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	d124      	bne.n	8004822 <_dtoa_r+0x662>
 80047d8:	4bac      	ldr	r3, [pc, #688]	@ (8004a8c <_dtoa_r+0x8cc>)
 80047da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80047de:	f7fb fd5d 	bl	800029c <__adddf3>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ea:	f7fc f99d 	bl	8000b28 <__aeabi_dcmpgt>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d145      	bne.n	800487e <_dtoa_r+0x6be>
 80047f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047f6:	49a5      	ldr	r1, [pc, #660]	@ (8004a8c <_dtoa_r+0x8cc>)
 80047f8:	2000      	movs	r0, #0
 80047fa:	f7fb fd4d 	bl	8000298 <__aeabi_dsub>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004806:	f7fc f971 	bl	8000aec <__aeabi_dcmplt>
 800480a:	2800      	cmp	r0, #0
 800480c:	f43f aef5 	beq.w	80045fa <_dtoa_r+0x43a>
 8004810:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004812:	1e73      	subs	r3, r6, #1
 8004814:	9315      	str	r3, [sp, #84]	@ 0x54
 8004816:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800481a:	2b30      	cmp	r3, #48	@ 0x30
 800481c:	d0f8      	beq.n	8004810 <_dtoa_r+0x650>
 800481e:	9f04      	ldr	r7, [sp, #16]
 8004820:	e73e      	b.n	80046a0 <_dtoa_r+0x4e0>
 8004822:	4b9b      	ldr	r3, [pc, #620]	@ (8004a90 <_dtoa_r+0x8d0>)
 8004824:	f7fb fef0 	bl	8000608 <__aeabi_dmul>
 8004828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800482c:	e7bc      	b.n	80047a8 <_dtoa_r+0x5e8>
 800482e:	d10c      	bne.n	800484a <_dtoa_r+0x68a>
 8004830:	4b98      	ldr	r3, [pc, #608]	@ (8004a94 <_dtoa_r+0x8d4>)
 8004832:	2200      	movs	r2, #0
 8004834:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004838:	f7fb fee6 	bl	8000608 <__aeabi_dmul>
 800483c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004840:	f7fc f968 	bl	8000b14 <__aeabi_dcmpge>
 8004844:	2800      	cmp	r0, #0
 8004846:	f000 8157 	beq.w	8004af8 <_dtoa_r+0x938>
 800484a:	2400      	movs	r4, #0
 800484c:	4625      	mov	r5, r4
 800484e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004850:	43db      	mvns	r3, r3
 8004852:	9304      	str	r3, [sp, #16]
 8004854:	4656      	mov	r6, sl
 8004856:	2700      	movs	r7, #0
 8004858:	4621      	mov	r1, r4
 800485a:	4658      	mov	r0, fp
 800485c:	f000 fbb4 	bl	8004fc8 <_Bfree>
 8004860:	2d00      	cmp	r5, #0
 8004862:	d0dc      	beq.n	800481e <_dtoa_r+0x65e>
 8004864:	b12f      	cbz	r7, 8004872 <_dtoa_r+0x6b2>
 8004866:	42af      	cmp	r7, r5
 8004868:	d003      	beq.n	8004872 <_dtoa_r+0x6b2>
 800486a:	4639      	mov	r1, r7
 800486c:	4658      	mov	r0, fp
 800486e:	f000 fbab 	bl	8004fc8 <_Bfree>
 8004872:	4629      	mov	r1, r5
 8004874:	4658      	mov	r0, fp
 8004876:	f000 fba7 	bl	8004fc8 <_Bfree>
 800487a:	e7d0      	b.n	800481e <_dtoa_r+0x65e>
 800487c:	9704      	str	r7, [sp, #16]
 800487e:	4633      	mov	r3, r6
 8004880:	461e      	mov	r6, r3
 8004882:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004886:	2a39      	cmp	r2, #57	@ 0x39
 8004888:	d107      	bne.n	800489a <_dtoa_r+0x6da>
 800488a:	459a      	cmp	sl, r3
 800488c:	d1f8      	bne.n	8004880 <_dtoa_r+0x6c0>
 800488e:	9a04      	ldr	r2, [sp, #16]
 8004890:	3201      	adds	r2, #1
 8004892:	9204      	str	r2, [sp, #16]
 8004894:	2230      	movs	r2, #48	@ 0x30
 8004896:	f88a 2000 	strb.w	r2, [sl]
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	3201      	adds	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e7bd      	b.n	800481e <_dtoa_r+0x65e>
 80048a2:	4b7b      	ldr	r3, [pc, #492]	@ (8004a90 <_dtoa_r+0x8d0>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	f7fb feaf 	bl	8000608 <__aeabi_dmul>
 80048aa:	2200      	movs	r2, #0
 80048ac:	2300      	movs	r3, #0
 80048ae:	4604      	mov	r4, r0
 80048b0:	460d      	mov	r5, r1
 80048b2:	f7fc f911 	bl	8000ad8 <__aeabi_dcmpeq>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	f43f aebb 	beq.w	8004632 <_dtoa_r+0x472>
 80048bc:	e6f0      	b.n	80046a0 <_dtoa_r+0x4e0>
 80048be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80048c0:	2a00      	cmp	r2, #0
 80048c2:	f000 80db 	beq.w	8004a7c <_dtoa_r+0x8bc>
 80048c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048c8:	2a01      	cmp	r2, #1
 80048ca:	f300 80bf 	bgt.w	8004a4c <_dtoa_r+0x88c>
 80048ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80048d0:	2a00      	cmp	r2, #0
 80048d2:	f000 80b7 	beq.w	8004a44 <_dtoa_r+0x884>
 80048d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80048da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80048dc:	4646      	mov	r6, r8
 80048de:	9a08      	ldr	r2, [sp, #32]
 80048e0:	2101      	movs	r1, #1
 80048e2:	441a      	add	r2, r3
 80048e4:	4658      	mov	r0, fp
 80048e6:	4498      	add	r8, r3
 80048e8:	9208      	str	r2, [sp, #32]
 80048ea:	f000 fc21 	bl	8005130 <__i2b>
 80048ee:	4605      	mov	r5, r0
 80048f0:	b15e      	cbz	r6, 800490a <_dtoa_r+0x74a>
 80048f2:	9b08      	ldr	r3, [sp, #32]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	dd08      	ble.n	800490a <_dtoa_r+0x74a>
 80048f8:	42b3      	cmp	r3, r6
 80048fa:	9a08      	ldr	r2, [sp, #32]
 80048fc:	bfa8      	it	ge
 80048fe:	4633      	movge	r3, r6
 8004900:	eba8 0803 	sub.w	r8, r8, r3
 8004904:	1af6      	subs	r6, r6, r3
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	9308      	str	r3, [sp, #32]
 800490a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800490c:	b1f3      	cbz	r3, 800494c <_dtoa_r+0x78c>
 800490e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 80b7 	beq.w	8004a84 <_dtoa_r+0x8c4>
 8004916:	b18c      	cbz	r4, 800493c <_dtoa_r+0x77c>
 8004918:	4629      	mov	r1, r5
 800491a:	4622      	mov	r2, r4
 800491c:	4658      	mov	r0, fp
 800491e:	f000 fcc7 	bl	80052b0 <__pow5mult>
 8004922:	464a      	mov	r2, r9
 8004924:	4601      	mov	r1, r0
 8004926:	4605      	mov	r5, r0
 8004928:	4658      	mov	r0, fp
 800492a:	f000 fc17 	bl	800515c <__multiply>
 800492e:	4649      	mov	r1, r9
 8004930:	9004      	str	r0, [sp, #16]
 8004932:	4658      	mov	r0, fp
 8004934:	f000 fb48 	bl	8004fc8 <_Bfree>
 8004938:	9b04      	ldr	r3, [sp, #16]
 800493a:	4699      	mov	r9, r3
 800493c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800493e:	1b1a      	subs	r2, r3, r4
 8004940:	d004      	beq.n	800494c <_dtoa_r+0x78c>
 8004942:	4649      	mov	r1, r9
 8004944:	4658      	mov	r0, fp
 8004946:	f000 fcb3 	bl	80052b0 <__pow5mult>
 800494a:	4681      	mov	r9, r0
 800494c:	2101      	movs	r1, #1
 800494e:	4658      	mov	r0, fp
 8004950:	f000 fbee 	bl	8005130 <__i2b>
 8004954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004956:	4604      	mov	r4, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 81cf 	beq.w	8004cfc <_dtoa_r+0xb3c>
 800495e:	461a      	mov	r2, r3
 8004960:	4601      	mov	r1, r0
 8004962:	4658      	mov	r0, fp
 8004964:	f000 fca4 	bl	80052b0 <__pow5mult>
 8004968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800496a:	2b01      	cmp	r3, #1
 800496c:	4604      	mov	r4, r0
 800496e:	f300 8095 	bgt.w	8004a9c <_dtoa_r+0x8dc>
 8004972:	9b02      	ldr	r3, [sp, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f040 8087 	bne.w	8004a88 <_dtoa_r+0x8c8>
 800497a:	9b03      	ldr	r3, [sp, #12]
 800497c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004980:	2b00      	cmp	r3, #0
 8004982:	f040 8089 	bne.w	8004a98 <_dtoa_r+0x8d8>
 8004986:	9b03      	ldr	r3, [sp, #12]
 8004988:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800498c:	0d1b      	lsrs	r3, r3, #20
 800498e:	051b      	lsls	r3, r3, #20
 8004990:	b12b      	cbz	r3, 800499e <_dtoa_r+0x7de>
 8004992:	9b08      	ldr	r3, [sp, #32]
 8004994:	3301      	adds	r3, #1
 8004996:	9308      	str	r3, [sp, #32]
 8004998:	f108 0801 	add.w	r8, r8, #1
 800499c:	2301      	movs	r3, #1
 800499e:	930a      	str	r3, [sp, #40]	@ 0x28
 80049a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 81b0 	beq.w	8004d08 <_dtoa_r+0xb48>
 80049a8:	6923      	ldr	r3, [r4, #16]
 80049aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80049ae:	6918      	ldr	r0, [r3, #16]
 80049b0:	f000 fb72 	bl	8005098 <__hi0bits>
 80049b4:	f1c0 0020 	rsb	r0, r0, #32
 80049b8:	9b08      	ldr	r3, [sp, #32]
 80049ba:	4418      	add	r0, r3
 80049bc:	f010 001f 	ands.w	r0, r0, #31
 80049c0:	d077      	beq.n	8004ab2 <_dtoa_r+0x8f2>
 80049c2:	f1c0 0320 	rsb	r3, r0, #32
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	dd6b      	ble.n	8004aa2 <_dtoa_r+0x8e2>
 80049ca:	9b08      	ldr	r3, [sp, #32]
 80049cc:	f1c0 001c 	rsb	r0, r0, #28
 80049d0:	4403      	add	r3, r0
 80049d2:	4480      	add	r8, r0
 80049d4:	4406      	add	r6, r0
 80049d6:	9308      	str	r3, [sp, #32]
 80049d8:	f1b8 0f00 	cmp.w	r8, #0
 80049dc:	dd05      	ble.n	80049ea <_dtoa_r+0x82a>
 80049de:	4649      	mov	r1, r9
 80049e0:	4642      	mov	r2, r8
 80049e2:	4658      	mov	r0, fp
 80049e4:	f000 fcbe 	bl	8005364 <__lshift>
 80049e8:	4681      	mov	r9, r0
 80049ea:	9b08      	ldr	r3, [sp, #32]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	dd05      	ble.n	80049fc <_dtoa_r+0x83c>
 80049f0:	4621      	mov	r1, r4
 80049f2:	461a      	mov	r2, r3
 80049f4:	4658      	mov	r0, fp
 80049f6:	f000 fcb5 	bl	8005364 <__lshift>
 80049fa:	4604      	mov	r4, r0
 80049fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d059      	beq.n	8004ab6 <_dtoa_r+0x8f6>
 8004a02:	4621      	mov	r1, r4
 8004a04:	4648      	mov	r0, r9
 8004a06:	f000 fd19 	bl	800543c <__mcmp>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	da53      	bge.n	8004ab6 <_dtoa_r+0x8f6>
 8004a0e:	1e7b      	subs	r3, r7, #1
 8004a10:	9304      	str	r3, [sp, #16]
 8004a12:	4649      	mov	r1, r9
 8004a14:	2300      	movs	r3, #0
 8004a16:	220a      	movs	r2, #10
 8004a18:	4658      	mov	r0, fp
 8004a1a:	f000 faf7 	bl	800500c <__multadd>
 8004a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a20:	4681      	mov	r9, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 8172 	beq.w	8004d0c <_dtoa_r+0xb4c>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	220a      	movs	r2, #10
 8004a2e:	4658      	mov	r0, fp
 8004a30:	f000 faec 	bl	800500c <__multadd>
 8004a34:	9b00      	ldr	r3, [sp, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	4605      	mov	r5, r0
 8004a3a:	dc67      	bgt.n	8004b0c <_dtoa_r+0x94c>
 8004a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	dc41      	bgt.n	8004ac6 <_dtoa_r+0x906>
 8004a42:	e063      	b.n	8004b0c <_dtoa_r+0x94c>
 8004a44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004a46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004a4a:	e746      	b.n	80048da <_dtoa_r+0x71a>
 8004a4c:	9b07      	ldr	r3, [sp, #28]
 8004a4e:	1e5c      	subs	r4, r3, #1
 8004a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a52:	42a3      	cmp	r3, r4
 8004a54:	bfbf      	itttt	lt
 8004a56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004a58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004a5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004a5c:	1ae3      	sublt	r3, r4, r3
 8004a5e:	bfb4      	ite	lt
 8004a60:	18d2      	addlt	r2, r2, r3
 8004a62:	1b1c      	subge	r4, r3, r4
 8004a64:	9b07      	ldr	r3, [sp, #28]
 8004a66:	bfbc      	itt	lt
 8004a68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004a6a:	2400      	movlt	r4, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bfb5      	itete	lt
 8004a70:	eba8 0603 	sublt.w	r6, r8, r3
 8004a74:	9b07      	ldrge	r3, [sp, #28]
 8004a76:	2300      	movlt	r3, #0
 8004a78:	4646      	movge	r6, r8
 8004a7a:	e730      	b.n	80048de <_dtoa_r+0x71e>
 8004a7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004a7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004a80:	4646      	mov	r6, r8
 8004a82:	e735      	b.n	80048f0 <_dtoa_r+0x730>
 8004a84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a86:	e75c      	b.n	8004942 <_dtoa_r+0x782>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e788      	b.n	800499e <_dtoa_r+0x7de>
 8004a8c:	3fe00000 	.word	0x3fe00000
 8004a90:	40240000 	.word	0x40240000
 8004a94:	40140000 	.word	0x40140000
 8004a98:	9b02      	ldr	r3, [sp, #8]
 8004a9a:	e780      	b.n	800499e <_dtoa_r+0x7de>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004aa0:	e782      	b.n	80049a8 <_dtoa_r+0x7e8>
 8004aa2:	d099      	beq.n	80049d8 <_dtoa_r+0x818>
 8004aa4:	9a08      	ldr	r2, [sp, #32]
 8004aa6:	331c      	adds	r3, #28
 8004aa8:	441a      	add	r2, r3
 8004aaa:	4498      	add	r8, r3
 8004aac:	441e      	add	r6, r3
 8004aae:	9208      	str	r2, [sp, #32]
 8004ab0:	e792      	b.n	80049d8 <_dtoa_r+0x818>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	e7f6      	b.n	8004aa4 <_dtoa_r+0x8e4>
 8004ab6:	9b07      	ldr	r3, [sp, #28]
 8004ab8:	9704      	str	r7, [sp, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	dc20      	bgt.n	8004b00 <_dtoa_r+0x940>
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	dd1e      	ble.n	8004b04 <_dtoa_r+0x944>
 8004ac6:	9b00      	ldr	r3, [sp, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f47f aec0 	bne.w	800484e <_dtoa_r+0x68e>
 8004ace:	4621      	mov	r1, r4
 8004ad0:	2205      	movs	r2, #5
 8004ad2:	4658      	mov	r0, fp
 8004ad4:	f000 fa9a 	bl	800500c <__multadd>
 8004ad8:	4601      	mov	r1, r0
 8004ada:	4604      	mov	r4, r0
 8004adc:	4648      	mov	r0, r9
 8004ade:	f000 fcad 	bl	800543c <__mcmp>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	f77f aeb3 	ble.w	800484e <_dtoa_r+0x68e>
 8004ae8:	4656      	mov	r6, sl
 8004aea:	2331      	movs	r3, #49	@ 0x31
 8004aec:	f806 3b01 	strb.w	r3, [r6], #1
 8004af0:	9b04      	ldr	r3, [sp, #16]
 8004af2:	3301      	adds	r3, #1
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	e6ae      	b.n	8004856 <_dtoa_r+0x696>
 8004af8:	9c07      	ldr	r4, [sp, #28]
 8004afa:	9704      	str	r7, [sp, #16]
 8004afc:	4625      	mov	r5, r4
 8004afe:	e7f3      	b.n	8004ae8 <_dtoa_r+0x928>
 8004b00:	9b07      	ldr	r3, [sp, #28]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8104 	beq.w	8004d14 <_dtoa_r+0xb54>
 8004b0c:	2e00      	cmp	r6, #0
 8004b0e:	dd05      	ble.n	8004b1c <_dtoa_r+0x95c>
 8004b10:	4629      	mov	r1, r5
 8004b12:	4632      	mov	r2, r6
 8004b14:	4658      	mov	r0, fp
 8004b16:	f000 fc25 	bl	8005364 <__lshift>
 8004b1a:	4605      	mov	r5, r0
 8004b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d05a      	beq.n	8004bd8 <_dtoa_r+0xa18>
 8004b22:	6869      	ldr	r1, [r5, #4]
 8004b24:	4658      	mov	r0, fp
 8004b26:	f000 fa0f 	bl	8004f48 <_Balloc>
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	b928      	cbnz	r0, 8004b3a <_dtoa_r+0x97a>
 8004b2e:	4b84      	ldr	r3, [pc, #528]	@ (8004d40 <_dtoa_r+0xb80>)
 8004b30:	4602      	mov	r2, r0
 8004b32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004b36:	f7ff bb5a 	b.w	80041ee <_dtoa_r+0x2e>
 8004b3a:	692a      	ldr	r2, [r5, #16]
 8004b3c:	3202      	adds	r2, #2
 8004b3e:	0092      	lsls	r2, r2, #2
 8004b40:	f105 010c 	add.w	r1, r5, #12
 8004b44:	300c      	adds	r0, #12
 8004b46:	f7ff faa4 	bl	8004092 <memcpy>
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4658      	mov	r0, fp
 8004b50:	f000 fc08 	bl	8005364 <__lshift>
 8004b54:	f10a 0301 	add.w	r3, sl, #1
 8004b58:	9307      	str	r3, [sp, #28]
 8004b5a:	9b00      	ldr	r3, [sp, #0]
 8004b5c:	4453      	add	r3, sl
 8004b5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b60:	9b02      	ldr	r3, [sp, #8]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	462f      	mov	r7, r5
 8004b68:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	9b07      	ldr	r3, [sp, #28]
 8004b6e:	4621      	mov	r1, r4
 8004b70:	3b01      	subs	r3, #1
 8004b72:	4648      	mov	r0, r9
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	f7ff fa9a 	bl	80040ae <quorem>
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	9002      	str	r0, [sp, #8]
 8004b7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004b82:	4648      	mov	r0, r9
 8004b84:	f000 fc5a 	bl	800543c <__mcmp>
 8004b88:	462a      	mov	r2, r5
 8004b8a:	9008      	str	r0, [sp, #32]
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	4658      	mov	r0, fp
 8004b90:	f000 fc70 	bl	8005474 <__mdiff>
 8004b94:	68c2      	ldr	r2, [r0, #12]
 8004b96:	4606      	mov	r6, r0
 8004b98:	bb02      	cbnz	r2, 8004bdc <_dtoa_r+0xa1c>
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	4648      	mov	r0, r9
 8004b9e:	f000 fc4d 	bl	800543c <__mcmp>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	4658      	mov	r0, fp
 8004ba8:	920e      	str	r2, [sp, #56]	@ 0x38
 8004baa:	f000 fa0d 	bl	8004fc8 <_Bfree>
 8004bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004bb2:	9e07      	ldr	r6, [sp, #28]
 8004bb4:	ea43 0102 	orr.w	r1, r3, r2
 8004bb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bba:	4319      	orrs	r1, r3
 8004bbc:	d110      	bne.n	8004be0 <_dtoa_r+0xa20>
 8004bbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004bc2:	d029      	beq.n	8004c18 <_dtoa_r+0xa58>
 8004bc4:	9b08      	ldr	r3, [sp, #32]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	dd02      	ble.n	8004bd0 <_dtoa_r+0xa10>
 8004bca:	9b02      	ldr	r3, [sp, #8]
 8004bcc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004bd0:	9b00      	ldr	r3, [sp, #0]
 8004bd2:	f883 8000 	strb.w	r8, [r3]
 8004bd6:	e63f      	b.n	8004858 <_dtoa_r+0x698>
 8004bd8:	4628      	mov	r0, r5
 8004bda:	e7bb      	b.n	8004b54 <_dtoa_r+0x994>
 8004bdc:	2201      	movs	r2, #1
 8004bde:	e7e1      	b.n	8004ba4 <_dtoa_r+0x9e4>
 8004be0:	9b08      	ldr	r3, [sp, #32]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	db04      	blt.n	8004bf0 <_dtoa_r+0xa30>
 8004be6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004be8:	430b      	orrs	r3, r1
 8004bea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004bec:	430b      	orrs	r3, r1
 8004bee:	d120      	bne.n	8004c32 <_dtoa_r+0xa72>
 8004bf0:	2a00      	cmp	r2, #0
 8004bf2:	dded      	ble.n	8004bd0 <_dtoa_r+0xa10>
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	4658      	mov	r0, fp
 8004bfa:	f000 fbb3 	bl	8005364 <__lshift>
 8004bfe:	4621      	mov	r1, r4
 8004c00:	4681      	mov	r9, r0
 8004c02:	f000 fc1b 	bl	800543c <__mcmp>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	dc03      	bgt.n	8004c12 <_dtoa_r+0xa52>
 8004c0a:	d1e1      	bne.n	8004bd0 <_dtoa_r+0xa10>
 8004c0c:	f018 0f01 	tst.w	r8, #1
 8004c10:	d0de      	beq.n	8004bd0 <_dtoa_r+0xa10>
 8004c12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c16:	d1d8      	bne.n	8004bca <_dtoa_r+0xa0a>
 8004c18:	9a00      	ldr	r2, [sp, #0]
 8004c1a:	2339      	movs	r3, #57	@ 0x39
 8004c1c:	7013      	strb	r3, [r2, #0]
 8004c1e:	4633      	mov	r3, r6
 8004c20:	461e      	mov	r6, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004c28:	2a39      	cmp	r2, #57	@ 0x39
 8004c2a:	d052      	beq.n	8004cd2 <_dtoa_r+0xb12>
 8004c2c:	3201      	adds	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e612      	b.n	8004858 <_dtoa_r+0x698>
 8004c32:	2a00      	cmp	r2, #0
 8004c34:	dd07      	ble.n	8004c46 <_dtoa_r+0xa86>
 8004c36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c3a:	d0ed      	beq.n	8004c18 <_dtoa_r+0xa58>
 8004c3c:	9a00      	ldr	r2, [sp, #0]
 8004c3e:	f108 0301 	add.w	r3, r8, #1
 8004c42:	7013      	strb	r3, [r2, #0]
 8004c44:	e608      	b.n	8004858 <_dtoa_r+0x698>
 8004c46:	9b07      	ldr	r3, [sp, #28]
 8004c48:	9a07      	ldr	r2, [sp, #28]
 8004c4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d028      	beq.n	8004ca6 <_dtoa_r+0xae6>
 8004c54:	4649      	mov	r1, r9
 8004c56:	2300      	movs	r3, #0
 8004c58:	220a      	movs	r2, #10
 8004c5a:	4658      	mov	r0, fp
 8004c5c:	f000 f9d6 	bl	800500c <__multadd>
 8004c60:	42af      	cmp	r7, r5
 8004c62:	4681      	mov	r9, r0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	f04f 020a 	mov.w	r2, #10
 8004c6c:	4639      	mov	r1, r7
 8004c6e:	4658      	mov	r0, fp
 8004c70:	d107      	bne.n	8004c82 <_dtoa_r+0xac2>
 8004c72:	f000 f9cb 	bl	800500c <__multadd>
 8004c76:	4607      	mov	r7, r0
 8004c78:	4605      	mov	r5, r0
 8004c7a:	9b07      	ldr	r3, [sp, #28]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	9307      	str	r3, [sp, #28]
 8004c80:	e774      	b.n	8004b6c <_dtoa_r+0x9ac>
 8004c82:	f000 f9c3 	bl	800500c <__multadd>
 8004c86:	4629      	mov	r1, r5
 8004c88:	4607      	mov	r7, r0
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	220a      	movs	r2, #10
 8004c8e:	4658      	mov	r0, fp
 8004c90:	f000 f9bc 	bl	800500c <__multadd>
 8004c94:	4605      	mov	r5, r0
 8004c96:	e7f0      	b.n	8004c7a <_dtoa_r+0xaba>
 8004c98:	9b00      	ldr	r3, [sp, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bfcc      	ite	gt
 8004c9e:	461e      	movgt	r6, r3
 8004ca0:	2601      	movle	r6, #1
 8004ca2:	4456      	add	r6, sl
 8004ca4:	2700      	movs	r7, #0
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	2201      	movs	r2, #1
 8004caa:	4658      	mov	r0, fp
 8004cac:	f000 fb5a 	bl	8005364 <__lshift>
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4681      	mov	r9, r0
 8004cb4:	f000 fbc2 	bl	800543c <__mcmp>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	dcb0      	bgt.n	8004c1e <_dtoa_r+0xa5e>
 8004cbc:	d102      	bne.n	8004cc4 <_dtoa_r+0xb04>
 8004cbe:	f018 0f01 	tst.w	r8, #1
 8004cc2:	d1ac      	bne.n	8004c1e <_dtoa_r+0xa5e>
 8004cc4:	4633      	mov	r3, r6
 8004cc6:	461e      	mov	r6, r3
 8004cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ccc:	2a30      	cmp	r2, #48	@ 0x30
 8004cce:	d0fa      	beq.n	8004cc6 <_dtoa_r+0xb06>
 8004cd0:	e5c2      	b.n	8004858 <_dtoa_r+0x698>
 8004cd2:	459a      	cmp	sl, r3
 8004cd4:	d1a4      	bne.n	8004c20 <_dtoa_r+0xa60>
 8004cd6:	9b04      	ldr	r3, [sp, #16]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	9304      	str	r3, [sp, #16]
 8004cdc:	2331      	movs	r3, #49	@ 0x31
 8004cde:	f88a 3000 	strb.w	r3, [sl]
 8004ce2:	e5b9      	b.n	8004858 <_dtoa_r+0x698>
 8004ce4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004ce6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004d44 <_dtoa_r+0xb84>
 8004cea:	b11b      	cbz	r3, 8004cf4 <_dtoa_r+0xb34>
 8004cec:	f10a 0308 	add.w	r3, sl, #8
 8004cf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	4650      	mov	r0, sl
 8004cf6:	b019      	add	sp, #100	@ 0x64
 8004cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	f77f ae37 	ble.w	8004972 <_dtoa_r+0x7b2>
 8004d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d06:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d08:	2001      	movs	r0, #1
 8004d0a:	e655      	b.n	80049b8 <_dtoa_r+0x7f8>
 8004d0c:	9b00      	ldr	r3, [sp, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f77f aed6 	ble.w	8004ac0 <_dtoa_r+0x900>
 8004d14:	4656      	mov	r6, sl
 8004d16:	4621      	mov	r1, r4
 8004d18:	4648      	mov	r0, r9
 8004d1a:	f7ff f9c8 	bl	80040ae <quorem>
 8004d1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004d22:	f806 8b01 	strb.w	r8, [r6], #1
 8004d26:	9b00      	ldr	r3, [sp, #0]
 8004d28:	eba6 020a 	sub.w	r2, r6, sl
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	ddb3      	ble.n	8004c98 <_dtoa_r+0xad8>
 8004d30:	4649      	mov	r1, r9
 8004d32:	2300      	movs	r3, #0
 8004d34:	220a      	movs	r2, #10
 8004d36:	4658      	mov	r0, fp
 8004d38:	f000 f968 	bl	800500c <__multadd>
 8004d3c:	4681      	mov	r9, r0
 8004d3e:	e7ea      	b.n	8004d16 <_dtoa_r+0xb56>
 8004d40:	08005ea0 	.word	0x08005ea0
 8004d44:	08005e24 	.word	0x08005e24

08004d48 <_free_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	d041      	beq.n	8004dd4 <_free_r+0x8c>
 8004d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d54:	1f0c      	subs	r4, r1, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bfb8      	it	lt
 8004d5a:	18e4      	addlt	r4, r4, r3
 8004d5c:	f000 f8e8 	bl	8004f30 <__malloc_lock>
 8004d60:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd8 <_free_r+0x90>)
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	b933      	cbnz	r3, 8004d74 <_free_r+0x2c>
 8004d66:	6063      	str	r3, [r4, #4]
 8004d68:	6014      	str	r4, [r2, #0]
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d70:	f000 b8e4 	b.w	8004f3c <__malloc_unlock>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d908      	bls.n	8004d8a <_free_r+0x42>
 8004d78:	6820      	ldr	r0, [r4, #0]
 8004d7a:	1821      	adds	r1, r4, r0
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	bf01      	itttt	eq
 8004d80:	6819      	ldreq	r1, [r3, #0]
 8004d82:	685b      	ldreq	r3, [r3, #4]
 8004d84:	1809      	addeq	r1, r1, r0
 8004d86:	6021      	streq	r1, [r4, #0]
 8004d88:	e7ed      	b.n	8004d66 <_free_r+0x1e>
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	b10b      	cbz	r3, 8004d94 <_free_r+0x4c>
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d9fa      	bls.n	8004d8a <_free_r+0x42>
 8004d94:	6811      	ldr	r1, [r2, #0]
 8004d96:	1850      	adds	r0, r2, r1
 8004d98:	42a0      	cmp	r0, r4
 8004d9a:	d10b      	bne.n	8004db4 <_free_r+0x6c>
 8004d9c:	6820      	ldr	r0, [r4, #0]
 8004d9e:	4401      	add	r1, r0
 8004da0:	1850      	adds	r0, r2, r1
 8004da2:	4283      	cmp	r3, r0
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	d1e0      	bne.n	8004d6a <_free_r+0x22>
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	6053      	str	r3, [r2, #4]
 8004dae:	4408      	add	r0, r1
 8004db0:	6010      	str	r0, [r2, #0]
 8004db2:	e7da      	b.n	8004d6a <_free_r+0x22>
 8004db4:	d902      	bls.n	8004dbc <_free_r+0x74>
 8004db6:	230c      	movs	r3, #12
 8004db8:	602b      	str	r3, [r5, #0]
 8004dba:	e7d6      	b.n	8004d6a <_free_r+0x22>
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	1821      	adds	r1, r4, r0
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	bf04      	itt	eq
 8004dc4:	6819      	ldreq	r1, [r3, #0]
 8004dc6:	685b      	ldreq	r3, [r3, #4]
 8004dc8:	6063      	str	r3, [r4, #4]
 8004dca:	bf04      	itt	eq
 8004dcc:	1809      	addeq	r1, r1, r0
 8004dce:	6021      	streq	r1, [r4, #0]
 8004dd0:	6054      	str	r4, [r2, #4]
 8004dd2:	e7ca      	b.n	8004d6a <_free_r+0x22>
 8004dd4:	bd38      	pop	{r3, r4, r5, pc}
 8004dd6:	bf00      	nop
 8004dd8:	2000052c 	.word	0x2000052c

08004ddc <malloc>:
 8004ddc:	4b02      	ldr	r3, [pc, #8]	@ (8004de8 <malloc+0xc>)
 8004dde:	4601      	mov	r1, r0
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	f000 b825 	b.w	8004e30 <_malloc_r>
 8004de6:	bf00      	nop
 8004de8:	20000010 	.word	0x20000010

08004dec <sbrk_aligned>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4e0f      	ldr	r6, [pc, #60]	@ (8004e2c <sbrk_aligned+0x40>)
 8004df0:	460c      	mov	r4, r1
 8004df2:	6831      	ldr	r1, [r6, #0]
 8004df4:	4605      	mov	r5, r0
 8004df6:	b911      	cbnz	r1, 8004dfe <sbrk_aligned+0x12>
 8004df8:	f000 fcd4 	bl	80057a4 <_sbrk_r>
 8004dfc:	6030      	str	r0, [r6, #0]
 8004dfe:	4621      	mov	r1, r4
 8004e00:	4628      	mov	r0, r5
 8004e02:	f000 fccf 	bl	80057a4 <_sbrk_r>
 8004e06:	1c43      	adds	r3, r0, #1
 8004e08:	d103      	bne.n	8004e12 <sbrk_aligned+0x26>
 8004e0a:	f04f 34ff 	mov.w	r4, #4294967295
 8004e0e:	4620      	mov	r0, r4
 8004e10:	bd70      	pop	{r4, r5, r6, pc}
 8004e12:	1cc4      	adds	r4, r0, #3
 8004e14:	f024 0403 	bic.w	r4, r4, #3
 8004e18:	42a0      	cmp	r0, r4
 8004e1a:	d0f8      	beq.n	8004e0e <sbrk_aligned+0x22>
 8004e1c:	1a21      	subs	r1, r4, r0
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 fcc0 	bl	80057a4 <_sbrk_r>
 8004e24:	3001      	adds	r0, #1
 8004e26:	d1f2      	bne.n	8004e0e <sbrk_aligned+0x22>
 8004e28:	e7ef      	b.n	8004e0a <sbrk_aligned+0x1e>
 8004e2a:	bf00      	nop
 8004e2c:	20000528 	.word	0x20000528

08004e30 <_malloc_r>:
 8004e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e34:	1ccd      	adds	r5, r1, #3
 8004e36:	f025 0503 	bic.w	r5, r5, #3
 8004e3a:	3508      	adds	r5, #8
 8004e3c:	2d0c      	cmp	r5, #12
 8004e3e:	bf38      	it	cc
 8004e40:	250c      	movcc	r5, #12
 8004e42:	2d00      	cmp	r5, #0
 8004e44:	4606      	mov	r6, r0
 8004e46:	db01      	blt.n	8004e4c <_malloc_r+0x1c>
 8004e48:	42a9      	cmp	r1, r5
 8004e4a:	d904      	bls.n	8004e56 <_malloc_r+0x26>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	6033      	str	r3, [r6, #0]
 8004e50:	2000      	movs	r0, #0
 8004e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f2c <_malloc_r+0xfc>
 8004e5a:	f000 f869 	bl	8004f30 <__malloc_lock>
 8004e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e62:	461c      	mov	r4, r3
 8004e64:	bb44      	cbnz	r4, 8004eb8 <_malloc_r+0x88>
 8004e66:	4629      	mov	r1, r5
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f7ff ffbf 	bl	8004dec <sbrk_aligned>
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	4604      	mov	r4, r0
 8004e72:	d158      	bne.n	8004f26 <_malloc_r+0xf6>
 8004e74:	f8d8 4000 	ldr.w	r4, [r8]
 8004e78:	4627      	mov	r7, r4
 8004e7a:	2f00      	cmp	r7, #0
 8004e7c:	d143      	bne.n	8004f06 <_malloc_r+0xd6>
 8004e7e:	2c00      	cmp	r4, #0
 8004e80:	d04b      	beq.n	8004f1a <_malloc_r+0xea>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	4639      	mov	r1, r7
 8004e86:	4630      	mov	r0, r6
 8004e88:	eb04 0903 	add.w	r9, r4, r3
 8004e8c:	f000 fc8a 	bl	80057a4 <_sbrk_r>
 8004e90:	4581      	cmp	r9, r0
 8004e92:	d142      	bne.n	8004f1a <_malloc_r+0xea>
 8004e94:	6821      	ldr	r1, [r4, #0]
 8004e96:	1a6d      	subs	r5, r5, r1
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f7ff ffa6 	bl	8004dec <sbrk_aligned>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d03a      	beq.n	8004f1a <_malloc_r+0xea>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	442b      	add	r3, r5
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	bb62      	cbnz	r2, 8004f0c <_malloc_r+0xdc>
 8004eb2:	f8c8 7000 	str.w	r7, [r8]
 8004eb6:	e00f      	b.n	8004ed8 <_malloc_r+0xa8>
 8004eb8:	6822      	ldr	r2, [r4, #0]
 8004eba:	1b52      	subs	r2, r2, r5
 8004ebc:	d420      	bmi.n	8004f00 <_malloc_r+0xd0>
 8004ebe:	2a0b      	cmp	r2, #11
 8004ec0:	d917      	bls.n	8004ef2 <_malloc_r+0xc2>
 8004ec2:	1961      	adds	r1, r4, r5
 8004ec4:	42a3      	cmp	r3, r4
 8004ec6:	6025      	str	r5, [r4, #0]
 8004ec8:	bf18      	it	ne
 8004eca:	6059      	strne	r1, [r3, #4]
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	bf08      	it	eq
 8004ed0:	f8c8 1000 	streq.w	r1, [r8]
 8004ed4:	5162      	str	r2, [r4, r5]
 8004ed6:	604b      	str	r3, [r1, #4]
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f000 f82f 	bl	8004f3c <__malloc_unlock>
 8004ede:	f104 000b 	add.w	r0, r4, #11
 8004ee2:	1d23      	adds	r3, r4, #4
 8004ee4:	f020 0007 	bic.w	r0, r0, #7
 8004ee8:	1ac2      	subs	r2, r0, r3
 8004eea:	bf1c      	itt	ne
 8004eec:	1a1b      	subne	r3, r3, r0
 8004eee:	50a3      	strne	r3, [r4, r2]
 8004ef0:	e7af      	b.n	8004e52 <_malloc_r+0x22>
 8004ef2:	6862      	ldr	r2, [r4, #4]
 8004ef4:	42a3      	cmp	r3, r4
 8004ef6:	bf0c      	ite	eq
 8004ef8:	f8c8 2000 	streq.w	r2, [r8]
 8004efc:	605a      	strne	r2, [r3, #4]
 8004efe:	e7eb      	b.n	8004ed8 <_malloc_r+0xa8>
 8004f00:	4623      	mov	r3, r4
 8004f02:	6864      	ldr	r4, [r4, #4]
 8004f04:	e7ae      	b.n	8004e64 <_malloc_r+0x34>
 8004f06:	463c      	mov	r4, r7
 8004f08:	687f      	ldr	r7, [r7, #4]
 8004f0a:	e7b6      	b.n	8004e7a <_malloc_r+0x4a>
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	42a3      	cmp	r3, r4
 8004f12:	d1fb      	bne.n	8004f0c <_malloc_r+0xdc>
 8004f14:	2300      	movs	r3, #0
 8004f16:	6053      	str	r3, [r2, #4]
 8004f18:	e7de      	b.n	8004ed8 <_malloc_r+0xa8>
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	6033      	str	r3, [r6, #0]
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f000 f80c 	bl	8004f3c <__malloc_unlock>
 8004f24:	e794      	b.n	8004e50 <_malloc_r+0x20>
 8004f26:	6005      	str	r5, [r0, #0]
 8004f28:	e7d6      	b.n	8004ed8 <_malloc_r+0xa8>
 8004f2a:	bf00      	nop
 8004f2c:	2000052c 	.word	0x2000052c

08004f30 <__malloc_lock>:
 8004f30:	4801      	ldr	r0, [pc, #4]	@ (8004f38 <__malloc_lock+0x8>)
 8004f32:	f7ff b8ac 	b.w	800408e <__retarget_lock_acquire_recursive>
 8004f36:	bf00      	nop
 8004f38:	20000524 	.word	0x20000524

08004f3c <__malloc_unlock>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	@ (8004f44 <__malloc_unlock+0x8>)
 8004f3e:	f7ff b8a7 	b.w	8004090 <__retarget_lock_release_recursive>
 8004f42:	bf00      	nop
 8004f44:	20000524 	.word	0x20000524

08004f48 <_Balloc>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	69c6      	ldr	r6, [r0, #28]
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	460d      	mov	r5, r1
 8004f50:	b976      	cbnz	r6, 8004f70 <_Balloc+0x28>
 8004f52:	2010      	movs	r0, #16
 8004f54:	f7ff ff42 	bl	8004ddc <malloc>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	61e0      	str	r0, [r4, #28]
 8004f5c:	b920      	cbnz	r0, 8004f68 <_Balloc+0x20>
 8004f5e:	4b18      	ldr	r3, [pc, #96]	@ (8004fc0 <_Balloc+0x78>)
 8004f60:	4818      	ldr	r0, [pc, #96]	@ (8004fc4 <_Balloc+0x7c>)
 8004f62:	216b      	movs	r1, #107	@ 0x6b
 8004f64:	f000 fc2e 	bl	80057c4 <__assert_func>
 8004f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f6c:	6006      	str	r6, [r0, #0]
 8004f6e:	60c6      	str	r6, [r0, #12]
 8004f70:	69e6      	ldr	r6, [r4, #28]
 8004f72:	68f3      	ldr	r3, [r6, #12]
 8004f74:	b183      	cbz	r3, 8004f98 <_Balloc+0x50>
 8004f76:	69e3      	ldr	r3, [r4, #28]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f7e:	b9b8      	cbnz	r0, 8004fb0 <_Balloc+0x68>
 8004f80:	2101      	movs	r1, #1
 8004f82:	fa01 f605 	lsl.w	r6, r1, r5
 8004f86:	1d72      	adds	r2, r6, #5
 8004f88:	0092      	lsls	r2, r2, #2
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f000 fc38 	bl	8005800 <_calloc_r>
 8004f90:	b160      	cbz	r0, 8004fac <_Balloc+0x64>
 8004f92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f96:	e00e      	b.n	8004fb6 <_Balloc+0x6e>
 8004f98:	2221      	movs	r2, #33	@ 0x21
 8004f9a:	2104      	movs	r1, #4
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f000 fc2f 	bl	8005800 <_calloc_r>
 8004fa2:	69e3      	ldr	r3, [r4, #28]
 8004fa4:	60f0      	str	r0, [r6, #12]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e4      	bne.n	8004f76 <_Balloc+0x2e>
 8004fac:	2000      	movs	r0, #0
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	6802      	ldr	r2, [r0, #0]
 8004fb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004fbc:	e7f7      	b.n	8004fae <_Balloc+0x66>
 8004fbe:	bf00      	nop
 8004fc0:	08005e31 	.word	0x08005e31
 8004fc4:	08005eb1 	.word	0x08005eb1

08004fc8 <_Bfree>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	69c6      	ldr	r6, [r0, #28]
 8004fcc:	4605      	mov	r5, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	b976      	cbnz	r6, 8004ff0 <_Bfree+0x28>
 8004fd2:	2010      	movs	r0, #16
 8004fd4:	f7ff ff02 	bl	8004ddc <malloc>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	61e8      	str	r0, [r5, #28]
 8004fdc:	b920      	cbnz	r0, 8004fe8 <_Bfree+0x20>
 8004fde:	4b09      	ldr	r3, [pc, #36]	@ (8005004 <_Bfree+0x3c>)
 8004fe0:	4809      	ldr	r0, [pc, #36]	@ (8005008 <_Bfree+0x40>)
 8004fe2:	218f      	movs	r1, #143	@ 0x8f
 8004fe4:	f000 fbee 	bl	80057c4 <__assert_func>
 8004fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fec:	6006      	str	r6, [r0, #0]
 8004fee:	60c6      	str	r6, [r0, #12]
 8004ff0:	b13c      	cbz	r4, 8005002 <_Bfree+0x3a>
 8004ff2:	69eb      	ldr	r3, [r5, #28]
 8004ff4:	6862      	ldr	r2, [r4, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ffc:	6021      	str	r1, [r4, #0]
 8004ffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	08005e31 	.word	0x08005e31
 8005008:	08005eb1 	.word	0x08005eb1

0800500c <__multadd>:
 800500c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005010:	690d      	ldr	r5, [r1, #16]
 8005012:	4607      	mov	r7, r0
 8005014:	460c      	mov	r4, r1
 8005016:	461e      	mov	r6, r3
 8005018:	f101 0c14 	add.w	ip, r1, #20
 800501c:	2000      	movs	r0, #0
 800501e:	f8dc 3000 	ldr.w	r3, [ip]
 8005022:	b299      	uxth	r1, r3
 8005024:	fb02 6101 	mla	r1, r2, r1, r6
 8005028:	0c1e      	lsrs	r6, r3, #16
 800502a:	0c0b      	lsrs	r3, r1, #16
 800502c:	fb02 3306 	mla	r3, r2, r6, r3
 8005030:	b289      	uxth	r1, r1
 8005032:	3001      	adds	r0, #1
 8005034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005038:	4285      	cmp	r5, r0
 800503a:	f84c 1b04 	str.w	r1, [ip], #4
 800503e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005042:	dcec      	bgt.n	800501e <__multadd+0x12>
 8005044:	b30e      	cbz	r6, 800508a <__multadd+0x7e>
 8005046:	68a3      	ldr	r3, [r4, #8]
 8005048:	42ab      	cmp	r3, r5
 800504a:	dc19      	bgt.n	8005080 <__multadd+0x74>
 800504c:	6861      	ldr	r1, [r4, #4]
 800504e:	4638      	mov	r0, r7
 8005050:	3101      	adds	r1, #1
 8005052:	f7ff ff79 	bl	8004f48 <_Balloc>
 8005056:	4680      	mov	r8, r0
 8005058:	b928      	cbnz	r0, 8005066 <__multadd+0x5a>
 800505a:	4602      	mov	r2, r0
 800505c:	4b0c      	ldr	r3, [pc, #48]	@ (8005090 <__multadd+0x84>)
 800505e:	480d      	ldr	r0, [pc, #52]	@ (8005094 <__multadd+0x88>)
 8005060:	21ba      	movs	r1, #186	@ 0xba
 8005062:	f000 fbaf 	bl	80057c4 <__assert_func>
 8005066:	6922      	ldr	r2, [r4, #16]
 8005068:	3202      	adds	r2, #2
 800506a:	f104 010c 	add.w	r1, r4, #12
 800506e:	0092      	lsls	r2, r2, #2
 8005070:	300c      	adds	r0, #12
 8005072:	f7ff f80e 	bl	8004092 <memcpy>
 8005076:	4621      	mov	r1, r4
 8005078:	4638      	mov	r0, r7
 800507a:	f7ff ffa5 	bl	8004fc8 <_Bfree>
 800507e:	4644      	mov	r4, r8
 8005080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005084:	3501      	adds	r5, #1
 8005086:	615e      	str	r6, [r3, #20]
 8005088:	6125      	str	r5, [r4, #16]
 800508a:	4620      	mov	r0, r4
 800508c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005090:	08005ea0 	.word	0x08005ea0
 8005094:	08005eb1 	.word	0x08005eb1

08005098 <__hi0bits>:
 8005098:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800509c:	4603      	mov	r3, r0
 800509e:	bf36      	itet	cc
 80050a0:	0403      	lslcc	r3, r0, #16
 80050a2:	2000      	movcs	r0, #0
 80050a4:	2010      	movcc	r0, #16
 80050a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050aa:	bf3c      	itt	cc
 80050ac:	021b      	lslcc	r3, r3, #8
 80050ae:	3008      	addcc	r0, #8
 80050b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050b4:	bf3c      	itt	cc
 80050b6:	011b      	lslcc	r3, r3, #4
 80050b8:	3004      	addcc	r0, #4
 80050ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050be:	bf3c      	itt	cc
 80050c0:	009b      	lslcc	r3, r3, #2
 80050c2:	3002      	addcc	r0, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	db05      	blt.n	80050d4 <__hi0bits+0x3c>
 80050c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80050cc:	f100 0001 	add.w	r0, r0, #1
 80050d0:	bf08      	it	eq
 80050d2:	2020      	moveq	r0, #32
 80050d4:	4770      	bx	lr

080050d6 <__lo0bits>:
 80050d6:	6803      	ldr	r3, [r0, #0]
 80050d8:	4602      	mov	r2, r0
 80050da:	f013 0007 	ands.w	r0, r3, #7
 80050de:	d00b      	beq.n	80050f8 <__lo0bits+0x22>
 80050e0:	07d9      	lsls	r1, r3, #31
 80050e2:	d421      	bmi.n	8005128 <__lo0bits+0x52>
 80050e4:	0798      	lsls	r0, r3, #30
 80050e6:	bf49      	itett	mi
 80050e8:	085b      	lsrmi	r3, r3, #1
 80050ea:	089b      	lsrpl	r3, r3, #2
 80050ec:	2001      	movmi	r0, #1
 80050ee:	6013      	strmi	r3, [r2, #0]
 80050f0:	bf5c      	itt	pl
 80050f2:	6013      	strpl	r3, [r2, #0]
 80050f4:	2002      	movpl	r0, #2
 80050f6:	4770      	bx	lr
 80050f8:	b299      	uxth	r1, r3
 80050fa:	b909      	cbnz	r1, 8005100 <__lo0bits+0x2a>
 80050fc:	0c1b      	lsrs	r3, r3, #16
 80050fe:	2010      	movs	r0, #16
 8005100:	b2d9      	uxtb	r1, r3
 8005102:	b909      	cbnz	r1, 8005108 <__lo0bits+0x32>
 8005104:	3008      	adds	r0, #8
 8005106:	0a1b      	lsrs	r3, r3, #8
 8005108:	0719      	lsls	r1, r3, #28
 800510a:	bf04      	itt	eq
 800510c:	091b      	lsreq	r3, r3, #4
 800510e:	3004      	addeq	r0, #4
 8005110:	0799      	lsls	r1, r3, #30
 8005112:	bf04      	itt	eq
 8005114:	089b      	lsreq	r3, r3, #2
 8005116:	3002      	addeq	r0, #2
 8005118:	07d9      	lsls	r1, r3, #31
 800511a:	d403      	bmi.n	8005124 <__lo0bits+0x4e>
 800511c:	085b      	lsrs	r3, r3, #1
 800511e:	f100 0001 	add.w	r0, r0, #1
 8005122:	d003      	beq.n	800512c <__lo0bits+0x56>
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4770      	bx	lr
 8005128:	2000      	movs	r0, #0
 800512a:	4770      	bx	lr
 800512c:	2020      	movs	r0, #32
 800512e:	4770      	bx	lr

08005130 <__i2b>:
 8005130:	b510      	push	{r4, lr}
 8005132:	460c      	mov	r4, r1
 8005134:	2101      	movs	r1, #1
 8005136:	f7ff ff07 	bl	8004f48 <_Balloc>
 800513a:	4602      	mov	r2, r0
 800513c:	b928      	cbnz	r0, 800514a <__i2b+0x1a>
 800513e:	4b05      	ldr	r3, [pc, #20]	@ (8005154 <__i2b+0x24>)
 8005140:	4805      	ldr	r0, [pc, #20]	@ (8005158 <__i2b+0x28>)
 8005142:	f240 1145 	movw	r1, #325	@ 0x145
 8005146:	f000 fb3d 	bl	80057c4 <__assert_func>
 800514a:	2301      	movs	r3, #1
 800514c:	6144      	str	r4, [r0, #20]
 800514e:	6103      	str	r3, [r0, #16]
 8005150:	bd10      	pop	{r4, pc}
 8005152:	bf00      	nop
 8005154:	08005ea0 	.word	0x08005ea0
 8005158:	08005eb1 	.word	0x08005eb1

0800515c <__multiply>:
 800515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005160:	4614      	mov	r4, r2
 8005162:	690a      	ldr	r2, [r1, #16]
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	429a      	cmp	r2, r3
 8005168:	bfa8      	it	ge
 800516a:	4623      	movge	r3, r4
 800516c:	460f      	mov	r7, r1
 800516e:	bfa4      	itt	ge
 8005170:	460c      	movge	r4, r1
 8005172:	461f      	movge	r7, r3
 8005174:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005178:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800517c:	68a3      	ldr	r3, [r4, #8]
 800517e:	6861      	ldr	r1, [r4, #4]
 8005180:	eb0a 0609 	add.w	r6, sl, r9
 8005184:	42b3      	cmp	r3, r6
 8005186:	b085      	sub	sp, #20
 8005188:	bfb8      	it	lt
 800518a:	3101      	addlt	r1, #1
 800518c:	f7ff fedc 	bl	8004f48 <_Balloc>
 8005190:	b930      	cbnz	r0, 80051a0 <__multiply+0x44>
 8005192:	4602      	mov	r2, r0
 8005194:	4b44      	ldr	r3, [pc, #272]	@ (80052a8 <__multiply+0x14c>)
 8005196:	4845      	ldr	r0, [pc, #276]	@ (80052ac <__multiply+0x150>)
 8005198:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800519c:	f000 fb12 	bl	80057c4 <__assert_func>
 80051a0:	f100 0514 	add.w	r5, r0, #20
 80051a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80051a8:	462b      	mov	r3, r5
 80051aa:	2200      	movs	r2, #0
 80051ac:	4543      	cmp	r3, r8
 80051ae:	d321      	bcc.n	80051f4 <__multiply+0x98>
 80051b0:	f107 0114 	add.w	r1, r7, #20
 80051b4:	f104 0214 	add.w	r2, r4, #20
 80051b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80051bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80051c0:	9302      	str	r3, [sp, #8]
 80051c2:	1b13      	subs	r3, r2, r4
 80051c4:	3b15      	subs	r3, #21
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	3304      	adds	r3, #4
 80051cc:	f104 0715 	add.w	r7, r4, #21
 80051d0:	42ba      	cmp	r2, r7
 80051d2:	bf38      	it	cc
 80051d4:	2304      	movcc	r3, #4
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	9b02      	ldr	r3, [sp, #8]
 80051da:	9103      	str	r1, [sp, #12]
 80051dc:	428b      	cmp	r3, r1
 80051de:	d80c      	bhi.n	80051fa <__multiply+0x9e>
 80051e0:	2e00      	cmp	r6, #0
 80051e2:	dd03      	ble.n	80051ec <__multiply+0x90>
 80051e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d05b      	beq.n	80052a4 <__multiply+0x148>
 80051ec:	6106      	str	r6, [r0, #16]
 80051ee:	b005      	add	sp, #20
 80051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f4:	f843 2b04 	str.w	r2, [r3], #4
 80051f8:	e7d8      	b.n	80051ac <__multiply+0x50>
 80051fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80051fe:	f1ba 0f00 	cmp.w	sl, #0
 8005202:	d024      	beq.n	800524e <__multiply+0xf2>
 8005204:	f104 0e14 	add.w	lr, r4, #20
 8005208:	46a9      	mov	r9, r5
 800520a:	f04f 0c00 	mov.w	ip, #0
 800520e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005212:	f8d9 3000 	ldr.w	r3, [r9]
 8005216:	fa1f fb87 	uxth.w	fp, r7
 800521a:	b29b      	uxth	r3, r3
 800521c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005220:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005224:	f8d9 7000 	ldr.w	r7, [r9]
 8005228:	4463      	add	r3, ip
 800522a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800522e:	fb0a c70b 	mla	r7, sl, fp, ip
 8005232:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005236:	b29b      	uxth	r3, r3
 8005238:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800523c:	4572      	cmp	r2, lr
 800523e:	f849 3b04 	str.w	r3, [r9], #4
 8005242:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005246:	d8e2      	bhi.n	800520e <__multiply+0xb2>
 8005248:	9b01      	ldr	r3, [sp, #4]
 800524a:	f845 c003 	str.w	ip, [r5, r3]
 800524e:	9b03      	ldr	r3, [sp, #12]
 8005250:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005254:	3104      	adds	r1, #4
 8005256:	f1b9 0f00 	cmp.w	r9, #0
 800525a:	d021      	beq.n	80052a0 <__multiply+0x144>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	f104 0c14 	add.w	ip, r4, #20
 8005262:	46ae      	mov	lr, r5
 8005264:	f04f 0a00 	mov.w	sl, #0
 8005268:	f8bc b000 	ldrh.w	fp, [ip]
 800526c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005270:	fb09 770b 	mla	r7, r9, fp, r7
 8005274:	4457      	add	r7, sl
 8005276:	b29b      	uxth	r3, r3
 8005278:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800527c:	f84e 3b04 	str.w	r3, [lr], #4
 8005280:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005284:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005288:	f8be 3000 	ldrh.w	r3, [lr]
 800528c:	fb09 330a 	mla	r3, r9, sl, r3
 8005290:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005294:	4562      	cmp	r2, ip
 8005296:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800529a:	d8e5      	bhi.n	8005268 <__multiply+0x10c>
 800529c:	9f01      	ldr	r7, [sp, #4]
 800529e:	51eb      	str	r3, [r5, r7]
 80052a0:	3504      	adds	r5, #4
 80052a2:	e799      	b.n	80051d8 <__multiply+0x7c>
 80052a4:	3e01      	subs	r6, #1
 80052a6:	e79b      	b.n	80051e0 <__multiply+0x84>
 80052a8:	08005ea0 	.word	0x08005ea0
 80052ac:	08005eb1 	.word	0x08005eb1

080052b0 <__pow5mult>:
 80052b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052b4:	4615      	mov	r5, r2
 80052b6:	f012 0203 	ands.w	r2, r2, #3
 80052ba:	4607      	mov	r7, r0
 80052bc:	460e      	mov	r6, r1
 80052be:	d007      	beq.n	80052d0 <__pow5mult+0x20>
 80052c0:	4c25      	ldr	r4, [pc, #148]	@ (8005358 <__pow5mult+0xa8>)
 80052c2:	3a01      	subs	r2, #1
 80052c4:	2300      	movs	r3, #0
 80052c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80052ca:	f7ff fe9f 	bl	800500c <__multadd>
 80052ce:	4606      	mov	r6, r0
 80052d0:	10ad      	asrs	r5, r5, #2
 80052d2:	d03d      	beq.n	8005350 <__pow5mult+0xa0>
 80052d4:	69fc      	ldr	r4, [r7, #28]
 80052d6:	b97c      	cbnz	r4, 80052f8 <__pow5mult+0x48>
 80052d8:	2010      	movs	r0, #16
 80052da:	f7ff fd7f 	bl	8004ddc <malloc>
 80052de:	4602      	mov	r2, r0
 80052e0:	61f8      	str	r0, [r7, #28]
 80052e2:	b928      	cbnz	r0, 80052f0 <__pow5mult+0x40>
 80052e4:	4b1d      	ldr	r3, [pc, #116]	@ (800535c <__pow5mult+0xac>)
 80052e6:	481e      	ldr	r0, [pc, #120]	@ (8005360 <__pow5mult+0xb0>)
 80052e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80052ec:	f000 fa6a 	bl	80057c4 <__assert_func>
 80052f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052f4:	6004      	str	r4, [r0, #0]
 80052f6:	60c4      	str	r4, [r0, #12]
 80052f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80052fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005300:	b94c      	cbnz	r4, 8005316 <__pow5mult+0x66>
 8005302:	f240 2171 	movw	r1, #625	@ 0x271
 8005306:	4638      	mov	r0, r7
 8005308:	f7ff ff12 	bl	8005130 <__i2b>
 800530c:	2300      	movs	r3, #0
 800530e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005312:	4604      	mov	r4, r0
 8005314:	6003      	str	r3, [r0, #0]
 8005316:	f04f 0900 	mov.w	r9, #0
 800531a:	07eb      	lsls	r3, r5, #31
 800531c:	d50a      	bpl.n	8005334 <__pow5mult+0x84>
 800531e:	4631      	mov	r1, r6
 8005320:	4622      	mov	r2, r4
 8005322:	4638      	mov	r0, r7
 8005324:	f7ff ff1a 	bl	800515c <__multiply>
 8005328:	4631      	mov	r1, r6
 800532a:	4680      	mov	r8, r0
 800532c:	4638      	mov	r0, r7
 800532e:	f7ff fe4b 	bl	8004fc8 <_Bfree>
 8005332:	4646      	mov	r6, r8
 8005334:	106d      	asrs	r5, r5, #1
 8005336:	d00b      	beq.n	8005350 <__pow5mult+0xa0>
 8005338:	6820      	ldr	r0, [r4, #0]
 800533a:	b938      	cbnz	r0, 800534c <__pow5mult+0x9c>
 800533c:	4622      	mov	r2, r4
 800533e:	4621      	mov	r1, r4
 8005340:	4638      	mov	r0, r7
 8005342:	f7ff ff0b 	bl	800515c <__multiply>
 8005346:	6020      	str	r0, [r4, #0]
 8005348:	f8c0 9000 	str.w	r9, [r0]
 800534c:	4604      	mov	r4, r0
 800534e:	e7e4      	b.n	800531a <__pow5mult+0x6a>
 8005350:	4630      	mov	r0, r6
 8005352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005356:	bf00      	nop
 8005358:	08005f0c 	.word	0x08005f0c
 800535c:	08005e31 	.word	0x08005e31
 8005360:	08005eb1 	.word	0x08005eb1

08005364 <__lshift>:
 8005364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	460c      	mov	r4, r1
 800536a:	6849      	ldr	r1, [r1, #4]
 800536c:	6923      	ldr	r3, [r4, #16]
 800536e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	4607      	mov	r7, r0
 8005376:	4691      	mov	r9, r2
 8005378:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800537c:	f108 0601 	add.w	r6, r8, #1
 8005380:	42b3      	cmp	r3, r6
 8005382:	db0b      	blt.n	800539c <__lshift+0x38>
 8005384:	4638      	mov	r0, r7
 8005386:	f7ff fddf 	bl	8004f48 <_Balloc>
 800538a:	4605      	mov	r5, r0
 800538c:	b948      	cbnz	r0, 80053a2 <__lshift+0x3e>
 800538e:	4602      	mov	r2, r0
 8005390:	4b28      	ldr	r3, [pc, #160]	@ (8005434 <__lshift+0xd0>)
 8005392:	4829      	ldr	r0, [pc, #164]	@ (8005438 <__lshift+0xd4>)
 8005394:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005398:	f000 fa14 	bl	80057c4 <__assert_func>
 800539c:	3101      	adds	r1, #1
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	e7ee      	b.n	8005380 <__lshift+0x1c>
 80053a2:	2300      	movs	r3, #0
 80053a4:	f100 0114 	add.w	r1, r0, #20
 80053a8:	f100 0210 	add.w	r2, r0, #16
 80053ac:	4618      	mov	r0, r3
 80053ae:	4553      	cmp	r3, sl
 80053b0:	db33      	blt.n	800541a <__lshift+0xb6>
 80053b2:	6920      	ldr	r0, [r4, #16]
 80053b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80053b8:	f104 0314 	add.w	r3, r4, #20
 80053bc:	f019 091f 	ands.w	r9, r9, #31
 80053c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80053c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80053c8:	d02b      	beq.n	8005422 <__lshift+0xbe>
 80053ca:	f1c9 0e20 	rsb	lr, r9, #32
 80053ce:	468a      	mov	sl, r1
 80053d0:	2200      	movs	r2, #0
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	fa00 f009 	lsl.w	r0, r0, r9
 80053d8:	4310      	orrs	r0, r2
 80053da:	f84a 0b04 	str.w	r0, [sl], #4
 80053de:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e2:	459c      	cmp	ip, r3
 80053e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80053e8:	d8f3      	bhi.n	80053d2 <__lshift+0x6e>
 80053ea:	ebac 0304 	sub.w	r3, ip, r4
 80053ee:	3b15      	subs	r3, #21
 80053f0:	f023 0303 	bic.w	r3, r3, #3
 80053f4:	3304      	adds	r3, #4
 80053f6:	f104 0015 	add.w	r0, r4, #21
 80053fa:	4584      	cmp	ip, r0
 80053fc:	bf38      	it	cc
 80053fe:	2304      	movcc	r3, #4
 8005400:	50ca      	str	r2, [r1, r3]
 8005402:	b10a      	cbz	r2, 8005408 <__lshift+0xa4>
 8005404:	f108 0602 	add.w	r6, r8, #2
 8005408:	3e01      	subs	r6, #1
 800540a:	4638      	mov	r0, r7
 800540c:	612e      	str	r6, [r5, #16]
 800540e:	4621      	mov	r1, r4
 8005410:	f7ff fdda 	bl	8004fc8 <_Bfree>
 8005414:	4628      	mov	r0, r5
 8005416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541a:	f842 0f04 	str.w	r0, [r2, #4]!
 800541e:	3301      	adds	r3, #1
 8005420:	e7c5      	b.n	80053ae <__lshift+0x4a>
 8005422:	3904      	subs	r1, #4
 8005424:	f853 2b04 	ldr.w	r2, [r3], #4
 8005428:	f841 2f04 	str.w	r2, [r1, #4]!
 800542c:	459c      	cmp	ip, r3
 800542e:	d8f9      	bhi.n	8005424 <__lshift+0xc0>
 8005430:	e7ea      	b.n	8005408 <__lshift+0xa4>
 8005432:	bf00      	nop
 8005434:	08005ea0 	.word	0x08005ea0
 8005438:	08005eb1 	.word	0x08005eb1

0800543c <__mcmp>:
 800543c:	690a      	ldr	r2, [r1, #16]
 800543e:	4603      	mov	r3, r0
 8005440:	6900      	ldr	r0, [r0, #16]
 8005442:	1a80      	subs	r0, r0, r2
 8005444:	b530      	push	{r4, r5, lr}
 8005446:	d10e      	bne.n	8005466 <__mcmp+0x2a>
 8005448:	3314      	adds	r3, #20
 800544a:	3114      	adds	r1, #20
 800544c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005450:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005454:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005458:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800545c:	4295      	cmp	r5, r2
 800545e:	d003      	beq.n	8005468 <__mcmp+0x2c>
 8005460:	d205      	bcs.n	800546e <__mcmp+0x32>
 8005462:	f04f 30ff 	mov.w	r0, #4294967295
 8005466:	bd30      	pop	{r4, r5, pc}
 8005468:	42a3      	cmp	r3, r4
 800546a:	d3f3      	bcc.n	8005454 <__mcmp+0x18>
 800546c:	e7fb      	b.n	8005466 <__mcmp+0x2a>
 800546e:	2001      	movs	r0, #1
 8005470:	e7f9      	b.n	8005466 <__mcmp+0x2a>
	...

08005474 <__mdiff>:
 8005474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005478:	4689      	mov	r9, r1
 800547a:	4606      	mov	r6, r0
 800547c:	4611      	mov	r1, r2
 800547e:	4648      	mov	r0, r9
 8005480:	4614      	mov	r4, r2
 8005482:	f7ff ffdb 	bl	800543c <__mcmp>
 8005486:	1e05      	subs	r5, r0, #0
 8005488:	d112      	bne.n	80054b0 <__mdiff+0x3c>
 800548a:	4629      	mov	r1, r5
 800548c:	4630      	mov	r0, r6
 800548e:	f7ff fd5b 	bl	8004f48 <_Balloc>
 8005492:	4602      	mov	r2, r0
 8005494:	b928      	cbnz	r0, 80054a2 <__mdiff+0x2e>
 8005496:	4b3f      	ldr	r3, [pc, #252]	@ (8005594 <__mdiff+0x120>)
 8005498:	f240 2137 	movw	r1, #567	@ 0x237
 800549c:	483e      	ldr	r0, [pc, #248]	@ (8005598 <__mdiff+0x124>)
 800549e:	f000 f991 	bl	80057c4 <__assert_func>
 80054a2:	2301      	movs	r3, #1
 80054a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80054a8:	4610      	mov	r0, r2
 80054aa:	b003      	add	sp, #12
 80054ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b0:	bfbc      	itt	lt
 80054b2:	464b      	movlt	r3, r9
 80054b4:	46a1      	movlt	r9, r4
 80054b6:	4630      	mov	r0, r6
 80054b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80054bc:	bfba      	itte	lt
 80054be:	461c      	movlt	r4, r3
 80054c0:	2501      	movlt	r5, #1
 80054c2:	2500      	movge	r5, #0
 80054c4:	f7ff fd40 	bl	8004f48 <_Balloc>
 80054c8:	4602      	mov	r2, r0
 80054ca:	b918      	cbnz	r0, 80054d4 <__mdiff+0x60>
 80054cc:	4b31      	ldr	r3, [pc, #196]	@ (8005594 <__mdiff+0x120>)
 80054ce:	f240 2145 	movw	r1, #581	@ 0x245
 80054d2:	e7e3      	b.n	800549c <__mdiff+0x28>
 80054d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80054d8:	6926      	ldr	r6, [r4, #16]
 80054da:	60c5      	str	r5, [r0, #12]
 80054dc:	f109 0310 	add.w	r3, r9, #16
 80054e0:	f109 0514 	add.w	r5, r9, #20
 80054e4:	f104 0e14 	add.w	lr, r4, #20
 80054e8:	f100 0b14 	add.w	fp, r0, #20
 80054ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80054f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	46d9      	mov	r9, fp
 80054f8:	f04f 0c00 	mov.w	ip, #0
 80054fc:	9b01      	ldr	r3, [sp, #4]
 80054fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005502:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	fa1f f38a 	uxth.w	r3, sl
 800550c:	4619      	mov	r1, r3
 800550e:	b283      	uxth	r3, r0
 8005510:	1acb      	subs	r3, r1, r3
 8005512:	0c00      	lsrs	r0, r0, #16
 8005514:	4463      	add	r3, ip
 8005516:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800551a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800551e:	b29b      	uxth	r3, r3
 8005520:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005524:	4576      	cmp	r6, lr
 8005526:	f849 3b04 	str.w	r3, [r9], #4
 800552a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800552e:	d8e5      	bhi.n	80054fc <__mdiff+0x88>
 8005530:	1b33      	subs	r3, r6, r4
 8005532:	3b15      	subs	r3, #21
 8005534:	f023 0303 	bic.w	r3, r3, #3
 8005538:	3415      	adds	r4, #21
 800553a:	3304      	adds	r3, #4
 800553c:	42a6      	cmp	r6, r4
 800553e:	bf38      	it	cc
 8005540:	2304      	movcc	r3, #4
 8005542:	441d      	add	r5, r3
 8005544:	445b      	add	r3, fp
 8005546:	461e      	mov	r6, r3
 8005548:	462c      	mov	r4, r5
 800554a:	4544      	cmp	r4, r8
 800554c:	d30e      	bcc.n	800556c <__mdiff+0xf8>
 800554e:	f108 0103 	add.w	r1, r8, #3
 8005552:	1b49      	subs	r1, r1, r5
 8005554:	f021 0103 	bic.w	r1, r1, #3
 8005558:	3d03      	subs	r5, #3
 800555a:	45a8      	cmp	r8, r5
 800555c:	bf38      	it	cc
 800555e:	2100      	movcc	r1, #0
 8005560:	440b      	add	r3, r1
 8005562:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005566:	b191      	cbz	r1, 800558e <__mdiff+0x11a>
 8005568:	6117      	str	r7, [r2, #16]
 800556a:	e79d      	b.n	80054a8 <__mdiff+0x34>
 800556c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005570:	46e6      	mov	lr, ip
 8005572:	0c08      	lsrs	r0, r1, #16
 8005574:	fa1c fc81 	uxtah	ip, ip, r1
 8005578:	4471      	add	r1, lr
 800557a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800557e:	b289      	uxth	r1, r1
 8005580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005584:	f846 1b04 	str.w	r1, [r6], #4
 8005588:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800558c:	e7dd      	b.n	800554a <__mdiff+0xd6>
 800558e:	3f01      	subs	r7, #1
 8005590:	e7e7      	b.n	8005562 <__mdiff+0xee>
 8005592:	bf00      	nop
 8005594:	08005ea0 	.word	0x08005ea0
 8005598:	08005eb1 	.word	0x08005eb1

0800559c <__d2b>:
 800559c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055a0:	460f      	mov	r7, r1
 80055a2:	2101      	movs	r1, #1
 80055a4:	ec59 8b10 	vmov	r8, r9, d0
 80055a8:	4616      	mov	r6, r2
 80055aa:	f7ff fccd 	bl	8004f48 <_Balloc>
 80055ae:	4604      	mov	r4, r0
 80055b0:	b930      	cbnz	r0, 80055c0 <__d2b+0x24>
 80055b2:	4602      	mov	r2, r0
 80055b4:	4b23      	ldr	r3, [pc, #140]	@ (8005644 <__d2b+0xa8>)
 80055b6:	4824      	ldr	r0, [pc, #144]	@ (8005648 <__d2b+0xac>)
 80055b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80055bc:	f000 f902 	bl	80057c4 <__assert_func>
 80055c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80055c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055c8:	b10d      	cbz	r5, 80055ce <__d2b+0x32>
 80055ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	f1b8 0300 	subs.w	r3, r8, #0
 80055d4:	d023      	beq.n	800561e <__d2b+0x82>
 80055d6:	4668      	mov	r0, sp
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	f7ff fd7c 	bl	80050d6 <__lo0bits>
 80055de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80055e2:	b1d0      	cbz	r0, 800561a <__d2b+0x7e>
 80055e4:	f1c0 0320 	rsb	r3, r0, #32
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	430b      	orrs	r3, r1
 80055ee:	40c2      	lsrs	r2, r0
 80055f0:	6163      	str	r3, [r4, #20]
 80055f2:	9201      	str	r2, [sp, #4]
 80055f4:	9b01      	ldr	r3, [sp, #4]
 80055f6:	61a3      	str	r3, [r4, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf0c      	ite	eq
 80055fc:	2201      	moveq	r2, #1
 80055fe:	2202      	movne	r2, #2
 8005600:	6122      	str	r2, [r4, #16]
 8005602:	b1a5      	cbz	r5, 800562e <__d2b+0x92>
 8005604:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005608:	4405      	add	r5, r0
 800560a:	603d      	str	r5, [r7, #0]
 800560c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005610:	6030      	str	r0, [r6, #0]
 8005612:	4620      	mov	r0, r4
 8005614:	b003      	add	sp, #12
 8005616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800561a:	6161      	str	r1, [r4, #20]
 800561c:	e7ea      	b.n	80055f4 <__d2b+0x58>
 800561e:	a801      	add	r0, sp, #4
 8005620:	f7ff fd59 	bl	80050d6 <__lo0bits>
 8005624:	9b01      	ldr	r3, [sp, #4]
 8005626:	6163      	str	r3, [r4, #20]
 8005628:	3020      	adds	r0, #32
 800562a:	2201      	movs	r2, #1
 800562c:	e7e8      	b.n	8005600 <__d2b+0x64>
 800562e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005632:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005636:	6038      	str	r0, [r7, #0]
 8005638:	6918      	ldr	r0, [r3, #16]
 800563a:	f7ff fd2d 	bl	8005098 <__hi0bits>
 800563e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005642:	e7e5      	b.n	8005610 <__d2b+0x74>
 8005644:	08005ea0 	.word	0x08005ea0
 8005648:	08005eb1 	.word	0x08005eb1

0800564c <__sflush_r>:
 800564c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005654:	0716      	lsls	r6, r2, #28
 8005656:	4605      	mov	r5, r0
 8005658:	460c      	mov	r4, r1
 800565a:	d454      	bmi.n	8005706 <__sflush_r+0xba>
 800565c:	684b      	ldr	r3, [r1, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	dc02      	bgt.n	8005668 <__sflush_r+0x1c>
 8005662:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	dd48      	ble.n	80056fa <__sflush_r+0xae>
 8005668:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800566a:	2e00      	cmp	r6, #0
 800566c:	d045      	beq.n	80056fa <__sflush_r+0xae>
 800566e:	2300      	movs	r3, #0
 8005670:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005674:	682f      	ldr	r7, [r5, #0]
 8005676:	6a21      	ldr	r1, [r4, #32]
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	d030      	beq.n	80056de <__sflush_r+0x92>
 800567c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	0759      	lsls	r1, r3, #29
 8005682:	d505      	bpl.n	8005690 <__sflush_r+0x44>
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	1ad2      	subs	r2, r2, r3
 8005688:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800568a:	b10b      	cbz	r3, 8005690 <__sflush_r+0x44>
 800568c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800568e:	1ad2      	subs	r2, r2, r3
 8005690:	2300      	movs	r3, #0
 8005692:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005694:	6a21      	ldr	r1, [r4, #32]
 8005696:	4628      	mov	r0, r5
 8005698:	47b0      	blx	r6
 800569a:	1c43      	adds	r3, r0, #1
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	d106      	bne.n	80056ae <__sflush_r+0x62>
 80056a0:	6829      	ldr	r1, [r5, #0]
 80056a2:	291d      	cmp	r1, #29
 80056a4:	d82b      	bhi.n	80056fe <__sflush_r+0xb2>
 80056a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005750 <__sflush_r+0x104>)
 80056a8:	410a      	asrs	r2, r1
 80056aa:	07d6      	lsls	r6, r2, #31
 80056ac:	d427      	bmi.n	80056fe <__sflush_r+0xb2>
 80056ae:	2200      	movs	r2, #0
 80056b0:	6062      	str	r2, [r4, #4]
 80056b2:	04d9      	lsls	r1, r3, #19
 80056b4:	6922      	ldr	r2, [r4, #16]
 80056b6:	6022      	str	r2, [r4, #0]
 80056b8:	d504      	bpl.n	80056c4 <__sflush_r+0x78>
 80056ba:	1c42      	adds	r2, r0, #1
 80056bc:	d101      	bne.n	80056c2 <__sflush_r+0x76>
 80056be:	682b      	ldr	r3, [r5, #0]
 80056c0:	b903      	cbnz	r3, 80056c4 <__sflush_r+0x78>
 80056c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80056c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056c6:	602f      	str	r7, [r5, #0]
 80056c8:	b1b9      	cbz	r1, 80056fa <__sflush_r+0xae>
 80056ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056ce:	4299      	cmp	r1, r3
 80056d0:	d002      	beq.n	80056d8 <__sflush_r+0x8c>
 80056d2:	4628      	mov	r0, r5
 80056d4:	f7ff fb38 	bl	8004d48 <_free_r>
 80056d8:	2300      	movs	r3, #0
 80056da:	6363      	str	r3, [r4, #52]	@ 0x34
 80056dc:	e00d      	b.n	80056fa <__sflush_r+0xae>
 80056de:	2301      	movs	r3, #1
 80056e0:	4628      	mov	r0, r5
 80056e2:	47b0      	blx	r6
 80056e4:	4602      	mov	r2, r0
 80056e6:	1c50      	adds	r0, r2, #1
 80056e8:	d1c9      	bne.n	800567e <__sflush_r+0x32>
 80056ea:	682b      	ldr	r3, [r5, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0c6      	beq.n	800567e <__sflush_r+0x32>
 80056f0:	2b1d      	cmp	r3, #29
 80056f2:	d001      	beq.n	80056f8 <__sflush_r+0xac>
 80056f4:	2b16      	cmp	r3, #22
 80056f6:	d11e      	bne.n	8005736 <__sflush_r+0xea>
 80056f8:	602f      	str	r7, [r5, #0]
 80056fa:	2000      	movs	r0, #0
 80056fc:	e022      	b.n	8005744 <__sflush_r+0xf8>
 80056fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005702:	b21b      	sxth	r3, r3
 8005704:	e01b      	b.n	800573e <__sflush_r+0xf2>
 8005706:	690f      	ldr	r7, [r1, #16]
 8005708:	2f00      	cmp	r7, #0
 800570a:	d0f6      	beq.n	80056fa <__sflush_r+0xae>
 800570c:	0793      	lsls	r3, r2, #30
 800570e:	680e      	ldr	r6, [r1, #0]
 8005710:	bf08      	it	eq
 8005712:	694b      	ldreq	r3, [r1, #20]
 8005714:	600f      	str	r7, [r1, #0]
 8005716:	bf18      	it	ne
 8005718:	2300      	movne	r3, #0
 800571a:	eba6 0807 	sub.w	r8, r6, r7
 800571e:	608b      	str	r3, [r1, #8]
 8005720:	f1b8 0f00 	cmp.w	r8, #0
 8005724:	dde9      	ble.n	80056fa <__sflush_r+0xae>
 8005726:	6a21      	ldr	r1, [r4, #32]
 8005728:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800572a:	4643      	mov	r3, r8
 800572c:	463a      	mov	r2, r7
 800572e:	4628      	mov	r0, r5
 8005730:	47b0      	blx	r6
 8005732:	2800      	cmp	r0, #0
 8005734:	dc08      	bgt.n	8005748 <__sflush_r+0xfc>
 8005736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800573a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800573e:	81a3      	strh	r3, [r4, #12]
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005748:	4407      	add	r7, r0
 800574a:	eba8 0800 	sub.w	r8, r8, r0
 800574e:	e7e7      	b.n	8005720 <__sflush_r+0xd4>
 8005750:	dfbffffe 	.word	0xdfbffffe

08005754 <_fflush_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	690b      	ldr	r3, [r1, #16]
 8005758:	4605      	mov	r5, r0
 800575a:	460c      	mov	r4, r1
 800575c:	b913      	cbnz	r3, 8005764 <_fflush_r+0x10>
 800575e:	2500      	movs	r5, #0
 8005760:	4628      	mov	r0, r5
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	b118      	cbz	r0, 800576e <_fflush_r+0x1a>
 8005766:	6a03      	ldr	r3, [r0, #32]
 8005768:	b90b      	cbnz	r3, 800576e <_fflush_r+0x1a>
 800576a:	f7fe fb99 	bl	8003ea0 <__sinit>
 800576e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f3      	beq.n	800575e <_fflush_r+0xa>
 8005776:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005778:	07d0      	lsls	r0, r2, #31
 800577a:	d404      	bmi.n	8005786 <_fflush_r+0x32>
 800577c:	0599      	lsls	r1, r3, #22
 800577e:	d402      	bmi.n	8005786 <_fflush_r+0x32>
 8005780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005782:	f7fe fc84 	bl	800408e <__retarget_lock_acquire_recursive>
 8005786:	4628      	mov	r0, r5
 8005788:	4621      	mov	r1, r4
 800578a:	f7ff ff5f 	bl	800564c <__sflush_r>
 800578e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005790:	07da      	lsls	r2, r3, #31
 8005792:	4605      	mov	r5, r0
 8005794:	d4e4      	bmi.n	8005760 <_fflush_r+0xc>
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	059b      	lsls	r3, r3, #22
 800579a:	d4e1      	bmi.n	8005760 <_fflush_r+0xc>
 800579c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800579e:	f7fe fc77 	bl	8004090 <__retarget_lock_release_recursive>
 80057a2:	e7dd      	b.n	8005760 <_fflush_r+0xc>

080057a4 <_sbrk_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	4d06      	ldr	r5, [pc, #24]	@ (80057c0 <_sbrk_r+0x1c>)
 80057a8:	2300      	movs	r3, #0
 80057aa:	4604      	mov	r4, r0
 80057ac:	4608      	mov	r0, r1
 80057ae:	602b      	str	r3, [r5, #0]
 80057b0:	f7fd fe22 	bl	80033f8 <_sbrk>
 80057b4:	1c43      	adds	r3, r0, #1
 80057b6:	d102      	bne.n	80057be <_sbrk_r+0x1a>
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	b103      	cbz	r3, 80057be <_sbrk_r+0x1a>
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	bd38      	pop	{r3, r4, r5, pc}
 80057c0:	20000520 	.word	0x20000520

080057c4 <__assert_func>:
 80057c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057c6:	4614      	mov	r4, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b09      	ldr	r3, [pc, #36]	@ (80057f0 <__assert_func+0x2c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4605      	mov	r5, r0
 80057d0:	68d8      	ldr	r0, [r3, #12]
 80057d2:	b954      	cbnz	r4, 80057ea <__assert_func+0x26>
 80057d4:	4b07      	ldr	r3, [pc, #28]	@ (80057f4 <__assert_func+0x30>)
 80057d6:	461c      	mov	r4, r3
 80057d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057dc:	9100      	str	r1, [sp, #0]
 80057de:	462b      	mov	r3, r5
 80057e0:	4905      	ldr	r1, [pc, #20]	@ (80057f8 <__assert_func+0x34>)
 80057e2:	f000 f841 	bl	8005868 <fiprintf>
 80057e6:	f000 f851 	bl	800588c <abort>
 80057ea:	4b04      	ldr	r3, [pc, #16]	@ (80057fc <__assert_func+0x38>)
 80057ec:	e7f4      	b.n	80057d8 <__assert_func+0x14>
 80057ee:	bf00      	nop
 80057f0:	20000010 	.word	0x20000010
 80057f4:	0800604d 	.word	0x0800604d
 80057f8:	0800601f 	.word	0x0800601f
 80057fc:	08006012 	.word	0x08006012

08005800 <_calloc_r>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	fba1 5402 	umull	r5, r4, r1, r2
 8005806:	b93c      	cbnz	r4, 8005818 <_calloc_r+0x18>
 8005808:	4629      	mov	r1, r5
 800580a:	f7ff fb11 	bl	8004e30 <_malloc_r>
 800580e:	4606      	mov	r6, r0
 8005810:	b928      	cbnz	r0, 800581e <_calloc_r+0x1e>
 8005812:	2600      	movs	r6, #0
 8005814:	4630      	mov	r0, r6
 8005816:	bd70      	pop	{r4, r5, r6, pc}
 8005818:	220c      	movs	r2, #12
 800581a:	6002      	str	r2, [r0, #0]
 800581c:	e7f9      	b.n	8005812 <_calloc_r+0x12>
 800581e:	462a      	mov	r2, r5
 8005820:	4621      	mov	r1, r4
 8005822:	f7fe fbb6 	bl	8003f92 <memset>
 8005826:	e7f5      	b.n	8005814 <_calloc_r+0x14>

08005828 <__ascii_mbtowc>:
 8005828:	b082      	sub	sp, #8
 800582a:	b901      	cbnz	r1, 800582e <__ascii_mbtowc+0x6>
 800582c:	a901      	add	r1, sp, #4
 800582e:	b142      	cbz	r2, 8005842 <__ascii_mbtowc+0x1a>
 8005830:	b14b      	cbz	r3, 8005846 <__ascii_mbtowc+0x1e>
 8005832:	7813      	ldrb	r3, [r2, #0]
 8005834:	600b      	str	r3, [r1, #0]
 8005836:	7812      	ldrb	r2, [r2, #0]
 8005838:	1e10      	subs	r0, r2, #0
 800583a:	bf18      	it	ne
 800583c:	2001      	movne	r0, #1
 800583e:	b002      	add	sp, #8
 8005840:	4770      	bx	lr
 8005842:	4610      	mov	r0, r2
 8005844:	e7fb      	b.n	800583e <__ascii_mbtowc+0x16>
 8005846:	f06f 0001 	mvn.w	r0, #1
 800584a:	e7f8      	b.n	800583e <__ascii_mbtowc+0x16>

0800584c <__ascii_wctomb>:
 800584c:	4603      	mov	r3, r0
 800584e:	4608      	mov	r0, r1
 8005850:	b141      	cbz	r1, 8005864 <__ascii_wctomb+0x18>
 8005852:	2aff      	cmp	r2, #255	@ 0xff
 8005854:	d904      	bls.n	8005860 <__ascii_wctomb+0x14>
 8005856:	228a      	movs	r2, #138	@ 0x8a
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	f04f 30ff 	mov.w	r0, #4294967295
 800585e:	4770      	bx	lr
 8005860:	700a      	strb	r2, [r1, #0]
 8005862:	2001      	movs	r0, #1
 8005864:	4770      	bx	lr
	...

08005868 <fiprintf>:
 8005868:	b40e      	push	{r1, r2, r3}
 800586a:	b503      	push	{r0, r1, lr}
 800586c:	4601      	mov	r1, r0
 800586e:	ab03      	add	r3, sp, #12
 8005870:	4805      	ldr	r0, [pc, #20]	@ (8005888 <fiprintf+0x20>)
 8005872:	f853 2b04 	ldr.w	r2, [r3], #4
 8005876:	6800      	ldr	r0, [r0, #0]
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	f000 f837 	bl	80058ec <_vfiprintf_r>
 800587e:	b002      	add	sp, #8
 8005880:	f85d eb04 	ldr.w	lr, [sp], #4
 8005884:	b003      	add	sp, #12
 8005886:	4770      	bx	lr
 8005888:	20000010 	.word	0x20000010

0800588c <abort>:
 800588c:	b508      	push	{r3, lr}
 800588e:	2006      	movs	r0, #6
 8005890:	f000 fa00 	bl	8005c94 <raise>
 8005894:	2001      	movs	r0, #1
 8005896:	f7fd fd37 	bl	8003308 <_exit>

0800589a <__sfputc_r>:
 800589a:	6893      	ldr	r3, [r2, #8]
 800589c:	3b01      	subs	r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	b410      	push	{r4}
 80058a2:	6093      	str	r3, [r2, #8]
 80058a4:	da08      	bge.n	80058b8 <__sfputc_r+0x1e>
 80058a6:	6994      	ldr	r4, [r2, #24]
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	db01      	blt.n	80058b0 <__sfputc_r+0x16>
 80058ac:	290a      	cmp	r1, #10
 80058ae:	d103      	bne.n	80058b8 <__sfputc_r+0x1e>
 80058b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b4:	f000 b932 	b.w	8005b1c <__swbuf_r>
 80058b8:	6813      	ldr	r3, [r2, #0]
 80058ba:	1c58      	adds	r0, r3, #1
 80058bc:	6010      	str	r0, [r2, #0]
 80058be:	7019      	strb	r1, [r3, #0]
 80058c0:	4608      	mov	r0, r1
 80058c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <__sfputs_r>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	4606      	mov	r6, r0
 80058cc:	460f      	mov	r7, r1
 80058ce:	4614      	mov	r4, r2
 80058d0:	18d5      	adds	r5, r2, r3
 80058d2:	42ac      	cmp	r4, r5
 80058d4:	d101      	bne.n	80058da <__sfputs_r+0x12>
 80058d6:	2000      	movs	r0, #0
 80058d8:	e007      	b.n	80058ea <__sfputs_r+0x22>
 80058da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058de:	463a      	mov	r2, r7
 80058e0:	4630      	mov	r0, r6
 80058e2:	f7ff ffda 	bl	800589a <__sfputc_r>
 80058e6:	1c43      	adds	r3, r0, #1
 80058e8:	d1f3      	bne.n	80058d2 <__sfputs_r+0xa>
 80058ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080058ec <_vfiprintf_r>:
 80058ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	460d      	mov	r5, r1
 80058f2:	b09d      	sub	sp, #116	@ 0x74
 80058f4:	4614      	mov	r4, r2
 80058f6:	4698      	mov	r8, r3
 80058f8:	4606      	mov	r6, r0
 80058fa:	b118      	cbz	r0, 8005904 <_vfiprintf_r+0x18>
 80058fc:	6a03      	ldr	r3, [r0, #32]
 80058fe:	b90b      	cbnz	r3, 8005904 <_vfiprintf_r+0x18>
 8005900:	f7fe face 	bl	8003ea0 <__sinit>
 8005904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005906:	07d9      	lsls	r1, r3, #31
 8005908:	d405      	bmi.n	8005916 <_vfiprintf_r+0x2a>
 800590a:	89ab      	ldrh	r3, [r5, #12]
 800590c:	059a      	lsls	r2, r3, #22
 800590e:	d402      	bmi.n	8005916 <_vfiprintf_r+0x2a>
 8005910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005912:	f7fe fbbc 	bl	800408e <__retarget_lock_acquire_recursive>
 8005916:	89ab      	ldrh	r3, [r5, #12]
 8005918:	071b      	lsls	r3, r3, #28
 800591a:	d501      	bpl.n	8005920 <_vfiprintf_r+0x34>
 800591c:	692b      	ldr	r3, [r5, #16]
 800591e:	b99b      	cbnz	r3, 8005948 <_vfiprintf_r+0x5c>
 8005920:	4629      	mov	r1, r5
 8005922:	4630      	mov	r0, r6
 8005924:	f000 f938 	bl	8005b98 <__swsetup_r>
 8005928:	b170      	cbz	r0, 8005948 <_vfiprintf_r+0x5c>
 800592a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800592c:	07dc      	lsls	r4, r3, #31
 800592e:	d504      	bpl.n	800593a <_vfiprintf_r+0x4e>
 8005930:	f04f 30ff 	mov.w	r0, #4294967295
 8005934:	b01d      	add	sp, #116	@ 0x74
 8005936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593a:	89ab      	ldrh	r3, [r5, #12]
 800593c:	0598      	lsls	r0, r3, #22
 800593e:	d4f7      	bmi.n	8005930 <_vfiprintf_r+0x44>
 8005940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005942:	f7fe fba5 	bl	8004090 <__retarget_lock_release_recursive>
 8005946:	e7f3      	b.n	8005930 <_vfiprintf_r+0x44>
 8005948:	2300      	movs	r3, #0
 800594a:	9309      	str	r3, [sp, #36]	@ 0x24
 800594c:	2320      	movs	r3, #32
 800594e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005952:	f8cd 800c 	str.w	r8, [sp, #12]
 8005956:	2330      	movs	r3, #48	@ 0x30
 8005958:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b08 <_vfiprintf_r+0x21c>
 800595c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005960:	f04f 0901 	mov.w	r9, #1
 8005964:	4623      	mov	r3, r4
 8005966:	469a      	mov	sl, r3
 8005968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800596c:	b10a      	cbz	r2, 8005972 <_vfiprintf_r+0x86>
 800596e:	2a25      	cmp	r2, #37	@ 0x25
 8005970:	d1f9      	bne.n	8005966 <_vfiprintf_r+0x7a>
 8005972:	ebba 0b04 	subs.w	fp, sl, r4
 8005976:	d00b      	beq.n	8005990 <_vfiprintf_r+0xa4>
 8005978:	465b      	mov	r3, fp
 800597a:	4622      	mov	r2, r4
 800597c:	4629      	mov	r1, r5
 800597e:	4630      	mov	r0, r6
 8005980:	f7ff ffa2 	bl	80058c8 <__sfputs_r>
 8005984:	3001      	adds	r0, #1
 8005986:	f000 80a7 	beq.w	8005ad8 <_vfiprintf_r+0x1ec>
 800598a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800598c:	445a      	add	r2, fp
 800598e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005990:	f89a 3000 	ldrb.w	r3, [sl]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 809f 	beq.w	8005ad8 <_vfiprintf_r+0x1ec>
 800599a:	2300      	movs	r3, #0
 800599c:	f04f 32ff 	mov.w	r2, #4294967295
 80059a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059a4:	f10a 0a01 	add.w	sl, sl, #1
 80059a8:	9304      	str	r3, [sp, #16]
 80059aa:	9307      	str	r3, [sp, #28]
 80059ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80059b2:	4654      	mov	r4, sl
 80059b4:	2205      	movs	r2, #5
 80059b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ba:	4853      	ldr	r0, [pc, #332]	@ (8005b08 <_vfiprintf_r+0x21c>)
 80059bc:	f7fa fc10 	bl	80001e0 <memchr>
 80059c0:	9a04      	ldr	r2, [sp, #16]
 80059c2:	b9d8      	cbnz	r0, 80059fc <_vfiprintf_r+0x110>
 80059c4:	06d1      	lsls	r1, r2, #27
 80059c6:	bf44      	itt	mi
 80059c8:	2320      	movmi	r3, #32
 80059ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059ce:	0713      	lsls	r3, r2, #28
 80059d0:	bf44      	itt	mi
 80059d2:	232b      	movmi	r3, #43	@ 0x2b
 80059d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059d8:	f89a 3000 	ldrb.w	r3, [sl]
 80059dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80059de:	d015      	beq.n	8005a0c <_vfiprintf_r+0x120>
 80059e0:	9a07      	ldr	r2, [sp, #28]
 80059e2:	4654      	mov	r4, sl
 80059e4:	2000      	movs	r0, #0
 80059e6:	f04f 0c0a 	mov.w	ip, #10
 80059ea:	4621      	mov	r1, r4
 80059ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059f0:	3b30      	subs	r3, #48	@ 0x30
 80059f2:	2b09      	cmp	r3, #9
 80059f4:	d94b      	bls.n	8005a8e <_vfiprintf_r+0x1a2>
 80059f6:	b1b0      	cbz	r0, 8005a26 <_vfiprintf_r+0x13a>
 80059f8:	9207      	str	r2, [sp, #28]
 80059fa:	e014      	b.n	8005a26 <_vfiprintf_r+0x13a>
 80059fc:	eba0 0308 	sub.w	r3, r0, r8
 8005a00:	fa09 f303 	lsl.w	r3, r9, r3
 8005a04:	4313      	orrs	r3, r2
 8005a06:	9304      	str	r3, [sp, #16]
 8005a08:	46a2      	mov	sl, r4
 8005a0a:	e7d2      	b.n	80059b2 <_vfiprintf_r+0xc6>
 8005a0c:	9b03      	ldr	r3, [sp, #12]
 8005a0e:	1d19      	adds	r1, r3, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	9103      	str	r1, [sp, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bfbb      	ittet	lt
 8005a18:	425b      	neglt	r3, r3
 8005a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8005a1e:	9307      	strge	r3, [sp, #28]
 8005a20:	9307      	strlt	r3, [sp, #28]
 8005a22:	bfb8      	it	lt
 8005a24:	9204      	strlt	r2, [sp, #16]
 8005a26:	7823      	ldrb	r3, [r4, #0]
 8005a28:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a2a:	d10a      	bne.n	8005a42 <_vfiprintf_r+0x156>
 8005a2c:	7863      	ldrb	r3, [r4, #1]
 8005a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a30:	d132      	bne.n	8005a98 <_vfiprintf_r+0x1ac>
 8005a32:	9b03      	ldr	r3, [sp, #12]
 8005a34:	1d1a      	adds	r2, r3, #4
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	9203      	str	r2, [sp, #12]
 8005a3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a3e:	3402      	adds	r4, #2
 8005a40:	9305      	str	r3, [sp, #20]
 8005a42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b18 <_vfiprintf_r+0x22c>
 8005a46:	7821      	ldrb	r1, [r4, #0]
 8005a48:	2203      	movs	r2, #3
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	f7fa fbc8 	bl	80001e0 <memchr>
 8005a50:	b138      	cbz	r0, 8005a62 <_vfiprintf_r+0x176>
 8005a52:	9b04      	ldr	r3, [sp, #16]
 8005a54:	eba0 000a 	sub.w	r0, r0, sl
 8005a58:	2240      	movs	r2, #64	@ 0x40
 8005a5a:	4082      	lsls	r2, r0
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	3401      	adds	r4, #1
 8005a60:	9304      	str	r3, [sp, #16]
 8005a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a66:	4829      	ldr	r0, [pc, #164]	@ (8005b0c <_vfiprintf_r+0x220>)
 8005a68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a6c:	2206      	movs	r2, #6
 8005a6e:	f7fa fbb7 	bl	80001e0 <memchr>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d03f      	beq.n	8005af6 <_vfiprintf_r+0x20a>
 8005a76:	4b26      	ldr	r3, [pc, #152]	@ (8005b10 <_vfiprintf_r+0x224>)
 8005a78:	bb1b      	cbnz	r3, 8005ac2 <_vfiprintf_r+0x1d6>
 8005a7a:	9b03      	ldr	r3, [sp, #12]
 8005a7c:	3307      	adds	r3, #7
 8005a7e:	f023 0307 	bic.w	r3, r3, #7
 8005a82:	3308      	adds	r3, #8
 8005a84:	9303      	str	r3, [sp, #12]
 8005a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a88:	443b      	add	r3, r7
 8005a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a8c:	e76a      	b.n	8005964 <_vfiprintf_r+0x78>
 8005a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a92:	460c      	mov	r4, r1
 8005a94:	2001      	movs	r0, #1
 8005a96:	e7a8      	b.n	80059ea <_vfiprintf_r+0xfe>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	3401      	adds	r4, #1
 8005a9c:	9305      	str	r3, [sp, #20]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	f04f 0c0a 	mov.w	ip, #10
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aaa:	3a30      	subs	r2, #48	@ 0x30
 8005aac:	2a09      	cmp	r2, #9
 8005aae:	d903      	bls.n	8005ab8 <_vfiprintf_r+0x1cc>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0c6      	beq.n	8005a42 <_vfiprintf_r+0x156>
 8005ab4:	9105      	str	r1, [sp, #20]
 8005ab6:	e7c4      	b.n	8005a42 <_vfiprintf_r+0x156>
 8005ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005abc:	4604      	mov	r4, r0
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e7f0      	b.n	8005aa4 <_vfiprintf_r+0x1b8>
 8005ac2:	ab03      	add	r3, sp, #12
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	462a      	mov	r2, r5
 8005ac8:	4b12      	ldr	r3, [pc, #72]	@ (8005b14 <_vfiprintf_r+0x228>)
 8005aca:	a904      	add	r1, sp, #16
 8005acc:	4630      	mov	r0, r6
 8005ace:	f7fd fda3 	bl	8003618 <_printf_float>
 8005ad2:	4607      	mov	r7, r0
 8005ad4:	1c78      	adds	r0, r7, #1
 8005ad6:	d1d6      	bne.n	8005a86 <_vfiprintf_r+0x19a>
 8005ad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ada:	07d9      	lsls	r1, r3, #31
 8005adc:	d405      	bmi.n	8005aea <_vfiprintf_r+0x1fe>
 8005ade:	89ab      	ldrh	r3, [r5, #12]
 8005ae0:	059a      	lsls	r2, r3, #22
 8005ae2:	d402      	bmi.n	8005aea <_vfiprintf_r+0x1fe>
 8005ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ae6:	f7fe fad3 	bl	8004090 <__retarget_lock_release_recursive>
 8005aea:	89ab      	ldrh	r3, [r5, #12]
 8005aec:	065b      	lsls	r3, r3, #25
 8005aee:	f53f af1f 	bmi.w	8005930 <_vfiprintf_r+0x44>
 8005af2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005af4:	e71e      	b.n	8005934 <_vfiprintf_r+0x48>
 8005af6:	ab03      	add	r3, sp, #12
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	462a      	mov	r2, r5
 8005afc:	4b05      	ldr	r3, [pc, #20]	@ (8005b14 <_vfiprintf_r+0x228>)
 8005afe:	a904      	add	r1, sp, #16
 8005b00:	4630      	mov	r0, r6
 8005b02:	f7fe f821 	bl	8003b48 <_printf_i>
 8005b06:	e7e4      	b.n	8005ad2 <_vfiprintf_r+0x1e6>
 8005b08:	0800614f 	.word	0x0800614f
 8005b0c:	08006159 	.word	0x08006159
 8005b10:	08003619 	.word	0x08003619
 8005b14:	080058c9 	.word	0x080058c9
 8005b18:	08006155 	.word	0x08006155

08005b1c <__swbuf_r>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	460e      	mov	r6, r1
 8005b20:	4614      	mov	r4, r2
 8005b22:	4605      	mov	r5, r0
 8005b24:	b118      	cbz	r0, 8005b2e <__swbuf_r+0x12>
 8005b26:	6a03      	ldr	r3, [r0, #32]
 8005b28:	b90b      	cbnz	r3, 8005b2e <__swbuf_r+0x12>
 8005b2a:	f7fe f9b9 	bl	8003ea0 <__sinit>
 8005b2e:	69a3      	ldr	r3, [r4, #24]
 8005b30:	60a3      	str	r3, [r4, #8]
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	071a      	lsls	r2, r3, #28
 8005b36:	d501      	bpl.n	8005b3c <__swbuf_r+0x20>
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	b943      	cbnz	r3, 8005b4e <__swbuf_r+0x32>
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 f82a 	bl	8005b98 <__swsetup_r>
 8005b44:	b118      	cbz	r0, 8005b4e <__swbuf_r+0x32>
 8005b46:	f04f 37ff 	mov.w	r7, #4294967295
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	6922      	ldr	r2, [r4, #16]
 8005b52:	1a98      	subs	r0, r3, r2
 8005b54:	6963      	ldr	r3, [r4, #20]
 8005b56:	b2f6      	uxtb	r6, r6
 8005b58:	4283      	cmp	r3, r0
 8005b5a:	4637      	mov	r7, r6
 8005b5c:	dc05      	bgt.n	8005b6a <__swbuf_r+0x4e>
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4628      	mov	r0, r5
 8005b62:	f7ff fdf7 	bl	8005754 <_fflush_r>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d1ed      	bne.n	8005b46 <__swbuf_r+0x2a>
 8005b6a:	68a3      	ldr	r3, [r4, #8]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	60a3      	str	r3, [r4, #8]
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	6022      	str	r2, [r4, #0]
 8005b76:	701e      	strb	r6, [r3, #0]
 8005b78:	6962      	ldr	r2, [r4, #20]
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d004      	beq.n	8005b8a <__swbuf_r+0x6e>
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	07db      	lsls	r3, r3, #31
 8005b84:	d5e1      	bpl.n	8005b4a <__swbuf_r+0x2e>
 8005b86:	2e0a      	cmp	r6, #10
 8005b88:	d1df      	bne.n	8005b4a <__swbuf_r+0x2e>
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f7ff fde1 	bl	8005754 <_fflush_r>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d0d9      	beq.n	8005b4a <__swbuf_r+0x2e>
 8005b96:	e7d6      	b.n	8005b46 <__swbuf_r+0x2a>

08005b98 <__swsetup_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4b29      	ldr	r3, [pc, #164]	@ (8005c40 <__swsetup_r+0xa8>)
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	b118      	cbz	r0, 8005bac <__swsetup_r+0x14>
 8005ba4:	6a03      	ldr	r3, [r0, #32]
 8005ba6:	b90b      	cbnz	r3, 8005bac <__swsetup_r+0x14>
 8005ba8:	f7fe f97a 	bl	8003ea0 <__sinit>
 8005bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb0:	0719      	lsls	r1, r3, #28
 8005bb2:	d422      	bmi.n	8005bfa <__swsetup_r+0x62>
 8005bb4:	06da      	lsls	r2, r3, #27
 8005bb6:	d407      	bmi.n	8005bc8 <__swsetup_r+0x30>
 8005bb8:	2209      	movs	r2, #9
 8005bba:	602a      	str	r2, [r5, #0]
 8005bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bc0:	81a3      	strh	r3, [r4, #12]
 8005bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc6:	e033      	b.n	8005c30 <__swsetup_r+0x98>
 8005bc8:	0758      	lsls	r0, r3, #29
 8005bca:	d512      	bpl.n	8005bf2 <__swsetup_r+0x5a>
 8005bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bce:	b141      	cbz	r1, 8005be2 <__swsetup_r+0x4a>
 8005bd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bd4:	4299      	cmp	r1, r3
 8005bd6:	d002      	beq.n	8005bde <__swsetup_r+0x46>
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f7ff f8b5 	bl	8004d48 <_free_r>
 8005bde:	2300      	movs	r3, #0
 8005be0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005be8:	81a3      	strh	r3, [r4, #12]
 8005bea:	2300      	movs	r3, #0
 8005bec:	6063      	str	r3, [r4, #4]
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	f043 0308 	orr.w	r3, r3, #8
 8005bf8:	81a3      	strh	r3, [r4, #12]
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	b94b      	cbnz	r3, 8005c12 <__swsetup_r+0x7a>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c08:	d003      	beq.n	8005c12 <__swsetup_r+0x7a>
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f000 f883 	bl	8005d18 <__smakebuf_r>
 8005c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c16:	f013 0201 	ands.w	r2, r3, #1
 8005c1a:	d00a      	beq.n	8005c32 <__swsetup_r+0x9a>
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	60a2      	str	r2, [r4, #8]
 8005c20:	6962      	ldr	r2, [r4, #20]
 8005c22:	4252      	negs	r2, r2
 8005c24:	61a2      	str	r2, [r4, #24]
 8005c26:	6922      	ldr	r2, [r4, #16]
 8005c28:	b942      	cbnz	r2, 8005c3c <__swsetup_r+0xa4>
 8005c2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c2e:	d1c5      	bne.n	8005bbc <__swsetup_r+0x24>
 8005c30:	bd38      	pop	{r3, r4, r5, pc}
 8005c32:	0799      	lsls	r1, r3, #30
 8005c34:	bf58      	it	pl
 8005c36:	6962      	ldrpl	r2, [r4, #20]
 8005c38:	60a2      	str	r2, [r4, #8]
 8005c3a:	e7f4      	b.n	8005c26 <__swsetup_r+0x8e>
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	e7f7      	b.n	8005c30 <__swsetup_r+0x98>
 8005c40:	20000010 	.word	0x20000010

08005c44 <_raise_r>:
 8005c44:	291f      	cmp	r1, #31
 8005c46:	b538      	push	{r3, r4, r5, lr}
 8005c48:	4605      	mov	r5, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	d904      	bls.n	8005c58 <_raise_r+0x14>
 8005c4e:	2316      	movs	r3, #22
 8005c50:	6003      	str	r3, [r0, #0]
 8005c52:	f04f 30ff 	mov.w	r0, #4294967295
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005c5a:	b112      	cbz	r2, 8005c62 <_raise_r+0x1e>
 8005c5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c60:	b94b      	cbnz	r3, 8005c76 <_raise_r+0x32>
 8005c62:	4628      	mov	r0, r5
 8005c64:	f000 f830 	bl	8005cc8 <_getpid_r>
 8005c68:	4622      	mov	r2, r4
 8005c6a:	4601      	mov	r1, r0
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c72:	f000 b817 	b.w	8005ca4 <_kill_r>
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d00a      	beq.n	8005c90 <_raise_r+0x4c>
 8005c7a:	1c59      	adds	r1, r3, #1
 8005c7c:	d103      	bne.n	8005c86 <_raise_r+0x42>
 8005c7e:	2316      	movs	r3, #22
 8005c80:	6003      	str	r3, [r0, #0]
 8005c82:	2001      	movs	r0, #1
 8005c84:	e7e7      	b.n	8005c56 <_raise_r+0x12>
 8005c86:	2100      	movs	r1, #0
 8005c88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4798      	blx	r3
 8005c90:	2000      	movs	r0, #0
 8005c92:	e7e0      	b.n	8005c56 <_raise_r+0x12>

08005c94 <raise>:
 8005c94:	4b02      	ldr	r3, [pc, #8]	@ (8005ca0 <raise+0xc>)
 8005c96:	4601      	mov	r1, r0
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	f7ff bfd3 	b.w	8005c44 <_raise_r>
 8005c9e:	bf00      	nop
 8005ca0:	20000010 	.word	0x20000010

08005ca4 <_kill_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d07      	ldr	r5, [pc, #28]	@ (8005cc4 <_kill_r+0x20>)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4604      	mov	r4, r0
 8005cac:	4608      	mov	r0, r1
 8005cae:	4611      	mov	r1, r2
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	f7fd fb19 	bl	80032e8 <_kill>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	d102      	bne.n	8005cc0 <_kill_r+0x1c>
 8005cba:	682b      	ldr	r3, [r5, #0]
 8005cbc:	b103      	cbz	r3, 8005cc0 <_kill_r+0x1c>
 8005cbe:	6023      	str	r3, [r4, #0]
 8005cc0:	bd38      	pop	{r3, r4, r5, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000520 	.word	0x20000520

08005cc8 <_getpid_r>:
 8005cc8:	f7fd bb06 	b.w	80032d8 <_getpid>

08005ccc <__swhatbuf_r>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	460c      	mov	r4, r1
 8005cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	b096      	sub	sp, #88	@ 0x58
 8005cd8:	4615      	mov	r5, r2
 8005cda:	461e      	mov	r6, r3
 8005cdc:	da0d      	bge.n	8005cfa <__swhatbuf_r+0x2e>
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ce4:	f04f 0100 	mov.w	r1, #0
 8005ce8:	bf14      	ite	ne
 8005cea:	2340      	movne	r3, #64	@ 0x40
 8005cec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	6031      	str	r1, [r6, #0]
 8005cf4:	602b      	str	r3, [r5, #0]
 8005cf6:	b016      	add	sp, #88	@ 0x58
 8005cf8:	bd70      	pop	{r4, r5, r6, pc}
 8005cfa:	466a      	mov	r2, sp
 8005cfc:	f000 f848 	bl	8005d90 <_fstat_r>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	dbec      	blt.n	8005cde <__swhatbuf_r+0x12>
 8005d04:	9901      	ldr	r1, [sp, #4]
 8005d06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d0e:	4259      	negs	r1, r3
 8005d10:	4159      	adcs	r1, r3
 8005d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d16:	e7eb      	b.n	8005cf0 <__swhatbuf_r+0x24>

08005d18 <__smakebuf_r>:
 8005d18:	898b      	ldrh	r3, [r1, #12]
 8005d1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d1c:	079d      	lsls	r5, r3, #30
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460c      	mov	r4, r1
 8005d22:	d507      	bpl.n	8005d34 <__smakebuf_r+0x1c>
 8005d24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	6123      	str	r3, [r4, #16]
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	6163      	str	r3, [r4, #20]
 8005d30:	b003      	add	sp, #12
 8005d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d34:	ab01      	add	r3, sp, #4
 8005d36:	466a      	mov	r2, sp
 8005d38:	f7ff ffc8 	bl	8005ccc <__swhatbuf_r>
 8005d3c:	9f00      	ldr	r7, [sp, #0]
 8005d3e:	4605      	mov	r5, r0
 8005d40:	4639      	mov	r1, r7
 8005d42:	4630      	mov	r0, r6
 8005d44:	f7ff f874 	bl	8004e30 <_malloc_r>
 8005d48:	b948      	cbnz	r0, 8005d5e <__smakebuf_r+0x46>
 8005d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d4e:	059a      	lsls	r2, r3, #22
 8005d50:	d4ee      	bmi.n	8005d30 <__smakebuf_r+0x18>
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	f043 0302 	orr.w	r3, r3, #2
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	e7e2      	b.n	8005d24 <__smakebuf_r+0xc>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	6020      	str	r0, [r4, #0]
 8005d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d66:	81a3      	strh	r3, [r4, #12]
 8005d68:	9b01      	ldr	r3, [sp, #4]
 8005d6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d6e:	b15b      	cbz	r3, 8005d88 <__smakebuf_r+0x70>
 8005d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d74:	4630      	mov	r0, r6
 8005d76:	f000 f81d 	bl	8005db4 <_isatty_r>
 8005d7a:	b128      	cbz	r0, 8005d88 <__smakebuf_r+0x70>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	81a3      	strh	r3, [r4, #12]
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	431d      	orrs	r5, r3
 8005d8c:	81a5      	strh	r5, [r4, #12]
 8005d8e:	e7cf      	b.n	8005d30 <__smakebuf_r+0x18>

08005d90 <_fstat_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4d07      	ldr	r5, [pc, #28]	@ (8005db0 <_fstat_r+0x20>)
 8005d94:	2300      	movs	r3, #0
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	602b      	str	r3, [r5, #0]
 8005d9e:	f7fd fb03 	bl	80033a8 <_fstat>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d102      	bne.n	8005dac <_fstat_r+0x1c>
 8005da6:	682b      	ldr	r3, [r5, #0]
 8005da8:	b103      	cbz	r3, 8005dac <_fstat_r+0x1c>
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	20000520 	.word	0x20000520

08005db4 <_isatty_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4d06      	ldr	r5, [pc, #24]	@ (8005dd0 <_isatty_r+0x1c>)
 8005db8:	2300      	movs	r3, #0
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	602b      	str	r3, [r5, #0]
 8005dc0:	f7fd fb02 	bl	80033c8 <_isatty>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_isatty_r+0x1a>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_isatty_r+0x1a>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20000520 	.word	0x20000520

08005dd4 <_init>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	bf00      	nop
 8005dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dda:	bc08      	pop	{r3}
 8005ddc:	469e      	mov	lr, r3
 8005dde:	4770      	bx	lr

08005de0 <_fini>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	bf00      	nop
 8005de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de6:	bc08      	pop	{r3}
 8005de8:	469e      	mov	lr, r3
 8005dea:	4770      	bx	lr
