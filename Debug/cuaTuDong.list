
cuaTuDong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08004988  08004988  00005988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d10  08004d10  000061c8  2**0
                  CONTENTS
  4 .ARM          00000008  08004d10  08004d10  00005d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d18  08004d18  000061c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d18  08004d18  00005d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d1c  08004d1c  00005d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c8  20000000  08004d20  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200001c8  08004ee8  000061c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08004ee8  000064b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c10  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001099  00000000  00000000  00009e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  0000aea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000276  00000000  00000000  0000b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002111  00000000  00000000  0000b4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c94  00000000  00000000  0000d5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086173  00000000  00000000  0001324b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000993be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b24  00000000  00000000  00099404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0009af28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800496c 	.word	0x0800496c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	0800496c 	.word	0x0800496c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <EXTI_ClearPendingBit>:

    NVIC_SetPriority(irq_number, priority);
    NVIC_EnableIRQ(irq_number);
}

void EXTI_ClearPendingBit(uint8_t exti_line) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
    if (exti_line > 15) return;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d806      	bhi.n	8000bd6 <EXTI_ClearPendingBit+0x1e>
    // Ghi 1 vào bit tương ứng trong Pending Register để xóa nó
    EXTI->PR = (1U << exti_line);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a06      	ldr	r2, [pc, #24]	@ (8000be4 <EXTI_ClearPendingBit+0x2c>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	6153      	str	r3, [r2, #20]
 8000bd4:	e000      	b.n	8000bd8 <EXTI_ClearPendingBit+0x20>
    if (exti_line > 15) return;
 8000bd6:	bf00      	nop
}
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40013c00 	.word	0x40013c00

08000be8 <EXTI_IRQHandler_Helper>:
// --- Trình xử lý ngắt (ISRs) ---
// Các hàm này cần được định nghĩa với tên chính xác như trong vector ngắt.
// Chúng sẽ kiểm tra cờ pending và gọi callback tương ứng.

// Helper function để xử lý logic chung trong ISR
static void EXTI_IRQHandler_Helper(uint8_t exti_line_start, uint8_t exti_line_end) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e01c      	b.n	8000c38 <EXTI_IRQHandler_Helper+0x50>
        // Kiểm tra cờ Pending Bit cho từng line
        if ((EXTI->PR & (1U << line)) != 0) {
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <EXTI_IRQHandler_Helper+0x64>)
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	2101      	movs	r1, #1
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d010      	beq.n	8000c32 <EXTI_IRQHandler_Helper+0x4a>
            // Xóa Pending Bit trước khi gọi callback (quan trọng!)
            EXTI_ClearPendingBit(line);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ffd0 	bl	8000bb8 <EXTI_ClearPendingBit>

            // Gọi callback nếu có
            if (g_exti_callbacks[line] != NULL) {
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <EXTI_IRQHandler_Helper+0x68>)
 8000c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <EXTI_IRQHandler_Helper+0x4a>
                g_exti_callbacks[line](line);
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <EXTI_IRQHandler_Helper+0x68>)
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4798      	blx	r3
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	3301      	adds	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d9de      	bls.n	8000bfe <EXTI_IRQHandler_Helper+0x16>
            }
        }
    }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40013c00 	.word	0x40013c00
 8000c50:	200001e4 	.word	0x200001e4

08000c54 <EXTI0_IRQHandler>:

// ISR cho EXTI Line 0
void EXTI0_IRQHandler(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(0, 0);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff ffc4 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <EXTI1_IRQHandler>:

// ISR cho EXTI Line 1
void EXTI1_IRQHandler(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(1, 1);
 8000c68:	2101      	movs	r1, #1
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff ffbc 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <EXTI2_IRQHandler>:

// ISR cho EXTI Line 2
void EXTI2_IRQHandler(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(2, 2);
 8000c78:	2102      	movs	r1, #2
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f7ff ffb4 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <EXTI3_IRQHandler>:

// ISR cho EXTI Line 3
void EXTI3_IRQHandler(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(3, 3);
 8000c88:	2103      	movs	r1, #3
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f7ff ffac 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <EXTI4_IRQHandler>:

// ISR cho EXTI Line 4
void EXTI4_IRQHandler(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(4, 4);
 8000c98:	2104      	movs	r1, #4
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f7ff ffa4 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <EXTI9_5_IRQHandler>:

// ISR cho EXTI Lines 5 đến 9
void EXTI9_5_IRQHandler(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(5, 9);
 8000ca8:	2109      	movs	r1, #9
 8000caa:	2005      	movs	r0, #5
 8000cac:	f7ff ff9c 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <EXTI15_10_IRQHandler>:

// ISR cho EXTI Lines 10 đến 15
void EXTI15_10_IRQHandler(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(10, 15);
 8000cb8:	210f      	movs	r1, #15
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f7ff ff94 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <GPIO_ClockCmd>:
 */

#include "gpio_driver.h"

// Helper function to enable/disable clock for GPIO port
void GPIO_ClockCmd(GPIO_TypeDef* GPIOx, uint8_t NewState) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
    if (NewState == CLOCK_CMD_ENABLE) {
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d141      	bne.n	8000d5a <GPIO_ClockCmd+0x96>
        if (GPIOx == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a3e      	ldr	r2, [pc, #248]	@ (8000dd4 <GPIO_ClockCmd+0x110>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d106      	bne.n	8000cec <GPIO_ClockCmd+0x28>
 8000cde:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
        // ...
    }
}
 8000cea:	e06c      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a3b      	ldr	r2, [pc, #236]	@ (8000ddc <GPIO_ClockCmd+0x118>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d106      	bne.n	8000d02 <GPIO_ClockCmd+0x3e>
 8000cf4:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf8:	4a37      	ldr	r2, [pc, #220]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d00:	e061      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a36      	ldr	r2, [pc, #216]	@ (8000de0 <GPIO_ClockCmd+0x11c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d106      	bne.n	8000d18 <GPIO_ClockCmd+0x54>
 8000d0a:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a32      	ldr	r2, [pc, #200]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d16:	e056      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a32      	ldr	r2, [pc, #200]	@ (8000de4 <GPIO_ClockCmd+0x120>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d106      	bne.n	8000d2e <GPIO_ClockCmd+0x6a>
 8000d20:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d24:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d2c:	e04b      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a2d      	ldr	r2, [pc, #180]	@ (8000de8 <GPIO_ClockCmd+0x124>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d106      	bne.n	8000d44 <GPIO_ClockCmd+0x80>
 8000d36:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a27      	ldr	r2, [pc, #156]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d42:	e040      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a29      	ldr	r2, [pc, #164]	@ (8000dec <GPIO_ClockCmd+0x128>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d13c      	bne.n	8000dc6 <GPIO_ClockCmd+0x102>
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d50:	4a21      	ldr	r2, [pc, #132]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d56:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d58:	e035      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        if (GPIOx == GPIOA) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd4 <GPIO_ClockCmd+0x110>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d106      	bne.n	8000d70 <GPIO_ClockCmd+0xac>
 8000d62:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d6e:	e02a      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOBEN;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a1a      	ldr	r2, [pc, #104]	@ (8000ddc <GPIO_ClockCmd+0x118>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d106      	bne.n	8000d86 <GPIO_ClockCmd+0xc2>
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d7e:	f023 0302 	bic.w	r3, r3, #2
 8000d82:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d84:	e01f      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a15      	ldr	r2, [pc, #84]	@ (8000de0 <GPIO_ClockCmd+0x11c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d106      	bne.n	8000d9c <GPIO_ClockCmd+0xd8>
 8000d8e:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a11      	ldr	r2, [pc, #68]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d94:	f023 0304 	bic.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d9a:	e014      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <GPIO_ClockCmd+0x120>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d106      	bne.n	8000db2 <GPIO_ClockCmd+0xee>
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000daa:	f023 0308 	bic.w	r3, r3, #8
 8000dae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000db0:	e009      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a0c      	ldr	r2, [pc, #48]	@ (8000de8 <GPIO_ClockCmd+0x124>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d105      	bne.n	8000dc6 <GPIO_ClockCmd+0x102>
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000dc0:	f023 0310 	bic.w	r3, r3, #16
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40021c00 	.word	0x40021c00

08000df0 <GPIO_InitPin>:


void GPIO_InitPin(GPIO_TypeDef* GPIOx, uint16_t pin, uint32_t mode, uint32_t pull,
                  uint32_t speed, uint32_t otype, uint32_t alt_func) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	817b      	strh	r3, [r7, #10]
    uint32_t position;
    uint32_t iocurrent;
    uint32_t temp;

    // Enable clock for the GPIO port
    GPIO_ClockCmd(GPIOx, CLOCK_CMD_ENABLE);
 8000e00:	2101      	movs	r1, #1
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f7ff ff5e 	bl	8000cc4 <GPIO_ClockCmd>

    for (position = 0; position < 16; position++) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	e0a4      	b.n	8000f58 <GPIO_InitPin+0x168>
        iocurrent = (0x1U << position); // Mask for current pin
 8000e0e:	2201      	movs	r2, #1
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	61bb      	str	r3, [r7, #24]
        if (pin & iocurrent) {          // If this pin is selected
 8000e18:	897a      	ldrh	r2, [r7, #10]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 8097 	beq.w	8000f52 <GPIO_InitPin+0x162>
            // 1. Configure Mode (Input, Output, AF, Analog)
            temp = GPIOx->MODER;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2)); // Clear mode bits for this pin
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
            temp |= (mode << (position * 2));
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]
            GPIOx->MODER = temp;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	601a      	str	r2, [r3, #0]

            if ((mode == GPIO_MODE_OUTPUT) || (mode == GPIO_MODE_AF)) {
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d002      	beq.n	8000e5e <GPIO_InitPin+0x6e>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d12b      	bne.n	8000eb6 <GPIO_InitPin+0xc6>
                // 2. Configure Speed
                temp = GPIOx->OSPEEDR;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	617b      	str	r3, [r7, #20]
                temp &= ~(0x03U << (position * 2));
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	4013      	ands	r3, r2
 8000e74:	617b      	str	r3, [r7, #20]
                temp |= (speed << (position * 2));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
                GPIOx->OSPEEDR = temp;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	609a      	str	r2, [r3, #8]

                // 3. Configure Output Type (Push-Pull or Open-Drain)
                temp = GPIOx->OTYPER;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	617b      	str	r3, [r7, #20]
                temp &= ~(0x01U << position);
 8000e92:	2201      	movs	r2, #1
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	617b      	str	r3, [r7, #20]
                temp |= (otype << position);
 8000ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
                GPIOx->OTYPER = temp;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	605a      	str	r2, [r3, #4]
            }

            // 4. Configure Pull-up/Pull-down
            temp = GPIOx->PUPDR;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
            temp |= (pull << (position * 2));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
            GPIOx->PUPDR = temp;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	60da      	str	r2, [r3, #12]

            // 5. Configure Alternate Function (if AF mode)
            if (mode == GPIO_MODE_AF) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d133      	bne.n	8000f52 <GPIO_InitPin+0x162>
                if (position < 8) { // AFR[0] for pins 0-7
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	d817      	bhi.n	8000f20 <GPIO_InitPin+0x130>
                    temp = GPIOx->AFR[0];
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << (position * 4));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << (position * 4));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[0] = temp;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	621a      	str	r2, [r3, #32]
 8000f1e:	e018      	b.n	8000f52 <GPIO_InitPin+0x162>
                } else { // AFR[1] for pins 8-15
                    temp = GPIOx->AFR[1];
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f24:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << ((position - 8) * 4));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4013      	ands	r3, r2
 8000f38:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << ((position - 8) * 4));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b08      	subs	r3, #8
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[1] = temp;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	625a      	str	r2, [r3, #36]	@ 0x24
    for (position = 0; position < 16; position++) {
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3301      	adds	r3, #1
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	f67f af57 	bls.w	8000e0e <GPIO_InitPin+0x1e>
                }
            }
        }
    }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <GPIO_WritePin>:
    } else {
        return GPIO_PIN_RESET;
    }
}

void GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t pin, uint8_t state) {
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	807b      	strh	r3, [r7, #2]
 8000f76:	4613      	mov	r3, r2
 8000f78:	707b      	strb	r3, [r7, #1]
    if (state == GPIO_PIN_SET) {
 8000f7a:	787b      	ldrb	r3, [r7, #1]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d103      	bne.n	8000f88 <GPIO_WritePin+0x1e>
        GPIOx->BSRR = (uint32_t)pin; // Set bit
 8000f80:	887a      	ldrh	r2, [r7, #2]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
    }
}
 8000f86:	e003      	b.n	8000f90 <GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	041a      	lsls	r2, r3, #16
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	619a      	str	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <SystemClock_Config>:
  #define PLL_P_REG_VAL 0x03U
#else
  #error "Invalid PLL_P_VAL. Must be 2, 4, 6, or 8."
#endif

void SystemClock_Config(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
    uint32_t temp_reg; // Biến tạm, tránh warning unused nếu không có MODIFY_REG

    // 1. Bật HSE và đợi nó ổn định (nếu dùng HSE là nguồn PLL)
    RCC->CR |= RCC_CR_HSEON;
 8000fa2:	4b47      	ldr	r3, [pc, #284]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a46      	ldr	r2, [pc, #280]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8000fae:	bf00      	nop
 8000fb0:	4b43      	ldr	r3, [pc, #268]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f9      	beq.n	8000fb0 <SystemClock_Config+0x14>

    // 2. Cấu hình Power Control Register
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000fbc:	4b40      	ldr	r3, [pc, #256]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	4a3f      	ldr	r2, [pc, #252]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc6:	6413      	str	r3, [r2, #64]	@ 0x40
    temp_reg = PWR->CR;
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80010c4 <SystemClock_Config+0x128>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	607b      	str	r3, [r7, #4]
    temp_reg &= ~PWR_CR_VOS;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fd4:	607b      	str	r3, [r7, #4]
    temp_reg |= PWR_CR_VOS_1; // Scale 2
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fdc:	607b      	str	r3, [r7, #4]
    PWR->CR = temp_reg;
 8000fde:	4a39      	ldr	r2, [pc, #228]	@ (80010c4 <SystemClock_Config+0x128>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6013      	str	r3, [r2, #0]

    // 3. Cấu hình các hệ số chia cho HCLK, PCLK1, PCLK2
    temp_reg = RCC->CFGR;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_HPRE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ff0:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_HPRE_DIV1;
    RCC->CFGR = temp_reg;
 8000ff2:	4a33      	ldr	r2, [pc, #204]	@ (80010c0 <SystemClock_Config+0x124>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 8000ff8:	4b31      	ldr	r3, [pc, #196]	@ (80010c0 <SystemClock_Config+0x124>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE1;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001004:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE1_DIV2;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800100c:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 800100e:	4a2c      	ldr	r2, [pc, #176]	@ (80010c0 <SystemClock_Config+0x124>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <SystemClock_Config+0x124>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE2;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001020:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE2_DIV1;
    RCC->CFGR = temp_reg;
 8001022:	4a27      	ldr	r2, [pc, #156]	@ (80010c0 <SystemClock_Config+0x124>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6093      	str	r3, [r2, #8]

    // 4. Cấu hình PLL
    RCC->CR &= ~RCC_CR_PLLON;
 8001028:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <SystemClock_Config+0x124>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a24      	ldr	r2, [pc, #144]	@ (80010c0 <SystemClock_Config+0x124>)
 800102e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001032:	6013      	str	r3, [r2, #0]
    while(RCC->CR & RCC_CR_PLLRDY);
 8001034:	bf00      	nop
 8001036:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <SystemClock_Config+0x124>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f9      	bne.n	8001036 <SystemClock_Config+0x9a>

    RCC->PLLCFGR = (PLL_Q_VAL << RCC_PLLCFGR_PLLQ_Pos) |
 8001042:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <SystemClock_Config+0x124>)
 8001044:	4a20      	ldr	r2, [pc, #128]	@ (80010c8 <SystemClock_Config+0x12c>)
 8001046:	605a      	str	r2, [r3, #4]
                   (PLL_P_REG_VAL << RCC_PLLCFGR_PLLP_Pos)|
                   (PLL_N_VAL << RCC_PLLCFGR_PLLN_Pos) |
                   (PLL_M_VAL << RCC_PLLCFGR_PLLM_Pos);

    // 5. Bật PLL và đợi nó ổn định
    RCC->CR |= RCC_CR_PLLON;
 8001048:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <SystemClock_Config+0x124>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1c      	ldr	r2, [pc, #112]	@ (80010c0 <SystemClock_Config+0x124>)
 800104e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001052:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8001054:	bf00      	nop
 8001056:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <SystemClock_Config+0x124>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f9      	beq.n	8001056 <SystemClock_Config+0xba>

    // 6. Cấu hình Flash latency
    temp_reg = FLASH->ACR;
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <SystemClock_Config+0x130>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	607b      	str	r3, [r7, #4]
    temp_reg &= ~FLASH_ACR_LATENCY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f023 0307 	bic.w	r3, r3, #7
 800106e:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_LATENCY_2WS;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_PRFTEN;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107e:	607b      	str	r3, [r7, #4]
    FLASH->ACR = temp_reg;
 8001080:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <SystemClock_Config+0x130>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]

    // 7. Chọn PLL làm nguồn SYSCLK
    temp_reg = RCC->CFGR;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <SystemClock_Config+0x124>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_SW;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f023 0303 	bic.w	r3, r3, #3
 8001092:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_SW_PLL;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 800109c:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <SystemClock_Config+0x124>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80010a2:	bf00      	nop
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <SystemClock_Config+0x124>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d1f9      	bne.n	80010a4 <SystemClock_Config+0x108>
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000
 80010c8:	07415408 	.word	0x07415408
 80010cc:	40023c00 	.word	0x40023c00

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	@ (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	@ (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <SysTick_Init>:
#include "stm32f401xe.h"
#include "rcc_config.h"

static volatile uint32_t g_sysTickCounter = 0;

void SysTick_Init(void){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	// 1. Tính toán giá trị nạp cho SysTick để có tick mỗi 1ms
	// (HCLK / 1000) - 1 vì SysTick đếm từ LOAD_VAL về 0 (LOAD_VAL + 1 chu kỳ)
	uint32_t reload_value = (HCLK_FREQUENCY_HZ / 1000U) - 1U;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <SysTick_Init+0x54>)
 800112c:	607b      	str	r3, [r7, #4]

	// 2. Cấu hình SysTick
    // Vô hiệu hóa SysTick trước khi cấu hình
    SysTick->CTRL = 0;
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <SysTick_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

    // Nạp giá trị reload
    SysTick->LOAD = reload_value;
 8001134:	4a11      	ldr	r2, [pc, #68]	@ (800117c <SysTick_Init+0x58>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6053      	str	r3, [r2, #4]

    // Đặt ưu tiên ngắt SysTick cho Cortex-M4 (4 bit ưu tiên)
    NVIC_SetPriority(SysTick_IRQn, 15); // Mức ưu tiên 15 (thấp nhất nếu 4 bit prio)
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ffc6 	bl	80010d0 <__NVIC_SetPriority>

    // Reset bộ đếm SysTick hiện tại
    SysTick->VAL = 0;
 8001144:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <SysTick_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]

    // Kích hoạt SysTick với nguồn clock là HCLK và bật ngắt
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // CLKSOURCE = AHB clock
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <SysTick_Init+0x58>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <SysTick_Init+0x58>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;   // Enable SysTick interrupt
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <SysTick_Init+0x58>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a08      	ldr	r2, [pc, #32]	@ (800117c <SysTick_Init+0x58>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;    // Enable SysTick
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <SysTick_Init+0x58>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a05      	ldr	r2, [pc, #20]	@ (800117c <SysTick_Init+0x58>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	0001481f 	.word	0x0001481f
 800117c:	e000e010 	.word	0xe000e010

08001180 <Delay_ms>:

void Delay_ms(volatile uint32_t ms){
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	uint32_t start_tick = g_sysTickCounter;
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <Delay_ms+0x2c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
	while ((g_sysTickCounter - start_tick) < ms){
 800118e:	bf00      	nop
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <Delay_ms+0x2c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	1ad2      	subs	r2, r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d3f8      	bcc.n	8001190 <Delay_ms+0x10>

	}
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000224 	.word	0x20000224

080011b0 <GetTick>:

uint32_t GetTick(void){
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	return g_sysTickCounter;
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000224 	.word	0x20000224

080011c8 <IncTick>:

void IncTick(void){
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	g_sysTickCounter ++;
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <IncTick+0x18>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	4a03      	ldr	r2, [pc, #12]	@ (80011e0 <IncTick+0x18>)
 80011d4:	6013      	str	r3, [r2, #0]
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000224 	.word	0x20000224

080011e4 <SysTick_Handler>:

void SysTick_Handler(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	IncTick();
 80011e8:	f7ff ffee 	bl	80011c8 <IncTick>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <__NVIC_EnableIRQ>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	@ (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_DisableIRQ>:
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db12      	blt.n	8001264 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	490a      	ldr	r1, [pc, #40]	@ (8001270 <__NVIC_DisableIRQ+0x44>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	3320      	adds	r3, #32
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001258:	f3bf 8f4f 	dsb	sy
}
 800125c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125e:	f3bf 8f6f 	isb	sy
}
 8001262:	bf00      	nop
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	@ (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	@ (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <UART2_Init>:
static uart_tx_complete_callback_t g_uart2_tx_complete_callback = NULL;

// Thêm biến theo dõi lỗi UART
static volatile uint8_t g_uart2_error_flags = 0;

void UART2_Init(uint32_t baudrate, uint32_t word_length, uint32_t parity, uint32_t stop_bits) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	@ 0x30
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
    // 1. Bật clock cho USART2 và GPIOA
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80012d6:	4b51      	ldr	r3, [pc, #324]	@ (800141c <UART2_Init+0x154>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a50      	ldr	r2, [pc, #320]	@ (800141c <UART2_Init+0x154>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
    GPIO_ClockCmd(GPIOA, CLOCK_CMD_ENABLE);
 80012e2:	2101      	movs	r1, #1
 80012e4:	484e      	ldr	r0, [pc, #312]	@ (8001420 <UART2_Init+0x158>)
 80012e6:	f7ff fced 	bl	8000cc4 <GPIO_ClockCmd>

    // 2. Cấu hình chân GPIOA PA2 (TX) và PA3 (RX) cho AF7 (USART2)
    GPIO_InitPin(GPIOA, (1U << 2), GPIO_MODE_AF, GPIO_PULL_UP, GPIO_SPEED_HIGH, GPIO_OTYPE_PUSHPULL, 7); // PA2 TX
 80012ea:	2307      	movs	r3, #7
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2300      	movs	r3, #0
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	2302      	movs	r3, #2
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	2202      	movs	r2, #2
 80012fa:	2104      	movs	r1, #4
 80012fc:	4848      	ldr	r0, [pc, #288]	@ (8001420 <UART2_Init+0x158>)
 80012fe:	f7ff fd77 	bl	8000df0 <GPIO_InitPin>
    GPIO_InitPin(GPIOA, (1U << 3), GPIO_MODE_AF, GPIO_PULL_UP, GPIO_SPEED_HIGH, GPIO_OTYPE_PUSHPULL, 7); // PA3 RX
 8001302:	2307      	movs	r3, #7
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	2300      	movs	r3, #0
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	2302      	movs	r3, #2
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2301      	movs	r3, #1
 8001310:	2202      	movs	r2, #2
 8001312:	2108      	movs	r1, #8
 8001314:	4842      	ldr	r0, [pc, #264]	@ (8001420 <UART2_Init+0x158>)
 8001316:	f7ff fd6b 	bl	8000df0 <GPIO_InitPin>

    // 3. Vô hiệu hóa UART trước khi cấu hình
    USART2->CR1 &= ~USART_CR1_UE;
 800131a:	4b42      	ldr	r3, [pc, #264]	@ (8001424 <UART2_Init+0x15c>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	4a41      	ldr	r2, [pc, #260]	@ (8001424 <UART2_Init+0x15c>)
 8001320:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001324:	60d3      	str	r3, [r2, #12]

    // 4. Cấu hình Word Length, Parity
    USART2->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS);
 8001326:	4b3f      	ldr	r3, [pc, #252]	@ (8001424 <UART2_Init+0x15c>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	4a3e      	ldr	r2, [pc, #248]	@ (8001424 <UART2_Init+0x15c>)
 800132c:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001330:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= word_length;
 8001332:	4b3c      	ldr	r3, [pc, #240]	@ (8001424 <UART2_Init+0x15c>)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	493b      	ldr	r1, [pc, #236]	@ (8001424 <UART2_Init+0x15c>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
 800133c:	60cb      	str	r3, [r1, #12]
    USART2->CR1 |= parity;
 800133e:	4b39      	ldr	r3, [pc, #228]	@ (8001424 <UART2_Init+0x15c>)
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	4938      	ldr	r1, [pc, #224]	@ (8001424 <UART2_Init+0x15c>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4313      	orrs	r3, r2
 8001348:	60cb      	str	r3, [r1, #12]

    // 5. Cấu hình Stop Bits
    USART2->CR2 &= ~USART_CR2_STOP;
 800134a:	4b36      	ldr	r3, [pc, #216]	@ (8001424 <UART2_Init+0x15c>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	4a35      	ldr	r2, [pc, #212]	@ (8001424 <UART2_Init+0x15c>)
 8001350:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001354:	6113      	str	r3, [r2, #16]
    USART2->CR2 |= stop_bits;
 8001356:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <UART2_Init+0x15c>)
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	4932      	ldr	r1, [pc, #200]	@ (8001424 <UART2_Init+0x15c>)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	610b      	str	r3, [r1, #16]

    // 6. Cấu hình Baud Rate với độ chính xác cao hơn
    uint32_t pclk1_freq = PCLK1_FREQUENCY_HZ; // Lấy từ rcc_config.h
 8001362:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <UART2_Init+0x160>)
 8001364:	617b      	str	r3, [r7, #20]
    // Tính toán USARTDIV với độ chính xác cao hơn
    uint32_t integer_div = (25 * pclk1_freq) / (4 * baudrate);
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	009a      	lsls	r2, r3, #2
 8001370:	441a      	add	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	613b      	str	r3, [r7, #16]
    uint32_t mantissa = integer_div / 100;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4a2b      	ldr	r2, [pc, #172]	@ (800142c <UART2_Init+0x164>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	61fb      	str	r3, [r7, #28]
    uint32_t fraction = ((integer_div - (mantissa * 100)) * 16 + 50) / 100;
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2264      	movs	r2, #100	@ 0x64
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	3332      	adds	r3, #50	@ 0x32
 8001398:	4a24      	ldr	r2, [pc, #144]	@ (800142c <UART2_Init+0x164>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	61bb      	str	r3, [r7, #24]
        
    // Xử lý trường hợp fraction = 16
    if (fraction == 16) {
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d104      	bne.n	80013b2 <UART2_Init+0xea>
        mantissa++;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	3301      	adds	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
        fraction = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
    }
        
    USART2->BRR = (mantissa << 4) | (fraction & 0xFU);
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	011a      	lsls	r2, r3, #4
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	4919      	ldr	r1, [pc, #100]	@ (8001424 <UART2_Init+0x15c>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]

    // 7. Cấu hình Control Register: Bật TX, RX và RXNE Interrupt
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <UART2_Init+0x15c>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <UART2_Init+0x15c>)
 80013c8:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 80013cc:	60d3      	str	r3, [r2, #12]
    // USART2->CR3 &= ~USART_CR3_CTSE; // Tắt CTS flow control
    // USART2->CR3 &= ~USART_CR3_RTSE; // Tắt RTS flow control

    // 8. Reset trạng thái buffer
    g_uart2_rx_buffer_head = 0;
 80013ce:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <UART2_Init+0x168>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_tail = 0;
 80013d4:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <UART2_Init+0x16c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_count = 0;
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <UART2_Init+0x170>)
 80013dc:	2200      	movs	r2, #0
 80013de:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_head = 0;
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <UART2_Init+0x174>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_tail = 0;
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <UART2_Init+0x178>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_count = 0;
 80013ec:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <UART2_Init+0x17c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_busy = false;
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <UART2_Init+0x180>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]

    // 9. Cấu hình ngắt trong NVIC
    NVIC_SetPriority(USART2_IRQn, 14); // Đặt mức ưu tiên
 80013f8:	210e      	movs	r1, #14
 80013fa:	2026      	movs	r0, #38	@ 0x26
 80013fc:	f7ff ff3a 	bl	8001274 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 8001400:	2026      	movs	r0, #38	@ 0x26
 8001402:	f7ff fef5 	bl	80011f0 <__NVIC_EnableIRQ>

    // 10. Bật UART
    USART2->CR1 |= USART_CR1_UE;
 8001406:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <UART2_Init+0x15c>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <UART2_Init+0x15c>)
 800140c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001410:	60d3      	str	r3, [r2, #12]
}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	40004400 	.word	0x40004400
 8001428:	0280de80 	.word	0x0280de80
 800142c:	51eb851f 	.word	0x51eb851f
 8001430:	200002a8 	.word	0x200002a8
 8001434:	200002aa 	.word	0x200002aa
 8001438:	200002ac 	.word	0x200002ac
 800143c:	20000330 	.word	0x20000330
 8001440:	20000332 	.word	0x20000332
 8001444:	20000334 	.word	0x20000334
 8001448:	20000336 	.word	0x20000336

0800144c <UART2_SendBuffer_IT>:

bool UART2_SendBuffer_IT(const uint8_t* buffer, uint16_t length) {
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
    if (length == 0) return true;
 8001458:	887b      	ldrh	r3, [r7, #2]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <UART2_SendBuffer_IT+0x16>
 800145e:	2301      	movs	r3, #1
 8001460:	e04b      	b.n	80014fa <UART2_SendBuffer_IT+0xae>
    if (g_uart2_tx_busy || (UART2_TX_BUFFER_SIZE - g_uart2_tx_buffer_count) < length) {
 8001462:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <UART2_SendBuffer_IT+0xbc>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d107      	bne.n	800147c <UART2_SendBuffer_IT+0x30>
 800146c:	4b27      	ldr	r3, [pc, #156]	@ (800150c <UART2_SendBuffer_IT+0xc0>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	f1c3 0280 	rsb	r2, r3, #128	@ 0x80
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	429a      	cmp	r2, r3
 800147a:	da01      	bge.n	8001480 <UART2_SendBuffer_IT+0x34>
        return false;
 800147c:	2300      	movs	r3, #0
 800147e:	e03c      	b.n	80014fa <UART2_SendBuffer_IT+0xae>
    }

    // Tạm thời vô hiệu hóa ngắt TXE để cập nhật buffer an toàn
    USART2->CR1 &= ~USART_CR1_TXEIE;
 8001480:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <UART2_SendBuffer_IT+0xc4>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4a22      	ldr	r2, [pc, #136]	@ (8001510 <UART2_SendBuffer_IT+0xc4>)
 8001486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800148a:	60d3      	str	r3, [r2, #12]

    for (uint16_t i = 0; i < length; i++) {
 800148c:	2300      	movs	r3, #0
 800148e:	81fb      	strh	r3, [r7, #14]
 8001490:	e019      	b.n	80014c6 <UART2_SendBuffer_IT+0x7a>
        g_uart2_tx_buffer[g_uart2_tx_buffer_tail] = buffer[i];
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	4a1e      	ldr	r2, [pc, #120]	@ (8001514 <UART2_SendBuffer_IT+0xc8>)
 800149a:	8812      	ldrh	r2, [r2, #0]
 800149c:	b292      	uxth	r2, r2
 800149e:	7819      	ldrb	r1, [r3, #0]
 80014a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <UART2_SendBuffer_IT+0xcc>)
 80014a2:	5499      	strb	r1, [r3, r2]
        g_uart2_tx_buffer_tail = (g_uart2_tx_buffer_tail + 1) % UART2_TX_BUFFER_SIZE;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <UART2_SendBuffer_IT+0xc8>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	425a      	negs	r2, r3
 80014ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80014b6:	bf58      	it	pl
 80014b8:	4253      	negpl	r3, r2
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <UART2_SendBuffer_IT+0xc8>)
 80014be:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 80014c0:	89fb      	ldrh	r3, [r7, #14]
 80014c2:	3301      	adds	r3, #1
 80014c4:	81fb      	strh	r3, [r7, #14]
 80014c6:	89fa      	ldrh	r2, [r7, #14]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3e1      	bcc.n	8001492 <UART2_SendBuffer_IT+0x46>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ce:	b672      	cpsid	i
}
 80014d0:	bf00      	nop
    }
    // đảm bảo critical section
    __disable_irq(); // Critical section
    g_uart2_tx_buffer_count += length;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <UART2_SendBuffer_IT+0xc0>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	4413      	add	r3, r2
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <UART2_SendBuffer_IT+0xc0>)
 80014e0:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_busy = true;
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <UART2_SendBuffer_IT+0xbc>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014e8:	b662      	cpsie	i
}
 80014ea:	bf00      	nop
    __enable_irq();  // End critical section

    // Kích hoạt ngắt TXE để bắt đầu gửi byte đầu tiên từ ISR
    USART2->CR1 |= USART_CR1_TXEIE;
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <UART2_SendBuffer_IT+0xc4>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a07      	ldr	r2, [pc, #28]	@ (8001510 <UART2_SendBuffer_IT+0xc4>)
 80014f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f6:	60d3      	str	r3, [r2, #12]

    return true;
 80014f8:	2301      	movs	r3, #1
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000336 	.word	0x20000336
 800150c:	20000334 	.word	0x20000334
 8001510:	40004400 	.word	0x40004400
 8001514:	20000332 	.word	0x20000332
 8001518:	200002b0 	.word	0x200002b0

0800151c <UART2_IsTxBusy>:

bool UART2_IsTxBusy(void) {
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
    return g_uart2_tx_busy;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <UART2_IsTxBusy+0x14>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	20000336 	.word	0x20000336

08001534 <UART2_ReadByte_FromBuffer>:

bool UART2_ReadByte_FromBuffer(uint8_t* data) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    if (g_uart2_rx_buffer_count == 0) {
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <UART2_ReadByte_FromBuffer+0x68>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <UART2_ReadByte_FromBuffer+0x16>
        return false; // Buffer rỗng
 8001546:	2300      	movs	r3, #0
 8001548:	e024      	b.n	8001594 <UART2_ReadByte_FromBuffer+0x60>
    }

    // Vô hiệu hóa chỉ ngắt UART2 thay vì tất cả các ngắt
    NVIC_DisableIRQ(USART2_IRQn);
 800154a:	2026      	movs	r0, #38	@ 0x26
 800154c:	f7ff fe6e 	bl	800122c <__NVIC_DisableIRQ>
    
    *data = g_uart2_rx_buffer[g_uart2_rx_buffer_head];
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <UART2_ReadByte_FromBuffer+0x6c>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <UART2_ReadByte_FromBuffer+0x70>)
 800155a:	5c9b      	ldrb	r3, [r3, r2]
 800155c:	b2da      	uxtb	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	701a      	strb	r2, [r3, #0]
    g_uart2_rx_buffer_head = (g_uart2_rx_buffer_head + 1) % UART2_RX_BUFFER_SIZE;
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <UART2_ReadByte_FromBuffer+0x6c>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	b29b      	uxth	r3, r3
 8001568:	3301      	adds	r3, #1
 800156a:	425a      	negs	r2, r3
 800156c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001570:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001574:	bf58      	it	pl
 8001576:	4253      	negpl	r3, r2
 8001578:	b29a      	uxth	r2, r3
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <UART2_ReadByte_FromBuffer+0x6c>)
 800157c:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_count--;
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <UART2_ReadByte_FromBuffer+0x68>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	3b01      	subs	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <UART2_ReadByte_FromBuffer+0x68>)
 800158a:	801a      	strh	r2, [r3, #0]
    
    // Kích hoạt lại ngắt UART2
    NVIC_EnableIRQ(USART2_IRQn);
 800158c:	2026      	movs	r0, #38	@ 0x26
 800158e:	f7ff fe2f 	bl	80011f0 <__NVIC_EnableIRQ>

    return true;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200002ac 	.word	0x200002ac
 80015a0:	200002a8 	.word	0x200002a8
 80015a4:	20000228 	.word	0x20000228

080015a8 <UART2_GetErrorFlags>:

void UART2_RegisterTxCompleteCallback(uart_tx_complete_callback_t callback) {
    g_uart2_tx_complete_callback = callback;
}

uint8_t UART2_GetErrorFlags(void) {
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
    return g_uart2_error_flags;
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <UART2_GetErrorFlags+0x14>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	2000033c 	.word	0x2000033c

080015c0 <UART2_ClearErrorFlags>:

void UART2_ClearErrorFlags(uint8_t flags) {
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80015ca:	b672      	cpsid	i
}
 80015cc:	bf00      	nop
    __disable_irq();
    g_uart2_error_flags &= ~flags;
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	b25a      	sxtb	r2, r3
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <UART2_ClearErrorFlags+0x38>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	4013      	ands	r3, r2
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <UART2_ClearErrorFlags+0x38>)
 80015e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015e8:	b662      	cpsie	i
}
 80015ea:	bf00      	nop
    __enable_irq();
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	2000033c 	.word	0x2000033c

080015fc <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
    uint32_t sr_reg = USART2->SR; // Đọc thanh ghi SR một lần
 8001602:	4b6e      	ldr	r3, [pc, #440]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	60fb      	str	r3, [r7, #12]

    // --- Xử lý ngắt RXNE (Receive Data Register Not Empty) ---
    if ((sr_reg & USART_SR_RXNE) && (USART2->CR1 & USART_CR1_RXNEIE)) {
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0320 	and.w	r3, r3, #32
 800160e:	2b00      	cmp	r3, #0
 8001610:	d032      	beq.n	8001678 <USART2_IRQHandler+0x7c>
 8001612:	4b6a      	ldr	r3, [pc, #424]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	2b00      	cmp	r3, #0
 800161c:	d02c      	beq.n	8001678 <USART2_IRQHandler+0x7c>
        uint8_t received_byte = (uint8_t)(USART2->DR & 0xFFU);
 800161e:	4b67      	ldr	r3, [pc, #412]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	72fb      	strb	r3, [r7, #11]

        if (g_uart2_rx_buffer_count < UART2_RX_BUFFER_SIZE) {
 8001624:	4b66      	ldr	r3, [pc, #408]	@ (80017c0 <USART2_IRQHandler+0x1c4>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	2b7f      	cmp	r3, #127	@ 0x7f
 800162c:	d81c      	bhi.n	8001668 <USART2_IRQHandler+0x6c>
            g_uart2_rx_buffer[g_uart2_rx_buffer_tail] = received_byte;
 800162e:	4b65      	ldr	r3, [pc, #404]	@ (80017c4 <USART2_IRQHandler+0x1c8>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	4619      	mov	r1, r3
 8001636:	4a64      	ldr	r2, [pc, #400]	@ (80017c8 <USART2_IRQHandler+0x1cc>)
 8001638:	7afb      	ldrb	r3, [r7, #11]
 800163a:	5453      	strb	r3, [r2, r1]
            g_uart2_rx_buffer_tail = (g_uart2_rx_buffer_tail + 1) % UART2_RX_BUFFER_SIZE;
 800163c:	4b61      	ldr	r3, [pc, #388]	@ (80017c4 <USART2_IRQHandler+0x1c8>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	b29b      	uxth	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	425a      	negs	r2, r3
 8001646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800164a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800164e:	bf58      	it	pl
 8001650:	4253      	negpl	r3, r2
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b5b      	ldr	r3, [pc, #364]	@ (80017c4 <USART2_IRQHandler+0x1c8>)
 8001656:	801a      	strh	r2, [r3, #0]
            g_uart2_rx_buffer_count++;
 8001658:	4b59      	ldr	r3, [pc, #356]	@ (80017c0 <USART2_IRQHandler+0x1c4>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	3301      	adds	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b57      	ldr	r3, [pc, #348]	@ (80017c0 <USART2_IRQHandler+0x1c4>)
 8001664:	801a      	strh	r2, [r3, #0]
 8001666:	e007      	b.n	8001678 <USART2_IRQHandler+0x7c>
        } else {
            // Buffer RX đầy, đánh dấu lỗi bằng cách thêm cờ
            g_uart2_error_flags |= UART_ERROR_BUFFER_FULL;
 8001668:	4b58      	ldr	r3, [pc, #352]	@ (80017cc <USART2_IRQHandler+0x1d0>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f043 0310 	orr.w	r3, r3, #16
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b55      	ldr	r3, [pc, #340]	@ (80017cc <USART2_IRQHandler+0x1d0>)
 8001676:	701a      	strb	r2, [r3, #0]
        }
        // Cờ RXNE tự xóa khi đọc DR.
    }

    // --- Xử lý ngắt TXE (Transmit Data Register Empty) ---
    if ((sr_reg & USART_SR_TXE) && (USART2->CR1 & USART_CR1_TXEIE)) {
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167e:	2b00      	cmp	r3, #0
 8001680:	d039      	beq.n	80016f6 <USART2_IRQHandler+0xfa>
 8001682:	4b4e      	ldr	r3, [pc, #312]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800168a:	2b00      	cmp	r3, #0
 800168c:	d033      	beq.n	80016f6 <USART2_IRQHandler+0xfa>
        if (g_uart2_tx_buffer_count > 0) {
 800168e:	4b50      	ldr	r3, [pc, #320]	@ (80017d0 <USART2_IRQHandler+0x1d4>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d02e      	beq.n	80016f6 <USART2_IRQHandler+0xfa>
            USART2->DR = g_uart2_tx_buffer[g_uart2_tx_buffer_head];
 8001698:	4b4e      	ldr	r3, [pc, #312]	@ (80017d4 <USART2_IRQHandler+0x1d8>)
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	4b4d      	ldr	r3, [pc, #308]	@ (80017d8 <USART2_IRQHandler+0x1dc>)
 80016a2:	5c9b      	ldrb	r3, [r3, r2]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b45      	ldr	r3, [pc, #276]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 80016a8:	605a      	str	r2, [r3, #4]
            g_uart2_tx_buffer_head = (g_uart2_tx_buffer_head + 1) % UART2_TX_BUFFER_SIZE;
 80016aa:	4b4a      	ldr	r3, [pc, #296]	@ (80017d4 <USART2_IRQHandler+0x1d8>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	425a      	negs	r2, r3
 80016b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016bc:	bf58      	it	pl
 80016be:	4253      	negpl	r3, r2
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b44      	ldr	r3, [pc, #272]	@ (80017d4 <USART2_IRQHandler+0x1d8>)
 80016c4:	801a      	strh	r2, [r3, #0]
            g_uart2_tx_buffer_count--;
 80016c6:	4b42      	ldr	r3, [pc, #264]	@ (80017d0 <USART2_IRQHandler+0x1d4>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	4b3f      	ldr	r3, [pc, #252]	@ (80017d0 <USART2_IRQHandler+0x1d4>)
 80016d2:	801a      	strh	r2, [r3, #0]

            if (g_uart2_tx_buffer_count == 0) {
 80016d4:	4b3e      	ldr	r3, [pc, #248]	@ (80017d0 <USART2_IRQHandler+0x1d4>)
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10b      	bne.n	80016f6 <USART2_IRQHandler+0xfa>
                // Đã gửi hết buffer, tắt ngắt TXE
                USART2->CR1 &= ~USART_CR1_TXEIE;
 80016de:	4b37      	ldr	r3, [pc, #220]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	4a36      	ldr	r2, [pc, #216]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 80016e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016e8:	60d3      	str	r3, [r2, #12]
                // Bật ngắt TC (Transmission Complete) để biết khi nào byte cuối cùng thực sự ra khỏi shift register
                USART2->CR1 |= USART_CR1_TCIE;
 80016ea:	4b34      	ldr	r3, [pc, #208]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	4a33      	ldr	r2, [pc, #204]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 80016f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016f4:	60d3      	str	r3, [r2, #12]
        }
        // Cờ TXE tự xóa khi ghi vào DR.
    }

    // --- Xử lý ngắt TC (Transmission Complete) ---
    if ((sr_reg & USART_SR_TC) && (USART2->CR1 & USART_CR1_TCIE)) {
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01b      	beq.n	8001738 <USART2_IRQHandler+0x13c>
 8001700:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d015      	beq.n	8001738 <USART2_IRQHandler+0x13c>
        // Byte cuối cùng đã được gửi hoàn toàn
        USART2->CR1 &= ~USART_CR1_TCIE; // Tắt ngắt TC
 800170c:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4a2a      	ldr	r2, [pc, #168]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 8001712:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001716:	60d3      	str	r3, [r2, #12]
        g_uart2_tx_busy = false;      // Đánh dấu  không còn bận gửi
 8001718:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <USART2_IRQHandler+0x1e0>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]

        if (g_uart2_tx_complete_callback != NULL) {
 800171e:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <USART2_IRQHandler+0x1e4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <USART2_IRQHandler+0x130>
            g_uart2_tx_complete_callback();
 8001726:	4b2e      	ldr	r3, [pc, #184]	@ (80017e0 <USART2_IRQHandler+0x1e4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4798      	blx	r3
        }
        // Cờ TC được xóa bằng cách ghi 0 vào nó (hoặc đọc SR rồi ghi vào DR - nhưng ở đây đã xong TX)
        USART2->SR &= ~USART_SR_TC; // Xóa cờ TC
 800172c:	4b23      	ldr	r3, [pc, #140]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a22      	ldr	r2, [pc, #136]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 8001732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001736:	6013      	str	r3, [r2, #0]
    }


    // --- Xử lý các cờ lỗi (Overrun, Noise, Framing, Parity) ---
    if (sr_reg & (USART_SR_ORE | USART_SR_NE | USART_SR_FE | USART_SR_PE)) {
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	2b00      	cmp	r3, #0
 8001740:	d037      	beq.n	80017b2 <USART2_IRQHandler+0x1b6>
        // Lưu lại lỗi để ứng dụng có thể kiểm tra
        if (sr_reg & USART_SR_ORE) g_uart2_error_flags |= UART_ERROR_OVERRUN;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <USART2_IRQHandler+0x160>
 800174c:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <USART2_IRQHandler+0x1d0>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <USART2_IRQHandler+0x1d0>)
 800175a:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_NE) g_uart2_error_flags |= UART_ERROR_NOISE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <USART2_IRQHandler+0x17a>
 8001766:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <USART2_IRQHandler+0x1d0>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <USART2_IRQHandler+0x1d0>)
 8001774:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_FE) g_uart2_error_flags |= UART_ERROR_FRAMING;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d007      	beq.n	8001790 <USART2_IRQHandler+0x194>
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <USART2_IRQHandler+0x1d0>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <USART2_IRQHandler+0x1d0>)
 800178e:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_PE) g_uart2_error_flags |= UART_ERROR_PARITY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <USART2_IRQHandler+0x1ae>
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <USART2_IRQHandler+0x1d0>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <USART2_IRQHandler+0x1d0>)
 80017a8:	701a      	strb	r2, [r3, #0]
        
        // Đọc DR để xóa cờ lỗi
        volatile uint32_t temp_dr = USART2->DR;
 80017aa:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <USART2_IRQHandler+0x1c0>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	607b      	str	r3, [r7, #4]
        (void)temp_dr; // Tránh warning
 80017b0:	687b      	ldr	r3, [r7, #4]
    }
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40004400 	.word	0x40004400
 80017c0:	200002ac 	.word	0x200002ac
 80017c4:	200002aa 	.word	0x200002aa
 80017c8:	20000228 	.word	0x20000228
 80017cc:	2000033c 	.word	0x2000033c
 80017d0:	20000334 	.word	0x20000334
 80017d4:	20000330 	.word	0x20000330
 80017d8:	200002b0 	.word	0x200002b0
 80017dc:	20000336 	.word	0x20000336
 80017e0:	20000338 	.word	0x20000338

080017e4 <UARTProto_Init>:
// Forward declarations of static helper functions
static void reset_rx_parser(void);
static void process_received_frame_logic(void);
static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length);

void UARTProto_Init(uart_command_handler_callback_t command_callback) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	g_app_command_callback = command_callback;
 80017ec:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <UARTProto_Init+0x1c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
    reset_rx_parser();
 80017f2:	f000 f87d 	bl	80018f0 <reset_rx_parser>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000354 	.word	0x20000354

08001804 <actually_send_frame>:

static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	603a      	str	r2, [r7, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	460b      	mov	r3, r1
 8001814:	71bb      	strb	r3, [r7, #6]
 8001816:	4613      	mov	r3, r2
 8001818:	717b      	strb	r3, [r7, #5]
    // This check is redundant if UARTProto_SendFrame also checks, but harmless.
    if (length > MAX_PAYLOAD_LENGTH) {
 800181a:	797b      	ldrb	r3, [r7, #5]
 800181c:	2b04      	cmp	r3, #4
 800181e:	d901      	bls.n	8001824 <actually_send_frame+0x20>
        return false;
 8001820:	2300      	movs	r3, #0
 8001822:	e045      	b.n	80018b0 <actually_send_frame+0xac>
    }

    uint8_t frame_buffer[MAX_FRAME_LENGTH];
    uint8_t frame_idx = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	75fb      	strb	r3, [r7, #23]

    frame_buffer[frame_idx++] = FRAME_START_BYTE;
 8001828:	7dfb      	ldrb	r3, [r7, #23]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	75fa      	strb	r2, [r7, #23]
 800182e:	3318      	adds	r3, #24
 8001830:	443b      	add	r3, r7
 8001832:	227e      	movs	r2, #126	@ 0x7e
 8001834:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = (uint8_t)type;
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	75fa      	strb	r2, [r7, #23]
 800183e:	3318      	adds	r3, #24
 8001840:	443b      	add	r3, r7
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = id;
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	75fa      	strb	r2, [r7, #23]
 800184e:	3318      	adds	r3, #24
 8001850:	443b      	add	r3, r7
 8001852:	79ba      	ldrb	r2, [r7, #6]
 8001854:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = length;
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	75fa      	strb	r2, [r7, #23]
 800185e:	3318      	adds	r3, #24
 8001860:	443b      	add	r3, r7
 8001862:	797a      	ldrb	r2, [r7, #5]
 8001864:	f803 2c0c 	strb.w	r2, [r3, #-12]

    if (length > 0 && payload != NULL) {
 8001868:	797b      	ldrb	r3, [r7, #5]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00f      	beq.n	800188e <actually_send_frame+0x8a>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00c      	beq.n	800188e <actually_send_frame+0x8a>
        memcpy(&frame_buffer[frame_idx], payload, length);
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	f107 020c 	add.w	r2, r7, #12
 800187a:	4413      	add	r3, r2
 800187c:	797a      	ldrb	r2, [r7, #5]
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f001 f9d0 	bl	8002c26 <memcpy>
        frame_idx += length;
 8001886:	7dfa      	ldrb	r2, [r7, #23]
 8001888:	797b      	ldrb	r3, [r7, #5]
 800188a:	4413      	add	r3, r2
 800188c:	75fb      	strb	r3, [r7, #23]
    }
    frame_buffer[frame_idx++] = FRAME_END_BYTE;
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	75fa      	strb	r2, [r7, #23]
 8001894:	3318      	adds	r3, #24
 8001896:	443b      	add	r3, r7
 8001898:	227f      	movs	r2, #127	@ 0x7f
 800189a:	f803 2c0c 	strb.w	r2, [r3, #-12]

    return UART2_SendBuffer_IT(frame_buffer, frame_idx);
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fdcf 	bl	800144c <UART2_SendBuffer_IT>
 80018ae:	4603      	mov	r3, r0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <UARTProto_SendFrame>:

bool UARTProto_SendFrame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	603a      	str	r2, [r7, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	460b      	mov	r3, r1
 80018c8:	71bb      	strb	r3, [r7, #6]
 80018ca:	4613      	mov	r3, r2
 80018cc:	717b      	strb	r3, [r7, #5]
    if (length > MAX_PAYLOAD_LENGTH) {
 80018ce:	797b      	ldrb	r3, [r7, #5]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d901      	bls.n	80018d8 <UARTProto_SendFrame+0x20>
        return false; // Payload too long
 80018d4:	2300      	movs	r3, #0
 80018d6:	e006      	b.n	80018e6 <UARTProto_SendFrame+0x2e>
    }
    return actually_send_frame(type, id, payload, length);
 80018d8:	797b      	ldrb	r3, [r7, #5]
 80018da:	79b9      	ldrb	r1, [r7, #6]
 80018dc:	79f8      	ldrb	r0, [r7, #7]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	f7ff ff90 	bl	8001804 <actually_send_frame>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <reset_rx_parser>:

static void reset_rx_parser(void) {
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
    g_rx_state = STATE_WAIT_START;
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <reset_rx_parser+0x20>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
    g_rx_buffer_idx = 0;
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <reset_rx_parser+0x24>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
    g_expected_payload_len = 0;
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <reset_rx_parser+0x28>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	2000033d 	.word	0x2000033d
 8001914:	20000349 	.word	0x20000349
 8001918:	20000353 	.word	0x20000353

0800191c <process_received_frame_logic>:

static void process_received_frame_logic(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
    // This function is called when a complete, structurally valid frame
    // of type FRAME_TYPE_LABVIEW_TO_STM has been received.
    // Frame data is in g_current_rx_frame.

    // Only expect to process commands from LabVIEW.
    if (g_current_rx_frame.type != FRAME_TYPE_LABVIEW_TO_STM) {
 8001920:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <process_received_frame_logic+0x5c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d120      	bne.n	800196a <process_received_frame_logic+0x4e>
        return; 
    }

    switch (g_current_rx_frame.id) {
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <process_received_frame_logic+0x5c>)
 800192a:	785b      	ldrb	r3, [r3, #1]
 800192c:	2b10      	cmp	r3, #16
 800192e:	d002      	beq.n	8001936 <process_received_frame_logic+0x1a>
 8001930:	2b13      	cmp	r3, #19
 8001932:	d00d      	beq.n	8001950 <process_received_frame_logic+0x34>
            }
            break;

        default:
            // Unknown command ID received from LabVIEW. Silently ignore or log.
            break;
 8001934:	e01e      	b.n	8001974 <process_received_frame_logic+0x58>
            if (g_current_rx_frame.length == 1) {
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <process_received_frame_logic+0x5c>)
 8001938:	799b      	ldrb	r3, [r3, #6]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d117      	bne.n	800196e <process_received_frame_logic+0x52>
                if (g_app_command_callback != NULL) {
 800193e:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <process_received_frame_logic+0x60>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d013      	beq.n	800196e <process_received_frame_logic+0x52>
                    g_app_command_callback(&g_current_rx_frame);
 8001946:	4b0d      	ldr	r3, [pc, #52]	@ (800197c <process_received_frame_logic+0x60>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	480b      	ldr	r0, [pc, #44]	@ (8001978 <process_received_frame_logic+0x5c>)
 800194c:	4798      	blx	r3
            break;
 800194e:	e00e      	b.n	800196e <process_received_frame_logic+0x52>
            if (g_current_rx_frame.length == 0) {
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <process_received_frame_logic+0x5c>)
 8001952:	799b      	ldrb	r3, [r3, #6]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10c      	bne.n	8001972 <process_received_frame_logic+0x56>
                if (g_app_command_callback != NULL) {
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <process_received_frame_logic+0x60>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <process_received_frame_logic+0x56>
                    g_app_command_callback(&g_current_rx_frame);
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <process_received_frame_logic+0x60>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4804      	ldr	r0, [pc, #16]	@ (8001978 <process_received_frame_logic+0x5c>)
 8001966:	4798      	blx	r3
            break;
 8001968:	e003      	b.n	8001972 <process_received_frame_logic+0x56>
        return; 
 800196a:	bf00      	nop
 800196c:	e002      	b.n	8001974 <process_received_frame_logic+0x58>
            break;
 800196e:	bf00      	nop
 8001970:	e000      	b.n	8001974 <process_received_frame_logic+0x58>
            break;
 8001972:	bf00      	nop
    }
    // No ACK or NACK is sent.
}
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000034c 	.word	0x2000034c
 800197c:	20000354 	.word	0x20000354

08001980 <UARTProto_Process>:

void UARTProto_Process(void) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
    uint8_t byte;
    while (UART2_ReadByte_FromBuffer(&byte)) {
 8001986:	e0b8      	b.n	8001afa <UARTProto_Process+0x17a>
        // Prevent buffer overflow if a malformed frame is too long
        if (g_rx_state != STATE_WAIT_START && g_rx_buffer_idx >= MAX_FRAME_LENGTH) {
 8001988:	4b62      	ldr	r3, [pc, #392]	@ (8001b14 <UARTProto_Process+0x194>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <UARTProto_Process+0x1c>
 8001990:	4b61      	ldr	r3, [pc, #388]	@ (8001b18 <UARTProto_Process+0x198>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b08      	cmp	r3, #8
 8001996:	d901      	bls.n	800199c <UARTProto_Process+0x1c>
            reset_rx_parser();
 8001998:	f7ff ffaa 	bl	80018f0 <reset_rx_parser>
            // After reset, the current 'byte' might be a START_BYTE
        }

        switch (g_rx_state) {
 800199c:	4b5d      	ldr	r3, [pc, #372]	@ (8001b14 <UARTProto_Process+0x194>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	f200 80a4 	bhi.w	8001aee <UARTProto_Process+0x16e>
 80019a6:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <UARTProto_Process+0x2c>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	080019c5 	.word	0x080019c5
 80019b0:	080019e9 	.word	0x080019e9
 80019b4:	08001a19 	.word	0x08001a19
 80019b8:	08001a3b 	.word	0x08001a3b
 80019bc:	08001a7f 	.word	0x08001a7f
 80019c0:	08001ac1 	.word	0x08001ac1
            case STATE_WAIT_START:
                if (byte == FRAME_START_BYTE) {
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80019c8:	f040 8094 	bne.w	8001af4 <UARTProto_Process+0x174>
                    // g_rx_buffer_idx is 0 due to reset_rx_parser()
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 80019cc:	4b52      	ldr	r3, [pc, #328]	@ (8001b18 <UARTProto_Process+0x198>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	b2d1      	uxtb	r1, r2
 80019d4:	4a50      	ldr	r2, [pc, #320]	@ (8001b18 <UARTProto_Process+0x198>)
 80019d6:	7011      	strb	r1, [r2, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	79b9      	ldrb	r1, [r7, #6]
 80019dc:	4b4f      	ldr	r3, [pc, #316]	@ (8001b1c <UARTProto_Process+0x19c>)
 80019de:	5499      	strb	r1, [r3, r2]
                    g_rx_state = STATE_WAIT_TYPE;
 80019e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001b14 <UARTProto_Process+0x194>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
                }
                break;
 80019e6:	e085      	b.n	8001af4 <UARTProto_Process+0x174>

            case STATE_WAIT_TYPE:
                g_current_rx_frame.type = (FrameType_t)byte;
 80019e8:	79ba      	ldrb	r2, [r7, #6]
 80019ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001b20 <UARTProto_Process+0x1a0>)
 80019ec:	701a      	strb	r2, [r3, #0]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 80019ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001b18 <UARTProto_Process+0x198>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	b2d1      	uxtb	r1, r2
 80019f6:	4a48      	ldr	r2, [pc, #288]	@ (8001b18 <UARTProto_Process+0x198>)
 80019f8:	7011      	strb	r1, [r2, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	79b9      	ldrb	r1, [r7, #6]
 80019fe:	4b47      	ldr	r3, [pc, #284]	@ (8001b1c <UARTProto_Process+0x19c>)
 8001a00:	5499      	strb	r1, [r3, r2]
                if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 8001a02:	4b47      	ldr	r3, [pc, #284]	@ (8001b20 <UARTProto_Process+0x1a0>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d103      	bne.n	8001a12 <UARTProto_Process+0x92>
                    g_rx_state = STATE_WAIT_ID;
 8001a0a:	4b42      	ldr	r3, [pc, #264]	@ (8001b14 <UARTProto_Process+0x194>)
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	701a      	strb	r2, [r3, #0]
                } else {
                    // Received an unexpected frame type (e.g., STM_TO_LABVIEW type, or invalid)
                    reset_rx_parser();
                }
                break;
 8001a10:	e073      	b.n	8001afa <UARTProto_Process+0x17a>
                    reset_rx_parser();
 8001a12:	f7ff ff6d 	bl	80018f0 <reset_rx_parser>
                break;
 8001a16:	e070      	b.n	8001afa <UARTProto_Process+0x17a>

            case STATE_WAIT_ID:
                g_current_rx_frame.id = byte;
 8001a18:	79ba      	ldrb	r2, [r7, #6]
 8001a1a:	4b41      	ldr	r3, [pc, #260]	@ (8001b20 <UARTProto_Process+0x1a0>)
 8001a1c:	705a      	strb	r2, [r3, #1]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b18 <UARTProto_Process+0x198>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	b2d1      	uxtb	r1, r2
 8001a26:	4a3c      	ldr	r2, [pc, #240]	@ (8001b18 <UARTProto_Process+0x198>)
 8001a28:	7011      	strb	r1, [r2, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	79b9      	ldrb	r1, [r7, #6]
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b1c <UARTProto_Process+0x19c>)
 8001a30:	5499      	strb	r1, [r3, r2]
                g_rx_state = STATE_WAIT_LENGTH;
 8001a32:	4b38      	ldr	r3, [pc, #224]	@ (8001b14 <UARTProto_Process+0x194>)
 8001a34:	2203      	movs	r2, #3
 8001a36:	701a      	strb	r2, [r3, #0]
                break;
 8001a38:	e05f      	b.n	8001afa <UARTProto_Process+0x17a>

            case STATE_WAIT_LENGTH:
                if (byte > MAX_PAYLOAD_LENGTH) {
 8001a3a:	79bb      	ldrb	r3, [r7, #6]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d902      	bls.n	8001a46 <UARTProto_Process+0xc6>
                    reset_rx_parser(); // Error: payload length field is too large
 8001a40:	f7ff ff56 	bl	80018f0 <reset_rx_parser>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
                    } else {
                        g_rx_state = STATE_WAIT_PAYLOAD;
                    }
                }
                break;
 8001a44:	e059      	b.n	8001afa <UARTProto_Process+0x17a>
                    g_current_rx_frame.length = byte;
 8001a46:	79ba      	ldrb	r2, [r7, #6]
 8001a48:	4b35      	ldr	r3, [pc, #212]	@ (8001b20 <UARTProto_Process+0x1a0>)
 8001a4a:	719a      	strb	r2, [r3, #6]
                    g_expected_payload_len = byte;
 8001a4c:	79ba      	ldrb	r2, [r7, #6]
 8001a4e:	4b35      	ldr	r3, [pc, #212]	@ (8001b24 <UARTProto_Process+0x1a4>)
 8001a50:	701a      	strb	r2, [r3, #0]
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 8001a52:	4b31      	ldr	r3, [pc, #196]	@ (8001b18 <UARTProto_Process+0x198>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	b2d1      	uxtb	r1, r2
 8001a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001b18 <UARTProto_Process+0x198>)
 8001a5c:	7011      	strb	r1, [r2, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	79b9      	ldrb	r1, [r7, #6]
 8001a62:	4b2e      	ldr	r3, [pc, #184]	@ (8001b1c <UARTProto_Process+0x19c>)
 8001a64:	5499      	strb	r1, [r3, r2]
                    if (g_expected_payload_len == 0) {
 8001a66:	4b2f      	ldr	r3, [pc, #188]	@ (8001b24 <UARTProto_Process+0x1a4>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d103      	bne.n	8001a76 <UARTProto_Process+0xf6>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
 8001a6e:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <UARTProto_Process+0x194>)
 8001a70:	2205      	movs	r2, #5
 8001a72:	701a      	strb	r2, [r3, #0]
                break;
 8001a74:	e041      	b.n	8001afa <UARTProto_Process+0x17a>
                        g_rx_state = STATE_WAIT_PAYLOAD;
 8001a76:	4b27      	ldr	r3, [pc, #156]	@ (8001b14 <UARTProto_Process+0x194>)
 8001a78:	2204      	movs	r2, #4
 8001a7a:	701a      	strb	r2, [r3, #0]
                break;
 8001a7c:	e03d      	b.n	8001afa <UARTProto_Process+0x17a>

            case STATE_WAIT_PAYLOAD:
                // Current payload byte's 0-based index in the payload array.
                // Header (START,TYPE,ID,LENGTH) is 4 bytes.
                // g_rx_buffer_idx is count of bytes in g_rx_buffer *before* adding current 'byte'.
                uint8_t payload_byte_index = g_rx_buffer_idx - 4;
 8001a7e:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <UARTProto_Process+0x198>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	3b04      	subs	r3, #4
 8001a84:	71fb      	strb	r3, [r7, #7]

                // Ensure we don't write past allocated payload buffer, though g_expected_payload_len should protect this.
                if (payload_byte_index < MAX_PAYLOAD_LENGTH) {
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d805      	bhi.n	8001a98 <UARTProto_Process+0x118>
                     g_current_rx_frame.payload[payload_byte_index] = byte;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	79b9      	ldrb	r1, [r7, #6]
 8001a90:	4a23      	ldr	r2, [pc, #140]	@ (8001b20 <UARTProto_Process+0x1a0>)
 8001a92:	4413      	add	r3, r2
 8001a94:	460a      	mov	r2, r1
 8001a96:	709a      	strb	r2, [r3, #2]
                }
                g_rx_buffer[g_rx_buffer_idx++] = byte; // Store current payload byte in raw buffer
 8001a98:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <UARTProto_Process+0x198>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	b2d1      	uxtb	r1, r2
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b18 <UARTProto_Process+0x198>)
 8001aa2:	7011      	strb	r1, [r2, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	79b9      	ldrb	r1, [r7, #6]
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <UARTProto_Process+0x19c>)
 8001aaa:	5499      	strb	r1, [r3, r2]

                if ((payload_byte_index + 1) >= g_expected_payload_len) {
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b24 <UARTProto_Process+0x1a4>)
 8001ab2:	7812      	ldrb	r2, [r2, #0]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	db1f      	blt.n	8001af8 <UARTProto_Process+0x178>
                    g_rx_state = STATE_WAIT_END; // All expected payload bytes received
 8001ab8:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <UARTProto_Process+0x194>)
 8001aba:	2205      	movs	r2, #5
 8001abc:	701a      	strb	r2, [r3, #0]
                }
                break;
 8001abe:	e01b      	b.n	8001af8 <UARTProto_Process+0x178>

            case STATE_WAIT_END:
                if (byte == FRAME_END_BYTE) {
 8001ac0:	79bb      	ldrb	r3, [r7, #6]
 8001ac2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ac4:	d110      	bne.n	8001ae8 <UARTProto_Process+0x168>
                    // Frame is structurally complete.
                    // g_rx_buffer_idx is count of (START,TYPE,ID,LENGTH,PAYLOAD bytes).
                    // Expected count = 4 + g_current_rx_frame.length.
                    if (g_rx_buffer_idx == (4 + g_current_rx_frame.length)) {
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <UARTProto_Process+0x198>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <UARTProto_Process+0x1a0>)
 8001ace:	799b      	ldrb	r3, [r3, #6]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d106      	bne.n	8001ae4 <UARTProto_Process+0x164>
                        // Only process if it's a command from LabVIEW (already checked at TYPE stage)
                        if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 8001ad6:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <UARTProto_Process+0x1a0>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d104      	bne.n	8001ae8 <UARTProto_Process+0x168>
                            process_received_frame_logic();
 8001ade:	f7ff ff1d 	bl	800191c <process_received_frame_logic>
 8001ae2:	e001      	b.n	8001ae8 <UARTProto_Process+0x168>
                        }
                    } else {
                        // Error: Frame length mismatch. Reset parser.
                        reset_rx_parser();
 8001ae4:	f7ff ff04 	bl	80018f0 <reset_rx_parser>
                    }
                } else {
                    // Error: Expected FRAME_END_BYTE but received something else.
                }
                reset_rx_parser(); // Always reset for the next frame, regardless of END byte correctness.
 8001ae8:	f7ff ff02 	bl	80018f0 <reset_rx_parser>
                break;
 8001aec:	e005      	b.n	8001afa <UARTProto_Process+0x17a>

            default: 
                reset_rx_parser();
 8001aee:	f7ff feff 	bl	80018f0 <reset_rx_parser>
                break;
 8001af2:	e002      	b.n	8001afa <UARTProto_Process+0x17a>
                break;
 8001af4:	bf00      	nop
 8001af6:	e000      	b.n	8001afa <UARTProto_Process+0x17a>
                break;
 8001af8:	bf00      	nop
    while (UART2_ReadByte_FromBuffer(&byte)) {
 8001afa:	1dbb      	adds	r3, r7, #6
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fd19 	bl	8001534 <UART2_ReadByte_FromBuffer>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f47f af3f 	bne.w	8001988 <UARTProto_Process+0x8>
        }
    }
}
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000033d 	.word	0x2000033d
 8001b18:	20000349 	.word	0x20000349
 8001b1c:	20000340 	.word	0x20000340
 8001b20:	2000034c 	.word	0x2000034c
 8001b24:	20000353 	.word	0x20000353

08001b28 <UARTProto_CheckErrors>:

bool UARTProto_CheckErrors(void) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
    uint8_t errors = UART2_GetErrorFlags();
 8001b2e:	f7ff fd3b 	bl	80015a8 <UART2_GetErrorFlags>
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
    bool has_errors = (errors != 0);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	71bb      	strb	r3, [r7, #6]

    if (has_errors) {
 8001b42:	79bb      	ldrb	r3, [r7, #6]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00a      	beq.n	8001b5e <UARTProto_CheckErrors+0x36>
        if (errors & UART_ERROR_BUFFER_FULL) {
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <UARTProto_CheckErrors+0x2e>
            reset_rx_parser();
 8001b52:	f7ff fecd 	bl	80018f0 <reset_rx_parser>
        }
        UART2_ClearErrorFlags(errors); // Clear the reported errors in the driver.
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fd31 	bl	80015c0 <UART2_ClearErrorFlags>
    }
    return has_errors;
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <main_handle_labview_command>:
static uint8_t g_app_person_count = 0;
static uint8_t g_app_system_mode = PAYLOAD_MODE_NORMAL;


// --- Hàm callback được gọi bởi UARTProto_Service khi nhận được lệnh từ LabVIEW ---
bool main_handle_labview_command(const ParsedFrame_t* frame) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
    // Nháy LED để báo hiệu nhận được frame
	GPIO_WritePin(LED_USER_PORT, LED_USER_PIN, GPIO_PIN_SET); Delay_ms(50);
 8001b70:	2201      	movs	r2, #1
 8001b72:	2120      	movs	r1, #32
 8001b74:	482e      	ldr	r0, [pc, #184]	@ (8001c30 <main_handle_labview_command+0xc8>)
 8001b76:	f7ff f9f8 	bl	8000f6a <GPIO_WritePin>
 8001b7a:	2032      	movs	r0, #50	@ 0x32
 8001b7c:	f7ff fb00 	bl	8001180 <Delay_ms>
	    GPIO_WritePin(LED_USER_PORT, LED_USER_PIN, GPIO_PIN_RESET); Delay_ms(50);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2120      	movs	r1, #32
 8001b84:	482a      	ldr	r0, [pc, #168]	@ (8001c30 <main_handle_labview_command+0xc8>)
 8001b86:	f7ff f9f0 	bl	8000f6a <GPIO_WritePin>
 8001b8a:	2032      	movs	r0, #50	@ 0x32
 8001b8c:	f7ff faf8 	bl	8001180 <Delay_ms>
	    GPIO_WritePin(LED_USER_PORT, LED_USER_PIN, GPIO_PIN_SET); Delay_ms(50);
 8001b90:	2201      	movs	r2, #1
 8001b92:	2120      	movs	r1, #32
 8001b94:	4826      	ldr	r0, [pc, #152]	@ (8001c30 <main_handle_labview_command+0xc8>)
 8001b96:	f7ff f9e8 	bl	8000f6a <GPIO_WritePin>
 8001b9a:	2032      	movs	r0, #50	@ 0x32
 8001b9c:	f7ff faf0 	bl	8001180 <Delay_ms>
	    GPIO_WritePin(LED_USER_PORT, LED_USER_PIN, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	4822      	ldr	r0, [pc, #136]	@ (8001c30 <main_handle_labview_command+0xc8>)
 8001ba6:	f7ff f9e0 	bl	8000f6a <GPIO_WritePin>

    if (frame->type != FRAME_TYPE_LABVIEW_TO_STM) {
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d001      	beq.n	8001bb6 <main_handle_labview_command+0x4e>
        return false; // Không phải loại frame mong đợi
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e037      	b.n	8001c26 <main_handle_labview_command+0xbe>
    }

    switch (frame->id) {
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	2b10      	cmp	r3, #16
 8001bbc:	d002      	beq.n	8001bc4 <main_handle_labview_command+0x5c>
 8001bbe:	2b13      	cmp	r3, #19
 8001bc0:	d01f      	beq.n	8001c02 <main_handle_labview_command+0x9a>
 8001bc2:	e02f      	b.n	8001c24 <main_handle_labview_command+0xbc>
        case FRAME_ID_LABVIEW_SET_MODE:
            if (frame->length == 1) {
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	799b      	ldrb	r3, [r3, #6]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d118      	bne.n	8001bfe <main_handle_labview_command+0x96>
                uint8_t new_mode = frame->payload[0];
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	73fb      	strb	r3, [r7, #15]
                if (new_mode == PAYLOAD_MODE_NORMAL ||
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <main_handle_labview_command+0x7c>
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d002      	beq.n	8001be4 <main_handle_labview_command+0x7c>
                    new_mode == PAYLOAD_MODE_FORCE_OPEN ||
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d10a      	bne.n	8001bfa <main_handle_labview_command+0x92>
                    new_mode == PAYLOAD_MODE_FORCE_CLOSE) {
                    g_app_system_mode = new_mode;
 8001be4:	4a13      	ldr	r2, [pc, #76]	@ (8001c34 <main_handle_labview_command+0xcc>)
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	7013      	strb	r3, [r2, #0]
                    // Gửi lại trạng thái mode mới để LabVIEW biết đã cập nhật
                    UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_SYSTEM_MODE, &g_app_system_mode, 1);
 8001bea:	2301      	movs	r3, #1
 8001bec:	4a11      	ldr	r2, [pc, #68]	@ (8001c34 <main_handle_labview_command+0xcc>)
 8001bee:	2104      	movs	r1, #4
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff fe61 	bl	80018b8 <UARTProto_SendFrame>
                    return true;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e015      	b.n	8001c26 <main_handle_labview_command+0xbe>
                } else {
                    return false; // Giá trị mode không hợp lệ
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e013      	b.n	8001c26 <main_handle_labview_command+0xbe>
                }
            } else {
                return false; // Độ dài payload sai
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e011      	b.n	8001c26 <main_handle_labview_command+0xbe>
            }
            // break;

        case FRAME_ID_LABVIEW_RESET_COUNT:
            if (frame->length == 0) {
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	799b      	ldrb	r3, [r3, #6]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10a      	bne.n	8001c20 <main_handle_labview_command+0xb8>
                g_app_person_count = 0;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <main_handle_labview_command+0xd0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
                // Gửi lại số người mới (0) để LabVIEW biết đã cập nhật
                UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_PERSON_COUNT, &g_app_person_count, 1);
 8001c10:	2301      	movs	r3, #1
 8001c12:	4a09      	ldr	r2, [pc, #36]	@ (8001c38 <main_handle_labview_command+0xd0>)
 8001c14:	2103      	movs	r1, #3
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7ff fe4e 	bl	80018b8 <UARTProto_SendFrame>
                return true;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e002      	b.n	8001c26 <main_handle_labview_command+0xbe>
            } else {
                return false; // Độ dài payload sai
 8001c20:	2300      	movs	r3, #0
 8001c22:	e000      	b.n	8001c26 <main_handle_labview_command+0xbe>
            }
            // break;

        default:
            return false; // ID lệnh không xác định
 8001c24:	2300      	movs	r3, #0
    }
    // return false; // Mặc định
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40020000 	.word	0x40020000
 8001c34:	2000035b 	.word	0x2000035b
 8001c38:	2000035a 	.word	0x2000035a

08001c3c <main>:


int main(void) {
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b08e      	sub	sp, #56	@ 0x38
 8001c40:	af04      	add	r7, sp, #16
    // 1. Khởi tạo hệ thống cơ bản
    SystemClock_Config();
 8001c42:	f7ff f9ab 	bl	8000f9c <SystemClock_Config>
    SysTick_Init();
 8001c46:	f7ff fa6d 	bl	8001124 <SysTick_Init>

    // 2. Khởi tạo GPIO cho LED
    GPIO_InitPin(LED_USER_PORT, LED_USER_PIN, GPIO_MODE_OUTPUT, GPIO_PULL_NO,
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	2300      	movs	r3, #0
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2120      	movs	r1, #32
 8001c5c:	4865      	ldr	r0, [pc, #404]	@ (8001df4 <main+0x1b8>)
 8001c5e:	f7ff f8c7 	bl	8000df0 <GPIO_InitPin>
                 GPIO_SPEED_LOW, GPIO_OTYPE_PUSHPULL, 0);
    GPIO_WritePin(LED_USER_PORT, LED_USER_PIN, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2120      	movs	r1, #32
 8001c66:	4863      	ldr	r0, [pc, #396]	@ (8001df4 <main+0x1b8>)
 8001c68:	f7ff f97f 	bl	8000f6a <GPIO_WritePin>

    for (int i = 0; i < 3; ++i) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c70:	e012      	b.n	8001c98 <main+0x5c>
            GPIO_WritePin(LED_USER_PORT, LED_USER_PIN, GPIO_PIN_SET); Delay_ms(150);
 8001c72:	2201      	movs	r2, #1
 8001c74:	2120      	movs	r1, #32
 8001c76:	485f      	ldr	r0, [pc, #380]	@ (8001df4 <main+0x1b8>)
 8001c78:	f7ff f977 	bl	8000f6a <GPIO_WritePin>
 8001c7c:	2096      	movs	r0, #150	@ 0x96
 8001c7e:	f7ff fa7f 	bl	8001180 <Delay_ms>
            GPIO_WritePin(LED_USER_PORT, LED_USER_PIN, GPIO_PIN_RESET); Delay_ms(150);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2120      	movs	r1, #32
 8001c86:	485b      	ldr	r0, [pc, #364]	@ (8001df4 <main+0x1b8>)
 8001c88:	f7ff f96f 	bl	8000f6a <GPIO_WritePin>
 8001c8c:	2096      	movs	r0, #150	@ 0x96
 8001c8e:	f7ff fa77 	bl	8001180 <Delay_ms>
    for (int i = 0; i < 3; ++i) {
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	3301      	adds	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	dde9      	ble.n	8001c72 <main+0x36>
        }

    // 3. Khởi tạo UART Driver (USART2)
    UART2_Init(115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8001ca8:	f7ff fb0e 	bl	80012c8 <UART2_Init>

    // 4. Khởi tạo UART Protocol Service
    UARTProto_Init(main_handle_labview_command);
 8001cac:	4852      	ldr	r0, [pc, #328]	@ (8001df8 <main+0x1bc>)
 8001cae:	f7ff fd99 	bl	80017e4 <UARTProto_Init>

    // Gửi thông báo khởi động (ví dụ, dùng FRAME_ID_STM_LOG_DEBUG)
    char startup_msg[] = "STM32 No-ACK Test Ready!";
 8001cb2:	4b52      	ldr	r3, [pc, #328]	@ (8001dfc <main+0x1c0>)
 8001cb4:	1d3c      	adds	r4, r7, #4
 8001cb6:	461d      	mov	r5, r3
 8001cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cc0:	c403      	stmia	r4!, {r0, r1}
 8001cc2:	7022      	strb	r2, [r4, #0]
    if (!UART2_IsTxBusy()) { // Kiểm tra xem driver có bận không
 8001cc4:	f7ff fc2a 	bl	800151c <UART2_IsTxBusy>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f083 0301 	eor.w	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00a      	beq.n	8001cea <main+0xae>
         UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_LOG_DEBUG, (uint8_t*)startup_msg, strlen(startup_msg));
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fad2 	bl	8000280 <strlen>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	1d3a      	adds	r2, r7, #4
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff fde7 	bl	80018b8 <UARTProto_SendFrame>
    }
    Delay_ms(100); // Chờ chút cho message đi
 8001cea:	2064      	movs	r0, #100	@ 0x64
 8001cec:	f7ff fa48 	bl	8001180 <Delay_ms>

    uint32_t last_status_send_tick = GetTick();
 8001cf0:	f7ff fa5e 	bl	80011b0 <GetTick>
 8001cf4:	6238      	str	r0, [r7, #32]

    while (1) {
        // Gọi hàm xử lý của UART Protocol Service định kỳ
        UARTProto_Process();
 8001cf6:	f7ff fe43 	bl	8001980 <UARTProto_Process>

        // Kiểm tra và xử lý lỗi UART (nếu có)
        if (UARTProto_CheckErrors()) {
 8001cfa:	f7ff ff15 	bl	8001b28 <UARTProto_CheckErrors>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <main+0xd2>
            // Có lỗi UART, ví dụ: bật LED báo lỗi
            GPIO_WritePin(LED_USER_PORT, LED_USER_PIN, GPIO_PIN_SET); // Bật LED đỏ nếu lỗi
 8001d04:	2201      	movs	r2, #1
 8001d06:	2120      	movs	r1, #32
 8001d08:	483a      	ldr	r0, [pc, #232]	@ (8001df4 <main+0x1b8>)
 8001d0a:	f7ff f92e 	bl	8000f6a <GPIO_WritePin>
        }


        // Gửi frame FULL_SNAPSHOT lên LabVIEW mỗi 2 giây
        if ((GetTick() - last_status_send_tick) >= 2000) {
 8001d0e:	f7ff fa4f 	bl	80011b0 <GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d1c:	d331      	bcc.n	8001d82 <main+0x146>
            if (!UART2_IsTxBusy()) { // Chỉ gửi nếu driver không bận
 8001d1e:	f7ff fbfd 	bl	800151c <UART2_IsTxBusy>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f083 0301 	eor.w	r3, r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d029      	beq.n	8001d82 <main+0x146>
                uint8_t snapshot_payload[4]; // door_state, light_state, person_count, system_mode
                snapshot_payload[0] = g_app_system_mode;
 8001d2e:	4b34      	ldr	r3, [pc, #208]	@ (8001e00 <main+0x1c4>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	703b      	strb	r3, [r7, #0]
                snapshot_payload[1] = g_app_door_state;
 8001d34:	4b33      	ldr	r3, [pc, #204]	@ (8001e04 <main+0x1c8>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	707b      	strb	r3, [r7, #1]
                snapshot_payload[2] = g_app_person_count;
 8001d3a:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <main+0x1cc>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	70bb      	strb	r3, [r7, #2]
                snapshot_payload[3] = g_app_light_state;
 8001d40:	4b32      	ldr	r3, [pc, #200]	@ (8001e0c <main+0x1d0>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	70fb      	strb	r3, [r7, #3]

                if (UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_FULL_SNAPSHOT, snapshot_payload, 4)) {
 8001d46:	463a      	mov	r2, r7
 8001d48:	2304      	movs	r3, #4
 8001d4a:	2105      	movs	r1, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7ff fdb3 	bl	80018b8 <UARTProto_SendFrame>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d014      	beq.n	8001d82 <main+0x146>
                    last_status_send_tick = GetTick();
 8001d58:	f7ff fa2a 	bl	80011b0 <GetTick>
 8001d5c:	6238      	str	r0, [r7, #32]
                    // Nháy LED nhẹ báo đã cố gửi
                    GPIO_WritePin(LED_USER_PORT, LED_USER_PIN, GPIO_PIN_RESET); // Tắt (nếu đang bật do lỗi)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2120      	movs	r1, #32
 8001d62:	4824      	ldr	r0, [pc, #144]	@ (8001df4 <main+0x1b8>)
 8001d64:	f7ff f901 	bl	8000f6a <GPIO_WritePin>
                    GPIO_WritePin(LED_USER_PORT, LED_USER_PIN, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	4821      	ldr	r0, [pc, #132]	@ (8001df4 <main+0x1b8>)
 8001d6e:	f7ff f8fc 	bl	8000f6a <GPIO_WritePin>
                    Delay_ms(10);
 8001d72:	200a      	movs	r0, #10
 8001d74:	f7ff fa04 	bl	8001180 <Delay_ms>
                    GPIO_WritePin(LED_USER_PORT, LED_USER_PIN, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2120      	movs	r1, #32
 8001d7c:	481d      	ldr	r0, [pc, #116]	@ (8001df4 <main+0x1b8>)
 8001d7e:	f7ff f8f4 	bl	8000f6a <GPIO_WritePin>
            }
        }

        // Giả lập thay đổi trạng thái để gửi đi
        static uint32_t last_state_change_tick = 0;
        if((GetTick() - last_state_change_tick) >= 3000) { // Mỗi 3 giây
 8001d82:	f7ff fa15 	bl	80011b0 <GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <main+0x1d4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d9af      	bls.n	8001cf6 <main+0xba>
            g_app_person_count = (g_app_person_count + 1) % 10;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <main+0x1cc>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <main+0x1d8>)
 8001d9e:	fb83 1302 	smull	r1, r3, r3, r2
 8001da2:	1099      	asrs	r1, r3, #2
 8001da4:	17d3      	asrs	r3, r2, #31
 8001da6:	1ac9      	subs	r1, r1, r3
 8001da8:	460b      	mov	r3, r1
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	1ad1      	subs	r1, r2, r3
 8001db2:	b2ca      	uxtb	r2, r1
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <main+0x1cc>)
 8001db6:	701a      	strb	r2, [r3, #0]
            g_app_door_state = (g_app_door_state + 1) % 4; // Cycle qua 0,1,2,3
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <main+0x1c8>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	425a      	negs	r2, r3
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	f002 0203 	and.w	r2, r2, #3
 8001dc8:	bf58      	it	pl
 8001dca:	4253      	negpl	r3, r2
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <main+0x1c8>)
 8001dd0:	701a      	strb	r2, [r3, #0]
            g_app_light_state = !g_app_light_state;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <main+0x1d0>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf0c      	ite	eq
 8001dda:	2301      	moveq	r3, #1
 8001ddc:	2300      	movne	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e0c <main+0x1d0>)
 8001de4:	701a      	strb	r2, [r3, #0]
            last_state_change_tick = GetTick();
 8001de6:	f7ff f9e3 	bl	80011b0 <GetTick>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4a08      	ldr	r2, [pc, #32]	@ (8001e10 <main+0x1d4>)
 8001dee:	6013      	str	r3, [r2, #0]
    while (1) {
 8001df0:	e781      	b.n	8001cf6 <main+0xba>
 8001df2:	bf00      	nop
 8001df4:	40020000 	.word	0x40020000
 8001df8:	08001b69 	.word	0x08001b69
 8001dfc:	08004988 	.word	0x08004988
 8001e00:	2000035b 	.word	0x2000035b
 8001e04:	20000358 	.word	0x20000358
 8001e08:	2000035a 	.word	0x2000035a
 8001e0c:	20000359 	.word	0x20000359
 8001e10:	2000035c 	.word	0x2000035c
 8001e14:	66666667 	.word	0x66666667

08001e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <NMI_Handler+0x4>

08001e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <HardFault_Handler+0x4>

08001e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <MemManage_Handler+0x4>

08001e30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  return 1;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <_kill>:

int _kill(int pid, int sig)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e84:	f000 fea2 	bl	8002bcc <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2216      	movs	r2, #22
 8001e8c:	601a      	str	r2, [r3, #0]
  return -1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_exit>:

void _exit (int status)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffe7 	bl	8001e7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <_exit+0x12>

08001eb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	e00a      	b.n	8001ed8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec2:	f3af 8000 	nop.w
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60ba      	str	r2, [r7, #8]
 8001ece:	b2ca      	uxtb	r2, r1
 8001ed0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dbf0      	blt.n	8001ec2 <_read+0x12>
  }

  return len;
 8001ee0:	687b      	ldr	r3, [r7, #4]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e009      	b.n	8001f10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	60ba      	str	r2, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dbf1      	blt.n	8001efc <_write+0x12>
  }
  return len;
 8001f18:	687b      	ldr	r3, [r7, #4]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_close>:

int _close(int file)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_isatty>:

int _isatty(int file)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f94:	4a14      	ldr	r2, [pc, #80]	@ (8001fe8 <_sbrk+0x5c>)
 8001f96:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <_sbrk+0x60>)
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa0:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <_sbrk+0x64>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <_sbrk+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d207      	bcs.n	8001fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fbc:	f000 fe06 	bl	8002bcc <__errno>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e009      	b.n	8001fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <_sbrk+0x64>)
 8001fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fde:	68fb      	ldr	r3, [r7, #12]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20018000 	.word	0x20018000
 8001fec:	00000400 	.word	0x00000400
 8001ff0:	20000360 	.word	0x20000360
 8001ff4:	200004b0 	.word	0x200004b0

08001ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <SystemInit+0x20>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002002:	4a05      	ldr	r2, [pc, #20]	@ (8002018 <SystemInit+0x20>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800201c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002054 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002020:	f7ff ffea 	bl	8001ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002024:	480c      	ldr	r0, [pc, #48]	@ (8002058 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002026:	490d      	ldr	r1, [pc, #52]	@ (800205c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002028:	4a0d      	ldr	r2, [pc, #52]	@ (8002060 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800202c:	e002      	b.n	8002034 <LoopCopyDataInit>

0800202e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002032:	3304      	adds	r3, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002038:	d3f9      	bcc.n	800202e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203a:	4a0a      	ldr	r2, [pc, #40]	@ (8002064 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800203c:	4c0a      	ldr	r4, [pc, #40]	@ (8002068 <LoopFillZerobss+0x22>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002040:	e001      	b.n	8002046 <LoopFillZerobss>

08002042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002044:	3204      	adds	r2, #4

08002046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002048:	d3fb      	bcc.n	8002042 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800204a:	f000 fdc5 	bl	8002bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204e:	f7ff fdf5 	bl	8001c3c <main>
  bx  lr    
 8002052:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002054:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800205c:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8002060:	08004d20 	.word	0x08004d20
  ldr r2, =_sbss
 8002064:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8002068:	200004b0 	.word	0x200004b0

0800206c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC_IRQHandler>

0800206e <__cvt>:
 800206e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002072:	ec57 6b10 	vmov	r6, r7, d0
 8002076:	2f00      	cmp	r7, #0
 8002078:	460c      	mov	r4, r1
 800207a:	4619      	mov	r1, r3
 800207c:	463b      	mov	r3, r7
 800207e:	bfbb      	ittet	lt
 8002080:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002084:	461f      	movlt	r7, r3
 8002086:	2300      	movge	r3, #0
 8002088:	232d      	movlt	r3, #45	@ 0x2d
 800208a:	700b      	strb	r3, [r1, #0]
 800208c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800208e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002092:	4691      	mov	r9, r2
 8002094:	f023 0820 	bic.w	r8, r3, #32
 8002098:	bfbc      	itt	lt
 800209a:	4632      	movlt	r2, r6
 800209c:	4616      	movlt	r6, r2
 800209e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80020a2:	d005      	beq.n	80020b0 <__cvt+0x42>
 80020a4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80020a8:	d100      	bne.n	80020ac <__cvt+0x3e>
 80020aa:	3401      	adds	r4, #1
 80020ac:	2102      	movs	r1, #2
 80020ae:	e000      	b.n	80020b2 <__cvt+0x44>
 80020b0:	2103      	movs	r1, #3
 80020b2:	ab03      	add	r3, sp, #12
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	ab02      	add	r3, sp, #8
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	ec47 6b10 	vmov	d0, r6, r7
 80020be:	4653      	mov	r3, sl
 80020c0:	4622      	mov	r2, r4
 80020c2:	f000 fe49 	bl	8002d58 <_dtoa_r>
 80020c6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80020ca:	4605      	mov	r5, r0
 80020cc:	d119      	bne.n	8002102 <__cvt+0x94>
 80020ce:	f019 0f01 	tst.w	r9, #1
 80020d2:	d00e      	beq.n	80020f2 <__cvt+0x84>
 80020d4:	eb00 0904 	add.w	r9, r0, r4
 80020d8:	2200      	movs	r2, #0
 80020da:	2300      	movs	r3, #0
 80020dc:	4630      	mov	r0, r6
 80020de:	4639      	mov	r1, r7
 80020e0:	f7fe fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 80020e4:	b108      	cbz	r0, 80020ea <__cvt+0x7c>
 80020e6:	f8cd 900c 	str.w	r9, [sp, #12]
 80020ea:	2230      	movs	r2, #48	@ 0x30
 80020ec:	9b03      	ldr	r3, [sp, #12]
 80020ee:	454b      	cmp	r3, r9
 80020f0:	d31e      	bcc.n	8002130 <__cvt+0xc2>
 80020f2:	9b03      	ldr	r3, [sp, #12]
 80020f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80020f6:	1b5b      	subs	r3, r3, r5
 80020f8:	4628      	mov	r0, r5
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	b004      	add	sp, #16
 80020fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002102:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002106:	eb00 0904 	add.w	r9, r0, r4
 800210a:	d1e5      	bne.n	80020d8 <__cvt+0x6a>
 800210c:	7803      	ldrb	r3, [r0, #0]
 800210e:	2b30      	cmp	r3, #48	@ 0x30
 8002110:	d10a      	bne.n	8002128 <__cvt+0xba>
 8002112:	2200      	movs	r2, #0
 8002114:	2300      	movs	r3, #0
 8002116:	4630      	mov	r0, r6
 8002118:	4639      	mov	r1, r7
 800211a:	f7fe fcdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800211e:	b918      	cbnz	r0, 8002128 <__cvt+0xba>
 8002120:	f1c4 0401 	rsb	r4, r4, #1
 8002124:	f8ca 4000 	str.w	r4, [sl]
 8002128:	f8da 3000 	ldr.w	r3, [sl]
 800212c:	4499      	add	r9, r3
 800212e:	e7d3      	b.n	80020d8 <__cvt+0x6a>
 8002130:	1c59      	adds	r1, r3, #1
 8002132:	9103      	str	r1, [sp, #12]
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e7d9      	b.n	80020ec <__cvt+0x7e>

08002138 <__exponent>:
 8002138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800213a:	2900      	cmp	r1, #0
 800213c:	bfba      	itte	lt
 800213e:	4249      	neglt	r1, r1
 8002140:	232d      	movlt	r3, #45	@ 0x2d
 8002142:	232b      	movge	r3, #43	@ 0x2b
 8002144:	2909      	cmp	r1, #9
 8002146:	7002      	strb	r2, [r0, #0]
 8002148:	7043      	strb	r3, [r0, #1]
 800214a:	dd29      	ble.n	80021a0 <__exponent+0x68>
 800214c:	f10d 0307 	add.w	r3, sp, #7
 8002150:	461d      	mov	r5, r3
 8002152:	270a      	movs	r7, #10
 8002154:	461a      	mov	r2, r3
 8002156:	fbb1 f6f7 	udiv	r6, r1, r7
 800215a:	fb07 1416 	mls	r4, r7, r6, r1
 800215e:	3430      	adds	r4, #48	@ 0x30
 8002160:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002164:	460c      	mov	r4, r1
 8002166:	2c63      	cmp	r4, #99	@ 0x63
 8002168:	f103 33ff 	add.w	r3, r3, #4294967295
 800216c:	4631      	mov	r1, r6
 800216e:	dcf1      	bgt.n	8002154 <__exponent+0x1c>
 8002170:	3130      	adds	r1, #48	@ 0x30
 8002172:	1e94      	subs	r4, r2, #2
 8002174:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002178:	1c41      	adds	r1, r0, #1
 800217a:	4623      	mov	r3, r4
 800217c:	42ab      	cmp	r3, r5
 800217e:	d30a      	bcc.n	8002196 <__exponent+0x5e>
 8002180:	f10d 0309 	add.w	r3, sp, #9
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	42ac      	cmp	r4, r5
 8002188:	bf88      	it	hi
 800218a:	2300      	movhi	r3, #0
 800218c:	3302      	adds	r3, #2
 800218e:	4403      	add	r3, r0
 8002190:	1a18      	subs	r0, r3, r0
 8002192:	b003      	add	sp, #12
 8002194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002196:	f813 6b01 	ldrb.w	r6, [r3], #1
 800219a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800219e:	e7ed      	b.n	800217c <__exponent+0x44>
 80021a0:	2330      	movs	r3, #48	@ 0x30
 80021a2:	3130      	adds	r1, #48	@ 0x30
 80021a4:	7083      	strb	r3, [r0, #2]
 80021a6:	70c1      	strb	r1, [r0, #3]
 80021a8:	1d03      	adds	r3, r0, #4
 80021aa:	e7f1      	b.n	8002190 <__exponent+0x58>

080021ac <_printf_float>:
 80021ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b0:	b08d      	sub	sp, #52	@ 0x34
 80021b2:	460c      	mov	r4, r1
 80021b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80021b8:	4616      	mov	r6, r2
 80021ba:	461f      	mov	r7, r3
 80021bc:	4605      	mov	r5, r0
 80021be:	f000 fcbb 	bl	8002b38 <_localeconv_r>
 80021c2:	6803      	ldr	r3, [r0, #0]
 80021c4:	9304      	str	r3, [sp, #16]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f85a 	bl	8000280 <strlen>
 80021cc:	2300      	movs	r3, #0
 80021ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80021d0:	f8d8 3000 	ldr.w	r3, [r8]
 80021d4:	9005      	str	r0, [sp, #20]
 80021d6:	3307      	adds	r3, #7
 80021d8:	f023 0307 	bic.w	r3, r3, #7
 80021dc:	f103 0208 	add.w	r2, r3, #8
 80021e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80021e4:	f8d4 b000 	ldr.w	fp, [r4]
 80021e8:	f8c8 2000 	str.w	r2, [r8]
 80021ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80021f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80021f4:	9307      	str	r3, [sp, #28]
 80021f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80021fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80021fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002202:	4b9c      	ldr	r3, [pc, #624]	@ (8002474 <_printf_float+0x2c8>)
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	f7fe fc98 	bl	8000b3c <__aeabi_dcmpun>
 800220c:	bb70      	cbnz	r0, 800226c <_printf_float+0xc0>
 800220e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002212:	4b98      	ldr	r3, [pc, #608]	@ (8002474 <_printf_float+0x2c8>)
 8002214:	f04f 32ff 	mov.w	r2, #4294967295
 8002218:	f7fe fc72 	bl	8000b00 <__aeabi_dcmple>
 800221c:	bb30      	cbnz	r0, 800226c <_printf_float+0xc0>
 800221e:	2200      	movs	r2, #0
 8002220:	2300      	movs	r3, #0
 8002222:	4640      	mov	r0, r8
 8002224:	4649      	mov	r1, r9
 8002226:	f7fe fc61 	bl	8000aec <__aeabi_dcmplt>
 800222a:	b110      	cbz	r0, 8002232 <_printf_float+0x86>
 800222c:	232d      	movs	r3, #45	@ 0x2d
 800222e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002232:	4a91      	ldr	r2, [pc, #580]	@ (8002478 <_printf_float+0x2cc>)
 8002234:	4b91      	ldr	r3, [pc, #580]	@ (800247c <_printf_float+0x2d0>)
 8002236:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800223a:	bf94      	ite	ls
 800223c:	4690      	movls	r8, r2
 800223e:	4698      	movhi	r8, r3
 8002240:	2303      	movs	r3, #3
 8002242:	6123      	str	r3, [r4, #16]
 8002244:	f02b 0304 	bic.w	r3, fp, #4
 8002248:	6023      	str	r3, [r4, #0]
 800224a:	f04f 0900 	mov.w	r9, #0
 800224e:	9700      	str	r7, [sp, #0]
 8002250:	4633      	mov	r3, r6
 8002252:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002254:	4621      	mov	r1, r4
 8002256:	4628      	mov	r0, r5
 8002258:	f000 f9d2 	bl	8002600 <_printf_common>
 800225c:	3001      	adds	r0, #1
 800225e:	f040 808d 	bne.w	800237c <_printf_float+0x1d0>
 8002262:	f04f 30ff 	mov.w	r0, #4294967295
 8002266:	b00d      	add	sp, #52	@ 0x34
 8002268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800226c:	4642      	mov	r2, r8
 800226e:	464b      	mov	r3, r9
 8002270:	4640      	mov	r0, r8
 8002272:	4649      	mov	r1, r9
 8002274:	f7fe fc62 	bl	8000b3c <__aeabi_dcmpun>
 8002278:	b140      	cbz	r0, 800228c <_printf_float+0xe0>
 800227a:	464b      	mov	r3, r9
 800227c:	2b00      	cmp	r3, #0
 800227e:	bfbc      	itt	lt
 8002280:	232d      	movlt	r3, #45	@ 0x2d
 8002282:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002286:	4a7e      	ldr	r2, [pc, #504]	@ (8002480 <_printf_float+0x2d4>)
 8002288:	4b7e      	ldr	r3, [pc, #504]	@ (8002484 <_printf_float+0x2d8>)
 800228a:	e7d4      	b.n	8002236 <_printf_float+0x8a>
 800228c:	6863      	ldr	r3, [r4, #4]
 800228e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002292:	9206      	str	r2, [sp, #24]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	d13b      	bne.n	8002310 <_printf_float+0x164>
 8002298:	2306      	movs	r3, #6
 800229a:	6063      	str	r3, [r4, #4]
 800229c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80022a0:	2300      	movs	r3, #0
 80022a2:	6022      	str	r2, [r4, #0]
 80022a4:	9303      	str	r3, [sp, #12]
 80022a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80022a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80022ac:	ab09      	add	r3, sp, #36	@ 0x24
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	6861      	ldr	r1, [r4, #4]
 80022b2:	ec49 8b10 	vmov	d0, r8, r9
 80022b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80022ba:	4628      	mov	r0, r5
 80022bc:	f7ff fed7 	bl	800206e <__cvt>
 80022c0:	9b06      	ldr	r3, [sp, #24]
 80022c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80022c4:	2b47      	cmp	r3, #71	@ 0x47
 80022c6:	4680      	mov	r8, r0
 80022c8:	d129      	bne.n	800231e <_printf_float+0x172>
 80022ca:	1cc8      	adds	r0, r1, #3
 80022cc:	db02      	blt.n	80022d4 <_printf_float+0x128>
 80022ce:	6863      	ldr	r3, [r4, #4]
 80022d0:	4299      	cmp	r1, r3
 80022d2:	dd41      	ble.n	8002358 <_printf_float+0x1ac>
 80022d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80022d8:	fa5f fa8a 	uxtb.w	sl, sl
 80022dc:	3901      	subs	r1, #1
 80022de:	4652      	mov	r2, sl
 80022e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80022e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80022e6:	f7ff ff27 	bl	8002138 <__exponent>
 80022ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80022ec:	1813      	adds	r3, r2, r0
 80022ee:	2a01      	cmp	r2, #1
 80022f0:	4681      	mov	r9, r0
 80022f2:	6123      	str	r3, [r4, #16]
 80022f4:	dc02      	bgt.n	80022fc <_printf_float+0x150>
 80022f6:	6822      	ldr	r2, [r4, #0]
 80022f8:	07d2      	lsls	r2, r2, #31
 80022fa:	d501      	bpl.n	8002300 <_printf_float+0x154>
 80022fc:	3301      	adds	r3, #1
 80022fe:	6123      	str	r3, [r4, #16]
 8002300:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0a2      	beq.n	800224e <_printf_float+0xa2>
 8002308:	232d      	movs	r3, #45	@ 0x2d
 800230a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800230e:	e79e      	b.n	800224e <_printf_float+0xa2>
 8002310:	9a06      	ldr	r2, [sp, #24]
 8002312:	2a47      	cmp	r2, #71	@ 0x47
 8002314:	d1c2      	bne.n	800229c <_printf_float+0xf0>
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1c0      	bne.n	800229c <_printf_float+0xf0>
 800231a:	2301      	movs	r3, #1
 800231c:	e7bd      	b.n	800229a <_printf_float+0xee>
 800231e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002322:	d9db      	bls.n	80022dc <_printf_float+0x130>
 8002324:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002328:	d118      	bne.n	800235c <_printf_float+0x1b0>
 800232a:	2900      	cmp	r1, #0
 800232c:	6863      	ldr	r3, [r4, #4]
 800232e:	dd0b      	ble.n	8002348 <_printf_float+0x19c>
 8002330:	6121      	str	r1, [r4, #16]
 8002332:	b913      	cbnz	r3, 800233a <_printf_float+0x18e>
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	07d0      	lsls	r0, r2, #31
 8002338:	d502      	bpl.n	8002340 <_printf_float+0x194>
 800233a:	3301      	adds	r3, #1
 800233c:	440b      	add	r3, r1
 800233e:	6123      	str	r3, [r4, #16]
 8002340:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002342:	f04f 0900 	mov.w	r9, #0
 8002346:	e7db      	b.n	8002300 <_printf_float+0x154>
 8002348:	b913      	cbnz	r3, 8002350 <_printf_float+0x1a4>
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	07d2      	lsls	r2, r2, #31
 800234e:	d501      	bpl.n	8002354 <_printf_float+0x1a8>
 8002350:	3302      	adds	r3, #2
 8002352:	e7f4      	b.n	800233e <_printf_float+0x192>
 8002354:	2301      	movs	r3, #1
 8002356:	e7f2      	b.n	800233e <_printf_float+0x192>
 8002358:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800235c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800235e:	4299      	cmp	r1, r3
 8002360:	db05      	blt.n	800236e <_printf_float+0x1c2>
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	6121      	str	r1, [r4, #16]
 8002366:	07d8      	lsls	r0, r3, #31
 8002368:	d5ea      	bpl.n	8002340 <_printf_float+0x194>
 800236a:	1c4b      	adds	r3, r1, #1
 800236c:	e7e7      	b.n	800233e <_printf_float+0x192>
 800236e:	2900      	cmp	r1, #0
 8002370:	bfd4      	ite	le
 8002372:	f1c1 0202 	rsble	r2, r1, #2
 8002376:	2201      	movgt	r2, #1
 8002378:	4413      	add	r3, r2
 800237a:	e7e0      	b.n	800233e <_printf_float+0x192>
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	055a      	lsls	r2, r3, #21
 8002380:	d407      	bmi.n	8002392 <_printf_float+0x1e6>
 8002382:	6923      	ldr	r3, [r4, #16]
 8002384:	4642      	mov	r2, r8
 8002386:	4631      	mov	r1, r6
 8002388:	4628      	mov	r0, r5
 800238a:	47b8      	blx	r7
 800238c:	3001      	adds	r0, #1
 800238e:	d12b      	bne.n	80023e8 <_printf_float+0x23c>
 8002390:	e767      	b.n	8002262 <_printf_float+0xb6>
 8002392:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002396:	f240 80dd 	bls.w	8002554 <_printf_float+0x3a8>
 800239a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800239e:	2200      	movs	r2, #0
 80023a0:	2300      	movs	r3, #0
 80023a2:	f7fe fb99 	bl	8000ad8 <__aeabi_dcmpeq>
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d033      	beq.n	8002412 <_printf_float+0x266>
 80023aa:	4a37      	ldr	r2, [pc, #220]	@ (8002488 <_printf_float+0x2dc>)
 80023ac:	2301      	movs	r3, #1
 80023ae:	4631      	mov	r1, r6
 80023b0:	4628      	mov	r0, r5
 80023b2:	47b8      	blx	r7
 80023b4:	3001      	adds	r0, #1
 80023b6:	f43f af54 	beq.w	8002262 <_printf_float+0xb6>
 80023ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80023be:	4543      	cmp	r3, r8
 80023c0:	db02      	blt.n	80023c8 <_printf_float+0x21c>
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	07d8      	lsls	r0, r3, #31
 80023c6:	d50f      	bpl.n	80023e8 <_printf_float+0x23c>
 80023c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80023cc:	4631      	mov	r1, r6
 80023ce:	4628      	mov	r0, r5
 80023d0:	47b8      	blx	r7
 80023d2:	3001      	adds	r0, #1
 80023d4:	f43f af45 	beq.w	8002262 <_printf_float+0xb6>
 80023d8:	f04f 0900 	mov.w	r9, #0
 80023dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80023e0:	f104 0a1a 	add.w	sl, r4, #26
 80023e4:	45c8      	cmp	r8, r9
 80023e6:	dc09      	bgt.n	80023fc <_printf_float+0x250>
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	079b      	lsls	r3, r3, #30
 80023ec:	f100 8103 	bmi.w	80025f6 <_printf_float+0x44a>
 80023f0:	68e0      	ldr	r0, [r4, #12]
 80023f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80023f4:	4298      	cmp	r0, r3
 80023f6:	bfb8      	it	lt
 80023f8:	4618      	movlt	r0, r3
 80023fa:	e734      	b.n	8002266 <_printf_float+0xba>
 80023fc:	2301      	movs	r3, #1
 80023fe:	4652      	mov	r2, sl
 8002400:	4631      	mov	r1, r6
 8002402:	4628      	mov	r0, r5
 8002404:	47b8      	blx	r7
 8002406:	3001      	adds	r0, #1
 8002408:	f43f af2b 	beq.w	8002262 <_printf_float+0xb6>
 800240c:	f109 0901 	add.w	r9, r9, #1
 8002410:	e7e8      	b.n	80023e4 <_printf_float+0x238>
 8002412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002414:	2b00      	cmp	r3, #0
 8002416:	dc39      	bgt.n	800248c <_printf_float+0x2e0>
 8002418:	4a1b      	ldr	r2, [pc, #108]	@ (8002488 <_printf_float+0x2dc>)
 800241a:	2301      	movs	r3, #1
 800241c:	4631      	mov	r1, r6
 800241e:	4628      	mov	r0, r5
 8002420:	47b8      	blx	r7
 8002422:	3001      	adds	r0, #1
 8002424:	f43f af1d 	beq.w	8002262 <_printf_float+0xb6>
 8002428:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800242c:	ea59 0303 	orrs.w	r3, r9, r3
 8002430:	d102      	bne.n	8002438 <_printf_float+0x28c>
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	07d9      	lsls	r1, r3, #31
 8002436:	d5d7      	bpl.n	80023e8 <_printf_float+0x23c>
 8002438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800243c:	4631      	mov	r1, r6
 800243e:	4628      	mov	r0, r5
 8002440:	47b8      	blx	r7
 8002442:	3001      	adds	r0, #1
 8002444:	f43f af0d 	beq.w	8002262 <_printf_float+0xb6>
 8002448:	f04f 0a00 	mov.w	sl, #0
 800244c:	f104 0b1a 	add.w	fp, r4, #26
 8002450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002452:	425b      	negs	r3, r3
 8002454:	4553      	cmp	r3, sl
 8002456:	dc01      	bgt.n	800245c <_printf_float+0x2b0>
 8002458:	464b      	mov	r3, r9
 800245a:	e793      	b.n	8002384 <_printf_float+0x1d8>
 800245c:	2301      	movs	r3, #1
 800245e:	465a      	mov	r2, fp
 8002460:	4631      	mov	r1, r6
 8002462:	4628      	mov	r0, r5
 8002464:	47b8      	blx	r7
 8002466:	3001      	adds	r0, #1
 8002468:	f43f aefb 	beq.w	8002262 <_printf_float+0xb6>
 800246c:	f10a 0a01 	add.w	sl, sl, #1
 8002470:	e7ee      	b.n	8002450 <_printf_float+0x2a4>
 8002472:	bf00      	nop
 8002474:	7fefffff 	.word	0x7fefffff
 8002478:	080049a1 	.word	0x080049a1
 800247c:	080049a5 	.word	0x080049a5
 8002480:	080049a9 	.word	0x080049a9
 8002484:	080049ad 	.word	0x080049ad
 8002488:	080049b1 	.word	0x080049b1
 800248c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800248e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002492:	4553      	cmp	r3, sl
 8002494:	bfa8      	it	ge
 8002496:	4653      	movge	r3, sl
 8002498:	2b00      	cmp	r3, #0
 800249a:	4699      	mov	r9, r3
 800249c:	dc36      	bgt.n	800250c <_printf_float+0x360>
 800249e:	f04f 0b00 	mov.w	fp, #0
 80024a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80024a6:	f104 021a 	add.w	r2, r4, #26
 80024aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80024ac:	9306      	str	r3, [sp, #24]
 80024ae:	eba3 0309 	sub.w	r3, r3, r9
 80024b2:	455b      	cmp	r3, fp
 80024b4:	dc31      	bgt.n	800251a <_printf_float+0x36e>
 80024b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024b8:	459a      	cmp	sl, r3
 80024ba:	dc3a      	bgt.n	8002532 <_printf_float+0x386>
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	07da      	lsls	r2, r3, #31
 80024c0:	d437      	bmi.n	8002532 <_printf_float+0x386>
 80024c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024c4:	ebaa 0903 	sub.w	r9, sl, r3
 80024c8:	9b06      	ldr	r3, [sp, #24]
 80024ca:	ebaa 0303 	sub.w	r3, sl, r3
 80024ce:	4599      	cmp	r9, r3
 80024d0:	bfa8      	it	ge
 80024d2:	4699      	movge	r9, r3
 80024d4:	f1b9 0f00 	cmp.w	r9, #0
 80024d8:	dc33      	bgt.n	8002542 <_printf_float+0x396>
 80024da:	f04f 0800 	mov.w	r8, #0
 80024de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80024e2:	f104 0b1a 	add.w	fp, r4, #26
 80024e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024e8:	ebaa 0303 	sub.w	r3, sl, r3
 80024ec:	eba3 0309 	sub.w	r3, r3, r9
 80024f0:	4543      	cmp	r3, r8
 80024f2:	f77f af79 	ble.w	80023e8 <_printf_float+0x23c>
 80024f6:	2301      	movs	r3, #1
 80024f8:	465a      	mov	r2, fp
 80024fa:	4631      	mov	r1, r6
 80024fc:	4628      	mov	r0, r5
 80024fe:	47b8      	blx	r7
 8002500:	3001      	adds	r0, #1
 8002502:	f43f aeae 	beq.w	8002262 <_printf_float+0xb6>
 8002506:	f108 0801 	add.w	r8, r8, #1
 800250a:	e7ec      	b.n	80024e6 <_printf_float+0x33a>
 800250c:	4642      	mov	r2, r8
 800250e:	4631      	mov	r1, r6
 8002510:	4628      	mov	r0, r5
 8002512:	47b8      	blx	r7
 8002514:	3001      	adds	r0, #1
 8002516:	d1c2      	bne.n	800249e <_printf_float+0x2f2>
 8002518:	e6a3      	b.n	8002262 <_printf_float+0xb6>
 800251a:	2301      	movs	r3, #1
 800251c:	4631      	mov	r1, r6
 800251e:	4628      	mov	r0, r5
 8002520:	9206      	str	r2, [sp, #24]
 8002522:	47b8      	blx	r7
 8002524:	3001      	adds	r0, #1
 8002526:	f43f ae9c 	beq.w	8002262 <_printf_float+0xb6>
 800252a:	9a06      	ldr	r2, [sp, #24]
 800252c:	f10b 0b01 	add.w	fp, fp, #1
 8002530:	e7bb      	b.n	80024aa <_printf_float+0x2fe>
 8002532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002536:	4631      	mov	r1, r6
 8002538:	4628      	mov	r0, r5
 800253a:	47b8      	blx	r7
 800253c:	3001      	adds	r0, #1
 800253e:	d1c0      	bne.n	80024c2 <_printf_float+0x316>
 8002540:	e68f      	b.n	8002262 <_printf_float+0xb6>
 8002542:	9a06      	ldr	r2, [sp, #24]
 8002544:	464b      	mov	r3, r9
 8002546:	4442      	add	r2, r8
 8002548:	4631      	mov	r1, r6
 800254a:	4628      	mov	r0, r5
 800254c:	47b8      	blx	r7
 800254e:	3001      	adds	r0, #1
 8002550:	d1c3      	bne.n	80024da <_printf_float+0x32e>
 8002552:	e686      	b.n	8002262 <_printf_float+0xb6>
 8002554:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002558:	f1ba 0f01 	cmp.w	sl, #1
 800255c:	dc01      	bgt.n	8002562 <_printf_float+0x3b6>
 800255e:	07db      	lsls	r3, r3, #31
 8002560:	d536      	bpl.n	80025d0 <_printf_float+0x424>
 8002562:	2301      	movs	r3, #1
 8002564:	4642      	mov	r2, r8
 8002566:	4631      	mov	r1, r6
 8002568:	4628      	mov	r0, r5
 800256a:	47b8      	blx	r7
 800256c:	3001      	adds	r0, #1
 800256e:	f43f ae78 	beq.w	8002262 <_printf_float+0xb6>
 8002572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002576:	4631      	mov	r1, r6
 8002578:	4628      	mov	r0, r5
 800257a:	47b8      	blx	r7
 800257c:	3001      	adds	r0, #1
 800257e:	f43f ae70 	beq.w	8002262 <_printf_float+0xb6>
 8002582:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002586:	2200      	movs	r2, #0
 8002588:	2300      	movs	r3, #0
 800258a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800258e:	f7fe faa3 	bl	8000ad8 <__aeabi_dcmpeq>
 8002592:	b9c0      	cbnz	r0, 80025c6 <_printf_float+0x41a>
 8002594:	4653      	mov	r3, sl
 8002596:	f108 0201 	add.w	r2, r8, #1
 800259a:	4631      	mov	r1, r6
 800259c:	4628      	mov	r0, r5
 800259e:	47b8      	blx	r7
 80025a0:	3001      	adds	r0, #1
 80025a2:	d10c      	bne.n	80025be <_printf_float+0x412>
 80025a4:	e65d      	b.n	8002262 <_printf_float+0xb6>
 80025a6:	2301      	movs	r3, #1
 80025a8:	465a      	mov	r2, fp
 80025aa:	4631      	mov	r1, r6
 80025ac:	4628      	mov	r0, r5
 80025ae:	47b8      	blx	r7
 80025b0:	3001      	adds	r0, #1
 80025b2:	f43f ae56 	beq.w	8002262 <_printf_float+0xb6>
 80025b6:	f108 0801 	add.w	r8, r8, #1
 80025ba:	45d0      	cmp	r8, sl
 80025bc:	dbf3      	blt.n	80025a6 <_printf_float+0x3fa>
 80025be:	464b      	mov	r3, r9
 80025c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80025c4:	e6df      	b.n	8002386 <_printf_float+0x1da>
 80025c6:	f04f 0800 	mov.w	r8, #0
 80025ca:	f104 0b1a 	add.w	fp, r4, #26
 80025ce:	e7f4      	b.n	80025ba <_printf_float+0x40e>
 80025d0:	2301      	movs	r3, #1
 80025d2:	4642      	mov	r2, r8
 80025d4:	e7e1      	b.n	800259a <_printf_float+0x3ee>
 80025d6:	2301      	movs	r3, #1
 80025d8:	464a      	mov	r2, r9
 80025da:	4631      	mov	r1, r6
 80025dc:	4628      	mov	r0, r5
 80025de:	47b8      	blx	r7
 80025e0:	3001      	adds	r0, #1
 80025e2:	f43f ae3e 	beq.w	8002262 <_printf_float+0xb6>
 80025e6:	f108 0801 	add.w	r8, r8, #1
 80025ea:	68e3      	ldr	r3, [r4, #12]
 80025ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80025ee:	1a5b      	subs	r3, r3, r1
 80025f0:	4543      	cmp	r3, r8
 80025f2:	dcf0      	bgt.n	80025d6 <_printf_float+0x42a>
 80025f4:	e6fc      	b.n	80023f0 <_printf_float+0x244>
 80025f6:	f04f 0800 	mov.w	r8, #0
 80025fa:	f104 0919 	add.w	r9, r4, #25
 80025fe:	e7f4      	b.n	80025ea <_printf_float+0x43e>

08002600 <_printf_common>:
 8002600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002604:	4616      	mov	r6, r2
 8002606:	4698      	mov	r8, r3
 8002608:	688a      	ldr	r2, [r1, #8]
 800260a:	690b      	ldr	r3, [r1, #16]
 800260c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002610:	4293      	cmp	r3, r2
 8002612:	bfb8      	it	lt
 8002614:	4613      	movlt	r3, r2
 8002616:	6033      	str	r3, [r6, #0]
 8002618:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800261c:	4607      	mov	r7, r0
 800261e:	460c      	mov	r4, r1
 8002620:	b10a      	cbz	r2, 8002626 <_printf_common+0x26>
 8002622:	3301      	adds	r3, #1
 8002624:	6033      	str	r3, [r6, #0]
 8002626:	6823      	ldr	r3, [r4, #0]
 8002628:	0699      	lsls	r1, r3, #26
 800262a:	bf42      	ittt	mi
 800262c:	6833      	ldrmi	r3, [r6, #0]
 800262e:	3302      	addmi	r3, #2
 8002630:	6033      	strmi	r3, [r6, #0]
 8002632:	6825      	ldr	r5, [r4, #0]
 8002634:	f015 0506 	ands.w	r5, r5, #6
 8002638:	d106      	bne.n	8002648 <_printf_common+0x48>
 800263a:	f104 0a19 	add.w	sl, r4, #25
 800263e:	68e3      	ldr	r3, [r4, #12]
 8002640:	6832      	ldr	r2, [r6, #0]
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	42ab      	cmp	r3, r5
 8002646:	dc26      	bgt.n	8002696 <_printf_common+0x96>
 8002648:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	3b00      	subs	r3, #0
 8002650:	bf18      	it	ne
 8002652:	2301      	movne	r3, #1
 8002654:	0692      	lsls	r2, r2, #26
 8002656:	d42b      	bmi.n	80026b0 <_printf_common+0xb0>
 8002658:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800265c:	4641      	mov	r1, r8
 800265e:	4638      	mov	r0, r7
 8002660:	47c8      	blx	r9
 8002662:	3001      	adds	r0, #1
 8002664:	d01e      	beq.n	80026a4 <_printf_common+0xa4>
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	6922      	ldr	r2, [r4, #16]
 800266a:	f003 0306 	and.w	r3, r3, #6
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf02      	ittt	eq
 8002672:	68e5      	ldreq	r5, [r4, #12]
 8002674:	6833      	ldreq	r3, [r6, #0]
 8002676:	1aed      	subeq	r5, r5, r3
 8002678:	68a3      	ldr	r3, [r4, #8]
 800267a:	bf0c      	ite	eq
 800267c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002680:	2500      	movne	r5, #0
 8002682:	4293      	cmp	r3, r2
 8002684:	bfc4      	itt	gt
 8002686:	1a9b      	subgt	r3, r3, r2
 8002688:	18ed      	addgt	r5, r5, r3
 800268a:	2600      	movs	r6, #0
 800268c:	341a      	adds	r4, #26
 800268e:	42b5      	cmp	r5, r6
 8002690:	d11a      	bne.n	80026c8 <_printf_common+0xc8>
 8002692:	2000      	movs	r0, #0
 8002694:	e008      	b.n	80026a8 <_printf_common+0xa8>
 8002696:	2301      	movs	r3, #1
 8002698:	4652      	mov	r2, sl
 800269a:	4641      	mov	r1, r8
 800269c:	4638      	mov	r0, r7
 800269e:	47c8      	blx	r9
 80026a0:	3001      	adds	r0, #1
 80026a2:	d103      	bne.n	80026ac <_printf_common+0xac>
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ac:	3501      	adds	r5, #1
 80026ae:	e7c6      	b.n	800263e <_printf_common+0x3e>
 80026b0:	18e1      	adds	r1, r4, r3
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	2030      	movs	r0, #48	@ 0x30
 80026b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80026ba:	4422      	add	r2, r4
 80026bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80026c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80026c4:	3302      	adds	r3, #2
 80026c6:	e7c7      	b.n	8002658 <_printf_common+0x58>
 80026c8:	2301      	movs	r3, #1
 80026ca:	4622      	mov	r2, r4
 80026cc:	4641      	mov	r1, r8
 80026ce:	4638      	mov	r0, r7
 80026d0:	47c8      	blx	r9
 80026d2:	3001      	adds	r0, #1
 80026d4:	d0e6      	beq.n	80026a4 <_printf_common+0xa4>
 80026d6:	3601      	adds	r6, #1
 80026d8:	e7d9      	b.n	800268e <_printf_common+0x8e>
	...

080026dc <_printf_i>:
 80026dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026e0:	7e0f      	ldrb	r7, [r1, #24]
 80026e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80026e4:	2f78      	cmp	r7, #120	@ 0x78
 80026e6:	4691      	mov	r9, r2
 80026e8:	4680      	mov	r8, r0
 80026ea:	460c      	mov	r4, r1
 80026ec:	469a      	mov	sl, r3
 80026ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80026f2:	d807      	bhi.n	8002704 <_printf_i+0x28>
 80026f4:	2f62      	cmp	r7, #98	@ 0x62
 80026f6:	d80a      	bhi.n	800270e <_printf_i+0x32>
 80026f8:	2f00      	cmp	r7, #0
 80026fa:	f000 80d2 	beq.w	80028a2 <_printf_i+0x1c6>
 80026fe:	2f58      	cmp	r7, #88	@ 0x58
 8002700:	f000 80b9 	beq.w	8002876 <_printf_i+0x19a>
 8002704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002708:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800270c:	e03a      	b.n	8002784 <_printf_i+0xa8>
 800270e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002712:	2b15      	cmp	r3, #21
 8002714:	d8f6      	bhi.n	8002704 <_printf_i+0x28>
 8002716:	a101      	add	r1, pc, #4	@ (adr r1, 800271c <_printf_i+0x40>)
 8002718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800271c:	08002775 	.word	0x08002775
 8002720:	08002789 	.word	0x08002789
 8002724:	08002705 	.word	0x08002705
 8002728:	08002705 	.word	0x08002705
 800272c:	08002705 	.word	0x08002705
 8002730:	08002705 	.word	0x08002705
 8002734:	08002789 	.word	0x08002789
 8002738:	08002705 	.word	0x08002705
 800273c:	08002705 	.word	0x08002705
 8002740:	08002705 	.word	0x08002705
 8002744:	08002705 	.word	0x08002705
 8002748:	08002889 	.word	0x08002889
 800274c:	080027b3 	.word	0x080027b3
 8002750:	08002843 	.word	0x08002843
 8002754:	08002705 	.word	0x08002705
 8002758:	08002705 	.word	0x08002705
 800275c:	080028ab 	.word	0x080028ab
 8002760:	08002705 	.word	0x08002705
 8002764:	080027b3 	.word	0x080027b3
 8002768:	08002705 	.word	0x08002705
 800276c:	08002705 	.word	0x08002705
 8002770:	0800284b 	.word	0x0800284b
 8002774:	6833      	ldr	r3, [r6, #0]
 8002776:	1d1a      	adds	r2, r3, #4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6032      	str	r2, [r6, #0]
 800277c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002780:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002784:	2301      	movs	r3, #1
 8002786:	e09d      	b.n	80028c4 <_printf_i+0x1e8>
 8002788:	6833      	ldr	r3, [r6, #0]
 800278a:	6820      	ldr	r0, [r4, #0]
 800278c:	1d19      	adds	r1, r3, #4
 800278e:	6031      	str	r1, [r6, #0]
 8002790:	0606      	lsls	r6, r0, #24
 8002792:	d501      	bpl.n	8002798 <_printf_i+0xbc>
 8002794:	681d      	ldr	r5, [r3, #0]
 8002796:	e003      	b.n	80027a0 <_printf_i+0xc4>
 8002798:	0645      	lsls	r5, r0, #25
 800279a:	d5fb      	bpl.n	8002794 <_printf_i+0xb8>
 800279c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80027a0:	2d00      	cmp	r5, #0
 80027a2:	da03      	bge.n	80027ac <_printf_i+0xd0>
 80027a4:	232d      	movs	r3, #45	@ 0x2d
 80027a6:	426d      	negs	r5, r5
 80027a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80027ac:	4859      	ldr	r0, [pc, #356]	@ (8002914 <_printf_i+0x238>)
 80027ae:	230a      	movs	r3, #10
 80027b0:	e011      	b.n	80027d6 <_printf_i+0xfa>
 80027b2:	6821      	ldr	r1, [r4, #0]
 80027b4:	6833      	ldr	r3, [r6, #0]
 80027b6:	0608      	lsls	r0, r1, #24
 80027b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80027bc:	d402      	bmi.n	80027c4 <_printf_i+0xe8>
 80027be:	0649      	lsls	r1, r1, #25
 80027c0:	bf48      	it	mi
 80027c2:	b2ad      	uxthmi	r5, r5
 80027c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80027c6:	4853      	ldr	r0, [pc, #332]	@ (8002914 <_printf_i+0x238>)
 80027c8:	6033      	str	r3, [r6, #0]
 80027ca:	bf14      	ite	ne
 80027cc:	230a      	movne	r3, #10
 80027ce:	2308      	moveq	r3, #8
 80027d0:	2100      	movs	r1, #0
 80027d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80027d6:	6866      	ldr	r6, [r4, #4]
 80027d8:	60a6      	str	r6, [r4, #8]
 80027da:	2e00      	cmp	r6, #0
 80027dc:	bfa2      	ittt	ge
 80027de:	6821      	ldrge	r1, [r4, #0]
 80027e0:	f021 0104 	bicge.w	r1, r1, #4
 80027e4:	6021      	strge	r1, [r4, #0]
 80027e6:	b90d      	cbnz	r5, 80027ec <_printf_i+0x110>
 80027e8:	2e00      	cmp	r6, #0
 80027ea:	d04b      	beq.n	8002884 <_printf_i+0x1a8>
 80027ec:	4616      	mov	r6, r2
 80027ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80027f2:	fb03 5711 	mls	r7, r3, r1, r5
 80027f6:	5dc7      	ldrb	r7, [r0, r7]
 80027f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80027fc:	462f      	mov	r7, r5
 80027fe:	42bb      	cmp	r3, r7
 8002800:	460d      	mov	r5, r1
 8002802:	d9f4      	bls.n	80027ee <_printf_i+0x112>
 8002804:	2b08      	cmp	r3, #8
 8002806:	d10b      	bne.n	8002820 <_printf_i+0x144>
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	07df      	lsls	r7, r3, #31
 800280c:	d508      	bpl.n	8002820 <_printf_i+0x144>
 800280e:	6923      	ldr	r3, [r4, #16]
 8002810:	6861      	ldr	r1, [r4, #4]
 8002812:	4299      	cmp	r1, r3
 8002814:	bfde      	ittt	le
 8002816:	2330      	movle	r3, #48	@ 0x30
 8002818:	f806 3c01 	strble.w	r3, [r6, #-1]
 800281c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002820:	1b92      	subs	r2, r2, r6
 8002822:	6122      	str	r2, [r4, #16]
 8002824:	f8cd a000 	str.w	sl, [sp]
 8002828:	464b      	mov	r3, r9
 800282a:	aa03      	add	r2, sp, #12
 800282c:	4621      	mov	r1, r4
 800282e:	4640      	mov	r0, r8
 8002830:	f7ff fee6 	bl	8002600 <_printf_common>
 8002834:	3001      	adds	r0, #1
 8002836:	d14a      	bne.n	80028ce <_printf_i+0x1f2>
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	b004      	add	sp, #16
 800283e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	f043 0320 	orr.w	r3, r3, #32
 8002848:	6023      	str	r3, [r4, #0]
 800284a:	4833      	ldr	r0, [pc, #204]	@ (8002918 <_printf_i+0x23c>)
 800284c:	2778      	movs	r7, #120	@ 0x78
 800284e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	6831      	ldr	r1, [r6, #0]
 8002856:	061f      	lsls	r7, r3, #24
 8002858:	f851 5b04 	ldr.w	r5, [r1], #4
 800285c:	d402      	bmi.n	8002864 <_printf_i+0x188>
 800285e:	065f      	lsls	r7, r3, #25
 8002860:	bf48      	it	mi
 8002862:	b2ad      	uxthmi	r5, r5
 8002864:	6031      	str	r1, [r6, #0]
 8002866:	07d9      	lsls	r1, r3, #31
 8002868:	bf44      	itt	mi
 800286a:	f043 0320 	orrmi.w	r3, r3, #32
 800286e:	6023      	strmi	r3, [r4, #0]
 8002870:	b11d      	cbz	r5, 800287a <_printf_i+0x19e>
 8002872:	2310      	movs	r3, #16
 8002874:	e7ac      	b.n	80027d0 <_printf_i+0xf4>
 8002876:	4827      	ldr	r0, [pc, #156]	@ (8002914 <_printf_i+0x238>)
 8002878:	e7e9      	b.n	800284e <_printf_i+0x172>
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	f023 0320 	bic.w	r3, r3, #32
 8002880:	6023      	str	r3, [r4, #0]
 8002882:	e7f6      	b.n	8002872 <_printf_i+0x196>
 8002884:	4616      	mov	r6, r2
 8002886:	e7bd      	b.n	8002804 <_printf_i+0x128>
 8002888:	6833      	ldr	r3, [r6, #0]
 800288a:	6825      	ldr	r5, [r4, #0]
 800288c:	6961      	ldr	r1, [r4, #20]
 800288e:	1d18      	adds	r0, r3, #4
 8002890:	6030      	str	r0, [r6, #0]
 8002892:	062e      	lsls	r6, r5, #24
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	d501      	bpl.n	800289c <_printf_i+0x1c0>
 8002898:	6019      	str	r1, [r3, #0]
 800289a:	e002      	b.n	80028a2 <_printf_i+0x1c6>
 800289c:	0668      	lsls	r0, r5, #25
 800289e:	d5fb      	bpl.n	8002898 <_printf_i+0x1bc>
 80028a0:	8019      	strh	r1, [r3, #0]
 80028a2:	2300      	movs	r3, #0
 80028a4:	6123      	str	r3, [r4, #16]
 80028a6:	4616      	mov	r6, r2
 80028a8:	e7bc      	b.n	8002824 <_printf_i+0x148>
 80028aa:	6833      	ldr	r3, [r6, #0]
 80028ac:	1d1a      	adds	r2, r3, #4
 80028ae:	6032      	str	r2, [r6, #0]
 80028b0:	681e      	ldr	r6, [r3, #0]
 80028b2:	6862      	ldr	r2, [r4, #4]
 80028b4:	2100      	movs	r1, #0
 80028b6:	4630      	mov	r0, r6
 80028b8:	f7fd fc92 	bl	80001e0 <memchr>
 80028bc:	b108      	cbz	r0, 80028c2 <_printf_i+0x1e6>
 80028be:	1b80      	subs	r0, r0, r6
 80028c0:	6060      	str	r0, [r4, #4]
 80028c2:	6863      	ldr	r3, [r4, #4]
 80028c4:	6123      	str	r3, [r4, #16]
 80028c6:	2300      	movs	r3, #0
 80028c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028cc:	e7aa      	b.n	8002824 <_printf_i+0x148>
 80028ce:	6923      	ldr	r3, [r4, #16]
 80028d0:	4632      	mov	r2, r6
 80028d2:	4649      	mov	r1, r9
 80028d4:	4640      	mov	r0, r8
 80028d6:	47d0      	blx	sl
 80028d8:	3001      	adds	r0, #1
 80028da:	d0ad      	beq.n	8002838 <_printf_i+0x15c>
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	079b      	lsls	r3, r3, #30
 80028e0:	d413      	bmi.n	800290a <_printf_i+0x22e>
 80028e2:	68e0      	ldr	r0, [r4, #12]
 80028e4:	9b03      	ldr	r3, [sp, #12]
 80028e6:	4298      	cmp	r0, r3
 80028e8:	bfb8      	it	lt
 80028ea:	4618      	movlt	r0, r3
 80028ec:	e7a6      	b.n	800283c <_printf_i+0x160>
 80028ee:	2301      	movs	r3, #1
 80028f0:	4632      	mov	r2, r6
 80028f2:	4649      	mov	r1, r9
 80028f4:	4640      	mov	r0, r8
 80028f6:	47d0      	blx	sl
 80028f8:	3001      	adds	r0, #1
 80028fa:	d09d      	beq.n	8002838 <_printf_i+0x15c>
 80028fc:	3501      	adds	r5, #1
 80028fe:	68e3      	ldr	r3, [r4, #12]
 8002900:	9903      	ldr	r1, [sp, #12]
 8002902:	1a5b      	subs	r3, r3, r1
 8002904:	42ab      	cmp	r3, r5
 8002906:	dcf2      	bgt.n	80028ee <_printf_i+0x212>
 8002908:	e7eb      	b.n	80028e2 <_printf_i+0x206>
 800290a:	2500      	movs	r5, #0
 800290c:	f104 0619 	add.w	r6, r4, #25
 8002910:	e7f5      	b.n	80028fe <_printf_i+0x222>
 8002912:	bf00      	nop
 8002914:	080049b3 	.word	0x080049b3
 8002918:	080049c4 	.word	0x080049c4

0800291c <std>:
 800291c:	2300      	movs	r3, #0
 800291e:	b510      	push	{r4, lr}
 8002920:	4604      	mov	r4, r0
 8002922:	e9c0 3300 	strd	r3, r3, [r0]
 8002926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800292a:	6083      	str	r3, [r0, #8]
 800292c:	8181      	strh	r1, [r0, #12]
 800292e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002930:	81c2      	strh	r2, [r0, #14]
 8002932:	6183      	str	r3, [r0, #24]
 8002934:	4619      	mov	r1, r3
 8002936:	2208      	movs	r2, #8
 8002938:	305c      	adds	r0, #92	@ 0x5c
 800293a:	f000 f8f4 	bl	8002b26 <memset>
 800293e:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <std+0x58>)
 8002940:	6263      	str	r3, [r4, #36]	@ 0x24
 8002942:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <std+0x5c>)
 8002944:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <std+0x60>)
 8002948:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800294a:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <std+0x64>)
 800294c:	6323      	str	r3, [r4, #48]	@ 0x30
 800294e:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <std+0x68>)
 8002950:	6224      	str	r4, [r4, #32]
 8002952:	429c      	cmp	r4, r3
 8002954:	d006      	beq.n	8002964 <std+0x48>
 8002956:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800295a:	4294      	cmp	r4, r2
 800295c:	d002      	beq.n	8002964 <std+0x48>
 800295e:	33d0      	adds	r3, #208	@ 0xd0
 8002960:	429c      	cmp	r4, r3
 8002962:	d105      	bne.n	8002970 <std+0x54>
 8002964:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800296c:	f000 b958 	b.w	8002c20 <__retarget_lock_init_recursive>
 8002970:	bd10      	pop	{r4, pc}
 8002972:	bf00      	nop
 8002974:	08002aa1 	.word	0x08002aa1
 8002978:	08002ac3 	.word	0x08002ac3
 800297c:	08002afb 	.word	0x08002afb
 8002980:	08002b1f 	.word	0x08002b1f
 8002984:	20000364 	.word	0x20000364

08002988 <stdio_exit_handler>:
 8002988:	4a02      	ldr	r2, [pc, #8]	@ (8002994 <stdio_exit_handler+0xc>)
 800298a:	4903      	ldr	r1, [pc, #12]	@ (8002998 <stdio_exit_handler+0x10>)
 800298c:	4803      	ldr	r0, [pc, #12]	@ (800299c <stdio_exit_handler+0x14>)
 800298e:	f000 b869 	b.w	8002a64 <_fwalk_sglue>
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000
 8002998:	080042ed 	.word	0x080042ed
 800299c:	20000010 	.word	0x20000010

080029a0 <cleanup_stdio>:
 80029a0:	6841      	ldr	r1, [r0, #4]
 80029a2:	4b0c      	ldr	r3, [pc, #48]	@ (80029d4 <cleanup_stdio+0x34>)
 80029a4:	4299      	cmp	r1, r3
 80029a6:	b510      	push	{r4, lr}
 80029a8:	4604      	mov	r4, r0
 80029aa:	d001      	beq.n	80029b0 <cleanup_stdio+0x10>
 80029ac:	f001 fc9e 	bl	80042ec <_fflush_r>
 80029b0:	68a1      	ldr	r1, [r4, #8]
 80029b2:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <cleanup_stdio+0x38>)
 80029b4:	4299      	cmp	r1, r3
 80029b6:	d002      	beq.n	80029be <cleanup_stdio+0x1e>
 80029b8:	4620      	mov	r0, r4
 80029ba:	f001 fc97 	bl	80042ec <_fflush_r>
 80029be:	68e1      	ldr	r1, [r4, #12]
 80029c0:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <cleanup_stdio+0x3c>)
 80029c2:	4299      	cmp	r1, r3
 80029c4:	d004      	beq.n	80029d0 <cleanup_stdio+0x30>
 80029c6:	4620      	mov	r0, r4
 80029c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029cc:	f001 bc8e 	b.w	80042ec <_fflush_r>
 80029d0:	bd10      	pop	{r4, pc}
 80029d2:	bf00      	nop
 80029d4:	20000364 	.word	0x20000364
 80029d8:	200003cc 	.word	0x200003cc
 80029dc:	20000434 	.word	0x20000434

080029e0 <global_stdio_init.part.0>:
 80029e0:	b510      	push	{r4, lr}
 80029e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <global_stdio_init.part.0+0x30>)
 80029e4:	4c0b      	ldr	r4, [pc, #44]	@ (8002a14 <global_stdio_init.part.0+0x34>)
 80029e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002a18 <global_stdio_init.part.0+0x38>)
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	4620      	mov	r0, r4
 80029ec:	2200      	movs	r2, #0
 80029ee:	2104      	movs	r1, #4
 80029f0:	f7ff ff94 	bl	800291c <std>
 80029f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80029f8:	2201      	movs	r2, #1
 80029fa:	2109      	movs	r1, #9
 80029fc:	f7ff ff8e 	bl	800291c <std>
 8002a00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002a04:	2202      	movs	r2, #2
 8002a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a0a:	2112      	movs	r1, #18
 8002a0c:	f7ff bf86 	b.w	800291c <std>
 8002a10:	2000049c 	.word	0x2000049c
 8002a14:	20000364 	.word	0x20000364
 8002a18:	08002989 	.word	0x08002989

08002a1c <__sfp_lock_acquire>:
 8002a1c:	4801      	ldr	r0, [pc, #4]	@ (8002a24 <__sfp_lock_acquire+0x8>)
 8002a1e:	f000 b900 	b.w	8002c22 <__retarget_lock_acquire_recursive>
 8002a22:	bf00      	nop
 8002a24:	200004a5 	.word	0x200004a5

08002a28 <__sfp_lock_release>:
 8002a28:	4801      	ldr	r0, [pc, #4]	@ (8002a30 <__sfp_lock_release+0x8>)
 8002a2a:	f000 b8fb 	b.w	8002c24 <__retarget_lock_release_recursive>
 8002a2e:	bf00      	nop
 8002a30:	200004a5 	.word	0x200004a5

08002a34 <__sinit>:
 8002a34:	b510      	push	{r4, lr}
 8002a36:	4604      	mov	r4, r0
 8002a38:	f7ff fff0 	bl	8002a1c <__sfp_lock_acquire>
 8002a3c:	6a23      	ldr	r3, [r4, #32]
 8002a3e:	b11b      	cbz	r3, 8002a48 <__sinit+0x14>
 8002a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a44:	f7ff bff0 	b.w	8002a28 <__sfp_lock_release>
 8002a48:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <__sinit+0x28>)
 8002a4a:	6223      	str	r3, [r4, #32]
 8002a4c:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <__sinit+0x2c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f5      	bne.n	8002a40 <__sinit+0xc>
 8002a54:	f7ff ffc4 	bl	80029e0 <global_stdio_init.part.0>
 8002a58:	e7f2      	b.n	8002a40 <__sinit+0xc>
 8002a5a:	bf00      	nop
 8002a5c:	080029a1 	.word	0x080029a1
 8002a60:	2000049c 	.word	0x2000049c

08002a64 <_fwalk_sglue>:
 8002a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a68:	4607      	mov	r7, r0
 8002a6a:	4688      	mov	r8, r1
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	2600      	movs	r6, #0
 8002a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a74:	f1b9 0901 	subs.w	r9, r9, #1
 8002a78:	d505      	bpl.n	8002a86 <_fwalk_sglue+0x22>
 8002a7a:	6824      	ldr	r4, [r4, #0]
 8002a7c:	2c00      	cmp	r4, #0
 8002a7e:	d1f7      	bne.n	8002a70 <_fwalk_sglue+0xc>
 8002a80:	4630      	mov	r0, r6
 8002a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a86:	89ab      	ldrh	r3, [r5, #12]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d907      	bls.n	8002a9c <_fwalk_sglue+0x38>
 8002a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a90:	3301      	adds	r3, #1
 8002a92:	d003      	beq.n	8002a9c <_fwalk_sglue+0x38>
 8002a94:	4629      	mov	r1, r5
 8002a96:	4638      	mov	r0, r7
 8002a98:	47c0      	blx	r8
 8002a9a:	4306      	orrs	r6, r0
 8002a9c:	3568      	adds	r5, #104	@ 0x68
 8002a9e:	e7e9      	b.n	8002a74 <_fwalk_sglue+0x10>

08002aa0 <__sread>:
 8002aa0:	b510      	push	{r4, lr}
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aa8:	f000 f86c 	bl	8002b84 <_read_r>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	bfab      	itete	ge
 8002ab0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8002ab4:	181b      	addge	r3, r3, r0
 8002ab6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002aba:	bfac      	ite	ge
 8002abc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002abe:	81a3      	strhlt	r3, [r4, #12]
 8002ac0:	bd10      	pop	{r4, pc}

08002ac2 <__swrite>:
 8002ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ac6:	461f      	mov	r7, r3
 8002ac8:	898b      	ldrh	r3, [r1, #12]
 8002aca:	05db      	lsls	r3, r3, #23
 8002acc:	4605      	mov	r5, r0
 8002ace:	460c      	mov	r4, r1
 8002ad0:	4616      	mov	r6, r2
 8002ad2:	d505      	bpl.n	8002ae0 <__swrite+0x1e>
 8002ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ad8:	2302      	movs	r3, #2
 8002ada:	2200      	movs	r2, #0
 8002adc:	f000 f840 	bl	8002b60 <_lseek_r>
 8002ae0:	89a3      	ldrh	r3, [r4, #12]
 8002ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ae6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002aea:	81a3      	strh	r3, [r4, #12]
 8002aec:	4632      	mov	r2, r6
 8002aee:	463b      	mov	r3, r7
 8002af0:	4628      	mov	r0, r5
 8002af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002af6:	f000 b857 	b.w	8002ba8 <_write_r>

08002afa <__sseek>:
 8002afa:	b510      	push	{r4, lr}
 8002afc:	460c      	mov	r4, r1
 8002afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b02:	f000 f82d 	bl	8002b60 <_lseek_r>
 8002b06:	1c43      	adds	r3, r0, #1
 8002b08:	89a3      	ldrh	r3, [r4, #12]
 8002b0a:	bf15      	itete	ne
 8002b0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002b12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002b16:	81a3      	strheq	r3, [r4, #12]
 8002b18:	bf18      	it	ne
 8002b1a:	81a3      	strhne	r3, [r4, #12]
 8002b1c:	bd10      	pop	{r4, pc}

08002b1e <__sclose>:
 8002b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b22:	f000 b80d 	b.w	8002b40 <_close_r>

08002b26 <memset>:
 8002b26:	4402      	add	r2, r0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d100      	bne.n	8002b30 <memset+0xa>
 8002b2e:	4770      	bx	lr
 8002b30:	f803 1b01 	strb.w	r1, [r3], #1
 8002b34:	e7f9      	b.n	8002b2a <memset+0x4>
	...

08002b38 <_localeconv_r>:
 8002b38:	4800      	ldr	r0, [pc, #0]	@ (8002b3c <_localeconv_r+0x4>)
 8002b3a:	4770      	bx	lr
 8002b3c:	2000014c 	.word	0x2000014c

08002b40 <_close_r>:
 8002b40:	b538      	push	{r3, r4, r5, lr}
 8002b42:	4d06      	ldr	r5, [pc, #24]	@ (8002b5c <_close_r+0x1c>)
 8002b44:	2300      	movs	r3, #0
 8002b46:	4604      	mov	r4, r0
 8002b48:	4608      	mov	r0, r1
 8002b4a:	602b      	str	r3, [r5, #0]
 8002b4c:	f7ff f9e9 	bl	8001f22 <_close>
 8002b50:	1c43      	adds	r3, r0, #1
 8002b52:	d102      	bne.n	8002b5a <_close_r+0x1a>
 8002b54:	682b      	ldr	r3, [r5, #0]
 8002b56:	b103      	cbz	r3, 8002b5a <_close_r+0x1a>
 8002b58:	6023      	str	r3, [r4, #0]
 8002b5a:	bd38      	pop	{r3, r4, r5, pc}
 8002b5c:	200004a0 	.word	0x200004a0

08002b60 <_lseek_r>:
 8002b60:	b538      	push	{r3, r4, r5, lr}
 8002b62:	4d07      	ldr	r5, [pc, #28]	@ (8002b80 <_lseek_r+0x20>)
 8002b64:	4604      	mov	r4, r0
 8002b66:	4608      	mov	r0, r1
 8002b68:	4611      	mov	r1, r2
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	602a      	str	r2, [r5, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f7ff f9fe 	bl	8001f70 <_lseek>
 8002b74:	1c43      	adds	r3, r0, #1
 8002b76:	d102      	bne.n	8002b7e <_lseek_r+0x1e>
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	b103      	cbz	r3, 8002b7e <_lseek_r+0x1e>
 8002b7c:	6023      	str	r3, [r4, #0]
 8002b7e:	bd38      	pop	{r3, r4, r5, pc}
 8002b80:	200004a0 	.word	0x200004a0

08002b84 <_read_r>:
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	4d07      	ldr	r5, [pc, #28]	@ (8002ba4 <_read_r+0x20>)
 8002b88:	4604      	mov	r4, r0
 8002b8a:	4608      	mov	r0, r1
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	2200      	movs	r2, #0
 8002b90:	602a      	str	r2, [r5, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f7ff f98c 	bl	8001eb0 <_read>
 8002b98:	1c43      	adds	r3, r0, #1
 8002b9a:	d102      	bne.n	8002ba2 <_read_r+0x1e>
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	b103      	cbz	r3, 8002ba2 <_read_r+0x1e>
 8002ba0:	6023      	str	r3, [r4, #0]
 8002ba2:	bd38      	pop	{r3, r4, r5, pc}
 8002ba4:	200004a0 	.word	0x200004a0

08002ba8 <_write_r>:
 8002ba8:	b538      	push	{r3, r4, r5, lr}
 8002baa:	4d07      	ldr	r5, [pc, #28]	@ (8002bc8 <_write_r+0x20>)
 8002bac:	4604      	mov	r4, r0
 8002bae:	4608      	mov	r0, r1
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	602a      	str	r2, [r5, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f7ff f997 	bl	8001eea <_write>
 8002bbc:	1c43      	adds	r3, r0, #1
 8002bbe:	d102      	bne.n	8002bc6 <_write_r+0x1e>
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	b103      	cbz	r3, 8002bc6 <_write_r+0x1e>
 8002bc4:	6023      	str	r3, [r4, #0]
 8002bc6:	bd38      	pop	{r3, r4, r5, pc}
 8002bc8:	200004a0 	.word	0x200004a0

08002bcc <__errno>:
 8002bcc:	4b01      	ldr	r3, [pc, #4]	@ (8002bd4 <__errno+0x8>)
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	2000000c 	.word	0x2000000c

08002bd8 <__libc_init_array>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	4d0d      	ldr	r5, [pc, #52]	@ (8002c10 <__libc_init_array+0x38>)
 8002bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8002c14 <__libc_init_array+0x3c>)
 8002bde:	1b64      	subs	r4, r4, r5
 8002be0:	10a4      	asrs	r4, r4, #2
 8002be2:	2600      	movs	r6, #0
 8002be4:	42a6      	cmp	r6, r4
 8002be6:	d109      	bne.n	8002bfc <__libc_init_array+0x24>
 8002be8:	4d0b      	ldr	r5, [pc, #44]	@ (8002c18 <__libc_init_array+0x40>)
 8002bea:	4c0c      	ldr	r4, [pc, #48]	@ (8002c1c <__libc_init_array+0x44>)
 8002bec:	f001 febe 	bl	800496c <_init>
 8002bf0:	1b64      	subs	r4, r4, r5
 8002bf2:	10a4      	asrs	r4, r4, #2
 8002bf4:	2600      	movs	r6, #0
 8002bf6:	42a6      	cmp	r6, r4
 8002bf8:	d105      	bne.n	8002c06 <__libc_init_array+0x2e>
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
 8002bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c00:	4798      	blx	r3
 8002c02:	3601      	adds	r6, #1
 8002c04:	e7ee      	b.n	8002be4 <__libc_init_array+0xc>
 8002c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0a:	4798      	blx	r3
 8002c0c:	3601      	adds	r6, #1
 8002c0e:	e7f2      	b.n	8002bf6 <__libc_init_array+0x1e>
 8002c10:	08004d18 	.word	0x08004d18
 8002c14:	08004d18 	.word	0x08004d18
 8002c18:	08004d18 	.word	0x08004d18
 8002c1c:	08004d1c 	.word	0x08004d1c

08002c20 <__retarget_lock_init_recursive>:
 8002c20:	4770      	bx	lr

08002c22 <__retarget_lock_acquire_recursive>:
 8002c22:	4770      	bx	lr

08002c24 <__retarget_lock_release_recursive>:
 8002c24:	4770      	bx	lr

08002c26 <memcpy>:
 8002c26:	440a      	add	r2, r1
 8002c28:	4291      	cmp	r1, r2
 8002c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c2e:	d100      	bne.n	8002c32 <memcpy+0xc>
 8002c30:	4770      	bx	lr
 8002c32:	b510      	push	{r4, lr}
 8002c34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c3c:	4291      	cmp	r1, r2
 8002c3e:	d1f9      	bne.n	8002c34 <memcpy+0xe>
 8002c40:	bd10      	pop	{r4, pc}

08002c42 <quorem>:
 8002c42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c46:	6903      	ldr	r3, [r0, #16]
 8002c48:	690c      	ldr	r4, [r1, #16]
 8002c4a:	42a3      	cmp	r3, r4
 8002c4c:	4607      	mov	r7, r0
 8002c4e:	db7e      	blt.n	8002d4e <quorem+0x10c>
 8002c50:	3c01      	subs	r4, #1
 8002c52:	f101 0814 	add.w	r8, r1, #20
 8002c56:	00a3      	lsls	r3, r4, #2
 8002c58:	f100 0514 	add.w	r5, r0, #20
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002c68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002c74:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c78:	d32e      	bcc.n	8002cd8 <quorem+0x96>
 8002c7a:	f04f 0a00 	mov.w	sl, #0
 8002c7e:	46c4      	mov	ip, r8
 8002c80:	46ae      	mov	lr, r5
 8002c82:	46d3      	mov	fp, sl
 8002c84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002c88:	b298      	uxth	r0, r3
 8002c8a:	fb06 a000 	mla	r0, r6, r0, sl
 8002c8e:	0c02      	lsrs	r2, r0, #16
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	fb06 2303 	mla	r3, r6, r3, r2
 8002c96:	f8de 2000 	ldr.w	r2, [lr]
 8002c9a:	b280      	uxth	r0, r0
 8002c9c:	b292      	uxth	r2, r2
 8002c9e:	1a12      	subs	r2, r2, r0
 8002ca0:	445a      	add	r2, fp
 8002ca2:	f8de 0000 	ldr.w	r0, [lr]
 8002ca6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002cb0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002cba:	45e1      	cmp	r9, ip
 8002cbc:	f84e 2b04 	str.w	r2, [lr], #4
 8002cc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002cc4:	d2de      	bcs.n	8002c84 <quorem+0x42>
 8002cc6:	9b00      	ldr	r3, [sp, #0]
 8002cc8:	58eb      	ldr	r3, [r5, r3]
 8002cca:	b92b      	cbnz	r3, 8002cd8 <quorem+0x96>
 8002ccc:	9b01      	ldr	r3, [sp, #4]
 8002cce:	3b04      	subs	r3, #4
 8002cd0:	429d      	cmp	r5, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	d32f      	bcc.n	8002d36 <quorem+0xf4>
 8002cd6:	613c      	str	r4, [r7, #16]
 8002cd8:	4638      	mov	r0, r7
 8002cda:	f001 f97b 	bl	8003fd4 <__mcmp>
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	db25      	blt.n	8002d2e <quorem+0xec>
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f858 2b04 	ldr.w	r2, [r8], #4
 8002cea:	f8d1 c000 	ldr.w	ip, [r1]
 8002cee:	fa1f fe82 	uxth.w	lr, r2
 8002cf2:	fa1f f38c 	uxth.w	r3, ip
 8002cf6:	eba3 030e 	sub.w	r3, r3, lr
 8002cfa:	4403      	add	r3, r0
 8002cfc:	0c12      	lsrs	r2, r2, #16
 8002cfe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002d02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d0c:	45c1      	cmp	r9, r8
 8002d0e:	f841 3b04 	str.w	r3, [r1], #4
 8002d12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002d16:	d2e6      	bcs.n	8002ce6 <quorem+0xa4>
 8002d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002d1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002d20:	b922      	cbnz	r2, 8002d2c <quorem+0xea>
 8002d22:	3b04      	subs	r3, #4
 8002d24:	429d      	cmp	r5, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	d30b      	bcc.n	8002d42 <quorem+0x100>
 8002d2a:	613c      	str	r4, [r7, #16]
 8002d2c:	3601      	adds	r6, #1
 8002d2e:	4630      	mov	r0, r6
 8002d30:	b003      	add	sp, #12
 8002d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	3b04      	subs	r3, #4
 8002d3a:	2a00      	cmp	r2, #0
 8002d3c:	d1cb      	bne.n	8002cd6 <quorem+0x94>
 8002d3e:	3c01      	subs	r4, #1
 8002d40:	e7c6      	b.n	8002cd0 <quorem+0x8e>
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	3b04      	subs	r3, #4
 8002d46:	2a00      	cmp	r2, #0
 8002d48:	d1ef      	bne.n	8002d2a <quorem+0xe8>
 8002d4a:	3c01      	subs	r4, #1
 8002d4c:	e7ea      	b.n	8002d24 <quorem+0xe2>
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e7ee      	b.n	8002d30 <quorem+0xee>
 8002d52:	0000      	movs	r0, r0
 8002d54:	0000      	movs	r0, r0
	...

08002d58 <_dtoa_r>:
 8002d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d5c:	69c7      	ldr	r7, [r0, #28]
 8002d5e:	b099      	sub	sp, #100	@ 0x64
 8002d60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002d64:	ec55 4b10 	vmov	r4, r5, d0
 8002d68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8002d6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8002d6c:	4683      	mov	fp, r0
 8002d6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8002d70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002d72:	b97f      	cbnz	r7, 8002d94 <_dtoa_r+0x3c>
 8002d74:	2010      	movs	r0, #16
 8002d76:	f000 fdfd 	bl	8003974 <malloc>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8002d80:	b920      	cbnz	r0, 8002d8c <_dtoa_r+0x34>
 8002d82:	4ba7      	ldr	r3, [pc, #668]	@ (8003020 <_dtoa_r+0x2c8>)
 8002d84:	21ef      	movs	r1, #239	@ 0xef
 8002d86:	48a7      	ldr	r0, [pc, #668]	@ (8003024 <_dtoa_r+0x2cc>)
 8002d88:	f001 fae8 	bl	800435c <__assert_func>
 8002d8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002d90:	6007      	str	r7, [r0, #0]
 8002d92:	60c7      	str	r7, [r0, #12]
 8002d94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002d98:	6819      	ldr	r1, [r3, #0]
 8002d9a:	b159      	cbz	r1, 8002db4 <_dtoa_r+0x5c>
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	604a      	str	r2, [r1, #4]
 8002da0:	2301      	movs	r3, #1
 8002da2:	4093      	lsls	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
 8002da6:	4658      	mov	r0, fp
 8002da8:	f000 feda 	bl	8003b60 <_Bfree>
 8002dac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	1e2b      	subs	r3, r5, #0
 8002db6:	bfb9      	ittee	lt
 8002db8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002dbc:	9303      	strlt	r3, [sp, #12]
 8002dbe:	2300      	movge	r3, #0
 8002dc0:	6033      	strge	r3, [r6, #0]
 8002dc2:	9f03      	ldr	r7, [sp, #12]
 8002dc4:	4b98      	ldr	r3, [pc, #608]	@ (8003028 <_dtoa_r+0x2d0>)
 8002dc6:	bfbc      	itt	lt
 8002dc8:	2201      	movlt	r2, #1
 8002dca:	6032      	strlt	r2, [r6, #0]
 8002dcc:	43bb      	bics	r3, r7
 8002dce:	d112      	bne.n	8002df6 <_dtoa_r+0x9e>
 8002dd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002dd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002ddc:	4323      	orrs	r3, r4
 8002dde:	f000 854d 	beq.w	800387c <_dtoa_r+0xb24>
 8002de2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002de4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800303c <_dtoa_r+0x2e4>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 854f 	beq.w	800388c <_dtoa_r+0xb34>
 8002dee:	f10a 0303 	add.w	r3, sl, #3
 8002df2:	f000 bd49 	b.w	8003888 <_dtoa_r+0xb30>
 8002df6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	ec51 0b17 	vmov	r0, r1, d7
 8002e00:	2300      	movs	r3, #0
 8002e02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002e06:	f7fd fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 8002e0a:	4680      	mov	r8, r0
 8002e0c:	b158      	cbz	r0, 8002e26 <_dtoa_r+0xce>
 8002e0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002e10:	2301      	movs	r3, #1
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002e16:	b113      	cbz	r3, 8002e1e <_dtoa_r+0xc6>
 8002e18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8002e1a:	4b84      	ldr	r3, [pc, #528]	@ (800302c <_dtoa_r+0x2d4>)
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003040 <_dtoa_r+0x2e8>
 8002e22:	f000 bd33 	b.w	800388c <_dtoa_r+0xb34>
 8002e26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8002e2a:	aa16      	add	r2, sp, #88	@ 0x58
 8002e2c:	a917      	add	r1, sp, #92	@ 0x5c
 8002e2e:	4658      	mov	r0, fp
 8002e30:	f001 f980 	bl	8004134 <__d2b>
 8002e34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002e38:	4681      	mov	r9, r0
 8002e3a:	2e00      	cmp	r6, #0
 8002e3c:	d077      	beq.n	8002f2e <_dtoa_r+0x1d6>
 8002e3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8002e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002e4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002e50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002e54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002e58:	4619      	mov	r1, r3
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4b74      	ldr	r3, [pc, #464]	@ (8003030 <_dtoa_r+0x2d8>)
 8002e5e:	f7fd fa1b 	bl	8000298 <__aeabi_dsub>
 8002e62:	a369      	add	r3, pc, #420	@ (adr r3, 8003008 <_dtoa_r+0x2b0>)
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f7fd fbce 	bl	8000608 <__aeabi_dmul>
 8002e6c:	a368      	add	r3, pc, #416	@ (adr r3, 8003010 <_dtoa_r+0x2b8>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f7fd fa13 	bl	800029c <__adddf3>
 8002e76:	4604      	mov	r4, r0
 8002e78:	4630      	mov	r0, r6
 8002e7a:	460d      	mov	r5, r1
 8002e7c:	f7fd fb5a 	bl	8000534 <__aeabi_i2d>
 8002e80:	a365      	add	r3, pc, #404	@ (adr r3, 8003018 <_dtoa_r+0x2c0>)
 8002e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e86:	f7fd fbbf 	bl	8000608 <__aeabi_dmul>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4620      	mov	r0, r4
 8002e90:	4629      	mov	r1, r5
 8002e92:	f7fd fa03 	bl	800029c <__adddf3>
 8002e96:	4604      	mov	r4, r0
 8002e98:	460d      	mov	r5, r1
 8002e9a:	f7fd fe65 	bl	8000b68 <__aeabi_d2iz>
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4607      	mov	r7, r0
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	f7fd fe20 	bl	8000aec <__aeabi_dcmplt>
 8002eac:	b140      	cbz	r0, 8002ec0 <_dtoa_r+0x168>
 8002eae:	4638      	mov	r0, r7
 8002eb0:	f7fd fb40 	bl	8000534 <__aeabi_i2d>
 8002eb4:	4622      	mov	r2, r4
 8002eb6:	462b      	mov	r3, r5
 8002eb8:	f7fd fe0e 	bl	8000ad8 <__aeabi_dcmpeq>
 8002ebc:	b900      	cbnz	r0, 8002ec0 <_dtoa_r+0x168>
 8002ebe:	3f01      	subs	r7, #1
 8002ec0:	2f16      	cmp	r7, #22
 8002ec2:	d851      	bhi.n	8002f68 <_dtoa_r+0x210>
 8002ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8003034 <_dtoa_r+0x2dc>)
 8002ec6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002ed2:	f7fd fe0b 	bl	8000aec <__aeabi_dcmplt>
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d048      	beq.n	8002f6c <_dtoa_r+0x214>
 8002eda:	3f01      	subs	r7, #1
 8002edc:	2300      	movs	r3, #0
 8002ede:	9312      	str	r3, [sp, #72]	@ 0x48
 8002ee0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002ee2:	1b9b      	subs	r3, r3, r6
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	bf44      	itt	mi
 8002ee8:	f1c3 0801 	rsbmi	r8, r3, #1
 8002eec:	2300      	movmi	r3, #0
 8002eee:	9208      	str	r2, [sp, #32]
 8002ef0:	bf54      	ite	pl
 8002ef2:	f04f 0800 	movpl.w	r8, #0
 8002ef6:	9308      	strmi	r3, [sp, #32]
 8002ef8:	2f00      	cmp	r7, #0
 8002efa:	db39      	blt.n	8002f70 <_dtoa_r+0x218>
 8002efc:	9b08      	ldr	r3, [sp, #32]
 8002efe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8002f00:	443b      	add	r3, r7
 8002f02:	9308      	str	r3, [sp, #32]
 8002f04:	2300      	movs	r3, #0
 8002f06:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f0a:	2b09      	cmp	r3, #9
 8002f0c:	d864      	bhi.n	8002fd8 <_dtoa_r+0x280>
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	bfc4      	itt	gt
 8002f12:	3b04      	subgt	r3, #4
 8002f14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8002f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f18:	f1a3 0302 	sub.w	r3, r3, #2
 8002f1c:	bfcc      	ite	gt
 8002f1e:	2400      	movgt	r4, #0
 8002f20:	2401      	movle	r4, #1
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d863      	bhi.n	8002fee <_dtoa_r+0x296>
 8002f26:	e8df f003 	tbb	[pc, r3]
 8002f2a:	372a      	.short	0x372a
 8002f2c:	5535      	.short	0x5535
 8002f2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8002f32:	441e      	add	r6, r3
 8002f34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	bfc1      	itttt	gt
 8002f3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002f40:	409f      	lslgt	r7, r3
 8002f42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002f46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002f4a:	bfd6      	itet	le
 8002f4c:	f1c3 0320 	rsble	r3, r3, #32
 8002f50:	ea47 0003 	orrgt.w	r0, r7, r3
 8002f54:	fa04 f003 	lslle.w	r0, r4, r3
 8002f58:	f7fd fadc 	bl	8000514 <__aeabi_ui2d>
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002f62:	3e01      	subs	r6, #1
 8002f64:	9214      	str	r2, [sp, #80]	@ 0x50
 8002f66:	e777      	b.n	8002e58 <_dtoa_r+0x100>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e7b8      	b.n	8002ede <_dtoa_r+0x186>
 8002f6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8002f6e:	e7b7      	b.n	8002ee0 <_dtoa_r+0x188>
 8002f70:	427b      	negs	r3, r7
 8002f72:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f74:	2300      	movs	r3, #0
 8002f76:	eba8 0807 	sub.w	r8, r8, r7
 8002f7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002f7c:	e7c4      	b.n	8002f08 <_dtoa_r+0x1b0>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	dc35      	bgt.n	8002ff4 <_dtoa_r+0x29c>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	9307      	str	r3, [sp, #28]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	920e      	str	r2, [sp, #56]	@ 0x38
 8002f92:	e00b      	b.n	8002fac <_dtoa_r+0x254>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e7f3      	b.n	8002f80 <_dtoa_r+0x228>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	9307      	str	r3, [sp, #28]
 8002fa8:	bfb8      	it	lt
 8002faa:	2301      	movlt	r3, #1
 8002fac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	f102 0514 	add.w	r5, r2, #20
 8002fb8:	429d      	cmp	r5, r3
 8002fba:	d91f      	bls.n	8002ffc <_dtoa_r+0x2a4>
 8002fbc:	6041      	str	r1, [r0, #4]
 8002fbe:	4658      	mov	r0, fp
 8002fc0:	f000 fd8e 	bl	8003ae0 <_Balloc>
 8002fc4:	4682      	mov	sl, r0
 8002fc6:	2800      	cmp	r0, #0
 8002fc8:	d13c      	bne.n	8003044 <_dtoa_r+0x2ec>
 8002fca:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <_dtoa_r+0x2e0>)
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f240 11af 	movw	r1, #431	@ 0x1af
 8002fd2:	e6d8      	b.n	8002d86 <_dtoa_r+0x2e>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e7e0      	b.n	8002f9a <_dtoa_r+0x242>
 8002fd8:	2401      	movs	r4, #1
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fde:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	9307      	str	r3, [sp, #28]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2312      	movs	r3, #18
 8002fec:	e7d0      	b.n	8002f90 <_dtoa_r+0x238>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002ff2:	e7f5      	b.n	8002fe0 <_dtoa_r+0x288>
 8002ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	9307      	str	r3, [sp, #28]
 8002ffa:	e7d7      	b.n	8002fac <_dtoa_r+0x254>
 8002ffc:	3101      	adds	r1, #1
 8002ffe:	0052      	lsls	r2, r2, #1
 8003000:	e7d8      	b.n	8002fb4 <_dtoa_r+0x25c>
 8003002:	bf00      	nop
 8003004:	f3af 8000 	nop.w
 8003008:	636f4361 	.word	0x636f4361
 800300c:	3fd287a7 	.word	0x3fd287a7
 8003010:	8b60c8b3 	.word	0x8b60c8b3
 8003014:	3fc68a28 	.word	0x3fc68a28
 8003018:	509f79fb 	.word	0x509f79fb
 800301c:	3fd34413 	.word	0x3fd34413
 8003020:	080049e2 	.word	0x080049e2
 8003024:	080049f9 	.word	0x080049f9
 8003028:	7ff00000 	.word	0x7ff00000
 800302c:	080049b2 	.word	0x080049b2
 8003030:	3ff80000 	.word	0x3ff80000
 8003034:	08004af0 	.word	0x08004af0
 8003038:	08004a51 	.word	0x08004a51
 800303c:	080049de 	.word	0x080049de
 8003040:	080049b1 	.word	0x080049b1
 8003044:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003048:	6018      	str	r0, [r3, #0]
 800304a:	9b07      	ldr	r3, [sp, #28]
 800304c:	2b0e      	cmp	r3, #14
 800304e:	f200 80a4 	bhi.w	800319a <_dtoa_r+0x442>
 8003052:	2c00      	cmp	r4, #0
 8003054:	f000 80a1 	beq.w	800319a <_dtoa_r+0x442>
 8003058:	2f00      	cmp	r7, #0
 800305a:	dd33      	ble.n	80030c4 <_dtoa_r+0x36c>
 800305c:	4bad      	ldr	r3, [pc, #692]	@ (8003314 <_dtoa_r+0x5bc>)
 800305e:	f007 020f 	and.w	r2, r7, #15
 8003062:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003066:	ed93 7b00 	vldr	d7, [r3]
 800306a:	05f8      	lsls	r0, r7, #23
 800306c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003070:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003074:	d516      	bpl.n	80030a4 <_dtoa_r+0x34c>
 8003076:	4ba8      	ldr	r3, [pc, #672]	@ (8003318 <_dtoa_r+0x5c0>)
 8003078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800307c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003080:	f7fd fbec 	bl	800085c <__aeabi_ddiv>
 8003084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003088:	f004 040f 	and.w	r4, r4, #15
 800308c:	2603      	movs	r6, #3
 800308e:	4da2      	ldr	r5, [pc, #648]	@ (8003318 <_dtoa_r+0x5c0>)
 8003090:	b954      	cbnz	r4, 80030a8 <_dtoa_r+0x350>
 8003092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800309a:	f7fd fbdf 	bl	800085c <__aeabi_ddiv>
 800309e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030a2:	e028      	b.n	80030f6 <_dtoa_r+0x39e>
 80030a4:	2602      	movs	r6, #2
 80030a6:	e7f2      	b.n	800308e <_dtoa_r+0x336>
 80030a8:	07e1      	lsls	r1, r4, #31
 80030aa:	d508      	bpl.n	80030be <_dtoa_r+0x366>
 80030ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80030b4:	f7fd faa8 	bl	8000608 <__aeabi_dmul>
 80030b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030bc:	3601      	adds	r6, #1
 80030be:	1064      	asrs	r4, r4, #1
 80030c0:	3508      	adds	r5, #8
 80030c2:	e7e5      	b.n	8003090 <_dtoa_r+0x338>
 80030c4:	f000 80d2 	beq.w	800326c <_dtoa_r+0x514>
 80030c8:	427c      	negs	r4, r7
 80030ca:	4b92      	ldr	r3, [pc, #584]	@ (8003314 <_dtoa_r+0x5bc>)
 80030cc:	4d92      	ldr	r5, [pc, #584]	@ (8003318 <_dtoa_r+0x5c0>)
 80030ce:	f004 020f 	and.w	r2, r4, #15
 80030d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80030de:	f7fd fa93 	bl	8000608 <__aeabi_dmul>
 80030e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030e6:	1124      	asrs	r4, r4, #4
 80030e8:	2300      	movs	r3, #0
 80030ea:	2602      	movs	r6, #2
 80030ec:	2c00      	cmp	r4, #0
 80030ee:	f040 80b2 	bne.w	8003256 <_dtoa_r+0x4fe>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1d3      	bne.n	800309e <_dtoa_r+0x346>
 80030f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80030f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80b7 	beq.w	8003270 <_dtoa_r+0x518>
 8003102:	4b86      	ldr	r3, [pc, #536]	@ (800331c <_dtoa_r+0x5c4>)
 8003104:	2200      	movs	r2, #0
 8003106:	4620      	mov	r0, r4
 8003108:	4629      	mov	r1, r5
 800310a:	f7fd fcef 	bl	8000aec <__aeabi_dcmplt>
 800310e:	2800      	cmp	r0, #0
 8003110:	f000 80ae 	beq.w	8003270 <_dtoa_r+0x518>
 8003114:	9b07      	ldr	r3, [sp, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80aa 	beq.w	8003270 <_dtoa_r+0x518>
 800311c:	9b00      	ldr	r3, [sp, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	dd37      	ble.n	8003192 <_dtoa_r+0x43a>
 8003122:	1e7b      	subs	r3, r7, #1
 8003124:	9304      	str	r3, [sp, #16]
 8003126:	4620      	mov	r0, r4
 8003128:	4b7d      	ldr	r3, [pc, #500]	@ (8003320 <_dtoa_r+0x5c8>)
 800312a:	2200      	movs	r2, #0
 800312c:	4629      	mov	r1, r5
 800312e:	f7fd fa6b 	bl	8000608 <__aeabi_dmul>
 8003132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003136:	9c00      	ldr	r4, [sp, #0]
 8003138:	3601      	adds	r6, #1
 800313a:	4630      	mov	r0, r6
 800313c:	f7fd f9fa 	bl	8000534 <__aeabi_i2d>
 8003140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003144:	f7fd fa60 	bl	8000608 <__aeabi_dmul>
 8003148:	4b76      	ldr	r3, [pc, #472]	@ (8003324 <_dtoa_r+0x5cc>)
 800314a:	2200      	movs	r2, #0
 800314c:	f7fd f8a6 	bl	800029c <__adddf3>
 8003150:	4605      	mov	r5, r0
 8003152:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003156:	2c00      	cmp	r4, #0
 8003158:	f040 808d 	bne.w	8003276 <_dtoa_r+0x51e>
 800315c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003160:	4b71      	ldr	r3, [pc, #452]	@ (8003328 <_dtoa_r+0x5d0>)
 8003162:	2200      	movs	r2, #0
 8003164:	f7fd f898 	bl	8000298 <__aeabi_dsub>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003170:	462a      	mov	r2, r5
 8003172:	4633      	mov	r3, r6
 8003174:	f7fd fcd8 	bl	8000b28 <__aeabi_dcmpgt>
 8003178:	2800      	cmp	r0, #0
 800317a:	f040 828b 	bne.w	8003694 <_dtoa_r+0x93c>
 800317e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003182:	462a      	mov	r2, r5
 8003184:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003188:	f7fd fcb0 	bl	8000aec <__aeabi_dcmplt>
 800318c:	2800      	cmp	r0, #0
 800318e:	f040 8128 	bne.w	80033e2 <_dtoa_r+0x68a>
 8003192:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003196:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800319a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800319c:	2b00      	cmp	r3, #0
 800319e:	f2c0 815a 	blt.w	8003456 <_dtoa_r+0x6fe>
 80031a2:	2f0e      	cmp	r7, #14
 80031a4:	f300 8157 	bgt.w	8003456 <_dtoa_r+0x6fe>
 80031a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003314 <_dtoa_r+0x5bc>)
 80031aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80031ae:	ed93 7b00 	vldr	d7, [r3]
 80031b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	ed8d 7b00 	vstr	d7, [sp]
 80031ba:	da03      	bge.n	80031c4 <_dtoa_r+0x46c>
 80031bc:	9b07      	ldr	r3, [sp, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f340 8101 	ble.w	80033c6 <_dtoa_r+0x66e>
 80031c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80031c8:	4656      	mov	r6, sl
 80031ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80031ce:	4620      	mov	r0, r4
 80031d0:	4629      	mov	r1, r5
 80031d2:	f7fd fb43 	bl	800085c <__aeabi_ddiv>
 80031d6:	f7fd fcc7 	bl	8000b68 <__aeabi_d2iz>
 80031da:	4680      	mov	r8, r0
 80031dc:	f7fd f9aa 	bl	8000534 <__aeabi_i2d>
 80031e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80031e4:	f7fd fa10 	bl	8000608 <__aeabi_dmul>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4620      	mov	r0, r4
 80031ee:	4629      	mov	r1, r5
 80031f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80031f4:	f7fd f850 	bl	8000298 <__aeabi_dsub>
 80031f8:	f806 4b01 	strb.w	r4, [r6], #1
 80031fc:	9d07      	ldr	r5, [sp, #28]
 80031fe:	eba6 040a 	sub.w	r4, r6, sl
 8003202:	42a5      	cmp	r5, r4
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	f040 8117 	bne.w	800343a <_dtoa_r+0x6e2>
 800320c:	f7fd f846 	bl	800029c <__adddf3>
 8003210:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003214:	4604      	mov	r4, r0
 8003216:	460d      	mov	r5, r1
 8003218:	f7fd fc86 	bl	8000b28 <__aeabi_dcmpgt>
 800321c:	2800      	cmp	r0, #0
 800321e:	f040 80f9 	bne.w	8003414 <_dtoa_r+0x6bc>
 8003222:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003226:	4620      	mov	r0, r4
 8003228:	4629      	mov	r1, r5
 800322a:	f7fd fc55 	bl	8000ad8 <__aeabi_dcmpeq>
 800322e:	b118      	cbz	r0, 8003238 <_dtoa_r+0x4e0>
 8003230:	f018 0f01 	tst.w	r8, #1
 8003234:	f040 80ee 	bne.w	8003414 <_dtoa_r+0x6bc>
 8003238:	4649      	mov	r1, r9
 800323a:	4658      	mov	r0, fp
 800323c:	f000 fc90 	bl	8003b60 <_Bfree>
 8003240:	2300      	movs	r3, #0
 8003242:	7033      	strb	r3, [r6, #0]
 8003244:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003246:	3701      	adds	r7, #1
 8003248:	601f      	str	r7, [r3, #0]
 800324a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 831d 	beq.w	800388c <_dtoa_r+0xb34>
 8003252:	601e      	str	r6, [r3, #0]
 8003254:	e31a      	b.n	800388c <_dtoa_r+0xb34>
 8003256:	07e2      	lsls	r2, r4, #31
 8003258:	d505      	bpl.n	8003266 <_dtoa_r+0x50e>
 800325a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800325e:	f7fd f9d3 	bl	8000608 <__aeabi_dmul>
 8003262:	3601      	adds	r6, #1
 8003264:	2301      	movs	r3, #1
 8003266:	1064      	asrs	r4, r4, #1
 8003268:	3508      	adds	r5, #8
 800326a:	e73f      	b.n	80030ec <_dtoa_r+0x394>
 800326c:	2602      	movs	r6, #2
 800326e:	e742      	b.n	80030f6 <_dtoa_r+0x39e>
 8003270:	9c07      	ldr	r4, [sp, #28]
 8003272:	9704      	str	r7, [sp, #16]
 8003274:	e761      	b.n	800313a <_dtoa_r+0x3e2>
 8003276:	4b27      	ldr	r3, [pc, #156]	@ (8003314 <_dtoa_r+0x5bc>)
 8003278:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800327a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800327e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003282:	4454      	add	r4, sl
 8003284:	2900      	cmp	r1, #0
 8003286:	d053      	beq.n	8003330 <_dtoa_r+0x5d8>
 8003288:	4928      	ldr	r1, [pc, #160]	@ (800332c <_dtoa_r+0x5d4>)
 800328a:	2000      	movs	r0, #0
 800328c:	f7fd fae6 	bl	800085c <__aeabi_ddiv>
 8003290:	4633      	mov	r3, r6
 8003292:	462a      	mov	r2, r5
 8003294:	f7fd f800 	bl	8000298 <__aeabi_dsub>
 8003298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800329c:	4656      	mov	r6, sl
 800329e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032a2:	f7fd fc61 	bl	8000b68 <__aeabi_d2iz>
 80032a6:	4605      	mov	r5, r0
 80032a8:	f7fd f944 	bl	8000534 <__aeabi_i2d>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032b4:	f7fc fff0 	bl	8000298 <__aeabi_dsub>
 80032b8:	3530      	adds	r5, #48	@ 0x30
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032c2:	f806 5b01 	strb.w	r5, [r6], #1
 80032c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80032ca:	f7fd fc0f 	bl	8000aec <__aeabi_dcmplt>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d171      	bne.n	80033b6 <_dtoa_r+0x65e>
 80032d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032d6:	4911      	ldr	r1, [pc, #68]	@ (800331c <_dtoa_r+0x5c4>)
 80032d8:	2000      	movs	r0, #0
 80032da:	f7fc ffdd 	bl	8000298 <__aeabi_dsub>
 80032de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80032e2:	f7fd fc03 	bl	8000aec <__aeabi_dcmplt>
 80032e6:	2800      	cmp	r0, #0
 80032e8:	f040 8095 	bne.w	8003416 <_dtoa_r+0x6be>
 80032ec:	42a6      	cmp	r6, r4
 80032ee:	f43f af50 	beq.w	8003192 <_dtoa_r+0x43a>
 80032f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80032f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <_dtoa_r+0x5c8>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	f7fd f985 	bl	8000608 <__aeabi_dmul>
 80032fe:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <_dtoa_r+0x5c8>)
 8003300:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003304:	2200      	movs	r2, #0
 8003306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800330a:	f7fd f97d 	bl	8000608 <__aeabi_dmul>
 800330e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003312:	e7c4      	b.n	800329e <_dtoa_r+0x546>
 8003314:	08004af0 	.word	0x08004af0
 8003318:	08004ac8 	.word	0x08004ac8
 800331c:	3ff00000 	.word	0x3ff00000
 8003320:	40240000 	.word	0x40240000
 8003324:	401c0000 	.word	0x401c0000
 8003328:	40140000 	.word	0x40140000
 800332c:	3fe00000 	.word	0x3fe00000
 8003330:	4631      	mov	r1, r6
 8003332:	4628      	mov	r0, r5
 8003334:	f7fd f968 	bl	8000608 <__aeabi_dmul>
 8003338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800333c:	9415      	str	r4, [sp, #84]	@ 0x54
 800333e:	4656      	mov	r6, sl
 8003340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003344:	f7fd fc10 	bl	8000b68 <__aeabi_d2iz>
 8003348:	4605      	mov	r5, r0
 800334a:	f7fd f8f3 	bl	8000534 <__aeabi_i2d>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003356:	f7fc ff9f 	bl	8000298 <__aeabi_dsub>
 800335a:	3530      	adds	r5, #48	@ 0x30
 800335c:	f806 5b01 	strb.w	r5, [r6], #1
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	42a6      	cmp	r6, r4
 8003366:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	d124      	bne.n	80033ba <_dtoa_r+0x662>
 8003370:	4bac      	ldr	r3, [pc, #688]	@ (8003624 <_dtoa_r+0x8cc>)
 8003372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003376:	f7fc ff91 	bl	800029c <__adddf3>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003382:	f7fd fbd1 	bl	8000b28 <__aeabi_dcmpgt>
 8003386:	2800      	cmp	r0, #0
 8003388:	d145      	bne.n	8003416 <_dtoa_r+0x6be>
 800338a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800338e:	49a5      	ldr	r1, [pc, #660]	@ (8003624 <_dtoa_r+0x8cc>)
 8003390:	2000      	movs	r0, #0
 8003392:	f7fc ff81 	bl	8000298 <__aeabi_dsub>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800339e:	f7fd fba5 	bl	8000aec <__aeabi_dcmplt>
 80033a2:	2800      	cmp	r0, #0
 80033a4:	f43f aef5 	beq.w	8003192 <_dtoa_r+0x43a>
 80033a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80033aa:	1e73      	subs	r3, r6, #1
 80033ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80033ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80033b2:	2b30      	cmp	r3, #48	@ 0x30
 80033b4:	d0f8      	beq.n	80033a8 <_dtoa_r+0x650>
 80033b6:	9f04      	ldr	r7, [sp, #16]
 80033b8:	e73e      	b.n	8003238 <_dtoa_r+0x4e0>
 80033ba:	4b9b      	ldr	r3, [pc, #620]	@ (8003628 <_dtoa_r+0x8d0>)
 80033bc:	f7fd f924 	bl	8000608 <__aeabi_dmul>
 80033c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033c4:	e7bc      	b.n	8003340 <_dtoa_r+0x5e8>
 80033c6:	d10c      	bne.n	80033e2 <_dtoa_r+0x68a>
 80033c8:	4b98      	ldr	r3, [pc, #608]	@ (800362c <_dtoa_r+0x8d4>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033d0:	f7fd f91a 	bl	8000608 <__aeabi_dmul>
 80033d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033d8:	f7fd fb9c 	bl	8000b14 <__aeabi_dcmpge>
 80033dc:	2800      	cmp	r0, #0
 80033de:	f000 8157 	beq.w	8003690 <_dtoa_r+0x938>
 80033e2:	2400      	movs	r4, #0
 80033e4:	4625      	mov	r5, r4
 80033e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80033e8:	43db      	mvns	r3, r3
 80033ea:	9304      	str	r3, [sp, #16]
 80033ec:	4656      	mov	r6, sl
 80033ee:	2700      	movs	r7, #0
 80033f0:	4621      	mov	r1, r4
 80033f2:	4658      	mov	r0, fp
 80033f4:	f000 fbb4 	bl	8003b60 <_Bfree>
 80033f8:	2d00      	cmp	r5, #0
 80033fa:	d0dc      	beq.n	80033b6 <_dtoa_r+0x65e>
 80033fc:	b12f      	cbz	r7, 800340a <_dtoa_r+0x6b2>
 80033fe:	42af      	cmp	r7, r5
 8003400:	d003      	beq.n	800340a <_dtoa_r+0x6b2>
 8003402:	4639      	mov	r1, r7
 8003404:	4658      	mov	r0, fp
 8003406:	f000 fbab 	bl	8003b60 <_Bfree>
 800340a:	4629      	mov	r1, r5
 800340c:	4658      	mov	r0, fp
 800340e:	f000 fba7 	bl	8003b60 <_Bfree>
 8003412:	e7d0      	b.n	80033b6 <_dtoa_r+0x65e>
 8003414:	9704      	str	r7, [sp, #16]
 8003416:	4633      	mov	r3, r6
 8003418:	461e      	mov	r6, r3
 800341a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800341e:	2a39      	cmp	r2, #57	@ 0x39
 8003420:	d107      	bne.n	8003432 <_dtoa_r+0x6da>
 8003422:	459a      	cmp	sl, r3
 8003424:	d1f8      	bne.n	8003418 <_dtoa_r+0x6c0>
 8003426:	9a04      	ldr	r2, [sp, #16]
 8003428:	3201      	adds	r2, #1
 800342a:	9204      	str	r2, [sp, #16]
 800342c:	2230      	movs	r2, #48	@ 0x30
 800342e:	f88a 2000 	strb.w	r2, [sl]
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	3201      	adds	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e7bd      	b.n	80033b6 <_dtoa_r+0x65e>
 800343a:	4b7b      	ldr	r3, [pc, #492]	@ (8003628 <_dtoa_r+0x8d0>)
 800343c:	2200      	movs	r2, #0
 800343e:	f7fd f8e3 	bl	8000608 <__aeabi_dmul>
 8003442:	2200      	movs	r2, #0
 8003444:	2300      	movs	r3, #0
 8003446:	4604      	mov	r4, r0
 8003448:	460d      	mov	r5, r1
 800344a:	f7fd fb45 	bl	8000ad8 <__aeabi_dcmpeq>
 800344e:	2800      	cmp	r0, #0
 8003450:	f43f aebb 	beq.w	80031ca <_dtoa_r+0x472>
 8003454:	e6f0      	b.n	8003238 <_dtoa_r+0x4e0>
 8003456:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003458:	2a00      	cmp	r2, #0
 800345a:	f000 80db 	beq.w	8003614 <_dtoa_r+0x8bc>
 800345e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003460:	2a01      	cmp	r2, #1
 8003462:	f300 80bf 	bgt.w	80035e4 <_dtoa_r+0x88c>
 8003466:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003468:	2a00      	cmp	r2, #0
 800346a:	f000 80b7 	beq.w	80035dc <_dtoa_r+0x884>
 800346e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003472:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003474:	4646      	mov	r6, r8
 8003476:	9a08      	ldr	r2, [sp, #32]
 8003478:	2101      	movs	r1, #1
 800347a:	441a      	add	r2, r3
 800347c:	4658      	mov	r0, fp
 800347e:	4498      	add	r8, r3
 8003480:	9208      	str	r2, [sp, #32]
 8003482:	f000 fc21 	bl	8003cc8 <__i2b>
 8003486:	4605      	mov	r5, r0
 8003488:	b15e      	cbz	r6, 80034a2 <_dtoa_r+0x74a>
 800348a:	9b08      	ldr	r3, [sp, #32]
 800348c:	2b00      	cmp	r3, #0
 800348e:	dd08      	ble.n	80034a2 <_dtoa_r+0x74a>
 8003490:	42b3      	cmp	r3, r6
 8003492:	9a08      	ldr	r2, [sp, #32]
 8003494:	bfa8      	it	ge
 8003496:	4633      	movge	r3, r6
 8003498:	eba8 0803 	sub.w	r8, r8, r3
 800349c:	1af6      	subs	r6, r6, r3
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	9308      	str	r3, [sp, #32]
 80034a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034a4:	b1f3      	cbz	r3, 80034e4 <_dtoa_r+0x78c>
 80034a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80b7 	beq.w	800361c <_dtoa_r+0x8c4>
 80034ae:	b18c      	cbz	r4, 80034d4 <_dtoa_r+0x77c>
 80034b0:	4629      	mov	r1, r5
 80034b2:	4622      	mov	r2, r4
 80034b4:	4658      	mov	r0, fp
 80034b6:	f000 fcc7 	bl	8003e48 <__pow5mult>
 80034ba:	464a      	mov	r2, r9
 80034bc:	4601      	mov	r1, r0
 80034be:	4605      	mov	r5, r0
 80034c0:	4658      	mov	r0, fp
 80034c2:	f000 fc17 	bl	8003cf4 <__multiply>
 80034c6:	4649      	mov	r1, r9
 80034c8:	9004      	str	r0, [sp, #16]
 80034ca:	4658      	mov	r0, fp
 80034cc:	f000 fb48 	bl	8003b60 <_Bfree>
 80034d0:	9b04      	ldr	r3, [sp, #16]
 80034d2:	4699      	mov	r9, r3
 80034d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034d6:	1b1a      	subs	r2, r3, r4
 80034d8:	d004      	beq.n	80034e4 <_dtoa_r+0x78c>
 80034da:	4649      	mov	r1, r9
 80034dc:	4658      	mov	r0, fp
 80034de:	f000 fcb3 	bl	8003e48 <__pow5mult>
 80034e2:	4681      	mov	r9, r0
 80034e4:	2101      	movs	r1, #1
 80034e6:	4658      	mov	r0, fp
 80034e8:	f000 fbee 	bl	8003cc8 <__i2b>
 80034ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80034ee:	4604      	mov	r4, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 81cf 	beq.w	8003894 <_dtoa_r+0xb3c>
 80034f6:	461a      	mov	r2, r3
 80034f8:	4601      	mov	r1, r0
 80034fa:	4658      	mov	r0, fp
 80034fc:	f000 fca4 	bl	8003e48 <__pow5mult>
 8003500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003502:	2b01      	cmp	r3, #1
 8003504:	4604      	mov	r4, r0
 8003506:	f300 8095 	bgt.w	8003634 <_dtoa_r+0x8dc>
 800350a:	9b02      	ldr	r3, [sp, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f040 8087 	bne.w	8003620 <_dtoa_r+0x8c8>
 8003512:	9b03      	ldr	r3, [sp, #12]
 8003514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003518:	2b00      	cmp	r3, #0
 800351a:	f040 8089 	bne.w	8003630 <_dtoa_r+0x8d8>
 800351e:	9b03      	ldr	r3, [sp, #12]
 8003520:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003524:	0d1b      	lsrs	r3, r3, #20
 8003526:	051b      	lsls	r3, r3, #20
 8003528:	b12b      	cbz	r3, 8003536 <_dtoa_r+0x7de>
 800352a:	9b08      	ldr	r3, [sp, #32]
 800352c:	3301      	adds	r3, #1
 800352e:	9308      	str	r3, [sp, #32]
 8003530:	f108 0801 	add.w	r8, r8, #1
 8003534:	2301      	movs	r3, #1
 8003536:	930a      	str	r3, [sp, #40]	@ 0x28
 8003538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 81b0 	beq.w	80038a0 <_dtoa_r+0xb48>
 8003540:	6923      	ldr	r3, [r4, #16]
 8003542:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003546:	6918      	ldr	r0, [r3, #16]
 8003548:	f000 fb72 	bl	8003c30 <__hi0bits>
 800354c:	f1c0 0020 	rsb	r0, r0, #32
 8003550:	9b08      	ldr	r3, [sp, #32]
 8003552:	4418      	add	r0, r3
 8003554:	f010 001f 	ands.w	r0, r0, #31
 8003558:	d077      	beq.n	800364a <_dtoa_r+0x8f2>
 800355a:	f1c0 0320 	rsb	r3, r0, #32
 800355e:	2b04      	cmp	r3, #4
 8003560:	dd6b      	ble.n	800363a <_dtoa_r+0x8e2>
 8003562:	9b08      	ldr	r3, [sp, #32]
 8003564:	f1c0 001c 	rsb	r0, r0, #28
 8003568:	4403      	add	r3, r0
 800356a:	4480      	add	r8, r0
 800356c:	4406      	add	r6, r0
 800356e:	9308      	str	r3, [sp, #32]
 8003570:	f1b8 0f00 	cmp.w	r8, #0
 8003574:	dd05      	ble.n	8003582 <_dtoa_r+0x82a>
 8003576:	4649      	mov	r1, r9
 8003578:	4642      	mov	r2, r8
 800357a:	4658      	mov	r0, fp
 800357c:	f000 fcbe 	bl	8003efc <__lshift>
 8003580:	4681      	mov	r9, r0
 8003582:	9b08      	ldr	r3, [sp, #32]
 8003584:	2b00      	cmp	r3, #0
 8003586:	dd05      	ble.n	8003594 <_dtoa_r+0x83c>
 8003588:	4621      	mov	r1, r4
 800358a:	461a      	mov	r2, r3
 800358c:	4658      	mov	r0, fp
 800358e:	f000 fcb5 	bl	8003efc <__lshift>
 8003592:	4604      	mov	r4, r0
 8003594:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003596:	2b00      	cmp	r3, #0
 8003598:	d059      	beq.n	800364e <_dtoa_r+0x8f6>
 800359a:	4621      	mov	r1, r4
 800359c:	4648      	mov	r0, r9
 800359e:	f000 fd19 	bl	8003fd4 <__mcmp>
 80035a2:	2800      	cmp	r0, #0
 80035a4:	da53      	bge.n	800364e <_dtoa_r+0x8f6>
 80035a6:	1e7b      	subs	r3, r7, #1
 80035a8:	9304      	str	r3, [sp, #16]
 80035aa:	4649      	mov	r1, r9
 80035ac:	2300      	movs	r3, #0
 80035ae:	220a      	movs	r2, #10
 80035b0:	4658      	mov	r0, fp
 80035b2:	f000 faf7 	bl	8003ba4 <__multadd>
 80035b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80035b8:	4681      	mov	r9, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8172 	beq.w	80038a4 <_dtoa_r+0xb4c>
 80035c0:	2300      	movs	r3, #0
 80035c2:	4629      	mov	r1, r5
 80035c4:	220a      	movs	r2, #10
 80035c6:	4658      	mov	r0, fp
 80035c8:	f000 faec 	bl	8003ba4 <__multadd>
 80035cc:	9b00      	ldr	r3, [sp, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	4605      	mov	r5, r0
 80035d2:	dc67      	bgt.n	80036a4 <_dtoa_r+0x94c>
 80035d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	dc41      	bgt.n	800365e <_dtoa_r+0x906>
 80035da:	e063      	b.n	80036a4 <_dtoa_r+0x94c>
 80035dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80035de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80035e2:	e746      	b.n	8003472 <_dtoa_r+0x71a>
 80035e4:	9b07      	ldr	r3, [sp, #28]
 80035e6:	1e5c      	subs	r4, r3, #1
 80035e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80035ea:	42a3      	cmp	r3, r4
 80035ec:	bfbf      	itttt	lt
 80035ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80035f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80035f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80035f4:	1ae3      	sublt	r3, r4, r3
 80035f6:	bfb4      	ite	lt
 80035f8:	18d2      	addlt	r2, r2, r3
 80035fa:	1b1c      	subge	r4, r3, r4
 80035fc:	9b07      	ldr	r3, [sp, #28]
 80035fe:	bfbc      	itt	lt
 8003600:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8003602:	2400      	movlt	r4, #0
 8003604:	2b00      	cmp	r3, #0
 8003606:	bfb5      	itete	lt
 8003608:	eba8 0603 	sublt.w	r6, r8, r3
 800360c:	9b07      	ldrge	r3, [sp, #28]
 800360e:	2300      	movlt	r3, #0
 8003610:	4646      	movge	r6, r8
 8003612:	e730      	b.n	8003476 <_dtoa_r+0x71e>
 8003614:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003616:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003618:	4646      	mov	r6, r8
 800361a:	e735      	b.n	8003488 <_dtoa_r+0x730>
 800361c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800361e:	e75c      	b.n	80034da <_dtoa_r+0x782>
 8003620:	2300      	movs	r3, #0
 8003622:	e788      	b.n	8003536 <_dtoa_r+0x7de>
 8003624:	3fe00000 	.word	0x3fe00000
 8003628:	40240000 	.word	0x40240000
 800362c:	40140000 	.word	0x40140000
 8003630:	9b02      	ldr	r3, [sp, #8]
 8003632:	e780      	b.n	8003536 <_dtoa_r+0x7de>
 8003634:	2300      	movs	r3, #0
 8003636:	930a      	str	r3, [sp, #40]	@ 0x28
 8003638:	e782      	b.n	8003540 <_dtoa_r+0x7e8>
 800363a:	d099      	beq.n	8003570 <_dtoa_r+0x818>
 800363c:	9a08      	ldr	r2, [sp, #32]
 800363e:	331c      	adds	r3, #28
 8003640:	441a      	add	r2, r3
 8003642:	4498      	add	r8, r3
 8003644:	441e      	add	r6, r3
 8003646:	9208      	str	r2, [sp, #32]
 8003648:	e792      	b.n	8003570 <_dtoa_r+0x818>
 800364a:	4603      	mov	r3, r0
 800364c:	e7f6      	b.n	800363c <_dtoa_r+0x8e4>
 800364e:	9b07      	ldr	r3, [sp, #28]
 8003650:	9704      	str	r7, [sp, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	dc20      	bgt.n	8003698 <_dtoa_r+0x940>
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800365a:	2b02      	cmp	r3, #2
 800365c:	dd1e      	ble.n	800369c <_dtoa_r+0x944>
 800365e:	9b00      	ldr	r3, [sp, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f47f aec0 	bne.w	80033e6 <_dtoa_r+0x68e>
 8003666:	4621      	mov	r1, r4
 8003668:	2205      	movs	r2, #5
 800366a:	4658      	mov	r0, fp
 800366c:	f000 fa9a 	bl	8003ba4 <__multadd>
 8003670:	4601      	mov	r1, r0
 8003672:	4604      	mov	r4, r0
 8003674:	4648      	mov	r0, r9
 8003676:	f000 fcad 	bl	8003fd4 <__mcmp>
 800367a:	2800      	cmp	r0, #0
 800367c:	f77f aeb3 	ble.w	80033e6 <_dtoa_r+0x68e>
 8003680:	4656      	mov	r6, sl
 8003682:	2331      	movs	r3, #49	@ 0x31
 8003684:	f806 3b01 	strb.w	r3, [r6], #1
 8003688:	9b04      	ldr	r3, [sp, #16]
 800368a:	3301      	adds	r3, #1
 800368c:	9304      	str	r3, [sp, #16]
 800368e:	e6ae      	b.n	80033ee <_dtoa_r+0x696>
 8003690:	9c07      	ldr	r4, [sp, #28]
 8003692:	9704      	str	r7, [sp, #16]
 8003694:	4625      	mov	r5, r4
 8003696:	e7f3      	b.n	8003680 <_dtoa_r+0x928>
 8003698:	9b07      	ldr	r3, [sp, #28]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8104 	beq.w	80038ac <_dtoa_r+0xb54>
 80036a4:	2e00      	cmp	r6, #0
 80036a6:	dd05      	ble.n	80036b4 <_dtoa_r+0x95c>
 80036a8:	4629      	mov	r1, r5
 80036aa:	4632      	mov	r2, r6
 80036ac:	4658      	mov	r0, fp
 80036ae:	f000 fc25 	bl	8003efc <__lshift>
 80036b2:	4605      	mov	r5, r0
 80036b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d05a      	beq.n	8003770 <_dtoa_r+0xa18>
 80036ba:	6869      	ldr	r1, [r5, #4]
 80036bc:	4658      	mov	r0, fp
 80036be:	f000 fa0f 	bl	8003ae0 <_Balloc>
 80036c2:	4606      	mov	r6, r0
 80036c4:	b928      	cbnz	r0, 80036d2 <_dtoa_r+0x97a>
 80036c6:	4b84      	ldr	r3, [pc, #528]	@ (80038d8 <_dtoa_r+0xb80>)
 80036c8:	4602      	mov	r2, r0
 80036ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80036ce:	f7ff bb5a 	b.w	8002d86 <_dtoa_r+0x2e>
 80036d2:	692a      	ldr	r2, [r5, #16]
 80036d4:	3202      	adds	r2, #2
 80036d6:	0092      	lsls	r2, r2, #2
 80036d8:	f105 010c 	add.w	r1, r5, #12
 80036dc:	300c      	adds	r0, #12
 80036de:	f7ff faa2 	bl	8002c26 <memcpy>
 80036e2:	2201      	movs	r2, #1
 80036e4:	4631      	mov	r1, r6
 80036e6:	4658      	mov	r0, fp
 80036e8:	f000 fc08 	bl	8003efc <__lshift>
 80036ec:	f10a 0301 	add.w	r3, sl, #1
 80036f0:	9307      	str	r3, [sp, #28]
 80036f2:	9b00      	ldr	r3, [sp, #0]
 80036f4:	4453      	add	r3, sl
 80036f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80036f8:	9b02      	ldr	r3, [sp, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	462f      	mov	r7, r5
 8003700:	930a      	str	r3, [sp, #40]	@ 0x28
 8003702:	4605      	mov	r5, r0
 8003704:	9b07      	ldr	r3, [sp, #28]
 8003706:	4621      	mov	r1, r4
 8003708:	3b01      	subs	r3, #1
 800370a:	4648      	mov	r0, r9
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	f7ff fa98 	bl	8002c42 <quorem>
 8003712:	4639      	mov	r1, r7
 8003714:	9002      	str	r0, [sp, #8]
 8003716:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800371a:	4648      	mov	r0, r9
 800371c:	f000 fc5a 	bl	8003fd4 <__mcmp>
 8003720:	462a      	mov	r2, r5
 8003722:	9008      	str	r0, [sp, #32]
 8003724:	4621      	mov	r1, r4
 8003726:	4658      	mov	r0, fp
 8003728:	f000 fc70 	bl	800400c <__mdiff>
 800372c:	68c2      	ldr	r2, [r0, #12]
 800372e:	4606      	mov	r6, r0
 8003730:	bb02      	cbnz	r2, 8003774 <_dtoa_r+0xa1c>
 8003732:	4601      	mov	r1, r0
 8003734:	4648      	mov	r0, r9
 8003736:	f000 fc4d 	bl	8003fd4 <__mcmp>
 800373a:	4602      	mov	r2, r0
 800373c:	4631      	mov	r1, r6
 800373e:	4658      	mov	r0, fp
 8003740:	920e      	str	r2, [sp, #56]	@ 0x38
 8003742:	f000 fa0d 	bl	8003b60 <_Bfree>
 8003746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800374a:	9e07      	ldr	r6, [sp, #28]
 800374c:	ea43 0102 	orr.w	r1, r3, r2
 8003750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003752:	4319      	orrs	r1, r3
 8003754:	d110      	bne.n	8003778 <_dtoa_r+0xa20>
 8003756:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800375a:	d029      	beq.n	80037b0 <_dtoa_r+0xa58>
 800375c:	9b08      	ldr	r3, [sp, #32]
 800375e:	2b00      	cmp	r3, #0
 8003760:	dd02      	ble.n	8003768 <_dtoa_r+0xa10>
 8003762:	9b02      	ldr	r3, [sp, #8]
 8003764:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003768:	9b00      	ldr	r3, [sp, #0]
 800376a:	f883 8000 	strb.w	r8, [r3]
 800376e:	e63f      	b.n	80033f0 <_dtoa_r+0x698>
 8003770:	4628      	mov	r0, r5
 8003772:	e7bb      	b.n	80036ec <_dtoa_r+0x994>
 8003774:	2201      	movs	r2, #1
 8003776:	e7e1      	b.n	800373c <_dtoa_r+0x9e4>
 8003778:	9b08      	ldr	r3, [sp, #32]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db04      	blt.n	8003788 <_dtoa_r+0xa30>
 800377e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003780:	430b      	orrs	r3, r1
 8003782:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003784:	430b      	orrs	r3, r1
 8003786:	d120      	bne.n	80037ca <_dtoa_r+0xa72>
 8003788:	2a00      	cmp	r2, #0
 800378a:	dded      	ble.n	8003768 <_dtoa_r+0xa10>
 800378c:	4649      	mov	r1, r9
 800378e:	2201      	movs	r2, #1
 8003790:	4658      	mov	r0, fp
 8003792:	f000 fbb3 	bl	8003efc <__lshift>
 8003796:	4621      	mov	r1, r4
 8003798:	4681      	mov	r9, r0
 800379a:	f000 fc1b 	bl	8003fd4 <__mcmp>
 800379e:	2800      	cmp	r0, #0
 80037a0:	dc03      	bgt.n	80037aa <_dtoa_r+0xa52>
 80037a2:	d1e1      	bne.n	8003768 <_dtoa_r+0xa10>
 80037a4:	f018 0f01 	tst.w	r8, #1
 80037a8:	d0de      	beq.n	8003768 <_dtoa_r+0xa10>
 80037aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80037ae:	d1d8      	bne.n	8003762 <_dtoa_r+0xa0a>
 80037b0:	9a00      	ldr	r2, [sp, #0]
 80037b2:	2339      	movs	r3, #57	@ 0x39
 80037b4:	7013      	strb	r3, [r2, #0]
 80037b6:	4633      	mov	r3, r6
 80037b8:	461e      	mov	r6, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80037c0:	2a39      	cmp	r2, #57	@ 0x39
 80037c2:	d052      	beq.n	800386a <_dtoa_r+0xb12>
 80037c4:	3201      	adds	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e612      	b.n	80033f0 <_dtoa_r+0x698>
 80037ca:	2a00      	cmp	r2, #0
 80037cc:	dd07      	ble.n	80037de <_dtoa_r+0xa86>
 80037ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80037d2:	d0ed      	beq.n	80037b0 <_dtoa_r+0xa58>
 80037d4:	9a00      	ldr	r2, [sp, #0]
 80037d6:	f108 0301 	add.w	r3, r8, #1
 80037da:	7013      	strb	r3, [r2, #0]
 80037dc:	e608      	b.n	80033f0 <_dtoa_r+0x698>
 80037de:	9b07      	ldr	r3, [sp, #28]
 80037e0:	9a07      	ldr	r2, [sp, #28]
 80037e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80037e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d028      	beq.n	800383e <_dtoa_r+0xae6>
 80037ec:	4649      	mov	r1, r9
 80037ee:	2300      	movs	r3, #0
 80037f0:	220a      	movs	r2, #10
 80037f2:	4658      	mov	r0, fp
 80037f4:	f000 f9d6 	bl	8003ba4 <__multadd>
 80037f8:	42af      	cmp	r7, r5
 80037fa:	4681      	mov	r9, r0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	f04f 020a 	mov.w	r2, #10
 8003804:	4639      	mov	r1, r7
 8003806:	4658      	mov	r0, fp
 8003808:	d107      	bne.n	800381a <_dtoa_r+0xac2>
 800380a:	f000 f9cb 	bl	8003ba4 <__multadd>
 800380e:	4607      	mov	r7, r0
 8003810:	4605      	mov	r5, r0
 8003812:	9b07      	ldr	r3, [sp, #28]
 8003814:	3301      	adds	r3, #1
 8003816:	9307      	str	r3, [sp, #28]
 8003818:	e774      	b.n	8003704 <_dtoa_r+0x9ac>
 800381a:	f000 f9c3 	bl	8003ba4 <__multadd>
 800381e:	4629      	mov	r1, r5
 8003820:	4607      	mov	r7, r0
 8003822:	2300      	movs	r3, #0
 8003824:	220a      	movs	r2, #10
 8003826:	4658      	mov	r0, fp
 8003828:	f000 f9bc 	bl	8003ba4 <__multadd>
 800382c:	4605      	mov	r5, r0
 800382e:	e7f0      	b.n	8003812 <_dtoa_r+0xaba>
 8003830:	9b00      	ldr	r3, [sp, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	bfcc      	ite	gt
 8003836:	461e      	movgt	r6, r3
 8003838:	2601      	movle	r6, #1
 800383a:	4456      	add	r6, sl
 800383c:	2700      	movs	r7, #0
 800383e:	4649      	mov	r1, r9
 8003840:	2201      	movs	r2, #1
 8003842:	4658      	mov	r0, fp
 8003844:	f000 fb5a 	bl	8003efc <__lshift>
 8003848:	4621      	mov	r1, r4
 800384a:	4681      	mov	r9, r0
 800384c:	f000 fbc2 	bl	8003fd4 <__mcmp>
 8003850:	2800      	cmp	r0, #0
 8003852:	dcb0      	bgt.n	80037b6 <_dtoa_r+0xa5e>
 8003854:	d102      	bne.n	800385c <_dtoa_r+0xb04>
 8003856:	f018 0f01 	tst.w	r8, #1
 800385a:	d1ac      	bne.n	80037b6 <_dtoa_r+0xa5e>
 800385c:	4633      	mov	r3, r6
 800385e:	461e      	mov	r6, r3
 8003860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003864:	2a30      	cmp	r2, #48	@ 0x30
 8003866:	d0fa      	beq.n	800385e <_dtoa_r+0xb06>
 8003868:	e5c2      	b.n	80033f0 <_dtoa_r+0x698>
 800386a:	459a      	cmp	sl, r3
 800386c:	d1a4      	bne.n	80037b8 <_dtoa_r+0xa60>
 800386e:	9b04      	ldr	r3, [sp, #16]
 8003870:	3301      	adds	r3, #1
 8003872:	9304      	str	r3, [sp, #16]
 8003874:	2331      	movs	r3, #49	@ 0x31
 8003876:	f88a 3000 	strb.w	r3, [sl]
 800387a:	e5b9      	b.n	80033f0 <_dtoa_r+0x698>
 800387c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800387e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80038dc <_dtoa_r+0xb84>
 8003882:	b11b      	cbz	r3, 800388c <_dtoa_r+0xb34>
 8003884:	f10a 0308 	add.w	r3, sl, #8
 8003888:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4650      	mov	r0, sl
 800388e:	b019      	add	sp, #100	@ 0x64
 8003890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003896:	2b01      	cmp	r3, #1
 8003898:	f77f ae37 	ble.w	800350a <_dtoa_r+0x7b2>
 800389c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800389e:	930a      	str	r3, [sp, #40]	@ 0x28
 80038a0:	2001      	movs	r0, #1
 80038a2:	e655      	b.n	8003550 <_dtoa_r+0x7f8>
 80038a4:	9b00      	ldr	r3, [sp, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f77f aed6 	ble.w	8003658 <_dtoa_r+0x900>
 80038ac:	4656      	mov	r6, sl
 80038ae:	4621      	mov	r1, r4
 80038b0:	4648      	mov	r0, r9
 80038b2:	f7ff f9c6 	bl	8002c42 <quorem>
 80038b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80038ba:	f806 8b01 	strb.w	r8, [r6], #1
 80038be:	9b00      	ldr	r3, [sp, #0]
 80038c0:	eba6 020a 	sub.w	r2, r6, sl
 80038c4:	4293      	cmp	r3, r2
 80038c6:	ddb3      	ble.n	8003830 <_dtoa_r+0xad8>
 80038c8:	4649      	mov	r1, r9
 80038ca:	2300      	movs	r3, #0
 80038cc:	220a      	movs	r2, #10
 80038ce:	4658      	mov	r0, fp
 80038d0:	f000 f968 	bl	8003ba4 <__multadd>
 80038d4:	4681      	mov	r9, r0
 80038d6:	e7ea      	b.n	80038ae <_dtoa_r+0xb56>
 80038d8:	08004a51 	.word	0x08004a51
 80038dc:	080049d5 	.word	0x080049d5

080038e0 <_free_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4605      	mov	r5, r0
 80038e4:	2900      	cmp	r1, #0
 80038e6:	d041      	beq.n	800396c <_free_r+0x8c>
 80038e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ec:	1f0c      	subs	r4, r1, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bfb8      	it	lt
 80038f2:	18e4      	addlt	r4, r4, r3
 80038f4:	f000 f8e8 	bl	8003ac8 <__malloc_lock>
 80038f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003970 <_free_r+0x90>)
 80038fa:	6813      	ldr	r3, [r2, #0]
 80038fc:	b933      	cbnz	r3, 800390c <_free_r+0x2c>
 80038fe:	6063      	str	r3, [r4, #4]
 8003900:	6014      	str	r4, [r2, #0]
 8003902:	4628      	mov	r0, r5
 8003904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003908:	f000 b8e4 	b.w	8003ad4 <__malloc_unlock>
 800390c:	42a3      	cmp	r3, r4
 800390e:	d908      	bls.n	8003922 <_free_r+0x42>
 8003910:	6820      	ldr	r0, [r4, #0]
 8003912:	1821      	adds	r1, r4, r0
 8003914:	428b      	cmp	r3, r1
 8003916:	bf01      	itttt	eq
 8003918:	6819      	ldreq	r1, [r3, #0]
 800391a:	685b      	ldreq	r3, [r3, #4]
 800391c:	1809      	addeq	r1, r1, r0
 800391e:	6021      	streq	r1, [r4, #0]
 8003920:	e7ed      	b.n	80038fe <_free_r+0x1e>
 8003922:	461a      	mov	r2, r3
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	b10b      	cbz	r3, 800392c <_free_r+0x4c>
 8003928:	42a3      	cmp	r3, r4
 800392a:	d9fa      	bls.n	8003922 <_free_r+0x42>
 800392c:	6811      	ldr	r1, [r2, #0]
 800392e:	1850      	adds	r0, r2, r1
 8003930:	42a0      	cmp	r0, r4
 8003932:	d10b      	bne.n	800394c <_free_r+0x6c>
 8003934:	6820      	ldr	r0, [r4, #0]
 8003936:	4401      	add	r1, r0
 8003938:	1850      	adds	r0, r2, r1
 800393a:	4283      	cmp	r3, r0
 800393c:	6011      	str	r1, [r2, #0]
 800393e:	d1e0      	bne.n	8003902 <_free_r+0x22>
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	6053      	str	r3, [r2, #4]
 8003946:	4408      	add	r0, r1
 8003948:	6010      	str	r0, [r2, #0]
 800394a:	e7da      	b.n	8003902 <_free_r+0x22>
 800394c:	d902      	bls.n	8003954 <_free_r+0x74>
 800394e:	230c      	movs	r3, #12
 8003950:	602b      	str	r3, [r5, #0]
 8003952:	e7d6      	b.n	8003902 <_free_r+0x22>
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	1821      	adds	r1, r4, r0
 8003958:	428b      	cmp	r3, r1
 800395a:	bf04      	itt	eq
 800395c:	6819      	ldreq	r1, [r3, #0]
 800395e:	685b      	ldreq	r3, [r3, #4]
 8003960:	6063      	str	r3, [r4, #4]
 8003962:	bf04      	itt	eq
 8003964:	1809      	addeq	r1, r1, r0
 8003966:	6021      	streq	r1, [r4, #0]
 8003968:	6054      	str	r4, [r2, #4]
 800396a:	e7ca      	b.n	8003902 <_free_r+0x22>
 800396c:	bd38      	pop	{r3, r4, r5, pc}
 800396e:	bf00      	nop
 8003970:	200004ac 	.word	0x200004ac

08003974 <malloc>:
 8003974:	4b02      	ldr	r3, [pc, #8]	@ (8003980 <malloc+0xc>)
 8003976:	4601      	mov	r1, r0
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	f000 b825 	b.w	80039c8 <_malloc_r>
 800397e:	bf00      	nop
 8003980:	2000000c 	.word	0x2000000c

08003984 <sbrk_aligned>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4e0f      	ldr	r6, [pc, #60]	@ (80039c4 <sbrk_aligned+0x40>)
 8003988:	460c      	mov	r4, r1
 800398a:	6831      	ldr	r1, [r6, #0]
 800398c:	4605      	mov	r5, r0
 800398e:	b911      	cbnz	r1, 8003996 <sbrk_aligned+0x12>
 8003990:	f000 fcd4 	bl	800433c <_sbrk_r>
 8003994:	6030      	str	r0, [r6, #0]
 8003996:	4621      	mov	r1, r4
 8003998:	4628      	mov	r0, r5
 800399a:	f000 fccf 	bl	800433c <_sbrk_r>
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d103      	bne.n	80039aa <sbrk_aligned+0x26>
 80039a2:	f04f 34ff 	mov.w	r4, #4294967295
 80039a6:	4620      	mov	r0, r4
 80039a8:	bd70      	pop	{r4, r5, r6, pc}
 80039aa:	1cc4      	adds	r4, r0, #3
 80039ac:	f024 0403 	bic.w	r4, r4, #3
 80039b0:	42a0      	cmp	r0, r4
 80039b2:	d0f8      	beq.n	80039a6 <sbrk_aligned+0x22>
 80039b4:	1a21      	subs	r1, r4, r0
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 fcc0 	bl	800433c <_sbrk_r>
 80039bc:	3001      	adds	r0, #1
 80039be:	d1f2      	bne.n	80039a6 <sbrk_aligned+0x22>
 80039c0:	e7ef      	b.n	80039a2 <sbrk_aligned+0x1e>
 80039c2:	bf00      	nop
 80039c4:	200004a8 	.word	0x200004a8

080039c8 <_malloc_r>:
 80039c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039cc:	1ccd      	adds	r5, r1, #3
 80039ce:	f025 0503 	bic.w	r5, r5, #3
 80039d2:	3508      	adds	r5, #8
 80039d4:	2d0c      	cmp	r5, #12
 80039d6:	bf38      	it	cc
 80039d8:	250c      	movcc	r5, #12
 80039da:	2d00      	cmp	r5, #0
 80039dc:	4606      	mov	r6, r0
 80039de:	db01      	blt.n	80039e4 <_malloc_r+0x1c>
 80039e0:	42a9      	cmp	r1, r5
 80039e2:	d904      	bls.n	80039ee <_malloc_r+0x26>
 80039e4:	230c      	movs	r3, #12
 80039e6:	6033      	str	r3, [r6, #0]
 80039e8:	2000      	movs	r0, #0
 80039ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ac4 <_malloc_r+0xfc>
 80039f2:	f000 f869 	bl	8003ac8 <__malloc_lock>
 80039f6:	f8d8 3000 	ldr.w	r3, [r8]
 80039fa:	461c      	mov	r4, r3
 80039fc:	bb44      	cbnz	r4, 8003a50 <_malloc_r+0x88>
 80039fe:	4629      	mov	r1, r5
 8003a00:	4630      	mov	r0, r6
 8003a02:	f7ff ffbf 	bl	8003984 <sbrk_aligned>
 8003a06:	1c43      	adds	r3, r0, #1
 8003a08:	4604      	mov	r4, r0
 8003a0a:	d158      	bne.n	8003abe <_malloc_r+0xf6>
 8003a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8003a10:	4627      	mov	r7, r4
 8003a12:	2f00      	cmp	r7, #0
 8003a14:	d143      	bne.n	8003a9e <_malloc_r+0xd6>
 8003a16:	2c00      	cmp	r4, #0
 8003a18:	d04b      	beq.n	8003ab2 <_malloc_r+0xea>
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	4639      	mov	r1, r7
 8003a1e:	4630      	mov	r0, r6
 8003a20:	eb04 0903 	add.w	r9, r4, r3
 8003a24:	f000 fc8a 	bl	800433c <_sbrk_r>
 8003a28:	4581      	cmp	r9, r0
 8003a2a:	d142      	bne.n	8003ab2 <_malloc_r+0xea>
 8003a2c:	6821      	ldr	r1, [r4, #0]
 8003a2e:	1a6d      	subs	r5, r5, r1
 8003a30:	4629      	mov	r1, r5
 8003a32:	4630      	mov	r0, r6
 8003a34:	f7ff ffa6 	bl	8003984 <sbrk_aligned>
 8003a38:	3001      	adds	r0, #1
 8003a3a:	d03a      	beq.n	8003ab2 <_malloc_r+0xea>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	442b      	add	r3, r5
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	f8d8 3000 	ldr.w	r3, [r8]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	bb62      	cbnz	r2, 8003aa4 <_malloc_r+0xdc>
 8003a4a:	f8c8 7000 	str.w	r7, [r8]
 8003a4e:	e00f      	b.n	8003a70 <_malloc_r+0xa8>
 8003a50:	6822      	ldr	r2, [r4, #0]
 8003a52:	1b52      	subs	r2, r2, r5
 8003a54:	d420      	bmi.n	8003a98 <_malloc_r+0xd0>
 8003a56:	2a0b      	cmp	r2, #11
 8003a58:	d917      	bls.n	8003a8a <_malloc_r+0xc2>
 8003a5a:	1961      	adds	r1, r4, r5
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	6025      	str	r5, [r4, #0]
 8003a60:	bf18      	it	ne
 8003a62:	6059      	strne	r1, [r3, #4]
 8003a64:	6863      	ldr	r3, [r4, #4]
 8003a66:	bf08      	it	eq
 8003a68:	f8c8 1000 	streq.w	r1, [r8]
 8003a6c:	5162      	str	r2, [r4, r5]
 8003a6e:	604b      	str	r3, [r1, #4]
 8003a70:	4630      	mov	r0, r6
 8003a72:	f000 f82f 	bl	8003ad4 <__malloc_unlock>
 8003a76:	f104 000b 	add.w	r0, r4, #11
 8003a7a:	1d23      	adds	r3, r4, #4
 8003a7c:	f020 0007 	bic.w	r0, r0, #7
 8003a80:	1ac2      	subs	r2, r0, r3
 8003a82:	bf1c      	itt	ne
 8003a84:	1a1b      	subne	r3, r3, r0
 8003a86:	50a3      	strne	r3, [r4, r2]
 8003a88:	e7af      	b.n	80039ea <_malloc_r+0x22>
 8003a8a:	6862      	ldr	r2, [r4, #4]
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	bf0c      	ite	eq
 8003a90:	f8c8 2000 	streq.w	r2, [r8]
 8003a94:	605a      	strne	r2, [r3, #4]
 8003a96:	e7eb      	b.n	8003a70 <_malloc_r+0xa8>
 8003a98:	4623      	mov	r3, r4
 8003a9a:	6864      	ldr	r4, [r4, #4]
 8003a9c:	e7ae      	b.n	80039fc <_malloc_r+0x34>
 8003a9e:	463c      	mov	r4, r7
 8003aa0:	687f      	ldr	r7, [r7, #4]
 8003aa2:	e7b6      	b.n	8003a12 <_malloc_r+0x4a>
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	d1fb      	bne.n	8003aa4 <_malloc_r+0xdc>
 8003aac:	2300      	movs	r3, #0
 8003aae:	6053      	str	r3, [r2, #4]
 8003ab0:	e7de      	b.n	8003a70 <_malloc_r+0xa8>
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	6033      	str	r3, [r6, #0]
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f000 f80c 	bl	8003ad4 <__malloc_unlock>
 8003abc:	e794      	b.n	80039e8 <_malloc_r+0x20>
 8003abe:	6005      	str	r5, [r0, #0]
 8003ac0:	e7d6      	b.n	8003a70 <_malloc_r+0xa8>
 8003ac2:	bf00      	nop
 8003ac4:	200004ac 	.word	0x200004ac

08003ac8 <__malloc_lock>:
 8003ac8:	4801      	ldr	r0, [pc, #4]	@ (8003ad0 <__malloc_lock+0x8>)
 8003aca:	f7ff b8aa 	b.w	8002c22 <__retarget_lock_acquire_recursive>
 8003ace:	bf00      	nop
 8003ad0:	200004a4 	.word	0x200004a4

08003ad4 <__malloc_unlock>:
 8003ad4:	4801      	ldr	r0, [pc, #4]	@ (8003adc <__malloc_unlock+0x8>)
 8003ad6:	f7ff b8a5 	b.w	8002c24 <__retarget_lock_release_recursive>
 8003ada:	bf00      	nop
 8003adc:	200004a4 	.word	0x200004a4

08003ae0 <_Balloc>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	69c6      	ldr	r6, [r0, #28]
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	460d      	mov	r5, r1
 8003ae8:	b976      	cbnz	r6, 8003b08 <_Balloc+0x28>
 8003aea:	2010      	movs	r0, #16
 8003aec:	f7ff ff42 	bl	8003974 <malloc>
 8003af0:	4602      	mov	r2, r0
 8003af2:	61e0      	str	r0, [r4, #28]
 8003af4:	b920      	cbnz	r0, 8003b00 <_Balloc+0x20>
 8003af6:	4b18      	ldr	r3, [pc, #96]	@ (8003b58 <_Balloc+0x78>)
 8003af8:	4818      	ldr	r0, [pc, #96]	@ (8003b5c <_Balloc+0x7c>)
 8003afa:	216b      	movs	r1, #107	@ 0x6b
 8003afc:	f000 fc2e 	bl	800435c <__assert_func>
 8003b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b04:	6006      	str	r6, [r0, #0]
 8003b06:	60c6      	str	r6, [r0, #12]
 8003b08:	69e6      	ldr	r6, [r4, #28]
 8003b0a:	68f3      	ldr	r3, [r6, #12]
 8003b0c:	b183      	cbz	r3, 8003b30 <_Balloc+0x50>
 8003b0e:	69e3      	ldr	r3, [r4, #28]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003b16:	b9b8      	cbnz	r0, 8003b48 <_Balloc+0x68>
 8003b18:	2101      	movs	r1, #1
 8003b1a:	fa01 f605 	lsl.w	r6, r1, r5
 8003b1e:	1d72      	adds	r2, r6, #5
 8003b20:	0092      	lsls	r2, r2, #2
 8003b22:	4620      	mov	r0, r4
 8003b24:	f000 fc38 	bl	8004398 <_calloc_r>
 8003b28:	b160      	cbz	r0, 8003b44 <_Balloc+0x64>
 8003b2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003b2e:	e00e      	b.n	8003b4e <_Balloc+0x6e>
 8003b30:	2221      	movs	r2, #33	@ 0x21
 8003b32:	2104      	movs	r1, #4
 8003b34:	4620      	mov	r0, r4
 8003b36:	f000 fc2f 	bl	8004398 <_calloc_r>
 8003b3a:	69e3      	ldr	r3, [r4, #28]
 8003b3c:	60f0      	str	r0, [r6, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e4      	bne.n	8003b0e <_Balloc+0x2e>
 8003b44:	2000      	movs	r0, #0
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	6802      	ldr	r2, [r0, #0]
 8003b4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003b54:	e7f7      	b.n	8003b46 <_Balloc+0x66>
 8003b56:	bf00      	nop
 8003b58:	080049e2 	.word	0x080049e2
 8003b5c:	08004a62 	.word	0x08004a62

08003b60 <_Bfree>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	69c6      	ldr	r6, [r0, #28]
 8003b64:	4605      	mov	r5, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	b976      	cbnz	r6, 8003b88 <_Bfree+0x28>
 8003b6a:	2010      	movs	r0, #16
 8003b6c:	f7ff ff02 	bl	8003974 <malloc>
 8003b70:	4602      	mov	r2, r0
 8003b72:	61e8      	str	r0, [r5, #28]
 8003b74:	b920      	cbnz	r0, 8003b80 <_Bfree+0x20>
 8003b76:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <_Bfree+0x3c>)
 8003b78:	4809      	ldr	r0, [pc, #36]	@ (8003ba0 <_Bfree+0x40>)
 8003b7a:	218f      	movs	r1, #143	@ 0x8f
 8003b7c:	f000 fbee 	bl	800435c <__assert_func>
 8003b80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b84:	6006      	str	r6, [r0, #0]
 8003b86:	60c6      	str	r6, [r0, #12]
 8003b88:	b13c      	cbz	r4, 8003b9a <_Bfree+0x3a>
 8003b8a:	69eb      	ldr	r3, [r5, #28]
 8003b8c:	6862      	ldr	r2, [r4, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b94:	6021      	str	r1, [r4, #0]
 8003b96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	080049e2 	.word	0x080049e2
 8003ba0:	08004a62 	.word	0x08004a62

08003ba4 <__multadd>:
 8003ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba8:	690d      	ldr	r5, [r1, #16]
 8003baa:	4607      	mov	r7, r0
 8003bac:	460c      	mov	r4, r1
 8003bae:	461e      	mov	r6, r3
 8003bb0:	f101 0c14 	add.w	ip, r1, #20
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	f8dc 3000 	ldr.w	r3, [ip]
 8003bba:	b299      	uxth	r1, r3
 8003bbc:	fb02 6101 	mla	r1, r2, r1, r6
 8003bc0:	0c1e      	lsrs	r6, r3, #16
 8003bc2:	0c0b      	lsrs	r3, r1, #16
 8003bc4:	fb02 3306 	mla	r3, r2, r6, r3
 8003bc8:	b289      	uxth	r1, r1
 8003bca:	3001      	adds	r0, #1
 8003bcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003bd0:	4285      	cmp	r5, r0
 8003bd2:	f84c 1b04 	str.w	r1, [ip], #4
 8003bd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003bda:	dcec      	bgt.n	8003bb6 <__multadd+0x12>
 8003bdc:	b30e      	cbz	r6, 8003c22 <__multadd+0x7e>
 8003bde:	68a3      	ldr	r3, [r4, #8]
 8003be0:	42ab      	cmp	r3, r5
 8003be2:	dc19      	bgt.n	8003c18 <__multadd+0x74>
 8003be4:	6861      	ldr	r1, [r4, #4]
 8003be6:	4638      	mov	r0, r7
 8003be8:	3101      	adds	r1, #1
 8003bea:	f7ff ff79 	bl	8003ae0 <_Balloc>
 8003bee:	4680      	mov	r8, r0
 8003bf0:	b928      	cbnz	r0, 8003bfe <__multadd+0x5a>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c28 <__multadd+0x84>)
 8003bf6:	480d      	ldr	r0, [pc, #52]	@ (8003c2c <__multadd+0x88>)
 8003bf8:	21ba      	movs	r1, #186	@ 0xba
 8003bfa:	f000 fbaf 	bl	800435c <__assert_func>
 8003bfe:	6922      	ldr	r2, [r4, #16]
 8003c00:	3202      	adds	r2, #2
 8003c02:	f104 010c 	add.w	r1, r4, #12
 8003c06:	0092      	lsls	r2, r2, #2
 8003c08:	300c      	adds	r0, #12
 8003c0a:	f7ff f80c 	bl	8002c26 <memcpy>
 8003c0e:	4621      	mov	r1, r4
 8003c10:	4638      	mov	r0, r7
 8003c12:	f7ff ffa5 	bl	8003b60 <_Bfree>
 8003c16:	4644      	mov	r4, r8
 8003c18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c1c:	3501      	adds	r5, #1
 8003c1e:	615e      	str	r6, [r3, #20]
 8003c20:	6125      	str	r5, [r4, #16]
 8003c22:	4620      	mov	r0, r4
 8003c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c28:	08004a51 	.word	0x08004a51
 8003c2c:	08004a62 	.word	0x08004a62

08003c30 <__hi0bits>:
 8003c30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003c34:	4603      	mov	r3, r0
 8003c36:	bf36      	itet	cc
 8003c38:	0403      	lslcc	r3, r0, #16
 8003c3a:	2000      	movcs	r0, #0
 8003c3c:	2010      	movcc	r0, #16
 8003c3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c42:	bf3c      	itt	cc
 8003c44:	021b      	lslcc	r3, r3, #8
 8003c46:	3008      	addcc	r0, #8
 8003c48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c4c:	bf3c      	itt	cc
 8003c4e:	011b      	lslcc	r3, r3, #4
 8003c50:	3004      	addcc	r0, #4
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c56:	bf3c      	itt	cc
 8003c58:	009b      	lslcc	r3, r3, #2
 8003c5a:	3002      	addcc	r0, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	db05      	blt.n	8003c6c <__hi0bits+0x3c>
 8003c60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003c64:	f100 0001 	add.w	r0, r0, #1
 8003c68:	bf08      	it	eq
 8003c6a:	2020      	moveq	r0, #32
 8003c6c:	4770      	bx	lr

08003c6e <__lo0bits>:
 8003c6e:	6803      	ldr	r3, [r0, #0]
 8003c70:	4602      	mov	r2, r0
 8003c72:	f013 0007 	ands.w	r0, r3, #7
 8003c76:	d00b      	beq.n	8003c90 <__lo0bits+0x22>
 8003c78:	07d9      	lsls	r1, r3, #31
 8003c7a:	d421      	bmi.n	8003cc0 <__lo0bits+0x52>
 8003c7c:	0798      	lsls	r0, r3, #30
 8003c7e:	bf49      	itett	mi
 8003c80:	085b      	lsrmi	r3, r3, #1
 8003c82:	089b      	lsrpl	r3, r3, #2
 8003c84:	2001      	movmi	r0, #1
 8003c86:	6013      	strmi	r3, [r2, #0]
 8003c88:	bf5c      	itt	pl
 8003c8a:	6013      	strpl	r3, [r2, #0]
 8003c8c:	2002      	movpl	r0, #2
 8003c8e:	4770      	bx	lr
 8003c90:	b299      	uxth	r1, r3
 8003c92:	b909      	cbnz	r1, 8003c98 <__lo0bits+0x2a>
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	2010      	movs	r0, #16
 8003c98:	b2d9      	uxtb	r1, r3
 8003c9a:	b909      	cbnz	r1, 8003ca0 <__lo0bits+0x32>
 8003c9c:	3008      	adds	r0, #8
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	0719      	lsls	r1, r3, #28
 8003ca2:	bf04      	itt	eq
 8003ca4:	091b      	lsreq	r3, r3, #4
 8003ca6:	3004      	addeq	r0, #4
 8003ca8:	0799      	lsls	r1, r3, #30
 8003caa:	bf04      	itt	eq
 8003cac:	089b      	lsreq	r3, r3, #2
 8003cae:	3002      	addeq	r0, #2
 8003cb0:	07d9      	lsls	r1, r3, #31
 8003cb2:	d403      	bmi.n	8003cbc <__lo0bits+0x4e>
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	f100 0001 	add.w	r0, r0, #1
 8003cba:	d003      	beq.n	8003cc4 <__lo0bits+0x56>
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	4770      	bx	lr
 8003cc0:	2000      	movs	r0, #0
 8003cc2:	4770      	bx	lr
 8003cc4:	2020      	movs	r0, #32
 8003cc6:	4770      	bx	lr

08003cc8 <__i2b>:
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	460c      	mov	r4, r1
 8003ccc:	2101      	movs	r1, #1
 8003cce:	f7ff ff07 	bl	8003ae0 <_Balloc>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	b928      	cbnz	r0, 8003ce2 <__i2b+0x1a>
 8003cd6:	4b05      	ldr	r3, [pc, #20]	@ (8003cec <__i2b+0x24>)
 8003cd8:	4805      	ldr	r0, [pc, #20]	@ (8003cf0 <__i2b+0x28>)
 8003cda:	f240 1145 	movw	r1, #325	@ 0x145
 8003cde:	f000 fb3d 	bl	800435c <__assert_func>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	6144      	str	r4, [r0, #20]
 8003ce6:	6103      	str	r3, [r0, #16]
 8003ce8:	bd10      	pop	{r4, pc}
 8003cea:	bf00      	nop
 8003cec:	08004a51 	.word	0x08004a51
 8003cf0:	08004a62 	.word	0x08004a62

08003cf4 <__multiply>:
 8003cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf8:	4614      	mov	r4, r2
 8003cfa:	690a      	ldr	r2, [r1, #16]
 8003cfc:	6923      	ldr	r3, [r4, #16]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	bfa8      	it	ge
 8003d02:	4623      	movge	r3, r4
 8003d04:	460f      	mov	r7, r1
 8003d06:	bfa4      	itt	ge
 8003d08:	460c      	movge	r4, r1
 8003d0a:	461f      	movge	r7, r3
 8003d0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003d10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8003d14:	68a3      	ldr	r3, [r4, #8]
 8003d16:	6861      	ldr	r1, [r4, #4]
 8003d18:	eb0a 0609 	add.w	r6, sl, r9
 8003d1c:	42b3      	cmp	r3, r6
 8003d1e:	b085      	sub	sp, #20
 8003d20:	bfb8      	it	lt
 8003d22:	3101      	addlt	r1, #1
 8003d24:	f7ff fedc 	bl	8003ae0 <_Balloc>
 8003d28:	b930      	cbnz	r0, 8003d38 <__multiply+0x44>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	4b44      	ldr	r3, [pc, #272]	@ (8003e40 <__multiply+0x14c>)
 8003d2e:	4845      	ldr	r0, [pc, #276]	@ (8003e44 <__multiply+0x150>)
 8003d30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003d34:	f000 fb12 	bl	800435c <__assert_func>
 8003d38:	f100 0514 	add.w	r5, r0, #20
 8003d3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003d40:	462b      	mov	r3, r5
 8003d42:	2200      	movs	r2, #0
 8003d44:	4543      	cmp	r3, r8
 8003d46:	d321      	bcc.n	8003d8c <__multiply+0x98>
 8003d48:	f107 0114 	add.w	r1, r7, #20
 8003d4c:	f104 0214 	add.w	r2, r4, #20
 8003d50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8003d54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8003d58:	9302      	str	r3, [sp, #8]
 8003d5a:	1b13      	subs	r3, r2, r4
 8003d5c:	3b15      	subs	r3, #21
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	3304      	adds	r3, #4
 8003d64:	f104 0715 	add.w	r7, r4, #21
 8003d68:	42ba      	cmp	r2, r7
 8003d6a:	bf38      	it	cc
 8003d6c:	2304      	movcc	r3, #4
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	9b02      	ldr	r3, [sp, #8]
 8003d72:	9103      	str	r1, [sp, #12]
 8003d74:	428b      	cmp	r3, r1
 8003d76:	d80c      	bhi.n	8003d92 <__multiply+0x9e>
 8003d78:	2e00      	cmp	r6, #0
 8003d7a:	dd03      	ble.n	8003d84 <__multiply+0x90>
 8003d7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d05b      	beq.n	8003e3c <__multiply+0x148>
 8003d84:	6106      	str	r6, [r0, #16]
 8003d86:	b005      	add	sp, #20
 8003d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8c:	f843 2b04 	str.w	r2, [r3], #4
 8003d90:	e7d8      	b.n	8003d44 <__multiply+0x50>
 8003d92:	f8b1 a000 	ldrh.w	sl, [r1]
 8003d96:	f1ba 0f00 	cmp.w	sl, #0
 8003d9a:	d024      	beq.n	8003de6 <__multiply+0xf2>
 8003d9c:	f104 0e14 	add.w	lr, r4, #20
 8003da0:	46a9      	mov	r9, r5
 8003da2:	f04f 0c00 	mov.w	ip, #0
 8003da6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003daa:	f8d9 3000 	ldr.w	r3, [r9]
 8003dae:	fa1f fb87 	uxth.w	fp, r7
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	fb0a 330b 	mla	r3, sl, fp, r3
 8003db8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8003dbc:	f8d9 7000 	ldr.w	r7, [r9]
 8003dc0:	4463      	add	r3, ip
 8003dc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003dc6:	fb0a c70b 	mla	r7, sl, fp, ip
 8003dca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003dd4:	4572      	cmp	r2, lr
 8003dd6:	f849 3b04 	str.w	r3, [r9], #4
 8003dda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003dde:	d8e2      	bhi.n	8003da6 <__multiply+0xb2>
 8003de0:	9b01      	ldr	r3, [sp, #4]
 8003de2:	f845 c003 	str.w	ip, [r5, r3]
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003dec:	3104      	adds	r1, #4
 8003dee:	f1b9 0f00 	cmp.w	r9, #0
 8003df2:	d021      	beq.n	8003e38 <__multiply+0x144>
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	f104 0c14 	add.w	ip, r4, #20
 8003dfa:	46ae      	mov	lr, r5
 8003dfc:	f04f 0a00 	mov.w	sl, #0
 8003e00:	f8bc b000 	ldrh.w	fp, [ip]
 8003e04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8003e08:	fb09 770b 	mla	r7, r9, fp, r7
 8003e0c:	4457      	add	r7, sl
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003e14:	f84e 3b04 	str.w	r3, [lr], #4
 8003e18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003e1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e20:	f8be 3000 	ldrh.w	r3, [lr]
 8003e24:	fb09 330a 	mla	r3, r9, sl, r3
 8003e28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8003e2c:	4562      	cmp	r2, ip
 8003e2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e32:	d8e5      	bhi.n	8003e00 <__multiply+0x10c>
 8003e34:	9f01      	ldr	r7, [sp, #4]
 8003e36:	51eb      	str	r3, [r5, r7]
 8003e38:	3504      	adds	r5, #4
 8003e3a:	e799      	b.n	8003d70 <__multiply+0x7c>
 8003e3c:	3e01      	subs	r6, #1
 8003e3e:	e79b      	b.n	8003d78 <__multiply+0x84>
 8003e40:	08004a51 	.word	0x08004a51
 8003e44:	08004a62 	.word	0x08004a62

08003e48 <__pow5mult>:
 8003e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e4c:	4615      	mov	r5, r2
 8003e4e:	f012 0203 	ands.w	r2, r2, #3
 8003e52:	4607      	mov	r7, r0
 8003e54:	460e      	mov	r6, r1
 8003e56:	d007      	beq.n	8003e68 <__pow5mult+0x20>
 8003e58:	4c25      	ldr	r4, [pc, #148]	@ (8003ef0 <__pow5mult+0xa8>)
 8003e5a:	3a01      	subs	r2, #1
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e62:	f7ff fe9f 	bl	8003ba4 <__multadd>
 8003e66:	4606      	mov	r6, r0
 8003e68:	10ad      	asrs	r5, r5, #2
 8003e6a:	d03d      	beq.n	8003ee8 <__pow5mult+0xa0>
 8003e6c:	69fc      	ldr	r4, [r7, #28]
 8003e6e:	b97c      	cbnz	r4, 8003e90 <__pow5mult+0x48>
 8003e70:	2010      	movs	r0, #16
 8003e72:	f7ff fd7f 	bl	8003974 <malloc>
 8003e76:	4602      	mov	r2, r0
 8003e78:	61f8      	str	r0, [r7, #28]
 8003e7a:	b928      	cbnz	r0, 8003e88 <__pow5mult+0x40>
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef4 <__pow5mult+0xac>)
 8003e7e:	481e      	ldr	r0, [pc, #120]	@ (8003ef8 <__pow5mult+0xb0>)
 8003e80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003e84:	f000 fa6a 	bl	800435c <__assert_func>
 8003e88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e8c:	6004      	str	r4, [r0, #0]
 8003e8e:	60c4      	str	r4, [r0, #12]
 8003e90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003e94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003e98:	b94c      	cbnz	r4, 8003eae <__pow5mult+0x66>
 8003e9a:	f240 2171 	movw	r1, #625	@ 0x271
 8003e9e:	4638      	mov	r0, r7
 8003ea0:	f7ff ff12 	bl	8003cc8 <__i2b>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f8c8 0008 	str.w	r0, [r8, #8]
 8003eaa:	4604      	mov	r4, r0
 8003eac:	6003      	str	r3, [r0, #0]
 8003eae:	f04f 0900 	mov.w	r9, #0
 8003eb2:	07eb      	lsls	r3, r5, #31
 8003eb4:	d50a      	bpl.n	8003ecc <__pow5mult+0x84>
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	4622      	mov	r2, r4
 8003eba:	4638      	mov	r0, r7
 8003ebc:	f7ff ff1a 	bl	8003cf4 <__multiply>
 8003ec0:	4631      	mov	r1, r6
 8003ec2:	4680      	mov	r8, r0
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f7ff fe4b 	bl	8003b60 <_Bfree>
 8003eca:	4646      	mov	r6, r8
 8003ecc:	106d      	asrs	r5, r5, #1
 8003ece:	d00b      	beq.n	8003ee8 <__pow5mult+0xa0>
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	b938      	cbnz	r0, 8003ee4 <__pow5mult+0x9c>
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f7ff ff0b 	bl	8003cf4 <__multiply>
 8003ede:	6020      	str	r0, [r4, #0]
 8003ee0:	f8c0 9000 	str.w	r9, [r0]
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	e7e4      	b.n	8003eb2 <__pow5mult+0x6a>
 8003ee8:	4630      	mov	r0, r6
 8003eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eee:	bf00      	nop
 8003ef0:	08004abc 	.word	0x08004abc
 8003ef4:	080049e2 	.word	0x080049e2
 8003ef8:	08004a62 	.word	0x08004a62

08003efc <__lshift>:
 8003efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f00:	460c      	mov	r4, r1
 8003f02:	6849      	ldr	r1, [r1, #4]
 8003f04:	6923      	ldr	r3, [r4, #16]
 8003f06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003f0a:	68a3      	ldr	r3, [r4, #8]
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	4691      	mov	r9, r2
 8003f10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f14:	f108 0601 	add.w	r6, r8, #1
 8003f18:	42b3      	cmp	r3, r6
 8003f1a:	db0b      	blt.n	8003f34 <__lshift+0x38>
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	f7ff fddf 	bl	8003ae0 <_Balloc>
 8003f22:	4605      	mov	r5, r0
 8003f24:	b948      	cbnz	r0, 8003f3a <__lshift+0x3e>
 8003f26:	4602      	mov	r2, r0
 8003f28:	4b28      	ldr	r3, [pc, #160]	@ (8003fcc <__lshift+0xd0>)
 8003f2a:	4829      	ldr	r0, [pc, #164]	@ (8003fd0 <__lshift+0xd4>)
 8003f2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003f30:	f000 fa14 	bl	800435c <__assert_func>
 8003f34:	3101      	adds	r1, #1
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	e7ee      	b.n	8003f18 <__lshift+0x1c>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f100 0114 	add.w	r1, r0, #20
 8003f40:	f100 0210 	add.w	r2, r0, #16
 8003f44:	4618      	mov	r0, r3
 8003f46:	4553      	cmp	r3, sl
 8003f48:	db33      	blt.n	8003fb2 <__lshift+0xb6>
 8003f4a:	6920      	ldr	r0, [r4, #16]
 8003f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f50:	f104 0314 	add.w	r3, r4, #20
 8003f54:	f019 091f 	ands.w	r9, r9, #31
 8003f58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003f5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003f60:	d02b      	beq.n	8003fba <__lshift+0xbe>
 8003f62:	f1c9 0e20 	rsb	lr, r9, #32
 8003f66:	468a      	mov	sl, r1
 8003f68:	2200      	movs	r2, #0
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	fa00 f009 	lsl.w	r0, r0, r9
 8003f70:	4310      	orrs	r0, r2
 8003f72:	f84a 0b04 	str.w	r0, [sl], #4
 8003f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f7a:	459c      	cmp	ip, r3
 8003f7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8003f80:	d8f3      	bhi.n	8003f6a <__lshift+0x6e>
 8003f82:	ebac 0304 	sub.w	r3, ip, r4
 8003f86:	3b15      	subs	r3, #21
 8003f88:	f023 0303 	bic.w	r3, r3, #3
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	f104 0015 	add.w	r0, r4, #21
 8003f92:	4584      	cmp	ip, r0
 8003f94:	bf38      	it	cc
 8003f96:	2304      	movcc	r3, #4
 8003f98:	50ca      	str	r2, [r1, r3]
 8003f9a:	b10a      	cbz	r2, 8003fa0 <__lshift+0xa4>
 8003f9c:	f108 0602 	add.w	r6, r8, #2
 8003fa0:	3e01      	subs	r6, #1
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	612e      	str	r6, [r5, #16]
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	f7ff fdda 	bl	8003b60 <_Bfree>
 8003fac:	4628      	mov	r0, r5
 8003fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	e7c5      	b.n	8003f46 <__lshift+0x4a>
 8003fba:	3904      	subs	r1, #4
 8003fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8003fc4:	459c      	cmp	ip, r3
 8003fc6:	d8f9      	bhi.n	8003fbc <__lshift+0xc0>
 8003fc8:	e7ea      	b.n	8003fa0 <__lshift+0xa4>
 8003fca:	bf00      	nop
 8003fcc:	08004a51 	.word	0x08004a51
 8003fd0:	08004a62 	.word	0x08004a62

08003fd4 <__mcmp>:
 8003fd4:	690a      	ldr	r2, [r1, #16]
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	6900      	ldr	r0, [r0, #16]
 8003fda:	1a80      	subs	r0, r0, r2
 8003fdc:	b530      	push	{r4, r5, lr}
 8003fde:	d10e      	bne.n	8003ffe <__mcmp+0x2a>
 8003fe0:	3314      	adds	r3, #20
 8003fe2:	3114      	adds	r1, #20
 8003fe4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003fe8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003fec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003ff0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003ff4:	4295      	cmp	r5, r2
 8003ff6:	d003      	beq.n	8004000 <__mcmp+0x2c>
 8003ff8:	d205      	bcs.n	8004006 <__mcmp+0x32>
 8003ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffe:	bd30      	pop	{r4, r5, pc}
 8004000:	42a3      	cmp	r3, r4
 8004002:	d3f3      	bcc.n	8003fec <__mcmp+0x18>
 8004004:	e7fb      	b.n	8003ffe <__mcmp+0x2a>
 8004006:	2001      	movs	r0, #1
 8004008:	e7f9      	b.n	8003ffe <__mcmp+0x2a>
	...

0800400c <__mdiff>:
 800400c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004010:	4689      	mov	r9, r1
 8004012:	4606      	mov	r6, r0
 8004014:	4611      	mov	r1, r2
 8004016:	4648      	mov	r0, r9
 8004018:	4614      	mov	r4, r2
 800401a:	f7ff ffdb 	bl	8003fd4 <__mcmp>
 800401e:	1e05      	subs	r5, r0, #0
 8004020:	d112      	bne.n	8004048 <__mdiff+0x3c>
 8004022:	4629      	mov	r1, r5
 8004024:	4630      	mov	r0, r6
 8004026:	f7ff fd5b 	bl	8003ae0 <_Balloc>
 800402a:	4602      	mov	r2, r0
 800402c:	b928      	cbnz	r0, 800403a <__mdiff+0x2e>
 800402e:	4b3f      	ldr	r3, [pc, #252]	@ (800412c <__mdiff+0x120>)
 8004030:	f240 2137 	movw	r1, #567	@ 0x237
 8004034:	483e      	ldr	r0, [pc, #248]	@ (8004130 <__mdiff+0x124>)
 8004036:	f000 f991 	bl	800435c <__assert_func>
 800403a:	2301      	movs	r3, #1
 800403c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004040:	4610      	mov	r0, r2
 8004042:	b003      	add	sp, #12
 8004044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004048:	bfbc      	itt	lt
 800404a:	464b      	movlt	r3, r9
 800404c:	46a1      	movlt	r9, r4
 800404e:	4630      	mov	r0, r6
 8004050:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004054:	bfba      	itte	lt
 8004056:	461c      	movlt	r4, r3
 8004058:	2501      	movlt	r5, #1
 800405a:	2500      	movge	r5, #0
 800405c:	f7ff fd40 	bl	8003ae0 <_Balloc>
 8004060:	4602      	mov	r2, r0
 8004062:	b918      	cbnz	r0, 800406c <__mdiff+0x60>
 8004064:	4b31      	ldr	r3, [pc, #196]	@ (800412c <__mdiff+0x120>)
 8004066:	f240 2145 	movw	r1, #581	@ 0x245
 800406a:	e7e3      	b.n	8004034 <__mdiff+0x28>
 800406c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004070:	6926      	ldr	r6, [r4, #16]
 8004072:	60c5      	str	r5, [r0, #12]
 8004074:	f109 0310 	add.w	r3, r9, #16
 8004078:	f109 0514 	add.w	r5, r9, #20
 800407c:	f104 0e14 	add.w	lr, r4, #20
 8004080:	f100 0b14 	add.w	fp, r0, #20
 8004084:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004088:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	46d9      	mov	r9, fp
 8004090:	f04f 0c00 	mov.w	ip, #0
 8004094:	9b01      	ldr	r3, [sp, #4]
 8004096:	f85e 0b04 	ldr.w	r0, [lr], #4
 800409a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	fa1f f38a 	uxth.w	r3, sl
 80040a4:	4619      	mov	r1, r3
 80040a6:	b283      	uxth	r3, r0
 80040a8:	1acb      	subs	r3, r1, r3
 80040aa:	0c00      	lsrs	r0, r0, #16
 80040ac:	4463      	add	r3, ip
 80040ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80040b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80040bc:	4576      	cmp	r6, lr
 80040be:	f849 3b04 	str.w	r3, [r9], #4
 80040c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80040c6:	d8e5      	bhi.n	8004094 <__mdiff+0x88>
 80040c8:	1b33      	subs	r3, r6, r4
 80040ca:	3b15      	subs	r3, #21
 80040cc:	f023 0303 	bic.w	r3, r3, #3
 80040d0:	3415      	adds	r4, #21
 80040d2:	3304      	adds	r3, #4
 80040d4:	42a6      	cmp	r6, r4
 80040d6:	bf38      	it	cc
 80040d8:	2304      	movcc	r3, #4
 80040da:	441d      	add	r5, r3
 80040dc:	445b      	add	r3, fp
 80040de:	461e      	mov	r6, r3
 80040e0:	462c      	mov	r4, r5
 80040e2:	4544      	cmp	r4, r8
 80040e4:	d30e      	bcc.n	8004104 <__mdiff+0xf8>
 80040e6:	f108 0103 	add.w	r1, r8, #3
 80040ea:	1b49      	subs	r1, r1, r5
 80040ec:	f021 0103 	bic.w	r1, r1, #3
 80040f0:	3d03      	subs	r5, #3
 80040f2:	45a8      	cmp	r8, r5
 80040f4:	bf38      	it	cc
 80040f6:	2100      	movcc	r1, #0
 80040f8:	440b      	add	r3, r1
 80040fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80040fe:	b191      	cbz	r1, 8004126 <__mdiff+0x11a>
 8004100:	6117      	str	r7, [r2, #16]
 8004102:	e79d      	b.n	8004040 <__mdiff+0x34>
 8004104:	f854 1b04 	ldr.w	r1, [r4], #4
 8004108:	46e6      	mov	lr, ip
 800410a:	0c08      	lsrs	r0, r1, #16
 800410c:	fa1c fc81 	uxtah	ip, ip, r1
 8004110:	4471      	add	r1, lr
 8004112:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004116:	b289      	uxth	r1, r1
 8004118:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800411c:	f846 1b04 	str.w	r1, [r6], #4
 8004120:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004124:	e7dd      	b.n	80040e2 <__mdiff+0xd6>
 8004126:	3f01      	subs	r7, #1
 8004128:	e7e7      	b.n	80040fa <__mdiff+0xee>
 800412a:	bf00      	nop
 800412c:	08004a51 	.word	0x08004a51
 8004130:	08004a62 	.word	0x08004a62

08004134 <__d2b>:
 8004134:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004138:	460f      	mov	r7, r1
 800413a:	2101      	movs	r1, #1
 800413c:	ec59 8b10 	vmov	r8, r9, d0
 8004140:	4616      	mov	r6, r2
 8004142:	f7ff fccd 	bl	8003ae0 <_Balloc>
 8004146:	4604      	mov	r4, r0
 8004148:	b930      	cbnz	r0, 8004158 <__d2b+0x24>
 800414a:	4602      	mov	r2, r0
 800414c:	4b23      	ldr	r3, [pc, #140]	@ (80041dc <__d2b+0xa8>)
 800414e:	4824      	ldr	r0, [pc, #144]	@ (80041e0 <__d2b+0xac>)
 8004150:	f240 310f 	movw	r1, #783	@ 0x30f
 8004154:	f000 f902 	bl	800435c <__assert_func>
 8004158:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800415c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004160:	b10d      	cbz	r5, 8004166 <__d2b+0x32>
 8004162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	f1b8 0300 	subs.w	r3, r8, #0
 800416c:	d023      	beq.n	80041b6 <__d2b+0x82>
 800416e:	4668      	mov	r0, sp
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	f7ff fd7c 	bl	8003c6e <__lo0bits>
 8004176:	e9dd 1200 	ldrd	r1, r2, [sp]
 800417a:	b1d0      	cbz	r0, 80041b2 <__d2b+0x7e>
 800417c:	f1c0 0320 	rsb	r3, r0, #32
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	430b      	orrs	r3, r1
 8004186:	40c2      	lsrs	r2, r0
 8004188:	6163      	str	r3, [r4, #20]
 800418a:	9201      	str	r2, [sp, #4]
 800418c:	9b01      	ldr	r3, [sp, #4]
 800418e:	61a3      	str	r3, [r4, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf0c      	ite	eq
 8004194:	2201      	moveq	r2, #1
 8004196:	2202      	movne	r2, #2
 8004198:	6122      	str	r2, [r4, #16]
 800419a:	b1a5      	cbz	r5, 80041c6 <__d2b+0x92>
 800419c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80041a0:	4405      	add	r5, r0
 80041a2:	603d      	str	r5, [r7, #0]
 80041a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80041a8:	6030      	str	r0, [r6, #0]
 80041aa:	4620      	mov	r0, r4
 80041ac:	b003      	add	sp, #12
 80041ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041b2:	6161      	str	r1, [r4, #20]
 80041b4:	e7ea      	b.n	800418c <__d2b+0x58>
 80041b6:	a801      	add	r0, sp, #4
 80041b8:	f7ff fd59 	bl	8003c6e <__lo0bits>
 80041bc:	9b01      	ldr	r3, [sp, #4]
 80041be:	6163      	str	r3, [r4, #20]
 80041c0:	3020      	adds	r0, #32
 80041c2:	2201      	movs	r2, #1
 80041c4:	e7e8      	b.n	8004198 <__d2b+0x64>
 80041c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80041ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80041ce:	6038      	str	r0, [r7, #0]
 80041d0:	6918      	ldr	r0, [r3, #16]
 80041d2:	f7ff fd2d 	bl	8003c30 <__hi0bits>
 80041d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80041da:	e7e5      	b.n	80041a8 <__d2b+0x74>
 80041dc:	08004a51 	.word	0x08004a51
 80041e0:	08004a62 	.word	0x08004a62

080041e4 <__sflush_r>:
 80041e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ec:	0716      	lsls	r6, r2, #28
 80041ee:	4605      	mov	r5, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	d454      	bmi.n	800429e <__sflush_r+0xba>
 80041f4:	684b      	ldr	r3, [r1, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	dc02      	bgt.n	8004200 <__sflush_r+0x1c>
 80041fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	dd48      	ble.n	8004292 <__sflush_r+0xae>
 8004200:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004202:	2e00      	cmp	r6, #0
 8004204:	d045      	beq.n	8004292 <__sflush_r+0xae>
 8004206:	2300      	movs	r3, #0
 8004208:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800420c:	682f      	ldr	r7, [r5, #0]
 800420e:	6a21      	ldr	r1, [r4, #32]
 8004210:	602b      	str	r3, [r5, #0]
 8004212:	d030      	beq.n	8004276 <__sflush_r+0x92>
 8004214:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	0759      	lsls	r1, r3, #29
 800421a:	d505      	bpl.n	8004228 <__sflush_r+0x44>
 800421c:	6863      	ldr	r3, [r4, #4]
 800421e:	1ad2      	subs	r2, r2, r3
 8004220:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004222:	b10b      	cbz	r3, 8004228 <__sflush_r+0x44>
 8004224:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004226:	1ad2      	subs	r2, r2, r3
 8004228:	2300      	movs	r3, #0
 800422a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800422c:	6a21      	ldr	r1, [r4, #32]
 800422e:	4628      	mov	r0, r5
 8004230:	47b0      	blx	r6
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	d106      	bne.n	8004246 <__sflush_r+0x62>
 8004238:	6829      	ldr	r1, [r5, #0]
 800423a:	291d      	cmp	r1, #29
 800423c:	d82b      	bhi.n	8004296 <__sflush_r+0xb2>
 800423e:	4a2a      	ldr	r2, [pc, #168]	@ (80042e8 <__sflush_r+0x104>)
 8004240:	410a      	asrs	r2, r1
 8004242:	07d6      	lsls	r6, r2, #31
 8004244:	d427      	bmi.n	8004296 <__sflush_r+0xb2>
 8004246:	2200      	movs	r2, #0
 8004248:	6062      	str	r2, [r4, #4]
 800424a:	04d9      	lsls	r1, r3, #19
 800424c:	6922      	ldr	r2, [r4, #16]
 800424e:	6022      	str	r2, [r4, #0]
 8004250:	d504      	bpl.n	800425c <__sflush_r+0x78>
 8004252:	1c42      	adds	r2, r0, #1
 8004254:	d101      	bne.n	800425a <__sflush_r+0x76>
 8004256:	682b      	ldr	r3, [r5, #0]
 8004258:	b903      	cbnz	r3, 800425c <__sflush_r+0x78>
 800425a:	6560      	str	r0, [r4, #84]	@ 0x54
 800425c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800425e:	602f      	str	r7, [r5, #0]
 8004260:	b1b9      	cbz	r1, 8004292 <__sflush_r+0xae>
 8004262:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004266:	4299      	cmp	r1, r3
 8004268:	d002      	beq.n	8004270 <__sflush_r+0x8c>
 800426a:	4628      	mov	r0, r5
 800426c:	f7ff fb38 	bl	80038e0 <_free_r>
 8004270:	2300      	movs	r3, #0
 8004272:	6363      	str	r3, [r4, #52]	@ 0x34
 8004274:	e00d      	b.n	8004292 <__sflush_r+0xae>
 8004276:	2301      	movs	r3, #1
 8004278:	4628      	mov	r0, r5
 800427a:	47b0      	blx	r6
 800427c:	4602      	mov	r2, r0
 800427e:	1c50      	adds	r0, r2, #1
 8004280:	d1c9      	bne.n	8004216 <__sflush_r+0x32>
 8004282:	682b      	ldr	r3, [r5, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0c6      	beq.n	8004216 <__sflush_r+0x32>
 8004288:	2b1d      	cmp	r3, #29
 800428a:	d001      	beq.n	8004290 <__sflush_r+0xac>
 800428c:	2b16      	cmp	r3, #22
 800428e:	d11e      	bne.n	80042ce <__sflush_r+0xea>
 8004290:	602f      	str	r7, [r5, #0]
 8004292:	2000      	movs	r0, #0
 8004294:	e022      	b.n	80042dc <__sflush_r+0xf8>
 8004296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800429a:	b21b      	sxth	r3, r3
 800429c:	e01b      	b.n	80042d6 <__sflush_r+0xf2>
 800429e:	690f      	ldr	r7, [r1, #16]
 80042a0:	2f00      	cmp	r7, #0
 80042a2:	d0f6      	beq.n	8004292 <__sflush_r+0xae>
 80042a4:	0793      	lsls	r3, r2, #30
 80042a6:	680e      	ldr	r6, [r1, #0]
 80042a8:	bf08      	it	eq
 80042aa:	694b      	ldreq	r3, [r1, #20]
 80042ac:	600f      	str	r7, [r1, #0]
 80042ae:	bf18      	it	ne
 80042b0:	2300      	movne	r3, #0
 80042b2:	eba6 0807 	sub.w	r8, r6, r7
 80042b6:	608b      	str	r3, [r1, #8]
 80042b8:	f1b8 0f00 	cmp.w	r8, #0
 80042bc:	dde9      	ble.n	8004292 <__sflush_r+0xae>
 80042be:	6a21      	ldr	r1, [r4, #32]
 80042c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80042c2:	4643      	mov	r3, r8
 80042c4:	463a      	mov	r2, r7
 80042c6:	4628      	mov	r0, r5
 80042c8:	47b0      	blx	r6
 80042ca:	2800      	cmp	r0, #0
 80042cc:	dc08      	bgt.n	80042e0 <__sflush_r+0xfc>
 80042ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042d6:	81a3      	strh	r3, [r4, #12]
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295
 80042dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e0:	4407      	add	r7, r0
 80042e2:	eba8 0800 	sub.w	r8, r8, r0
 80042e6:	e7e7      	b.n	80042b8 <__sflush_r+0xd4>
 80042e8:	dfbffffe 	.word	0xdfbffffe

080042ec <_fflush_r>:
 80042ec:	b538      	push	{r3, r4, r5, lr}
 80042ee:	690b      	ldr	r3, [r1, #16]
 80042f0:	4605      	mov	r5, r0
 80042f2:	460c      	mov	r4, r1
 80042f4:	b913      	cbnz	r3, 80042fc <_fflush_r+0x10>
 80042f6:	2500      	movs	r5, #0
 80042f8:	4628      	mov	r0, r5
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	b118      	cbz	r0, 8004306 <_fflush_r+0x1a>
 80042fe:	6a03      	ldr	r3, [r0, #32]
 8004300:	b90b      	cbnz	r3, 8004306 <_fflush_r+0x1a>
 8004302:	f7fe fb97 	bl	8002a34 <__sinit>
 8004306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f3      	beq.n	80042f6 <_fflush_r+0xa>
 800430e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004310:	07d0      	lsls	r0, r2, #31
 8004312:	d404      	bmi.n	800431e <_fflush_r+0x32>
 8004314:	0599      	lsls	r1, r3, #22
 8004316:	d402      	bmi.n	800431e <_fflush_r+0x32>
 8004318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800431a:	f7fe fc82 	bl	8002c22 <__retarget_lock_acquire_recursive>
 800431e:	4628      	mov	r0, r5
 8004320:	4621      	mov	r1, r4
 8004322:	f7ff ff5f 	bl	80041e4 <__sflush_r>
 8004326:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004328:	07da      	lsls	r2, r3, #31
 800432a:	4605      	mov	r5, r0
 800432c:	d4e4      	bmi.n	80042f8 <_fflush_r+0xc>
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	059b      	lsls	r3, r3, #22
 8004332:	d4e1      	bmi.n	80042f8 <_fflush_r+0xc>
 8004334:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004336:	f7fe fc75 	bl	8002c24 <__retarget_lock_release_recursive>
 800433a:	e7dd      	b.n	80042f8 <_fflush_r+0xc>

0800433c <_sbrk_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4d06      	ldr	r5, [pc, #24]	@ (8004358 <_sbrk_r+0x1c>)
 8004340:	2300      	movs	r3, #0
 8004342:	4604      	mov	r4, r0
 8004344:	4608      	mov	r0, r1
 8004346:	602b      	str	r3, [r5, #0]
 8004348:	f7fd fe20 	bl	8001f8c <_sbrk>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d102      	bne.n	8004356 <_sbrk_r+0x1a>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	b103      	cbz	r3, 8004356 <_sbrk_r+0x1a>
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	bd38      	pop	{r3, r4, r5, pc}
 8004358:	200004a0 	.word	0x200004a0

0800435c <__assert_func>:
 800435c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800435e:	4614      	mov	r4, r2
 8004360:	461a      	mov	r2, r3
 8004362:	4b09      	ldr	r3, [pc, #36]	@ (8004388 <__assert_func+0x2c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4605      	mov	r5, r0
 8004368:	68d8      	ldr	r0, [r3, #12]
 800436a:	b954      	cbnz	r4, 8004382 <__assert_func+0x26>
 800436c:	4b07      	ldr	r3, [pc, #28]	@ (800438c <__assert_func+0x30>)
 800436e:	461c      	mov	r4, r3
 8004370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004374:	9100      	str	r1, [sp, #0]
 8004376:	462b      	mov	r3, r5
 8004378:	4905      	ldr	r1, [pc, #20]	@ (8004390 <__assert_func+0x34>)
 800437a:	f000 f841 	bl	8004400 <fiprintf>
 800437e:	f000 f851 	bl	8004424 <abort>
 8004382:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <__assert_func+0x38>)
 8004384:	e7f4      	b.n	8004370 <__assert_func+0x14>
 8004386:	bf00      	nop
 8004388:	2000000c 	.word	0x2000000c
 800438c:	08004bfd 	.word	0x08004bfd
 8004390:	08004bcf 	.word	0x08004bcf
 8004394:	08004bc2 	.word	0x08004bc2

08004398 <_calloc_r>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	fba1 5402 	umull	r5, r4, r1, r2
 800439e:	b93c      	cbnz	r4, 80043b0 <_calloc_r+0x18>
 80043a0:	4629      	mov	r1, r5
 80043a2:	f7ff fb11 	bl	80039c8 <_malloc_r>
 80043a6:	4606      	mov	r6, r0
 80043a8:	b928      	cbnz	r0, 80043b6 <_calloc_r+0x1e>
 80043aa:	2600      	movs	r6, #0
 80043ac:	4630      	mov	r0, r6
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	220c      	movs	r2, #12
 80043b2:	6002      	str	r2, [r0, #0]
 80043b4:	e7f9      	b.n	80043aa <_calloc_r+0x12>
 80043b6:	462a      	mov	r2, r5
 80043b8:	4621      	mov	r1, r4
 80043ba:	f7fe fbb4 	bl	8002b26 <memset>
 80043be:	e7f5      	b.n	80043ac <_calloc_r+0x14>

080043c0 <__ascii_mbtowc>:
 80043c0:	b082      	sub	sp, #8
 80043c2:	b901      	cbnz	r1, 80043c6 <__ascii_mbtowc+0x6>
 80043c4:	a901      	add	r1, sp, #4
 80043c6:	b142      	cbz	r2, 80043da <__ascii_mbtowc+0x1a>
 80043c8:	b14b      	cbz	r3, 80043de <__ascii_mbtowc+0x1e>
 80043ca:	7813      	ldrb	r3, [r2, #0]
 80043cc:	600b      	str	r3, [r1, #0]
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	1e10      	subs	r0, r2, #0
 80043d2:	bf18      	it	ne
 80043d4:	2001      	movne	r0, #1
 80043d6:	b002      	add	sp, #8
 80043d8:	4770      	bx	lr
 80043da:	4610      	mov	r0, r2
 80043dc:	e7fb      	b.n	80043d6 <__ascii_mbtowc+0x16>
 80043de:	f06f 0001 	mvn.w	r0, #1
 80043e2:	e7f8      	b.n	80043d6 <__ascii_mbtowc+0x16>

080043e4 <__ascii_wctomb>:
 80043e4:	4603      	mov	r3, r0
 80043e6:	4608      	mov	r0, r1
 80043e8:	b141      	cbz	r1, 80043fc <__ascii_wctomb+0x18>
 80043ea:	2aff      	cmp	r2, #255	@ 0xff
 80043ec:	d904      	bls.n	80043f8 <__ascii_wctomb+0x14>
 80043ee:	228a      	movs	r2, #138	@ 0x8a
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295
 80043f6:	4770      	bx	lr
 80043f8:	700a      	strb	r2, [r1, #0]
 80043fa:	2001      	movs	r0, #1
 80043fc:	4770      	bx	lr
	...

08004400 <fiprintf>:
 8004400:	b40e      	push	{r1, r2, r3}
 8004402:	b503      	push	{r0, r1, lr}
 8004404:	4601      	mov	r1, r0
 8004406:	ab03      	add	r3, sp, #12
 8004408:	4805      	ldr	r0, [pc, #20]	@ (8004420 <fiprintf+0x20>)
 800440a:	f853 2b04 	ldr.w	r2, [r3], #4
 800440e:	6800      	ldr	r0, [r0, #0]
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	f000 f837 	bl	8004484 <_vfiprintf_r>
 8004416:	b002      	add	sp, #8
 8004418:	f85d eb04 	ldr.w	lr, [sp], #4
 800441c:	b003      	add	sp, #12
 800441e:	4770      	bx	lr
 8004420:	2000000c 	.word	0x2000000c

08004424 <abort>:
 8004424:	b508      	push	{r3, lr}
 8004426:	2006      	movs	r0, #6
 8004428:	f000 fa00 	bl	800482c <raise>
 800442c:	2001      	movs	r0, #1
 800442e:	f7fd fd34 	bl	8001e9a <_exit>

08004432 <__sfputc_r>:
 8004432:	6893      	ldr	r3, [r2, #8]
 8004434:	3b01      	subs	r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	b410      	push	{r4}
 800443a:	6093      	str	r3, [r2, #8]
 800443c:	da08      	bge.n	8004450 <__sfputc_r+0x1e>
 800443e:	6994      	ldr	r4, [r2, #24]
 8004440:	42a3      	cmp	r3, r4
 8004442:	db01      	blt.n	8004448 <__sfputc_r+0x16>
 8004444:	290a      	cmp	r1, #10
 8004446:	d103      	bne.n	8004450 <__sfputc_r+0x1e>
 8004448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800444c:	f000 b932 	b.w	80046b4 <__swbuf_r>
 8004450:	6813      	ldr	r3, [r2, #0]
 8004452:	1c58      	adds	r0, r3, #1
 8004454:	6010      	str	r0, [r2, #0]
 8004456:	7019      	strb	r1, [r3, #0]
 8004458:	4608      	mov	r0, r1
 800445a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800445e:	4770      	bx	lr

08004460 <__sfputs_r>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	4606      	mov	r6, r0
 8004464:	460f      	mov	r7, r1
 8004466:	4614      	mov	r4, r2
 8004468:	18d5      	adds	r5, r2, r3
 800446a:	42ac      	cmp	r4, r5
 800446c:	d101      	bne.n	8004472 <__sfputs_r+0x12>
 800446e:	2000      	movs	r0, #0
 8004470:	e007      	b.n	8004482 <__sfputs_r+0x22>
 8004472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004476:	463a      	mov	r2, r7
 8004478:	4630      	mov	r0, r6
 800447a:	f7ff ffda 	bl	8004432 <__sfputc_r>
 800447e:	1c43      	adds	r3, r0, #1
 8004480:	d1f3      	bne.n	800446a <__sfputs_r+0xa>
 8004482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004484 <_vfiprintf_r>:
 8004484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	460d      	mov	r5, r1
 800448a:	b09d      	sub	sp, #116	@ 0x74
 800448c:	4614      	mov	r4, r2
 800448e:	4698      	mov	r8, r3
 8004490:	4606      	mov	r6, r0
 8004492:	b118      	cbz	r0, 800449c <_vfiprintf_r+0x18>
 8004494:	6a03      	ldr	r3, [r0, #32]
 8004496:	b90b      	cbnz	r3, 800449c <_vfiprintf_r+0x18>
 8004498:	f7fe facc 	bl	8002a34 <__sinit>
 800449c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800449e:	07d9      	lsls	r1, r3, #31
 80044a0:	d405      	bmi.n	80044ae <_vfiprintf_r+0x2a>
 80044a2:	89ab      	ldrh	r3, [r5, #12]
 80044a4:	059a      	lsls	r2, r3, #22
 80044a6:	d402      	bmi.n	80044ae <_vfiprintf_r+0x2a>
 80044a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044aa:	f7fe fbba 	bl	8002c22 <__retarget_lock_acquire_recursive>
 80044ae:	89ab      	ldrh	r3, [r5, #12]
 80044b0:	071b      	lsls	r3, r3, #28
 80044b2:	d501      	bpl.n	80044b8 <_vfiprintf_r+0x34>
 80044b4:	692b      	ldr	r3, [r5, #16]
 80044b6:	b99b      	cbnz	r3, 80044e0 <_vfiprintf_r+0x5c>
 80044b8:	4629      	mov	r1, r5
 80044ba:	4630      	mov	r0, r6
 80044bc:	f000 f938 	bl	8004730 <__swsetup_r>
 80044c0:	b170      	cbz	r0, 80044e0 <_vfiprintf_r+0x5c>
 80044c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044c4:	07dc      	lsls	r4, r3, #31
 80044c6:	d504      	bpl.n	80044d2 <_vfiprintf_r+0x4e>
 80044c8:	f04f 30ff 	mov.w	r0, #4294967295
 80044cc:	b01d      	add	sp, #116	@ 0x74
 80044ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d2:	89ab      	ldrh	r3, [r5, #12]
 80044d4:	0598      	lsls	r0, r3, #22
 80044d6:	d4f7      	bmi.n	80044c8 <_vfiprintf_r+0x44>
 80044d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044da:	f7fe fba3 	bl	8002c24 <__retarget_lock_release_recursive>
 80044de:	e7f3      	b.n	80044c8 <_vfiprintf_r+0x44>
 80044e0:	2300      	movs	r3, #0
 80044e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80044e4:	2320      	movs	r3, #32
 80044e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ee:	2330      	movs	r3, #48	@ 0x30
 80044f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80046a0 <_vfiprintf_r+0x21c>
 80044f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044f8:	f04f 0901 	mov.w	r9, #1
 80044fc:	4623      	mov	r3, r4
 80044fe:	469a      	mov	sl, r3
 8004500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004504:	b10a      	cbz	r2, 800450a <_vfiprintf_r+0x86>
 8004506:	2a25      	cmp	r2, #37	@ 0x25
 8004508:	d1f9      	bne.n	80044fe <_vfiprintf_r+0x7a>
 800450a:	ebba 0b04 	subs.w	fp, sl, r4
 800450e:	d00b      	beq.n	8004528 <_vfiprintf_r+0xa4>
 8004510:	465b      	mov	r3, fp
 8004512:	4622      	mov	r2, r4
 8004514:	4629      	mov	r1, r5
 8004516:	4630      	mov	r0, r6
 8004518:	f7ff ffa2 	bl	8004460 <__sfputs_r>
 800451c:	3001      	adds	r0, #1
 800451e:	f000 80a7 	beq.w	8004670 <_vfiprintf_r+0x1ec>
 8004522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004524:	445a      	add	r2, fp
 8004526:	9209      	str	r2, [sp, #36]	@ 0x24
 8004528:	f89a 3000 	ldrb.w	r3, [sl]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 809f 	beq.w	8004670 <_vfiprintf_r+0x1ec>
 8004532:	2300      	movs	r3, #0
 8004534:	f04f 32ff 	mov.w	r2, #4294967295
 8004538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800453c:	f10a 0a01 	add.w	sl, sl, #1
 8004540:	9304      	str	r3, [sp, #16]
 8004542:	9307      	str	r3, [sp, #28]
 8004544:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004548:	931a      	str	r3, [sp, #104]	@ 0x68
 800454a:	4654      	mov	r4, sl
 800454c:	2205      	movs	r2, #5
 800454e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004552:	4853      	ldr	r0, [pc, #332]	@ (80046a0 <_vfiprintf_r+0x21c>)
 8004554:	f7fb fe44 	bl	80001e0 <memchr>
 8004558:	9a04      	ldr	r2, [sp, #16]
 800455a:	b9d8      	cbnz	r0, 8004594 <_vfiprintf_r+0x110>
 800455c:	06d1      	lsls	r1, r2, #27
 800455e:	bf44      	itt	mi
 8004560:	2320      	movmi	r3, #32
 8004562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004566:	0713      	lsls	r3, r2, #28
 8004568:	bf44      	itt	mi
 800456a:	232b      	movmi	r3, #43	@ 0x2b
 800456c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004570:	f89a 3000 	ldrb.w	r3, [sl]
 8004574:	2b2a      	cmp	r3, #42	@ 0x2a
 8004576:	d015      	beq.n	80045a4 <_vfiprintf_r+0x120>
 8004578:	9a07      	ldr	r2, [sp, #28]
 800457a:	4654      	mov	r4, sl
 800457c:	2000      	movs	r0, #0
 800457e:	f04f 0c0a 	mov.w	ip, #10
 8004582:	4621      	mov	r1, r4
 8004584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004588:	3b30      	subs	r3, #48	@ 0x30
 800458a:	2b09      	cmp	r3, #9
 800458c:	d94b      	bls.n	8004626 <_vfiprintf_r+0x1a2>
 800458e:	b1b0      	cbz	r0, 80045be <_vfiprintf_r+0x13a>
 8004590:	9207      	str	r2, [sp, #28]
 8004592:	e014      	b.n	80045be <_vfiprintf_r+0x13a>
 8004594:	eba0 0308 	sub.w	r3, r0, r8
 8004598:	fa09 f303 	lsl.w	r3, r9, r3
 800459c:	4313      	orrs	r3, r2
 800459e:	9304      	str	r3, [sp, #16]
 80045a0:	46a2      	mov	sl, r4
 80045a2:	e7d2      	b.n	800454a <_vfiprintf_r+0xc6>
 80045a4:	9b03      	ldr	r3, [sp, #12]
 80045a6:	1d19      	adds	r1, r3, #4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	9103      	str	r1, [sp, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bfbb      	ittet	lt
 80045b0:	425b      	neglt	r3, r3
 80045b2:	f042 0202 	orrlt.w	r2, r2, #2
 80045b6:	9307      	strge	r3, [sp, #28]
 80045b8:	9307      	strlt	r3, [sp, #28]
 80045ba:	bfb8      	it	lt
 80045bc:	9204      	strlt	r2, [sp, #16]
 80045be:	7823      	ldrb	r3, [r4, #0]
 80045c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80045c2:	d10a      	bne.n	80045da <_vfiprintf_r+0x156>
 80045c4:	7863      	ldrb	r3, [r4, #1]
 80045c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80045c8:	d132      	bne.n	8004630 <_vfiprintf_r+0x1ac>
 80045ca:	9b03      	ldr	r3, [sp, #12]
 80045cc:	1d1a      	adds	r2, r3, #4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	9203      	str	r2, [sp, #12]
 80045d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045d6:	3402      	adds	r4, #2
 80045d8:	9305      	str	r3, [sp, #20]
 80045da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046b0 <_vfiprintf_r+0x22c>
 80045de:	7821      	ldrb	r1, [r4, #0]
 80045e0:	2203      	movs	r2, #3
 80045e2:	4650      	mov	r0, sl
 80045e4:	f7fb fdfc 	bl	80001e0 <memchr>
 80045e8:	b138      	cbz	r0, 80045fa <_vfiprintf_r+0x176>
 80045ea:	9b04      	ldr	r3, [sp, #16]
 80045ec:	eba0 000a 	sub.w	r0, r0, sl
 80045f0:	2240      	movs	r2, #64	@ 0x40
 80045f2:	4082      	lsls	r2, r0
 80045f4:	4313      	orrs	r3, r2
 80045f6:	3401      	adds	r4, #1
 80045f8:	9304      	str	r3, [sp, #16]
 80045fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045fe:	4829      	ldr	r0, [pc, #164]	@ (80046a4 <_vfiprintf_r+0x220>)
 8004600:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004604:	2206      	movs	r2, #6
 8004606:	f7fb fdeb 	bl	80001e0 <memchr>
 800460a:	2800      	cmp	r0, #0
 800460c:	d03f      	beq.n	800468e <_vfiprintf_r+0x20a>
 800460e:	4b26      	ldr	r3, [pc, #152]	@ (80046a8 <_vfiprintf_r+0x224>)
 8004610:	bb1b      	cbnz	r3, 800465a <_vfiprintf_r+0x1d6>
 8004612:	9b03      	ldr	r3, [sp, #12]
 8004614:	3307      	adds	r3, #7
 8004616:	f023 0307 	bic.w	r3, r3, #7
 800461a:	3308      	adds	r3, #8
 800461c:	9303      	str	r3, [sp, #12]
 800461e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004620:	443b      	add	r3, r7
 8004622:	9309      	str	r3, [sp, #36]	@ 0x24
 8004624:	e76a      	b.n	80044fc <_vfiprintf_r+0x78>
 8004626:	fb0c 3202 	mla	r2, ip, r2, r3
 800462a:	460c      	mov	r4, r1
 800462c:	2001      	movs	r0, #1
 800462e:	e7a8      	b.n	8004582 <_vfiprintf_r+0xfe>
 8004630:	2300      	movs	r3, #0
 8004632:	3401      	adds	r4, #1
 8004634:	9305      	str	r3, [sp, #20]
 8004636:	4619      	mov	r1, r3
 8004638:	f04f 0c0a 	mov.w	ip, #10
 800463c:	4620      	mov	r0, r4
 800463e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004642:	3a30      	subs	r2, #48	@ 0x30
 8004644:	2a09      	cmp	r2, #9
 8004646:	d903      	bls.n	8004650 <_vfiprintf_r+0x1cc>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0c6      	beq.n	80045da <_vfiprintf_r+0x156>
 800464c:	9105      	str	r1, [sp, #20]
 800464e:	e7c4      	b.n	80045da <_vfiprintf_r+0x156>
 8004650:	fb0c 2101 	mla	r1, ip, r1, r2
 8004654:	4604      	mov	r4, r0
 8004656:	2301      	movs	r3, #1
 8004658:	e7f0      	b.n	800463c <_vfiprintf_r+0x1b8>
 800465a:	ab03      	add	r3, sp, #12
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	462a      	mov	r2, r5
 8004660:	4b12      	ldr	r3, [pc, #72]	@ (80046ac <_vfiprintf_r+0x228>)
 8004662:	a904      	add	r1, sp, #16
 8004664:	4630      	mov	r0, r6
 8004666:	f7fd fda1 	bl	80021ac <_printf_float>
 800466a:	4607      	mov	r7, r0
 800466c:	1c78      	adds	r0, r7, #1
 800466e:	d1d6      	bne.n	800461e <_vfiprintf_r+0x19a>
 8004670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004672:	07d9      	lsls	r1, r3, #31
 8004674:	d405      	bmi.n	8004682 <_vfiprintf_r+0x1fe>
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	059a      	lsls	r2, r3, #22
 800467a:	d402      	bmi.n	8004682 <_vfiprintf_r+0x1fe>
 800467c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800467e:	f7fe fad1 	bl	8002c24 <__retarget_lock_release_recursive>
 8004682:	89ab      	ldrh	r3, [r5, #12]
 8004684:	065b      	lsls	r3, r3, #25
 8004686:	f53f af1f 	bmi.w	80044c8 <_vfiprintf_r+0x44>
 800468a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800468c:	e71e      	b.n	80044cc <_vfiprintf_r+0x48>
 800468e:	ab03      	add	r3, sp, #12
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	462a      	mov	r2, r5
 8004694:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <_vfiprintf_r+0x228>)
 8004696:	a904      	add	r1, sp, #16
 8004698:	4630      	mov	r0, r6
 800469a:	f7fe f81f 	bl	80026dc <_printf_i>
 800469e:	e7e4      	b.n	800466a <_vfiprintf_r+0x1e6>
 80046a0:	08004cff 	.word	0x08004cff
 80046a4:	08004d09 	.word	0x08004d09
 80046a8:	080021ad 	.word	0x080021ad
 80046ac:	08004461 	.word	0x08004461
 80046b0:	08004d05 	.word	0x08004d05

080046b4 <__swbuf_r>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	460e      	mov	r6, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	4605      	mov	r5, r0
 80046bc:	b118      	cbz	r0, 80046c6 <__swbuf_r+0x12>
 80046be:	6a03      	ldr	r3, [r0, #32]
 80046c0:	b90b      	cbnz	r3, 80046c6 <__swbuf_r+0x12>
 80046c2:	f7fe f9b7 	bl	8002a34 <__sinit>
 80046c6:	69a3      	ldr	r3, [r4, #24]
 80046c8:	60a3      	str	r3, [r4, #8]
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	071a      	lsls	r2, r3, #28
 80046ce:	d501      	bpl.n	80046d4 <__swbuf_r+0x20>
 80046d0:	6923      	ldr	r3, [r4, #16]
 80046d2:	b943      	cbnz	r3, 80046e6 <__swbuf_r+0x32>
 80046d4:	4621      	mov	r1, r4
 80046d6:	4628      	mov	r0, r5
 80046d8:	f000 f82a 	bl	8004730 <__swsetup_r>
 80046dc:	b118      	cbz	r0, 80046e6 <__swbuf_r+0x32>
 80046de:	f04f 37ff 	mov.w	r7, #4294967295
 80046e2:	4638      	mov	r0, r7
 80046e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	6922      	ldr	r2, [r4, #16]
 80046ea:	1a98      	subs	r0, r3, r2
 80046ec:	6963      	ldr	r3, [r4, #20]
 80046ee:	b2f6      	uxtb	r6, r6
 80046f0:	4283      	cmp	r3, r0
 80046f2:	4637      	mov	r7, r6
 80046f4:	dc05      	bgt.n	8004702 <__swbuf_r+0x4e>
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f7ff fdf7 	bl	80042ec <_fflush_r>
 80046fe:	2800      	cmp	r0, #0
 8004700:	d1ed      	bne.n	80046de <__swbuf_r+0x2a>
 8004702:	68a3      	ldr	r3, [r4, #8]
 8004704:	3b01      	subs	r3, #1
 8004706:	60a3      	str	r3, [r4, #8]
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	6022      	str	r2, [r4, #0]
 800470e:	701e      	strb	r6, [r3, #0]
 8004710:	6962      	ldr	r2, [r4, #20]
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	429a      	cmp	r2, r3
 8004716:	d004      	beq.n	8004722 <__swbuf_r+0x6e>
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	07db      	lsls	r3, r3, #31
 800471c:	d5e1      	bpl.n	80046e2 <__swbuf_r+0x2e>
 800471e:	2e0a      	cmp	r6, #10
 8004720:	d1df      	bne.n	80046e2 <__swbuf_r+0x2e>
 8004722:	4621      	mov	r1, r4
 8004724:	4628      	mov	r0, r5
 8004726:	f7ff fde1 	bl	80042ec <_fflush_r>
 800472a:	2800      	cmp	r0, #0
 800472c:	d0d9      	beq.n	80046e2 <__swbuf_r+0x2e>
 800472e:	e7d6      	b.n	80046de <__swbuf_r+0x2a>

08004730 <__swsetup_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4b29      	ldr	r3, [pc, #164]	@ (80047d8 <__swsetup_r+0xa8>)
 8004734:	4605      	mov	r5, r0
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	460c      	mov	r4, r1
 800473a:	b118      	cbz	r0, 8004744 <__swsetup_r+0x14>
 800473c:	6a03      	ldr	r3, [r0, #32]
 800473e:	b90b      	cbnz	r3, 8004744 <__swsetup_r+0x14>
 8004740:	f7fe f978 	bl	8002a34 <__sinit>
 8004744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004748:	0719      	lsls	r1, r3, #28
 800474a:	d422      	bmi.n	8004792 <__swsetup_r+0x62>
 800474c:	06da      	lsls	r2, r3, #27
 800474e:	d407      	bmi.n	8004760 <__swsetup_r+0x30>
 8004750:	2209      	movs	r2, #9
 8004752:	602a      	str	r2, [r5, #0]
 8004754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	f04f 30ff 	mov.w	r0, #4294967295
 800475e:	e033      	b.n	80047c8 <__swsetup_r+0x98>
 8004760:	0758      	lsls	r0, r3, #29
 8004762:	d512      	bpl.n	800478a <__swsetup_r+0x5a>
 8004764:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004766:	b141      	cbz	r1, 800477a <__swsetup_r+0x4a>
 8004768:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800476c:	4299      	cmp	r1, r3
 800476e:	d002      	beq.n	8004776 <__swsetup_r+0x46>
 8004770:	4628      	mov	r0, r5
 8004772:	f7ff f8b5 	bl	80038e0 <_free_r>
 8004776:	2300      	movs	r3, #0
 8004778:	6363      	str	r3, [r4, #52]	@ 0x34
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004780:	81a3      	strh	r3, [r4, #12]
 8004782:	2300      	movs	r3, #0
 8004784:	6063      	str	r3, [r4, #4]
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	89a3      	ldrh	r3, [r4, #12]
 800478c:	f043 0308 	orr.w	r3, r3, #8
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	6923      	ldr	r3, [r4, #16]
 8004794:	b94b      	cbnz	r3, 80047aa <__swsetup_r+0x7a>
 8004796:	89a3      	ldrh	r3, [r4, #12]
 8004798:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800479c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a0:	d003      	beq.n	80047aa <__swsetup_r+0x7a>
 80047a2:	4621      	mov	r1, r4
 80047a4:	4628      	mov	r0, r5
 80047a6:	f000 f883 	bl	80048b0 <__smakebuf_r>
 80047aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ae:	f013 0201 	ands.w	r2, r3, #1
 80047b2:	d00a      	beq.n	80047ca <__swsetup_r+0x9a>
 80047b4:	2200      	movs	r2, #0
 80047b6:	60a2      	str	r2, [r4, #8]
 80047b8:	6962      	ldr	r2, [r4, #20]
 80047ba:	4252      	negs	r2, r2
 80047bc:	61a2      	str	r2, [r4, #24]
 80047be:	6922      	ldr	r2, [r4, #16]
 80047c0:	b942      	cbnz	r2, 80047d4 <__swsetup_r+0xa4>
 80047c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80047c6:	d1c5      	bne.n	8004754 <__swsetup_r+0x24>
 80047c8:	bd38      	pop	{r3, r4, r5, pc}
 80047ca:	0799      	lsls	r1, r3, #30
 80047cc:	bf58      	it	pl
 80047ce:	6962      	ldrpl	r2, [r4, #20]
 80047d0:	60a2      	str	r2, [r4, #8]
 80047d2:	e7f4      	b.n	80047be <__swsetup_r+0x8e>
 80047d4:	2000      	movs	r0, #0
 80047d6:	e7f7      	b.n	80047c8 <__swsetup_r+0x98>
 80047d8:	2000000c 	.word	0x2000000c

080047dc <_raise_r>:
 80047dc:	291f      	cmp	r1, #31
 80047de:	b538      	push	{r3, r4, r5, lr}
 80047e0:	4605      	mov	r5, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	d904      	bls.n	80047f0 <_raise_r+0x14>
 80047e6:	2316      	movs	r3, #22
 80047e8:	6003      	str	r3, [r0, #0]
 80047ea:	f04f 30ff 	mov.w	r0, #4294967295
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80047f2:	b112      	cbz	r2, 80047fa <_raise_r+0x1e>
 80047f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80047f8:	b94b      	cbnz	r3, 800480e <_raise_r+0x32>
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 f830 	bl	8004860 <_getpid_r>
 8004800:	4622      	mov	r2, r4
 8004802:	4601      	mov	r1, r0
 8004804:	4628      	mov	r0, r5
 8004806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800480a:	f000 b817 	b.w	800483c <_kill_r>
 800480e:	2b01      	cmp	r3, #1
 8004810:	d00a      	beq.n	8004828 <_raise_r+0x4c>
 8004812:	1c59      	adds	r1, r3, #1
 8004814:	d103      	bne.n	800481e <_raise_r+0x42>
 8004816:	2316      	movs	r3, #22
 8004818:	6003      	str	r3, [r0, #0]
 800481a:	2001      	movs	r0, #1
 800481c:	e7e7      	b.n	80047ee <_raise_r+0x12>
 800481e:	2100      	movs	r1, #0
 8004820:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004824:	4620      	mov	r0, r4
 8004826:	4798      	blx	r3
 8004828:	2000      	movs	r0, #0
 800482a:	e7e0      	b.n	80047ee <_raise_r+0x12>

0800482c <raise>:
 800482c:	4b02      	ldr	r3, [pc, #8]	@ (8004838 <raise+0xc>)
 800482e:	4601      	mov	r1, r0
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	f7ff bfd3 	b.w	80047dc <_raise_r>
 8004836:	bf00      	nop
 8004838:	2000000c 	.word	0x2000000c

0800483c <_kill_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4d07      	ldr	r5, [pc, #28]	@ (800485c <_kill_r+0x20>)
 8004840:	2300      	movs	r3, #0
 8004842:	4604      	mov	r4, r0
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	f7fd fb16 	bl	8001e7a <_kill>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	d102      	bne.n	8004858 <_kill_r+0x1c>
 8004852:	682b      	ldr	r3, [r5, #0]
 8004854:	b103      	cbz	r3, 8004858 <_kill_r+0x1c>
 8004856:	6023      	str	r3, [r4, #0]
 8004858:	bd38      	pop	{r3, r4, r5, pc}
 800485a:	bf00      	nop
 800485c:	200004a0 	.word	0x200004a0

08004860 <_getpid_r>:
 8004860:	f7fd bb03 	b.w	8001e6a <_getpid>

08004864 <__swhatbuf_r>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	460c      	mov	r4, r1
 8004868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486c:	2900      	cmp	r1, #0
 800486e:	b096      	sub	sp, #88	@ 0x58
 8004870:	4615      	mov	r5, r2
 8004872:	461e      	mov	r6, r3
 8004874:	da0d      	bge.n	8004892 <__swhatbuf_r+0x2e>
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800487c:	f04f 0100 	mov.w	r1, #0
 8004880:	bf14      	ite	ne
 8004882:	2340      	movne	r3, #64	@ 0x40
 8004884:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004888:	2000      	movs	r0, #0
 800488a:	6031      	str	r1, [r6, #0]
 800488c:	602b      	str	r3, [r5, #0]
 800488e:	b016      	add	sp, #88	@ 0x58
 8004890:	bd70      	pop	{r4, r5, r6, pc}
 8004892:	466a      	mov	r2, sp
 8004894:	f000 f848 	bl	8004928 <_fstat_r>
 8004898:	2800      	cmp	r0, #0
 800489a:	dbec      	blt.n	8004876 <__swhatbuf_r+0x12>
 800489c:	9901      	ldr	r1, [sp, #4]
 800489e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80048a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048a6:	4259      	negs	r1, r3
 80048a8:	4159      	adcs	r1, r3
 80048aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048ae:	e7eb      	b.n	8004888 <__swhatbuf_r+0x24>

080048b0 <__smakebuf_r>:
 80048b0:	898b      	ldrh	r3, [r1, #12]
 80048b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048b4:	079d      	lsls	r5, r3, #30
 80048b6:	4606      	mov	r6, r0
 80048b8:	460c      	mov	r4, r1
 80048ba:	d507      	bpl.n	80048cc <__smakebuf_r+0x1c>
 80048bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	6123      	str	r3, [r4, #16]
 80048c4:	2301      	movs	r3, #1
 80048c6:	6163      	str	r3, [r4, #20]
 80048c8:	b003      	add	sp, #12
 80048ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048cc:	ab01      	add	r3, sp, #4
 80048ce:	466a      	mov	r2, sp
 80048d0:	f7ff ffc8 	bl	8004864 <__swhatbuf_r>
 80048d4:	9f00      	ldr	r7, [sp, #0]
 80048d6:	4605      	mov	r5, r0
 80048d8:	4639      	mov	r1, r7
 80048da:	4630      	mov	r0, r6
 80048dc:	f7ff f874 	bl	80039c8 <_malloc_r>
 80048e0:	b948      	cbnz	r0, 80048f6 <__smakebuf_r+0x46>
 80048e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e6:	059a      	lsls	r2, r3, #22
 80048e8:	d4ee      	bmi.n	80048c8 <__smakebuf_r+0x18>
 80048ea:	f023 0303 	bic.w	r3, r3, #3
 80048ee:	f043 0302 	orr.w	r3, r3, #2
 80048f2:	81a3      	strh	r3, [r4, #12]
 80048f4:	e7e2      	b.n	80048bc <__smakebuf_r+0xc>
 80048f6:	89a3      	ldrh	r3, [r4, #12]
 80048f8:	6020      	str	r0, [r4, #0]
 80048fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048fe:	81a3      	strh	r3, [r4, #12]
 8004900:	9b01      	ldr	r3, [sp, #4]
 8004902:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004906:	b15b      	cbz	r3, 8004920 <__smakebuf_r+0x70>
 8004908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800490c:	4630      	mov	r0, r6
 800490e:	f000 f81d 	bl	800494c <_isatty_r>
 8004912:	b128      	cbz	r0, 8004920 <__smakebuf_r+0x70>
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	f023 0303 	bic.w	r3, r3, #3
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	81a3      	strh	r3, [r4, #12]
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	431d      	orrs	r5, r3
 8004924:	81a5      	strh	r5, [r4, #12]
 8004926:	e7cf      	b.n	80048c8 <__smakebuf_r+0x18>

08004928 <_fstat_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d07      	ldr	r5, [pc, #28]	@ (8004948 <_fstat_r+0x20>)
 800492c:	2300      	movs	r3, #0
 800492e:	4604      	mov	r4, r0
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	602b      	str	r3, [r5, #0]
 8004936:	f7fd fb00 	bl	8001f3a <_fstat>
 800493a:	1c43      	adds	r3, r0, #1
 800493c:	d102      	bne.n	8004944 <_fstat_r+0x1c>
 800493e:	682b      	ldr	r3, [r5, #0]
 8004940:	b103      	cbz	r3, 8004944 <_fstat_r+0x1c>
 8004942:	6023      	str	r3, [r4, #0]
 8004944:	bd38      	pop	{r3, r4, r5, pc}
 8004946:	bf00      	nop
 8004948:	200004a0 	.word	0x200004a0

0800494c <_isatty_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4d06      	ldr	r5, [pc, #24]	@ (8004968 <_isatty_r+0x1c>)
 8004950:	2300      	movs	r3, #0
 8004952:	4604      	mov	r4, r0
 8004954:	4608      	mov	r0, r1
 8004956:	602b      	str	r3, [r5, #0]
 8004958:	f7fd faff 	bl	8001f5a <_isatty>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_isatty_r+0x1a>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_isatty_r+0x1a>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	200004a0 	.word	0x200004a0

0800496c <_init>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	bf00      	nop
 8004970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004972:	bc08      	pop	{r3}
 8004974:	469e      	mov	lr, r3
 8004976:	4770      	bx	lr

08004978 <_fini>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	bf00      	nop
 800497c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497e:	bc08      	pop	{r3}
 8004980:	469e      	mov	lr, r3
 8004982:	4770      	bx	lr
