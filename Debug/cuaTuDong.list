
cuaTuDong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  080049a0  080049a0  000059a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d10  08004d10  000061c8  2**0
                  CONTENTS
  4 .ARM          00000008  08004d10  08004d10  00005d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d18  08004d18  000061c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d18  08004d18  00005d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d1c  08004d1c  00005d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c8  20000000  08004d20  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001c8  08004ee8  000061c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08004ee8  000064ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003bbe  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001099  00000000  00000000  00009db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  0000ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000286  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e90  00000000  00000000  0000b45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a0f  00000000  00000000  0000d2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008626b  00000000  00000000  00012cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098f68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b20  00000000  00000000  00098fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0009aacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004984 	.word	0x08004984

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	08004984 	.word	0x08004984

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <EXTI_ClearPendingBit>:

    NVIC_SetPriority(irq_number, priority);
    NVIC_EnableIRQ(irq_number);
}

void EXTI_ClearPendingBit(uint8_t exti_line) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
    if (exti_line > 15) return;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d806      	bhi.n	8000bd6 <EXTI_ClearPendingBit+0x1e>
    // Ghi 1 vào bit tương ứng trong Pending Register để xóa nó
    EXTI->PR = (1U << exti_line);
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a06      	ldr	r2, [pc, #24]	@ (8000be4 <EXTI_ClearPendingBit+0x2c>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	6153      	str	r3, [r2, #20]
 8000bd4:	e000      	b.n	8000bd8 <EXTI_ClearPendingBit+0x20>
    if (exti_line > 15) return;
 8000bd6:	bf00      	nop
}
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40013c00 	.word	0x40013c00

08000be8 <EXTI_IRQHandler_Helper>:
// --- Trình xử lý ngắt (ISRs) ---
// Các hàm này cần được định nghĩa với tên chính xác như trong vector ngắt.
// Chúng sẽ kiểm tra cờ pending và gọi callback tương ứng.

// Helper function để xử lý logic chung trong ISR
static void EXTI_IRQHandler_Helper(uint8_t exti_line_start, uint8_t exti_line_end) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e01c      	b.n	8000c38 <EXTI_IRQHandler_Helper+0x50>
        // Kiểm tra cờ Pending Bit cho từng line
        if ((EXTI->PR & (1U << line)) != 0) {
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <EXTI_IRQHandler_Helper+0x64>)
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	2101      	movs	r1, #1
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d010      	beq.n	8000c32 <EXTI_IRQHandler_Helper+0x4a>
            // Xóa Pending Bit trước khi gọi callback (quan trọng!)
            EXTI_ClearPendingBit(line);
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ffd0 	bl	8000bb8 <EXTI_ClearPendingBit>

            // Gọi callback nếu có
            if (g_exti_callbacks[line] != NULL) {
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <EXTI_IRQHandler_Helper+0x68>)
 8000c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <EXTI_IRQHandler_Helper+0x4a>
                g_exti_callbacks[line](line);
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <EXTI_IRQHandler_Helper+0x68>)
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4798      	blx	r3
    for (uint8_t line = exti_line_start; line <= exti_line_end; ++line) {
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	3301      	adds	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d9de      	bls.n	8000bfe <EXTI_IRQHandler_Helper+0x16>
            }
        }
    }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40013c00 	.word	0x40013c00
 8000c50:	200001e4 	.word	0x200001e4

08000c54 <EXTI0_IRQHandler>:

// ISR cho EXTI Line 0
void EXTI0_IRQHandler(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(0, 0);
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff ffc4 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <EXTI1_IRQHandler>:

// ISR cho EXTI Line 1
void EXTI1_IRQHandler(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(1, 1);
 8000c68:	2101      	movs	r1, #1
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff ffbc 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <EXTI2_IRQHandler>:

// ISR cho EXTI Line 2
void EXTI2_IRQHandler(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(2, 2);
 8000c78:	2102      	movs	r1, #2
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f7ff ffb4 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <EXTI3_IRQHandler>:

// ISR cho EXTI Line 3
void EXTI3_IRQHandler(void) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(3, 3);
 8000c88:	2103      	movs	r1, #3
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f7ff ffac 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <EXTI4_IRQHandler>:

// ISR cho EXTI Line 4
void EXTI4_IRQHandler(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(4, 4);
 8000c98:	2104      	movs	r1, #4
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f7ff ffa4 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <EXTI9_5_IRQHandler>:

// ISR cho EXTI Lines 5 đến 9
void EXTI9_5_IRQHandler(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(5, 9);
 8000ca8:	2109      	movs	r1, #9
 8000caa:	2005      	movs	r0, #5
 8000cac:	f7ff ff9c 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <EXTI15_10_IRQHandler>:

// ISR cho EXTI Lines 10 đến 15
void EXTI15_10_IRQHandler(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
    EXTI_IRQHandler_Helper(10, 15);
 8000cb8:	210f      	movs	r1, #15
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f7ff ff94 	bl	8000be8 <EXTI_IRQHandler_Helper>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <GPIO_ClockCmd>:
 */

#include "gpio_driver.h"

// Helper function to enable/disable clock for GPIO port
void GPIO_ClockCmd(GPIO_TypeDef* GPIOx, uint8_t NewState) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
    if (NewState == CLOCK_CMD_ENABLE) {
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d141      	bne.n	8000d5a <GPIO_ClockCmd+0x96>
        if (GPIOx == GPIOA) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a3e      	ldr	r2, [pc, #248]	@ (8000dd4 <GPIO_ClockCmd+0x110>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d106      	bne.n	8000cec <GPIO_ClockCmd+0x28>
 8000cde:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
        // ...
    }
}
 8000cea:	e06c      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a3b      	ldr	r2, [pc, #236]	@ (8000ddc <GPIO_ClockCmd+0x118>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d106      	bne.n	8000d02 <GPIO_ClockCmd+0x3e>
 8000cf4:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf8:	4a37      	ldr	r2, [pc, #220]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d00:	e061      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a36      	ldr	r2, [pc, #216]	@ (8000de0 <GPIO_ClockCmd+0x11c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d106      	bne.n	8000d18 <GPIO_ClockCmd+0x54>
 8000d0a:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a32      	ldr	r2, [pc, #200]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d16:	e056      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a32      	ldr	r2, [pc, #200]	@ (8000de4 <GPIO_ClockCmd+0x120>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d106      	bne.n	8000d2e <GPIO_ClockCmd+0x6a>
 8000d20:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d24:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d2c:	e04b      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a2d      	ldr	r2, [pc, #180]	@ (8000de8 <GPIO_ClockCmd+0x124>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d106      	bne.n	8000d44 <GPIO_ClockCmd+0x80>
 8000d36:	4b28      	ldr	r3, [pc, #160]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a27      	ldr	r2, [pc, #156]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d42:	e040      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOH) RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a29      	ldr	r2, [pc, #164]	@ (8000dec <GPIO_ClockCmd+0x128>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d13c      	bne.n	8000dc6 <GPIO_ClockCmd+0x102>
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d50:	4a21      	ldr	r2, [pc, #132]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d56:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d58:	e035      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        if (GPIOx == GPIOA) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOAEN;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd4 <GPIO_ClockCmd+0x110>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d106      	bne.n	8000d70 <GPIO_ClockCmd+0xac>
 8000d62:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d6e:	e02a      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOB) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOBEN;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a1a      	ldr	r2, [pc, #104]	@ (8000ddc <GPIO_ClockCmd+0x118>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d106      	bne.n	8000d86 <GPIO_ClockCmd+0xc2>
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d7e:	f023 0302 	bic.w	r3, r3, #2
 8000d82:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d84:	e01f      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOC) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOCEN;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a15      	ldr	r2, [pc, #84]	@ (8000de0 <GPIO_ClockCmd+0x11c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d106      	bne.n	8000d9c <GPIO_ClockCmd+0xd8>
 8000d8e:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a11      	ldr	r2, [pc, #68]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000d94:	f023 0304 	bic.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d9a:	e014      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOD) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIODEN;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a11      	ldr	r2, [pc, #68]	@ (8000de4 <GPIO_ClockCmd+0x120>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d106      	bne.n	8000db2 <GPIO_ClockCmd+0xee>
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000daa:	f023 0308 	bic.w	r3, r3, #8
 8000dae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000db0:	e009      	b.n	8000dc6 <GPIO_ClockCmd+0x102>
        else if (GPIOx == GPIOE) RCC->AHB1ENR &= ~RCC_AHB1ENR_GPIOEEN;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a0c      	ldr	r2, [pc, #48]	@ (8000de8 <GPIO_ClockCmd+0x124>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d105      	bne.n	8000dc6 <GPIO_ClockCmd+0x102>
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <GPIO_ClockCmd+0x114>)
 8000dc0:	f023 0310 	bic.w	r3, r3, #16
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40021c00 	.word	0x40021c00

08000df0 <GPIO_InitPin>:


void GPIO_InitPin(GPIO_TypeDef* GPIOx, uint16_t pin, uint32_t mode, uint32_t pull,
                  uint32_t speed, uint32_t otype, uint32_t alt_func) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	817b      	strh	r3, [r7, #10]
    uint32_t position;
    uint32_t iocurrent;
    uint32_t temp;

    // Enable clock for the GPIO port
    GPIO_ClockCmd(GPIOx, CLOCK_CMD_ENABLE);
 8000e00:	2101      	movs	r1, #1
 8000e02:	68f8      	ldr	r0, [r7, #12]
 8000e04:	f7ff ff5e 	bl	8000cc4 <GPIO_ClockCmd>

    for (position = 0; position < 16; position++) {
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	e0a4      	b.n	8000f58 <GPIO_InitPin+0x168>
        iocurrent = (0x1U << position); // Mask for current pin
 8000e0e:	2201      	movs	r2, #1
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	61bb      	str	r3, [r7, #24]
        if (pin & iocurrent) {          // If this pin is selected
 8000e18:	897a      	ldrh	r2, [r7, #10]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 8097 	beq.w	8000f52 <GPIO_InitPin+0x162>
            // 1. Configure Mode (Input, Output, AF, Analog)
            temp = GPIOx->MODER;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2)); // Clear mode bits for this pin
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
            temp |= (mode << (position * 2));
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]
            GPIOx->MODER = temp;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	601a      	str	r2, [r3, #0]

            if ((mode == GPIO_MODE_OUTPUT) || (mode == GPIO_MODE_AF)) {
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d002      	beq.n	8000e5e <GPIO_InitPin+0x6e>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d12b      	bne.n	8000eb6 <GPIO_InitPin+0xc6>
                // 2. Configure Speed
                temp = GPIOx->OSPEEDR;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	617b      	str	r3, [r7, #20]
                temp &= ~(0x03U << (position * 2));
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	4013      	ands	r3, r2
 8000e74:	617b      	str	r3, [r7, #20]
                temp |= (speed << (position * 2));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
                GPIOx->OSPEEDR = temp;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	609a      	str	r2, [r3, #8]

                // 3. Configure Output Type (Push-Pull or Open-Drain)
                temp = GPIOx->OTYPER;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	617b      	str	r3, [r7, #20]
                temp &= ~(0x01U << position);
 8000e92:	2201      	movs	r2, #1
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	617b      	str	r3, [r7, #20]
                temp |= (otype << position);
 8000ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
                GPIOx->OTYPER = temp;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	605a      	str	r2, [r3, #4]
            }

            // 4. Configure Pull-up/Pull-down
            temp = GPIOx->PUPDR;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	617b      	str	r3, [r7, #20]
            temp &= ~(0x03U << (position * 2));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
            temp |= (pull << (position * 2));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
            GPIOx->PUPDR = temp;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	60da      	str	r2, [r3, #12]

            // 5. Configure Alternate Function (if AF mode)
            if (mode == GPIO_MODE_AF) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d133      	bne.n	8000f52 <GPIO_InitPin+0x162>
                if (position < 8) { // AFR[0] for pins 0-7
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	d817      	bhi.n	8000f20 <GPIO_InitPin+0x130>
                    temp = GPIOx->AFR[0];
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << (position * 4));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << (position * 4));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[0] = temp;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	621a      	str	r2, [r3, #32]
 8000f1e:	e018      	b.n	8000f52 <GPIO_InitPin+0x162>
                } else { // AFR[1] for pins 8-15
                    temp = GPIOx->AFR[1];
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f24:	617b      	str	r3, [r7, #20]
                    temp &= ~(0x0FU << ((position - 8) * 4));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4013      	ands	r3, r2
 8000f38:	617b      	str	r3, [r7, #20]
                    temp |= (alt_func << ((position - 8) * 4));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b08      	subs	r3, #8
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]
                    GPIOx->AFR[1] = temp;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	625a      	str	r2, [r3, #36]	@ 0x24
    for (position = 0; position < 16; position++) {
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3301      	adds	r3, #1
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	f67f af57 	bls.w	8000e0e <GPIO_InitPin+0x1e>
                }
            }
        }
    }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <GPIO_WritePin>:
    } else {
        return GPIO_PIN_RESET;
    }
}

void GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t pin, uint8_t state) {
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	460b      	mov	r3, r1
 8000f74:	807b      	strh	r3, [r7, #2]
 8000f76:	4613      	mov	r3, r2
 8000f78:	707b      	strb	r3, [r7, #1]
    if (state == GPIO_PIN_SET) {
 8000f7a:	787b      	ldrb	r3, [r7, #1]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d103      	bne.n	8000f88 <GPIO_WritePin+0x1e>
        GPIOx->BSRR = (uint32_t)pin; // Set bit
 8000f80:	887a      	ldrh	r2, [r7, #2]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
    } else {
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
    }
}
 8000f86:	e003      	b.n	8000f90 <GPIO_WritePin+0x26>
        GPIOx->BSRR = (uint32_t)pin << 16U; // Reset bit
 8000f88:	887b      	ldrh	r3, [r7, #2]
 8000f8a:	041a      	lsls	r2, r3, #16
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	619a      	str	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <SystemClock_Config>:
  #define PLL_P_REG_VAL 0x03U
#else
  #error "Invalid PLL_P_VAL. Must be 2, 4, 6, or 8."
#endif

void SystemClock_Config(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
    uint32_t temp_reg; // Biến tạm, tránh warning unused nếu không có MODIFY_REG

    // 1. Bật HSE và đợi nó ổn định (nếu dùng HSE là nguồn PLL)
    RCC->CR |= RCC_CR_HSEON;
 8000fa2:	4b47      	ldr	r3, [pc, #284]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a46      	ldr	r2, [pc, #280]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8000fae:	bf00      	nop
 8000fb0:	4b43      	ldr	r3, [pc, #268]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f9      	beq.n	8000fb0 <SystemClock_Config+0x14>

    // 2. Cấu hình Power Control Register
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000fbc:	4b40      	ldr	r3, [pc, #256]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	4a3f      	ldr	r2, [pc, #252]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc6:	6413      	str	r3, [r2, #64]	@ 0x40
    temp_reg = PWR->CR;
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80010c4 <SystemClock_Config+0x128>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	607b      	str	r3, [r7, #4]
    temp_reg &= ~PWR_CR_VOS;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fd4:	607b      	str	r3, [r7, #4]
    temp_reg |= PWR_CR_VOS_1; // Scale 2
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fdc:	607b      	str	r3, [r7, #4]
    PWR->CR = temp_reg;
 8000fde:	4a39      	ldr	r2, [pc, #228]	@ (80010c4 <SystemClock_Config+0x128>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6013      	str	r3, [r2, #0]

    // 3. Cấu hình các hệ số chia cho HCLK, PCLK1, PCLK2
    temp_reg = RCC->CFGR;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <SystemClock_Config+0x124>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_HPRE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ff0:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_HPRE_DIV1;
    RCC->CFGR = temp_reg;
 8000ff2:	4a33      	ldr	r2, [pc, #204]	@ (80010c0 <SystemClock_Config+0x124>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 8000ff8:	4b31      	ldr	r3, [pc, #196]	@ (80010c0 <SystemClock_Config+0x124>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE1;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001004:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE1_DIV2;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800100c:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 800100e:	4a2c      	ldr	r2, [pc, #176]	@ (80010c0 <SystemClock_Config+0x124>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6093      	str	r3, [r2, #8]

    temp_reg = RCC->CFGR;
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <SystemClock_Config+0x124>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_PPRE2;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001020:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_PPRE2_DIV1;
    RCC->CFGR = temp_reg;
 8001022:	4a27      	ldr	r2, [pc, #156]	@ (80010c0 <SystemClock_Config+0x124>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6093      	str	r3, [r2, #8]

    // 4. Cấu hình PLL
    RCC->CR &= ~RCC_CR_PLLON;
 8001028:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <SystemClock_Config+0x124>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a24      	ldr	r2, [pc, #144]	@ (80010c0 <SystemClock_Config+0x124>)
 800102e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001032:	6013      	str	r3, [r2, #0]
    while(RCC->CR & RCC_CR_PLLRDY);
 8001034:	bf00      	nop
 8001036:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <SystemClock_Config+0x124>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f9      	bne.n	8001036 <SystemClock_Config+0x9a>

    RCC->PLLCFGR = (PLL_Q_VAL << RCC_PLLCFGR_PLLQ_Pos) |
 8001042:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <SystemClock_Config+0x124>)
 8001044:	4a20      	ldr	r2, [pc, #128]	@ (80010c8 <SystemClock_Config+0x12c>)
 8001046:	605a      	str	r2, [r3, #4]
                   (PLL_P_REG_VAL << RCC_PLLCFGR_PLLP_Pos)|
                   (PLL_N_VAL << RCC_PLLCFGR_PLLN_Pos) |
                   (PLL_M_VAL << RCC_PLLCFGR_PLLM_Pos);

    // 5. Bật PLL và đợi nó ổn định
    RCC->CR |= RCC_CR_PLLON;
 8001048:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <SystemClock_Config+0x124>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1c      	ldr	r2, [pc, #112]	@ (80010c0 <SystemClock_Config+0x124>)
 800104e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001052:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8001054:	bf00      	nop
 8001056:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <SystemClock_Config+0x124>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f9      	beq.n	8001056 <SystemClock_Config+0xba>

    // 6. Cấu hình Flash latency
    temp_reg = FLASH->ACR;
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <SystemClock_Config+0x130>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	607b      	str	r3, [r7, #4]
    temp_reg &= ~FLASH_ACR_LATENCY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f023 0307 	bic.w	r3, r3, #7
 800106e:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_LATENCY_2WS;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	607b      	str	r3, [r7, #4]
    temp_reg |= FLASH_ACR_PRFTEN;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107e:	607b      	str	r3, [r7, #4]
    FLASH->ACR = temp_reg;
 8001080:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <SystemClock_Config+0x130>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]

    // 7. Chọn PLL làm nguồn SYSCLK
    temp_reg = RCC->CFGR;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <SystemClock_Config+0x124>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	607b      	str	r3, [r7, #4]
    temp_reg &= ~RCC_CFGR_SW;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f023 0303 	bic.w	r3, r3, #3
 8001092:	607b      	str	r3, [r7, #4]
    temp_reg |= RCC_CFGR_SW_PLL;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	607b      	str	r3, [r7, #4]
    RCC->CFGR = temp_reg;
 800109c:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <SystemClock_Config+0x124>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80010a2:	bf00      	nop
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <SystemClock_Config+0x124>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d1f9      	bne.n	80010a4 <SystemClock_Config+0x108>
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000
 80010c8:	07415408 	.word	0x07415408
 80010cc:	40023c00 	.word	0x40023c00

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	@ (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	@ (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <SysTick_Init>:
#include "stm32f401xe.h"
#include "rcc_config.h"

static volatile uint32_t g_sysTickCounter = 0;

void SysTick_Init(void){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	// 1. Tính toán giá trị nạp cho SysTick để có tick mỗi 1ms
	// (HCLK / 1000) - 1 vì SysTick đếm từ LOAD_VAL về 0 (LOAD_VAL + 1 chu kỳ)
	uint32_t reload_value = (HCLK_FREQUENCY_HZ / 1000U) - 1U;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <SysTick_Init+0x54>)
 800112c:	607b      	str	r3, [r7, #4]

	// 2. Cấu hình SysTick
    // Vô hiệu hóa SysTick trước khi cấu hình
    SysTick->CTRL = 0;
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <SysTick_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

    // Nạp giá trị reload
    SysTick->LOAD = reload_value;
 8001134:	4a11      	ldr	r2, [pc, #68]	@ (800117c <SysTick_Init+0x58>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6053      	str	r3, [r2, #4]

    // Đặt ưu tiên ngắt SysTick cho Cortex-M4 (4 bit ưu tiên)
    NVIC_SetPriority(SysTick_IRQn, 15); // Mức ưu tiên 15 (thấp nhất nếu 4 bit prio)
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ffc6 	bl	80010d0 <__NVIC_SetPriority>

    // Reset bộ đếm SysTick hiện tại
    SysTick->VAL = 0;
 8001144:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <SysTick_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]

    // Kích hoạt SysTick với nguồn clock là HCLK và bật ngắt
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // CLKSOURCE = AHB clock
 800114a:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <SysTick_Init+0x58>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <SysTick_Init+0x58>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;   // Enable SysTick interrupt
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <SysTick_Init+0x58>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a08      	ldr	r2, [pc, #32]	@ (800117c <SysTick_Init+0x58>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6013      	str	r3, [r2, #0]
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;    // Enable SysTick
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <SysTick_Init+0x58>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a05      	ldr	r2, [pc, #20]	@ (800117c <SysTick_Init+0x58>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	0001481f 	.word	0x0001481f
 800117c:	e000e010 	.word	0xe000e010

08001180 <Delay_ms>:

void Delay_ms(volatile uint32_t ms){
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	uint32_t start_tick = g_sysTickCounter;
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <Delay_ms+0x2c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
	while ((g_sysTickCounter - start_tick) < ms){
 800118e:	bf00      	nop
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <Delay_ms+0x2c>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	1ad2      	subs	r2, r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d3f8      	bcc.n	8001190 <Delay_ms+0x10>

	}
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000224 	.word	0x20000224

080011b0 <GetTick>:

uint32_t GetTick(void){
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	return g_sysTickCounter;
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000224 	.word	0x20000224

080011c8 <IncTick>:

void IncTick(void){
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	g_sysTickCounter ++;
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <IncTick+0x18>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	4a03      	ldr	r2, [pc, #12]	@ (80011e0 <IncTick+0x18>)
 80011d4:	6013      	str	r3, [r2, #0]
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	20000224 	.word	0x20000224

080011e4 <SysTick_Handler>:

void SysTick_Handler(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	IncTick();
 80011e8:	f7ff ffee 	bl	80011c8 <IncTick>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <__NVIC_EnableIRQ>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	@ (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_DisableIRQ>:
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	db12      	blt.n	8001264 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	490a      	ldr	r1, [pc, #40]	@ (8001270 <__NVIC_DisableIRQ+0x44>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	095b      	lsrs	r3, r3, #5
 800124c:	2001      	movs	r0, #1
 800124e:	fa00 f202 	lsl.w	r2, r0, r2
 8001252:	3320      	adds	r3, #32
 8001254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001258:	f3bf 8f4f 	dsb	sy
}
 800125c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125e:	f3bf 8f6f 	isb	sy
}
 8001262:	bf00      	nop
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	@ (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	@ (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <UART2_Init>:
static uart_tx_complete_callback_t g_uart2_tx_complete_callback = NULL;

// Thêm biến theo dõi lỗi UART
static volatile uint8_t g_uart2_error_flags = 0;

void UART2_Init(uint32_t baudrate, uint32_t word_length, uint32_t parity, uint32_t stop_bits) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	@ 0x30
 80012cc:	af04      	add	r7, sp, #16
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
    // 1. Bật clock cho USART2 và GPIOA
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80012d6:	4b51      	ldr	r3, [pc, #324]	@ (800141c <UART2_Init+0x154>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a50      	ldr	r2, [pc, #320]	@ (800141c <UART2_Init+0x154>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
    GPIO_ClockCmd(GPIOA, CLOCK_CMD_ENABLE);
 80012e2:	2101      	movs	r1, #1
 80012e4:	484e      	ldr	r0, [pc, #312]	@ (8001420 <UART2_Init+0x158>)
 80012e6:	f7ff fced 	bl	8000cc4 <GPIO_ClockCmd>

    // 2. Cấu hình chân GPIOA PA2 (TX) và PA3 (RX) cho AF7 (USART2)
    GPIO_InitPin(GPIOA, (1U << 2), GPIO_MODE_AF, GPIO_PULL_UP, GPIO_SPEED_HIGH, GPIO_OTYPE_PUSHPULL, 7); // PA2 TX
 80012ea:	2307      	movs	r3, #7
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2300      	movs	r3, #0
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	2302      	movs	r3, #2
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2301      	movs	r3, #1
 80012f8:	2202      	movs	r2, #2
 80012fa:	2104      	movs	r1, #4
 80012fc:	4848      	ldr	r0, [pc, #288]	@ (8001420 <UART2_Init+0x158>)
 80012fe:	f7ff fd77 	bl	8000df0 <GPIO_InitPin>
    GPIO_InitPin(GPIOA, (1U << 3), GPIO_MODE_AF, GPIO_PULL_UP, GPIO_SPEED_HIGH, GPIO_OTYPE_PUSHPULL, 7); // PA3 RX
 8001302:	2307      	movs	r3, #7
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	2300      	movs	r3, #0
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	2302      	movs	r3, #2
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2301      	movs	r3, #1
 8001310:	2202      	movs	r2, #2
 8001312:	2108      	movs	r1, #8
 8001314:	4842      	ldr	r0, [pc, #264]	@ (8001420 <UART2_Init+0x158>)
 8001316:	f7ff fd6b 	bl	8000df0 <GPIO_InitPin>

    // 3. Vô hiệu hóa UART trước khi cấu hình
    USART2->CR1 &= ~USART_CR1_UE;
 800131a:	4b42      	ldr	r3, [pc, #264]	@ (8001424 <UART2_Init+0x15c>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	4a41      	ldr	r2, [pc, #260]	@ (8001424 <UART2_Init+0x15c>)
 8001320:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001324:	60d3      	str	r3, [r2, #12]

    // 4. Cấu hình Word Length, Parity
    USART2->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS);
 8001326:	4b3f      	ldr	r3, [pc, #252]	@ (8001424 <UART2_Init+0x15c>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	4a3e      	ldr	r2, [pc, #248]	@ (8001424 <UART2_Init+0x15c>)
 800132c:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001330:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= word_length;
 8001332:	4b3c      	ldr	r3, [pc, #240]	@ (8001424 <UART2_Init+0x15c>)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	493b      	ldr	r1, [pc, #236]	@ (8001424 <UART2_Init+0x15c>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
 800133c:	60cb      	str	r3, [r1, #12]
    USART2->CR1 |= parity;
 800133e:	4b39      	ldr	r3, [pc, #228]	@ (8001424 <UART2_Init+0x15c>)
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	4938      	ldr	r1, [pc, #224]	@ (8001424 <UART2_Init+0x15c>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4313      	orrs	r3, r2
 8001348:	60cb      	str	r3, [r1, #12]

    // 5. Cấu hình Stop Bits
    USART2->CR2 &= ~USART_CR2_STOP;
 800134a:	4b36      	ldr	r3, [pc, #216]	@ (8001424 <UART2_Init+0x15c>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	4a35      	ldr	r2, [pc, #212]	@ (8001424 <UART2_Init+0x15c>)
 8001350:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001354:	6113      	str	r3, [r2, #16]
    USART2->CR2 |= stop_bits;
 8001356:	4b33      	ldr	r3, [pc, #204]	@ (8001424 <UART2_Init+0x15c>)
 8001358:	691a      	ldr	r2, [r3, #16]
 800135a:	4932      	ldr	r1, [pc, #200]	@ (8001424 <UART2_Init+0x15c>)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	610b      	str	r3, [r1, #16]

    // 6. Cấu hình Baud Rate với độ chính xác cao hơn
    uint32_t pclk1_freq = PCLK1_FREQUENCY_HZ; // Lấy từ rcc_config.h
 8001362:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <UART2_Init+0x160>)
 8001364:	617b      	str	r3, [r7, #20]
    // Tính toán USARTDIV với độ chính xác cao hơn
    uint32_t integer_div = (25 * pclk1_freq) / (4 * baudrate);
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	009a      	lsls	r2, r3, #2
 8001370:	441a      	add	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	613b      	str	r3, [r7, #16]
    uint32_t mantissa = integer_div / 100;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4a2b      	ldr	r2, [pc, #172]	@ (800142c <UART2_Init+0x164>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	61fb      	str	r3, [r7, #28]
    uint32_t fraction = ((integer_div - (mantissa * 100)) * 16 + 50) / 100;
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2264      	movs	r2, #100	@ 0x64
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	3332      	adds	r3, #50	@ 0x32
 8001398:	4a24      	ldr	r2, [pc, #144]	@ (800142c <UART2_Init+0x164>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	61bb      	str	r3, [r7, #24]
        
    // Xử lý trường hợp fraction = 16
    if (fraction == 16) {
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d104      	bne.n	80013b2 <UART2_Init+0xea>
        mantissa++;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	3301      	adds	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
        fraction = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
    }
        
    USART2->BRR = (mantissa << 4) | (fraction & 0xFU);
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	011a      	lsls	r2, r3, #4
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	4919      	ldr	r1, [pc, #100]	@ (8001424 <UART2_Init+0x15c>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	608b      	str	r3, [r1, #8]

    // 7. Cấu hình Control Register: Bật TX, RX và RXNE Interrupt
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 80013c2:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <UART2_Init+0x15c>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <UART2_Init+0x15c>)
 80013c8:	f043 032c 	orr.w	r3, r3, #44	@ 0x2c
 80013cc:	60d3      	str	r3, [r2, #12]
    // USART2->CR3 &= ~USART_CR3_CTSE; // Tắt CTS flow control
    // USART2->CR3 &= ~USART_CR3_RTSE; // Tắt RTS flow control

    // 8. Reset trạng thái buffer
    g_uart2_rx_buffer_head = 0;
 80013ce:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <UART2_Init+0x168>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_tail = 0;
 80013d4:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <UART2_Init+0x16c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_count = 0;
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <UART2_Init+0x170>)
 80013dc:	2200      	movs	r2, #0
 80013de:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_head = 0;
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <UART2_Init+0x174>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_tail = 0;
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <UART2_Init+0x178>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_buffer_count = 0;
 80013ec:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <UART2_Init+0x17c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_busy = false;
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <UART2_Init+0x180>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]

    // 9. Cấu hình ngắt trong NVIC
    NVIC_SetPriority(USART2_IRQn, 14); // Đặt mức ưu tiên
 80013f8:	210e      	movs	r1, #14
 80013fa:	2026      	movs	r0, #38	@ 0x26
 80013fc:	f7ff ff3a 	bl	8001274 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 8001400:	2026      	movs	r0, #38	@ 0x26
 8001402:	f7ff fef5 	bl	80011f0 <__NVIC_EnableIRQ>

    // 10. Bật UART
    USART2->CR1 |= USART_CR1_UE;
 8001406:	4b07      	ldr	r3, [pc, #28]	@ (8001424 <UART2_Init+0x15c>)
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <UART2_Init+0x15c>)
 800140c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001410:	60d3      	str	r3, [r2, #12]
}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	40004400 	.word	0x40004400
 8001428:	0280de80 	.word	0x0280de80
 800142c:	51eb851f 	.word	0x51eb851f
 8001430:	200002a8 	.word	0x200002a8
 8001434:	200002aa 	.word	0x200002aa
 8001438:	200002ac 	.word	0x200002ac
 800143c:	20000330 	.word	0x20000330
 8001440:	20000332 	.word	0x20000332
 8001444:	20000334 	.word	0x20000334
 8001448:	20000336 	.word	0x20000336

0800144c <UART2_SendBuffer_IT>:

bool UART2_SendBuffer_IT(const uint8_t* buffer, uint16_t length) {
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
    if (length == 0) return true;
 8001458:	887b      	ldrh	r3, [r7, #2]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <UART2_SendBuffer_IT+0x16>
 800145e:	2301      	movs	r3, #1
 8001460:	e04b      	b.n	80014fa <UART2_SendBuffer_IT+0xae>
    if (g_uart2_tx_busy || (UART2_TX_BUFFER_SIZE - g_uart2_tx_buffer_count) < length) {
 8001462:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <UART2_SendBuffer_IT+0xbc>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d107      	bne.n	800147c <UART2_SendBuffer_IT+0x30>
 800146c:	4b27      	ldr	r3, [pc, #156]	@ (800150c <UART2_SendBuffer_IT+0xc0>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	f1c3 0280 	rsb	r2, r3, #128	@ 0x80
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	429a      	cmp	r2, r3
 800147a:	da01      	bge.n	8001480 <UART2_SendBuffer_IT+0x34>
        return false;
 800147c:	2300      	movs	r3, #0
 800147e:	e03c      	b.n	80014fa <UART2_SendBuffer_IT+0xae>
    }

    // Tạm thời vô hiệu hóa ngắt TXE để cập nhật buffer an toàn
    USART2->CR1 &= ~USART_CR1_TXEIE;
 8001480:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <UART2_SendBuffer_IT+0xc4>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4a22      	ldr	r2, [pc, #136]	@ (8001510 <UART2_SendBuffer_IT+0xc4>)
 8001486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800148a:	60d3      	str	r3, [r2, #12]

    for (uint16_t i = 0; i < length; i++) {
 800148c:	2300      	movs	r3, #0
 800148e:	81fb      	strh	r3, [r7, #14]
 8001490:	e019      	b.n	80014c6 <UART2_SendBuffer_IT+0x7a>
        g_uart2_tx_buffer[g_uart2_tx_buffer_tail] = buffer[i];
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	4a1e      	ldr	r2, [pc, #120]	@ (8001514 <UART2_SendBuffer_IT+0xc8>)
 800149a:	8812      	ldrh	r2, [r2, #0]
 800149c:	b292      	uxth	r2, r2
 800149e:	7819      	ldrb	r1, [r3, #0]
 80014a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <UART2_SendBuffer_IT+0xcc>)
 80014a2:	5499      	strb	r1, [r3, r2]
        g_uart2_tx_buffer_tail = (g_uart2_tx_buffer_tail + 1) % UART2_TX_BUFFER_SIZE;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <UART2_SendBuffer_IT+0xc8>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	425a      	negs	r2, r3
 80014ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80014b6:	bf58      	it	pl
 80014b8:	4253      	negpl	r3, r2
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <UART2_SendBuffer_IT+0xc8>)
 80014be:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 80014c0:	89fb      	ldrh	r3, [r7, #14]
 80014c2:	3301      	adds	r3, #1
 80014c4:	81fb      	strh	r3, [r7, #14]
 80014c6:	89fa      	ldrh	r2, [r7, #14]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3e1      	bcc.n	8001492 <UART2_SendBuffer_IT+0x46>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ce:	b672      	cpsid	i
}
 80014d0:	bf00      	nop
    }
    // đảm bảo critical section
    __disable_irq(); // Critical section
    g_uart2_tx_buffer_count += length;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <UART2_SendBuffer_IT+0xc0>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	4413      	add	r3, r2
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <UART2_SendBuffer_IT+0xc0>)
 80014e0:	801a      	strh	r2, [r3, #0]
    g_uart2_tx_busy = true;
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <UART2_SendBuffer_IT+0xbc>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014e8:	b662      	cpsie	i
}
 80014ea:	bf00      	nop
    __enable_irq();  // End critical section

    // Kích hoạt ngắt TXE để bắt đầu gửi byte đầu tiên từ ISR
    USART2->CR1 |= USART_CR1_TXEIE;
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <UART2_SendBuffer_IT+0xc4>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a07      	ldr	r2, [pc, #28]	@ (8001510 <UART2_SendBuffer_IT+0xc4>)
 80014f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f6:	60d3      	str	r3, [r2, #12]

    return true;
 80014f8:	2301      	movs	r3, #1
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000336 	.word	0x20000336
 800150c:	20000334 	.word	0x20000334
 8001510:	40004400 	.word	0x40004400
 8001514:	20000332 	.word	0x20000332
 8001518:	200002b0 	.word	0x200002b0

0800151c <UART2_ReadByte_FromBuffer>:

bool UART2_IsTxBusy(void) {
    return g_uart2_tx_busy;
}

bool UART2_ReadByte_FromBuffer(uint8_t* data) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
    if (g_uart2_rx_buffer_count == 0) {
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <UART2_ReadByte_FromBuffer+0x68>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <UART2_ReadByte_FromBuffer+0x16>
        return false; // Buffer rỗng
 800152e:	2300      	movs	r3, #0
 8001530:	e024      	b.n	800157c <UART2_ReadByte_FromBuffer+0x60>
    }

    // Vô hiệu hóa chỉ ngắt UART2 thay vì tất cả các ngắt
    NVIC_DisableIRQ(USART2_IRQn);
 8001532:	2026      	movs	r0, #38	@ 0x26
 8001534:	f7ff fe7a 	bl	800122c <__NVIC_DisableIRQ>
    
    *data = g_uart2_rx_buffer[g_uart2_rx_buffer_head];
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <UART2_ReadByte_FromBuffer+0x6c>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <UART2_ReadByte_FromBuffer+0x70>)
 8001542:	5c9b      	ldrb	r3, [r3, r2]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	701a      	strb	r2, [r3, #0]
    g_uart2_rx_buffer_head = (g_uart2_rx_buffer_head + 1) % UART2_RX_BUFFER_SIZE;
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <UART2_ReadByte_FromBuffer+0x6c>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	3301      	adds	r3, #1
 8001552:	425a      	negs	r2, r3
 8001554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001558:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800155c:	bf58      	it	pl
 800155e:	4253      	negpl	r3, r2
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <UART2_ReadByte_FromBuffer+0x6c>)
 8001564:	801a      	strh	r2, [r3, #0]
    g_uart2_rx_buffer_count--;
 8001566:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <UART2_ReadByte_FromBuffer+0x68>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	3b01      	subs	r3, #1
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <UART2_ReadByte_FromBuffer+0x68>)
 8001572:	801a      	strh	r2, [r3, #0]
    
    // Kích hoạt lại ngắt UART2
    NVIC_EnableIRQ(USART2_IRQn);
 8001574:	2026      	movs	r0, #38	@ 0x26
 8001576:	f7ff fe3b 	bl	80011f0 <__NVIC_EnableIRQ>

    return true;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200002ac 	.word	0x200002ac
 8001588:	200002a8 	.word	0x200002a8
 800158c:	20000228 	.word	0x20000228

08001590 <UART2_GetErrorFlags>:

void UART2_RegisterTxCompleteCallback(uart_tx_complete_callback_t callback) {
    g_uart2_tx_complete_callback = callback;
}

uint8_t UART2_GetErrorFlags(void) {
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
    return g_uart2_error_flags;
 8001594:	4b03      	ldr	r3, [pc, #12]	@ (80015a4 <UART2_GetErrorFlags+0x14>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	2000033c 	.word	0x2000033c

080015a8 <UART2_ClearErrorFlags>:

void UART2_ClearErrorFlags(uint8_t flags) {
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80015b2:	b672      	cpsid	i
}
 80015b4:	bf00      	nop
    __disable_irq();
    g_uart2_error_flags &= ~flags;
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	b25a      	sxtb	r2, r3
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <UART2_ClearErrorFlags+0x38>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	4013      	ands	r3, r2
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <UART2_ClearErrorFlags+0x38>)
 80015ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015d0:	b662      	cpsie	i
}
 80015d2:	bf00      	nop
    __enable_irq();
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	2000033c 	.word	0x2000033c

080015e4 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
    uint32_t sr_reg = USART2->SR; // Đọc thanh ghi SR một lần
 80015ea:	4b6e      	ldr	r3, [pc, #440]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	60fb      	str	r3, [r7, #12]

    // --- Xử lý ngắt RXNE (Receive Data Register Not Empty) ---
    if ((sr_reg & USART_SR_RXNE) && (USART2->CR1 & USART_CR1_RXNEIE)) {
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d032      	beq.n	8001660 <USART2_IRQHandler+0x7c>
 80015fa:	4b6a      	ldr	r3, [pc, #424]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	2b00      	cmp	r3, #0
 8001604:	d02c      	beq.n	8001660 <USART2_IRQHandler+0x7c>
        uint8_t received_byte = (uint8_t)(USART2->DR & 0xFFU);
 8001606:	4b67      	ldr	r3, [pc, #412]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	72fb      	strb	r3, [r7, #11]

        if (g_uart2_rx_buffer_count < UART2_RX_BUFFER_SIZE) {
 800160c:	4b66      	ldr	r3, [pc, #408]	@ (80017a8 <USART2_IRQHandler+0x1c4>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	2b7f      	cmp	r3, #127	@ 0x7f
 8001614:	d81c      	bhi.n	8001650 <USART2_IRQHandler+0x6c>
            g_uart2_rx_buffer[g_uart2_rx_buffer_tail] = received_byte;
 8001616:	4b65      	ldr	r3, [pc, #404]	@ (80017ac <USART2_IRQHandler+0x1c8>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4619      	mov	r1, r3
 800161e:	4a64      	ldr	r2, [pc, #400]	@ (80017b0 <USART2_IRQHandler+0x1cc>)
 8001620:	7afb      	ldrb	r3, [r7, #11]
 8001622:	5453      	strb	r3, [r2, r1]
            g_uart2_rx_buffer_tail = (g_uart2_rx_buffer_tail + 1) % UART2_RX_BUFFER_SIZE;
 8001624:	4b61      	ldr	r3, [pc, #388]	@ (80017ac <USART2_IRQHandler+0x1c8>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	b29b      	uxth	r3, r3
 800162a:	3301      	adds	r3, #1
 800162c:	425a      	negs	r2, r3
 800162e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001632:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001636:	bf58      	it	pl
 8001638:	4253      	negpl	r3, r2
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b5b      	ldr	r3, [pc, #364]	@ (80017ac <USART2_IRQHandler+0x1c8>)
 800163e:	801a      	strh	r2, [r3, #0]
            g_uart2_rx_buffer_count++;
 8001640:	4b59      	ldr	r3, [pc, #356]	@ (80017a8 <USART2_IRQHandler+0x1c4>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	b29b      	uxth	r3, r3
 8001646:	3301      	adds	r3, #1
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b57      	ldr	r3, [pc, #348]	@ (80017a8 <USART2_IRQHandler+0x1c4>)
 800164c:	801a      	strh	r2, [r3, #0]
 800164e:	e007      	b.n	8001660 <USART2_IRQHandler+0x7c>
        } else {
            // Buffer RX đầy, đánh dấu lỗi bằng cách thêm cờ
            g_uart2_error_flags |= UART_ERROR_BUFFER_FULL;
 8001650:	4b58      	ldr	r3, [pc, #352]	@ (80017b4 <USART2_IRQHandler+0x1d0>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b55      	ldr	r3, [pc, #340]	@ (80017b4 <USART2_IRQHandler+0x1d0>)
 800165e:	701a      	strb	r2, [r3, #0]
        }
        // Cờ RXNE tự xóa khi đọc DR.
    }

    // --- Xử lý ngắt TXE (Transmit Data Register Empty) ---
    if ((sr_reg & USART_SR_TXE) && (USART2->CR1 & USART_CR1_TXEIE)) {
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001666:	2b00      	cmp	r3, #0
 8001668:	d039      	beq.n	80016de <USART2_IRQHandler+0xfa>
 800166a:	4b4e      	ldr	r3, [pc, #312]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001672:	2b00      	cmp	r3, #0
 8001674:	d033      	beq.n	80016de <USART2_IRQHandler+0xfa>
        if (g_uart2_tx_buffer_count > 0) {
 8001676:	4b50      	ldr	r3, [pc, #320]	@ (80017b8 <USART2_IRQHandler+0x1d4>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d02e      	beq.n	80016de <USART2_IRQHandler+0xfa>
            USART2->DR = g_uart2_tx_buffer[g_uart2_tx_buffer_head];
 8001680:	4b4e      	ldr	r3, [pc, #312]	@ (80017bc <USART2_IRQHandler+0x1d8>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	4b4d      	ldr	r3, [pc, #308]	@ (80017c0 <USART2_IRQHandler+0x1dc>)
 800168a:	5c9b      	ldrb	r3, [r3, r2]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b45      	ldr	r3, [pc, #276]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 8001690:	605a      	str	r2, [r3, #4]
            g_uart2_tx_buffer_head = (g_uart2_tx_buffer_head + 1) % UART2_TX_BUFFER_SIZE;
 8001692:	4b4a      	ldr	r3, [pc, #296]	@ (80017bc <USART2_IRQHandler+0x1d8>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	3301      	adds	r3, #1
 800169a:	425a      	negs	r2, r3
 800169c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016a4:	bf58      	it	pl
 80016a6:	4253      	negpl	r3, r2
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4b44      	ldr	r3, [pc, #272]	@ (80017bc <USART2_IRQHandler+0x1d8>)
 80016ac:	801a      	strh	r2, [r3, #0]
            g_uart2_tx_buffer_count--;
 80016ae:	4b42      	ldr	r3, [pc, #264]	@ (80017b8 <USART2_IRQHandler+0x1d4>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4b3f      	ldr	r3, [pc, #252]	@ (80017b8 <USART2_IRQHandler+0x1d4>)
 80016ba:	801a      	strh	r2, [r3, #0]

            if (g_uart2_tx_buffer_count == 0) {
 80016bc:	4b3e      	ldr	r3, [pc, #248]	@ (80017b8 <USART2_IRQHandler+0x1d4>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10b      	bne.n	80016de <USART2_IRQHandler+0xfa>
                // Đã gửi hết buffer, tắt ngắt TXE
                USART2->CR1 &= ~USART_CR1_TXEIE;
 80016c6:	4b37      	ldr	r3, [pc, #220]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	4a36      	ldr	r2, [pc, #216]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 80016cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016d0:	60d3      	str	r3, [r2, #12]
                // Bật ngắt TC (Transmission Complete) để biết khi nào byte cuối cùng thực sự ra khỏi shift register
                USART2->CR1 |= USART_CR1_TCIE;
 80016d2:	4b34      	ldr	r3, [pc, #208]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	4a33      	ldr	r2, [pc, #204]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 80016d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016dc:	60d3      	str	r3, [r2, #12]
        }
        // Cờ TXE tự xóa khi ghi vào DR.
    }

    // --- Xử lý ngắt TC (Transmission Complete) ---
    if ((sr_reg & USART_SR_TC) && (USART2->CR1 & USART_CR1_TCIE)) {
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01b      	beq.n	8001720 <USART2_IRQHandler+0x13c>
 80016e8:	4b2e      	ldr	r3, [pc, #184]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d015      	beq.n	8001720 <USART2_IRQHandler+0x13c>
        // Byte cuối cùng đã được gửi hoàn toàn
        USART2->CR1 &= ~USART_CR1_TCIE; // Tắt ngắt TC
 80016f4:	4b2b      	ldr	r3, [pc, #172]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a2a      	ldr	r2, [pc, #168]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 80016fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80016fe:	60d3      	str	r3, [r2, #12]
        g_uart2_tx_busy = false;      // Đánh dấu  không còn bận gửi
 8001700:	4b30      	ldr	r3, [pc, #192]	@ (80017c4 <USART2_IRQHandler+0x1e0>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]

        if (g_uart2_tx_complete_callback != NULL) {
 8001706:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <USART2_IRQHandler+0x1e4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <USART2_IRQHandler+0x130>
            g_uart2_tx_complete_callback();
 800170e:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <USART2_IRQHandler+0x1e4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4798      	blx	r3
        }
        // Cờ TC được xóa bằng cách ghi 0 vào nó (hoặc đọc SR rồi ghi vào DR - nhưng ở đây đã xong TX)
        USART2->SR &= ~USART_SR_TC; // Xóa cờ TC
 8001714:	4b23      	ldr	r3, [pc, #140]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a22      	ldr	r2, [pc, #136]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 800171a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800171e:	6013      	str	r3, [r2, #0]
    }


    // --- Xử lý các cờ lỗi (Overrun, Noise, Framing, Parity) ---
    if (sr_reg & (USART_SR_ORE | USART_SR_NE | USART_SR_FE | USART_SR_PE)) {
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	2b00      	cmp	r3, #0
 8001728:	d037      	beq.n	800179a <USART2_IRQHandler+0x1b6>
        // Lưu lại lỗi để ứng dụng có thể kiểm tra
        if (sr_reg & USART_SR_ORE) g_uart2_error_flags |= UART_ERROR_OVERRUN;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <USART2_IRQHandler+0x160>
 8001734:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <USART2_IRQHandler+0x1d0>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <USART2_IRQHandler+0x1d0>)
 8001742:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_NE) g_uart2_error_flags |= UART_ERROR_NOISE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <USART2_IRQHandler+0x17a>
 800174e:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <USART2_IRQHandler+0x1d0>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <USART2_IRQHandler+0x1d0>)
 800175c:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_FE) g_uart2_error_flags |= UART_ERROR_FRAMING;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <USART2_IRQHandler+0x194>
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <USART2_IRQHandler+0x1d0>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <USART2_IRQHandler+0x1d0>)
 8001776:	701a      	strb	r2, [r3, #0]
        if (sr_reg & USART_SR_PE) g_uart2_error_flags |= UART_ERROR_PARITY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <USART2_IRQHandler+0x1ae>
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <USART2_IRQHandler+0x1d0>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f043 0308 	orr.w	r3, r3, #8
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <USART2_IRQHandler+0x1d0>)
 8001790:	701a      	strb	r2, [r3, #0]
        
        // Đọc DR để xóa cờ lỗi
        volatile uint32_t temp_dr = USART2->DR;
 8001792:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <USART2_IRQHandler+0x1c0>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	607b      	str	r3, [r7, #4]
        (void)temp_dr; // Tránh warning
 8001798:	687b      	ldr	r3, [r7, #4]
    }
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40004400 	.word	0x40004400
 80017a8:	200002ac 	.word	0x200002ac
 80017ac:	200002aa 	.word	0x200002aa
 80017b0:	20000228 	.word	0x20000228
 80017b4:	2000033c 	.word	0x2000033c
 80017b8:	20000334 	.word	0x20000334
 80017bc:	20000330 	.word	0x20000330
 80017c0:	200002b0 	.word	0x200002b0
 80017c4:	20000336 	.word	0x20000336
 80017c8:	20000338 	.word	0x20000338

080017cc <UARTProto_Init>:
// Forward declarations of static helper functions
static void reset_rx_parser(void);
static void process_received_frame_logic(void);
static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length);

void UARTProto_Init(uart_command_handler_callback_t command_callback) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	g_app_command_callback = command_callback;
 80017d4:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <UARTProto_Init+0x28>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
    reset_rx_parser();
 80017da:	f000 f883 	bl	80018e4 <reset_rx_parser>
    UART2_Init(115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 80017de:	2300      	movs	r3, #0
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80017e8:	f7ff fd6e 	bl	80012c8 <UART2_Init>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000354 	.word	0x20000354

080017f8 <actually_send_frame>:

static bool actually_send_frame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	603a      	str	r2, [r7, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	460b      	mov	r3, r1
 8001808:	71bb      	strb	r3, [r7, #6]
 800180a:	4613      	mov	r3, r2
 800180c:	717b      	strb	r3, [r7, #5]
    if (length > MAX_PAYLOAD_LENGTH) {
 800180e:	797b      	ldrb	r3, [r7, #5]
 8001810:	2b04      	cmp	r3, #4
 8001812:	d901      	bls.n	8001818 <actually_send_frame+0x20>
        return false;
 8001814:	2300      	movs	r3, #0
 8001816:	e045      	b.n	80018a4 <actually_send_frame+0xac>
    }

    uint8_t frame_buffer[MAX_FRAME_LENGTH];
    uint8_t frame_idx = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	75fb      	strb	r3, [r7, #23]

    frame_buffer[frame_idx++] = FRAME_START_BYTE;
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	75fa      	strb	r2, [r7, #23]
 8001822:	3318      	adds	r3, #24
 8001824:	443b      	add	r3, r7
 8001826:	227e      	movs	r2, #126	@ 0x7e
 8001828:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = (uint8_t)type;
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	75fa      	strb	r2, [r7, #23]
 8001832:	3318      	adds	r3, #24
 8001834:	443b      	add	r3, r7
 8001836:	79fa      	ldrb	r2, [r7, #7]
 8001838:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = id;
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	75fa      	strb	r2, [r7, #23]
 8001842:	3318      	adds	r3, #24
 8001844:	443b      	add	r3, r7
 8001846:	79ba      	ldrb	r2, [r7, #6]
 8001848:	f803 2c0c 	strb.w	r2, [r3, #-12]
    frame_buffer[frame_idx++] = length;
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	75fa      	strb	r2, [r7, #23]
 8001852:	3318      	adds	r3, #24
 8001854:	443b      	add	r3, r7
 8001856:	797a      	ldrb	r2, [r7, #5]
 8001858:	f803 2c0c 	strb.w	r2, [r3, #-12]

    if (length > 0 && payload != NULL) {
 800185c:	797b      	ldrb	r3, [r7, #5]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00f      	beq.n	8001882 <actually_send_frame+0x8a>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00c      	beq.n	8001882 <actually_send_frame+0x8a>
        memcpy(&frame_buffer[frame_idx], payload, length);
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	f107 020c 	add.w	r2, r7, #12
 800186e:	4413      	add	r3, r2
 8001870:	797a      	ldrb	r2, [r7, #5]
 8001872:	6839      	ldr	r1, [r7, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f001 f9e4 	bl	8002c42 <memcpy>
        frame_idx += length;
 800187a:	7dfa      	ldrb	r2, [r7, #23]
 800187c:	797b      	ldrb	r3, [r7, #5]
 800187e:	4413      	add	r3, r2
 8001880:	75fb      	strb	r3, [r7, #23]
    }
    frame_buffer[frame_idx++] = FRAME_END_BYTE;
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	75fa      	strb	r2, [r7, #23]
 8001888:	3318      	adds	r3, #24
 800188a:	443b      	add	r3, r7
 800188c:	227f      	movs	r2, #127	@ 0x7f
 800188e:	f803 2c0c 	strb.w	r2, [r3, #-12]

    return UART2_SendBuffer_IT(frame_buffer, frame_idx);
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	b29a      	uxth	r2, r3
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fdd5 	bl	800144c <UART2_SendBuffer_IT>
 80018a2:	4603      	mov	r3, r0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <UARTProto_SendFrame>:

bool UARTProto_SendFrame(FrameType_t type, uint8_t id, const uint8_t* payload, uint8_t length) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	603a      	str	r2, [r7, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	460b      	mov	r3, r1
 80018bc:	71bb      	strb	r3, [r7, #6]
 80018be:	4613      	mov	r3, r2
 80018c0:	717b      	strb	r3, [r7, #5]
    if (length > MAX_PAYLOAD_LENGTH) {
 80018c2:	797b      	ldrb	r3, [r7, #5]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d901      	bls.n	80018cc <UARTProto_SendFrame+0x20>
        return false; // Payload too long
 80018c8:	2300      	movs	r3, #0
 80018ca:	e006      	b.n	80018da <UARTProto_SendFrame+0x2e>
    }
    return actually_send_frame(type, id, payload, length);
 80018cc:	797b      	ldrb	r3, [r7, #5]
 80018ce:	79b9      	ldrb	r1, [r7, #6]
 80018d0:	79f8      	ldrb	r0, [r7, #7]
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	f7ff ff90 	bl	80017f8 <actually_send_frame>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <reset_rx_parser>:

static void reset_rx_parser(void) {
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
    g_rx_state = STATE_WAIT_START;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <reset_rx_parser+0x20>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
    g_rx_buffer_idx = 0;
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <reset_rx_parser+0x24>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
    g_expected_payload_len = 0;
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <reset_rx_parser+0x28>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	2000033d 	.word	0x2000033d
 8001908:	20000349 	.word	0x20000349
 800190c:	20000353 	.word	0x20000353

08001910 <process_received_frame_logic>:

static void process_received_frame_logic(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    // This function is called when a complete, structurally valid frame
    // of type FRAME_TYPE_LABVIEW_TO_STM has been received.
    // Frame data is in g_current_rx_frame.

    // Only expect to process commands from LabVIEW.
    if (g_current_rx_frame.type != FRAME_TYPE_LABVIEW_TO_STM) {
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <process_received_frame_logic+0x5c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d120      	bne.n	800195e <process_received_frame_logic+0x4e>
        return; 
    }

    switch (g_current_rx_frame.id) {
 800191c:	4b13      	ldr	r3, [pc, #76]	@ (800196c <process_received_frame_logic+0x5c>)
 800191e:	785b      	ldrb	r3, [r3, #1]
 8001920:	2b10      	cmp	r3, #16
 8001922:	d002      	beq.n	800192a <process_received_frame_logic+0x1a>
 8001924:	2b13      	cmp	r3, #19
 8001926:	d00d      	beq.n	8001944 <process_received_frame_logic+0x34>
            }
            break;

        default:
            // Unknown command ID received from LabVIEW. Silently ignore or log.
            break;
 8001928:	e01e      	b.n	8001968 <process_received_frame_logic+0x58>
            if (g_current_rx_frame.length == 1) {
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <process_received_frame_logic+0x5c>)
 800192c:	799b      	ldrb	r3, [r3, #6]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d117      	bne.n	8001962 <process_received_frame_logic+0x52>
                if (g_app_command_callback != NULL) {
 8001932:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <process_received_frame_logic+0x60>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d013      	beq.n	8001962 <process_received_frame_logic+0x52>
                    g_app_command_callback(&g_current_rx_frame);
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <process_received_frame_logic+0x60>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	480b      	ldr	r0, [pc, #44]	@ (800196c <process_received_frame_logic+0x5c>)
 8001940:	4798      	blx	r3
            break;
 8001942:	e00e      	b.n	8001962 <process_received_frame_logic+0x52>
            if (g_current_rx_frame.length == 0) {
 8001944:	4b09      	ldr	r3, [pc, #36]	@ (800196c <process_received_frame_logic+0x5c>)
 8001946:	799b      	ldrb	r3, [r3, #6]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10c      	bne.n	8001966 <process_received_frame_logic+0x56>
                if (g_app_command_callback != NULL) {
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <process_received_frame_logic+0x60>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <process_received_frame_logic+0x56>
                    g_app_command_callback(&g_current_rx_frame);
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <process_received_frame_logic+0x60>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4804      	ldr	r0, [pc, #16]	@ (800196c <process_received_frame_logic+0x5c>)
 800195a:	4798      	blx	r3
            break;
 800195c:	e003      	b.n	8001966 <process_received_frame_logic+0x56>
        return; 
 800195e:	bf00      	nop
 8001960:	e002      	b.n	8001968 <process_received_frame_logic+0x58>
            break;
 8001962:	bf00      	nop
 8001964:	e000      	b.n	8001968 <process_received_frame_logic+0x58>
            break;
 8001966:	bf00      	nop
    }
}
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000034c 	.word	0x2000034c
 8001970:	20000354 	.word	0x20000354

08001974 <UARTProto_Process>:

void UARTProto_Process(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
    uint8_t byte;
    while (UART2_ReadByte_FromBuffer(&byte)) {
 800197a:	e0b8      	b.n	8001aee <UARTProto_Process+0x17a>
        // Prevent buffer overflow if a malformed frame is too long
        if (g_rx_state != STATE_WAIT_START && g_rx_buffer_idx >= MAX_FRAME_LENGTH) {
 800197c:	4b62      	ldr	r3, [pc, #392]	@ (8001b08 <UARTProto_Process+0x194>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <UARTProto_Process+0x1c>
 8001984:	4b61      	ldr	r3, [pc, #388]	@ (8001b0c <UARTProto_Process+0x198>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d901      	bls.n	8001990 <UARTProto_Process+0x1c>
            reset_rx_parser();
 800198c:	f7ff ffaa 	bl	80018e4 <reset_rx_parser>
            // After reset, the current 'byte' might be a START_BYTE
        }

        switch (g_rx_state) {
 8001990:	4b5d      	ldr	r3, [pc, #372]	@ (8001b08 <UARTProto_Process+0x194>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b05      	cmp	r3, #5
 8001996:	f200 80a4 	bhi.w	8001ae2 <UARTProto_Process+0x16e>
 800199a:	a201      	add	r2, pc, #4	@ (adr r2, 80019a0 <UARTProto_Process+0x2c>)
 800199c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a0:	080019b9 	.word	0x080019b9
 80019a4:	080019dd 	.word	0x080019dd
 80019a8:	08001a0d 	.word	0x08001a0d
 80019ac:	08001a2f 	.word	0x08001a2f
 80019b0:	08001a73 	.word	0x08001a73
 80019b4:	08001ab5 	.word	0x08001ab5
            case STATE_WAIT_START:
                if (byte == FRAME_START_BYTE) {
 80019b8:	79bb      	ldrb	r3, [r7, #6]
 80019ba:	2b7e      	cmp	r3, #126	@ 0x7e
 80019bc:	f040 8094 	bne.w	8001ae8 <UARTProto_Process+0x174>
                    // g_rx_buffer_idx is 0 due to reset_rx_parser()
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 80019c0:	4b52      	ldr	r3, [pc, #328]	@ (8001b0c <UARTProto_Process+0x198>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	b2d1      	uxtb	r1, r2
 80019c8:	4a50      	ldr	r2, [pc, #320]	@ (8001b0c <UARTProto_Process+0x198>)
 80019ca:	7011      	strb	r1, [r2, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	79b9      	ldrb	r1, [r7, #6]
 80019d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001b10 <UARTProto_Process+0x19c>)
 80019d2:	5499      	strb	r1, [r3, r2]
                    g_rx_state = STATE_WAIT_TYPE;
 80019d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001b08 <UARTProto_Process+0x194>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
                }
                break;
 80019da:	e085      	b.n	8001ae8 <UARTProto_Process+0x174>

            case STATE_WAIT_TYPE:
                g_current_rx_frame.type = (FrameType_t)byte;
 80019dc:	79ba      	ldrb	r2, [r7, #6]
 80019de:	4b4d      	ldr	r3, [pc, #308]	@ (8001b14 <UARTProto_Process+0x1a0>)
 80019e0:	701a      	strb	r2, [r3, #0]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 80019e2:	4b4a      	ldr	r3, [pc, #296]	@ (8001b0c <UARTProto_Process+0x198>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	b2d1      	uxtb	r1, r2
 80019ea:	4a48      	ldr	r2, [pc, #288]	@ (8001b0c <UARTProto_Process+0x198>)
 80019ec:	7011      	strb	r1, [r2, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	79b9      	ldrb	r1, [r7, #6]
 80019f2:	4b47      	ldr	r3, [pc, #284]	@ (8001b10 <UARTProto_Process+0x19c>)
 80019f4:	5499      	strb	r1, [r3, r2]
                if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 80019f6:	4b47      	ldr	r3, [pc, #284]	@ (8001b14 <UARTProto_Process+0x1a0>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d103      	bne.n	8001a06 <UARTProto_Process+0x92>
                    g_rx_state = STATE_WAIT_ID;
 80019fe:	4b42      	ldr	r3, [pc, #264]	@ (8001b08 <UARTProto_Process+0x194>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	701a      	strb	r2, [r3, #0]
                } else {
                    // Received an unexpected frame type (e.g., STM_TO_LABVIEW type, or invalid)
                    reset_rx_parser();
                }
                break;
 8001a04:	e073      	b.n	8001aee <UARTProto_Process+0x17a>
                    reset_rx_parser();
 8001a06:	f7ff ff6d 	bl	80018e4 <reset_rx_parser>
                break;
 8001a0a:	e070      	b.n	8001aee <UARTProto_Process+0x17a>

            case STATE_WAIT_ID:
                g_current_rx_frame.id = byte;
 8001a0c:	79ba      	ldrb	r2, [r7, #6]
 8001a0e:	4b41      	ldr	r3, [pc, #260]	@ (8001b14 <UARTProto_Process+0x1a0>)
 8001a10:	705a      	strb	r2, [r3, #1]
                g_rx_buffer[g_rx_buffer_idx++] = byte;
 8001a12:	4b3e      	ldr	r3, [pc, #248]	@ (8001b0c <UARTProto_Process+0x198>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	b2d1      	uxtb	r1, r2
 8001a1a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b0c <UARTProto_Process+0x198>)
 8001a1c:	7011      	strb	r1, [r2, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	79b9      	ldrb	r1, [r7, #6]
 8001a22:	4b3b      	ldr	r3, [pc, #236]	@ (8001b10 <UARTProto_Process+0x19c>)
 8001a24:	5499      	strb	r1, [r3, r2]
                g_rx_state = STATE_WAIT_LENGTH;
 8001a26:	4b38      	ldr	r3, [pc, #224]	@ (8001b08 <UARTProto_Process+0x194>)
 8001a28:	2203      	movs	r2, #3
 8001a2a:	701a      	strb	r2, [r3, #0]
                break;
 8001a2c:	e05f      	b.n	8001aee <UARTProto_Process+0x17a>

            case STATE_WAIT_LENGTH:
                if (byte > MAX_PAYLOAD_LENGTH) {
 8001a2e:	79bb      	ldrb	r3, [r7, #6]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d902      	bls.n	8001a3a <UARTProto_Process+0xc6>
                    reset_rx_parser(); // Error: payload length field is too large
 8001a34:	f7ff ff56 	bl	80018e4 <reset_rx_parser>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
                    } else {
                        g_rx_state = STATE_WAIT_PAYLOAD;
                    }
                }
                break;
 8001a38:	e059      	b.n	8001aee <UARTProto_Process+0x17a>
                    g_current_rx_frame.length = byte;
 8001a3a:	79ba      	ldrb	r2, [r7, #6]
 8001a3c:	4b35      	ldr	r3, [pc, #212]	@ (8001b14 <UARTProto_Process+0x1a0>)
 8001a3e:	719a      	strb	r2, [r3, #6]
                    g_expected_payload_len = byte;
 8001a40:	79ba      	ldrb	r2, [r7, #6]
 8001a42:	4b35      	ldr	r3, [pc, #212]	@ (8001b18 <UARTProto_Process+0x1a4>)
 8001a44:	701a      	strb	r2, [r3, #0]
                    g_rx_buffer[g_rx_buffer_idx++] = byte;
 8001a46:	4b31      	ldr	r3, [pc, #196]	@ (8001b0c <UARTProto_Process+0x198>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	b2d1      	uxtb	r1, r2
 8001a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001b0c <UARTProto_Process+0x198>)
 8001a50:	7011      	strb	r1, [r2, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	79b9      	ldrb	r1, [r7, #6]
 8001a56:	4b2e      	ldr	r3, [pc, #184]	@ (8001b10 <UARTProto_Process+0x19c>)
 8001a58:	5499      	strb	r1, [r3, r2]
                    if (g_expected_payload_len == 0) {
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b18 <UARTProto_Process+0x1a4>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <UARTProto_Process+0xf6>
                        g_rx_state = STATE_WAIT_END; // Skip payload if length is 0
 8001a62:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <UARTProto_Process+0x194>)
 8001a64:	2205      	movs	r2, #5
 8001a66:	701a      	strb	r2, [r3, #0]
                break;
 8001a68:	e041      	b.n	8001aee <UARTProto_Process+0x17a>
                        g_rx_state = STATE_WAIT_PAYLOAD;
 8001a6a:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <UARTProto_Process+0x194>)
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	701a      	strb	r2, [r3, #0]
                break;
 8001a70:	e03d      	b.n	8001aee <UARTProto_Process+0x17a>

            case STATE_WAIT_PAYLOAD:
                // Current payload byte's 0-based index in the payload array.
                // Header (START,TYPE,ID,LENGTH) is 4 bytes.
                // g_rx_buffer_idx is count of bytes in g_rx_buffer *before* adding current 'byte'.
                uint8_t payload_byte_index = g_rx_buffer_idx - 4;
 8001a72:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <UARTProto_Process+0x198>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	3b04      	subs	r3, #4
 8001a78:	71fb      	strb	r3, [r7, #7]

                if (payload_byte_index < MAX_PAYLOAD_LENGTH) {
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d805      	bhi.n	8001a8c <UARTProto_Process+0x118>
                     g_current_rx_frame.payload[payload_byte_index] = byte;
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	79b9      	ldrb	r1, [r7, #6]
 8001a84:	4a23      	ldr	r2, [pc, #140]	@ (8001b14 <UARTProto_Process+0x1a0>)
 8001a86:	4413      	add	r3, r2
 8001a88:	460a      	mov	r2, r1
 8001a8a:	709a      	strb	r2, [r3, #2]
                }
                g_rx_buffer[g_rx_buffer_idx++] = byte; // Store current payload byte in raw buffer
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b0c <UARTProto_Process+0x198>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	b2d1      	uxtb	r1, r2
 8001a94:	4a1d      	ldr	r2, [pc, #116]	@ (8001b0c <UARTProto_Process+0x198>)
 8001a96:	7011      	strb	r1, [r2, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	79b9      	ldrb	r1, [r7, #6]
 8001a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b10 <UARTProto_Process+0x19c>)
 8001a9e:	5499      	strb	r1, [r3, r2]

                if ((payload_byte_index + 1) >= g_expected_payload_len) {
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8001b18 <UARTProto_Process+0x1a4>)
 8001aa6:	7812      	ldrb	r2, [r2, #0]
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	db1f      	blt.n	8001aec <UARTProto_Process+0x178>
                    g_rx_state = STATE_WAIT_END; // All expected payload bytes received
 8001aac:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <UARTProto_Process+0x194>)
 8001aae:	2205      	movs	r2, #5
 8001ab0:	701a      	strb	r2, [r3, #0]
                }
                break;
 8001ab2:	e01b      	b.n	8001aec <UARTProto_Process+0x178>

            case STATE_WAIT_END:
                if (byte == FRAME_END_BYTE) {
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ab8:	d110      	bne.n	8001adc <UARTProto_Process+0x168>
                    // Frame is structurally complete.
                    // g_rx_buffer_idx is count of (START,TYPE,ID,LENGTH,PAYLOAD bytes).
                    // Expected count = 4 + g_current_rx_frame.length.
                    if (g_rx_buffer_idx == (4 + g_current_rx_frame.length)) {
 8001aba:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <UARTProto_Process+0x198>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <UARTProto_Process+0x1a0>)
 8001ac2:	799b      	ldrb	r3, [r3, #6]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d106      	bne.n	8001ad8 <UARTProto_Process+0x164>
                        // Only process if it's a command from LabVIEW (already checked at TYPE stage)
                        if (g_current_rx_frame.type == FRAME_TYPE_LABVIEW_TO_STM) {
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <UARTProto_Process+0x1a0>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d104      	bne.n	8001adc <UARTProto_Process+0x168>
                            process_received_frame_logic();
 8001ad2:	f7ff ff1d 	bl	8001910 <process_received_frame_logic>
 8001ad6:	e001      	b.n	8001adc <UARTProto_Process+0x168>
                        }
                    } else {
                        // Error: Frame length mismatch. Reset parser.
                        reset_rx_parser();
 8001ad8:	f7ff ff04 	bl	80018e4 <reset_rx_parser>
                    }
                } else {
                    // Error: Expected FRAME_END_BYTE but received something else.
                }
                reset_rx_parser(); // Always reset for the next frame, regardless of END byte correctness.
 8001adc:	f7ff ff02 	bl	80018e4 <reset_rx_parser>
                break;
 8001ae0:	e005      	b.n	8001aee <UARTProto_Process+0x17a>

            default: 
                reset_rx_parser();
 8001ae2:	f7ff feff 	bl	80018e4 <reset_rx_parser>
                break;
 8001ae6:	e002      	b.n	8001aee <UARTProto_Process+0x17a>
                break;
 8001ae8:	bf00      	nop
 8001aea:	e000      	b.n	8001aee <UARTProto_Process+0x17a>
                break;
 8001aec:	bf00      	nop
    while (UART2_ReadByte_FromBuffer(&byte)) {
 8001aee:	1dbb      	adds	r3, r7, #6
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fd13 	bl	800151c <UART2_ReadByte_FromBuffer>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f47f af3f 	bne.w	800197c <UARTProto_Process+0x8>
        }
    }
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	2000033d 	.word	0x2000033d
 8001b0c:	20000349 	.word	0x20000349
 8001b10:	20000340 	.word	0x20000340
 8001b14:	2000034c 	.word	0x2000034c
 8001b18:	20000353 	.word	0x20000353

08001b1c <UARTProto_CheckErrors>:

bool UARTProto_CheckErrors(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
    uint8_t errors = UART2_GetErrorFlags();
 8001b22:	f7ff fd35 	bl	8001590 <UART2_GetErrorFlags>
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
    bool has_errors = (errors != 0);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	71bb      	strb	r3, [r7, #6]

    if (has_errors) {
 8001b36:	79bb      	ldrb	r3, [r7, #6]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00a      	beq.n	8001b52 <UARTProto_CheckErrors+0x36>
        if (errors & UART_ERROR_BUFFER_FULL) {
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <UARTProto_CheckErrors+0x2e>
            reset_rx_parser();
 8001b46:	f7ff fecd 	bl	80018e4 <reset_rx_parser>
        }
        UART2_ClearErrorFlags(errors); // Clear the reported errors in the driver.
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fd2b 	bl	80015a8 <UART2_ClearErrorFlags>
    }
    return has_errors;
 8001b52:	79bb      	ldrb	r3, [r7, #6]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <main_labview_command_handler>:
static uint8_t people_count = 0;
static uint8_t system_mode = PAYLOAD_MODE_NORMAL;
static uint8_t light_state = PAYLOAD_LIGHT_OFF;

// Callback handler for commands received from LabVIEW
bool main_labview_command_handler(const ParsedFrame_t* parsed_frame) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    bool processed_successfully = false;
 8001b64:	2300      	movs	r3, #0
 8001b66:	75fb      	strb	r3, [r7, #23]
    uint8_t ack_payload_id = parsed_frame->id; // For ACK frame
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	785b      	ldrb	r3, [r3, #1]
 8001b6c:	73bb      	strb	r3, [r7, #14]

    // Visual indication of command reception/processing attempt
    GPIO_WritePin(LED_ID_PORT, LED_ID_PIN_MASK, GPIO_PIN_SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b74:	484e      	ldr	r0, [pc, #312]	@ (8001cb0 <main_labview_command_handler+0x154>)
 8001b76:	f7ff f9f8 	bl	8000f6a <GPIO_WritePin>
    Delay_ms(30); // Short blink
 8001b7a:	201e      	movs	r0, #30
 8001b7c:	f7ff fb00 	bl	8001180 <Delay_ms>
    GPIO_WritePin(LED_ID_PORT, LED_ID_PIN_MASK, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b86:	484a      	ldr	r0, [pc, #296]	@ (8001cb0 <main_labview_command_handler+0x154>)
 8001b88:	f7ff f9ef 	bl	8000f6a <GPIO_WritePin>

    if (parsed_frame->type == FRAME_TYPE_LABVIEW_TO_STM) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d17d      	bne.n	8001c90 <main_labview_command_handler+0x134>
        switch (parsed_frame->id) {
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	785b      	ldrb	r3, [r3, #1]
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d002      	beq.n	8001ba2 <main_labview_command_handler+0x46>
 8001b9c:	2b13      	cmp	r3, #19
 8001b9e:	d04f      	beq.n	8001c40 <main_labview_command_handler+0xe4>
                } else {
                }
                break;

            default:
                break;
 8001ba0:	e076      	b.n	8001c90 <main_labview_command_handler+0x134>
                if (parsed_frame->length == 1) {
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	799b      	ldrb	r3, [r3, #6]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d16f      	bne.n	8001c8a <main_labview_command_handler+0x12e>
                    uint8_t requested_mode = parsed_frame->payload[0];
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	789b      	ldrb	r3, [r3, #2]
 8001bae:	73fb      	strb	r3, [r7, #15]
                    if (requested_mode == PAYLOAD_MODE_NORMAL ||
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <main_labview_command_handler+0x66>
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d002      	beq.n	8001bc2 <main_labview_command_handler+0x66>
                        requested_mode == PAYLOAD_MODE_FORCE_OPEN ||
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d163      	bne.n	8001c8a <main_labview_command_handler+0x12e>
                        system_mode = requested_mode; // Update global system_mode
 8001bc2:	4a3c      	ldr	r2, [pc, #240]	@ (8001cb4 <main_labview_command_handler+0x158>)
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	7013      	strb	r3, [r2, #0]
                        processed_successfully = true;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	75fb      	strb	r3, [r7, #23]
                        if (system_mode == PAYLOAD_MODE_NORMAL) {
 8001bcc:	4b39      	ldr	r3, [pc, #228]	@ (8001cb4 <main_labview_command_handler+0x158>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10f      	bne.n	8001bf4 <main_labview_command_handler+0x98>
                            GPIO_WritePin(LED_NORMAL_PORT, LED_NORMAL_PIN_MASK, GPIO_PIN_SET); // Turn on Normal LED
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bda:	4835      	ldr	r0, [pc, #212]	@ (8001cb0 <main_labview_command_handler+0x154>)
 8001bdc:	f7ff f9c5 	bl	8000f6a <GPIO_WritePin>
                            Delay_ms(50);
 8001be0:	2032      	movs	r0, #50	@ 0x32
 8001be2:	f7ff facd 	bl	8001180 <Delay_ms>
                            GPIO_WritePin(LED_NORMAL_PORT, LED_NORMAL_PIN_MASK, GPIO_PIN_RESET); // Turn off Normal LED
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bec:	4830      	ldr	r0, [pc, #192]	@ (8001cb0 <main_labview_command_handler+0x154>)
 8001bee:	f7ff f9bc 	bl	8000f6a <GPIO_WritePin>
                break;
 8001bf2:	e04a      	b.n	8001c8a <main_labview_command_handler+0x12e>
                        } else if (system_mode == PAYLOAD_MODE_FORCE_OPEN) {
 8001bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb4 <main_labview_command_handler+0x158>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d10f      	bne.n	8001c1c <main_labview_command_handler+0xc0>
                            GPIO_WritePin(LED_OPEN_PORT, LED_OPEN_PIN_MASK, GPIO_PIN_SET); // Turn on Open LED
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c02:	482d      	ldr	r0, [pc, #180]	@ (8001cb8 <main_labview_command_handler+0x15c>)
 8001c04:	f7ff f9b1 	bl	8000f6a <GPIO_WritePin>
                            Delay_ms(50);
 8001c08:	2032      	movs	r0, #50	@ 0x32
 8001c0a:	f7ff fab9 	bl	8001180 <Delay_ms>
                            GPIO_WritePin(LED_OPEN_PORT, LED_OPEN_PIN_MASK, GPIO_PIN_RESET); // Turn off Open LED
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c14:	4828      	ldr	r0, [pc, #160]	@ (8001cb8 <main_labview_command_handler+0x15c>)
 8001c16:	f7ff f9a8 	bl	8000f6a <GPIO_WritePin>
                break;
 8001c1a:	e036      	b.n	8001c8a <main_labview_command_handler+0x12e>
                        } else if (system_mode == PAYLOAD_MODE_FORCE_CLOSE) {
 8001c1c:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <main_labview_command_handler+0x158>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d132      	bne.n	8001c8a <main_labview_command_handler+0x12e>
                            GPIO_WritePin(LED_CLOSE_PORT, LED_CLOSE_PIN_MASK, GPIO_PIN_SET); // Turn on Close LED
 8001c24:	2201      	movs	r2, #1
 8001c26:	2140      	movs	r1, #64	@ 0x40
 8001c28:	4823      	ldr	r0, [pc, #140]	@ (8001cb8 <main_labview_command_handler+0x15c>)
 8001c2a:	f7ff f99e 	bl	8000f6a <GPIO_WritePin>
                            Delay_ms(50);
 8001c2e:	2032      	movs	r0, #50	@ 0x32
 8001c30:	f7ff faa6 	bl	8001180 <Delay_ms>
                            GPIO_WritePin(LED_CLOSE_PORT, LED_CLOSE_PIN_MASK, GPIO_PIN_RESET); // Turn off Close LED
 8001c34:	2200      	movs	r2, #0
 8001c36:	2140      	movs	r1, #64	@ 0x40
 8001c38:	481f      	ldr	r0, [pc, #124]	@ (8001cb8 <main_labview_command_handler+0x15c>)
 8001c3a:	f7ff f996 	bl	8000f6a <GPIO_WritePin>
                break;
 8001c3e:	e024      	b.n	8001c8a <main_labview_command_handler+0x12e>
                if (parsed_frame->length == 0) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	799b      	ldrb	r3, [r3, #6]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d122      	bne.n	8001c8e <main_labview_command_handler+0x132>
                    people_count = 0; // Reset global people_count
 8001c48:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <main_labview_command_handler+0x160>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
                    processed_successfully = true;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
                    for(int i=0; i<3; ++i) {
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	e014      	b.n	8001c82 <main_labview_command_handler+0x126>
                        GPIO_WritePin(LED_ID_PORT, LED_ID_PIN_MASK, GPIO_PIN_SET); Delay_ms(50);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c5e:	4814      	ldr	r0, [pc, #80]	@ (8001cb0 <main_labview_command_handler+0x154>)
 8001c60:	f7ff f983 	bl	8000f6a <GPIO_WritePin>
 8001c64:	2032      	movs	r0, #50	@ 0x32
 8001c66:	f7ff fa8b 	bl	8001180 <Delay_ms>
                        GPIO_WritePin(LED_ID_PORT, LED_ID_PIN_MASK, GPIO_PIN_RESET); Delay_ms(50);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c70:	480f      	ldr	r0, [pc, #60]	@ (8001cb0 <main_labview_command_handler+0x154>)
 8001c72:	f7ff f97a 	bl	8000f6a <GPIO_WritePin>
 8001c76:	2032      	movs	r0, #50	@ 0x32
 8001c78:	f7ff fa82 	bl	8001180 <Delay_ms>
                    for(int i=0; i<3; ++i) {
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	dde7      	ble.n	8001c58 <main_labview_command_handler+0xfc>
                break;
 8001c88:	e001      	b.n	8001c8e <main_labview_command_handler+0x132>
                break;
 8001c8a:	bf00      	nop
 8001c8c:	e000      	b.n	8001c90 <main_labview_command_handler+0x134>
                break;
 8001c8e:	bf00      	nop
        }
    }

    if (processed_successfully) {
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <main_labview_command_handler+0x148>
        // Send ACK back to LabVIEW
        UARTProto_SendFrame(FRAME_TYPE_STM_TO_LABVIEW, FRAME_ID_STM_COMMAND_ACK, &ack_payload_id, 1);
 8001c96:	f107 020e 	add.w	r2, r7, #14
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f7ff fe04 	bl	80018ac <UARTProto_SendFrame>
    }
    return processed_successfully;
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	2000035a 	.word	0x2000035a
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	20000359 	.word	0x20000359

08001cc0 <main>:


int main(void) {
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b089      	sub	sp, #36	@ 0x24
 8001cc4:	af04      	add	r7, sp, #16
    SystemClock_Config(); 
 8001cc6:	f7ff f969 	bl	8000f9c <SystemClock_Config>
    SysTick_Init();       
 8001cca:	f7ff fa2b 	bl	8001124 <SysTick_Init>

    // Initialize LEDs
    GPIO_InitPin(LED_ID_PORT, LED_ID_PIN_MASK, GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW, GPIO_OTYPE_PUSHPULL, 0);
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ce2:	484d      	ldr	r0, [pc, #308]	@ (8001e18 <main+0x158>)
 8001ce4:	f7ff f884 	bl	8000df0 <GPIO_InitPin>
    GPIO_InitPin(LED_NORMAL_PORT, LED_NORMAL_PIN_MASK, GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW, GPIO_OTYPE_PUSHPULL, 0);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cfc:	4846      	ldr	r0, [pc, #280]	@ (8001e18 <main+0x158>)
 8001cfe:	f7ff f877 	bl	8000df0 <GPIO_InitPin>
    GPIO_InitPin(LED_OPEN_PORT, LED_OPEN_PIN_MASK, GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW, GPIO_OTYPE_PUSHPULL, 0);
 8001d02:	2300      	movs	r3, #0
 8001d04:	9302      	str	r3, [sp, #8]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2201      	movs	r2, #1
 8001d12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d16:	4841      	ldr	r0, [pc, #260]	@ (8001e1c <main+0x15c>)
 8001d18:	f7ff f86a 	bl	8000df0 <GPIO_InitPin>
    GPIO_InitPin(LED_CLOSE_PORT, LED_CLOSE_PIN_MASK, GPIO_MODE_OUTPUT, GPIO_PULL_NO, GPIO_SPEED_LOW, GPIO_OTYPE_PUSHPULL, 0);
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	2300      	movs	r3, #0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2300      	movs	r3, #0
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2140      	movs	r1, #64	@ 0x40
 8001d2e:	483b      	ldr	r0, [pc, #236]	@ (8001e1c <main+0x15c>)
 8001d30:	f7ff f85e 	bl	8000df0 <GPIO_InitPin>
    
    // Turn off all LEDs initially
    GPIO_WritePin(LED_ID_PORT, LED_ID_PIN_MASK, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d3a:	4837      	ldr	r0, [pc, #220]	@ (8001e18 <main+0x158>)
 8001d3c:	f7ff f915 	bl	8000f6a <GPIO_WritePin>
    GPIO_WritePin(LED_NORMAL_PORT, LED_NORMAL_PIN_MASK, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d46:	4834      	ldr	r0, [pc, #208]	@ (8001e18 <main+0x158>)
 8001d48:	f7ff f90f 	bl	8000f6a <GPIO_WritePin>
    GPIO_WritePin(LED_OPEN_PORT, LED_OPEN_PIN_MASK, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d52:	4832      	ldr	r0, [pc, #200]	@ (8001e1c <main+0x15c>)
 8001d54:	f7ff f909 	bl	8000f6a <GPIO_WritePin>
    GPIO_WritePin(LED_CLOSE_PORT, LED_CLOSE_PIN_MASK, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2140      	movs	r1, #64	@ 0x40
 8001d5c:	482f      	ldr	r0, [pc, #188]	@ (8001e1c <main+0x15c>)
 8001d5e:	f7ff f904 	bl	8000f6a <GPIO_WritePin>

    // UARTProto_Init calls UART2_Init internally
    UARTProto_Init(main_labview_command_handler);
 8001d62:	482f      	ldr	r0, [pc, #188]	@ (8001e20 <main+0x160>)
 8001d64:	f7ff fd32 	bl	80017cc <UARTProto_Init>

    uint32_t last_sent_tick = GetTick();
 8001d68:	f7ff fa22 	bl	80011b0 <GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (1) {
        UARTProto_Process(); // Process incoming UART data and commands
 8001d6e:	f7ff fe01 	bl	8001974 <UARTProto_Process>

        if(UARTProto_CheckErrors()){
 8001d72:	f7ff fed3 	bl	8001b1c <UARTProto_CheckErrors>
        }

        // Periodically send a full system snapshot (every 2 seconds)
        if (GetTick() - last_sent_tick >= 2000) {
 8001d76:	f7ff fa1b 	bl	80011b0 <GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d84:	d343      	bcc.n	8001e0e <main+0x14e>
            last_sent_tick = GetTick();
 8001d86:	f7ff fa13 	bl	80011b0 <GetTick>
 8001d8a:	60f8      	str	r0, [r7, #12]

            ParsedFrame_t status_frame;
            status_frame.type = FRAME_TYPE_STM_TO_LABVIEW;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	713b      	strb	r3, [r7, #4]
            status_frame.id = FRAME_ID_STM_FULL_SNAPSHOT;
 8001d90:	2305      	movs	r3, #5
 8001d92:	717b      	strb	r3, [r7, #5]
            status_frame.length = 4; 
 8001d94:	2304      	movs	r3, #4
 8001d96:	72bb      	strb	r3, [r7, #10]
            status_frame.payload[0] = system_mode;  // Current system mode
 8001d98:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <main+0x164>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	71bb      	strb	r3, [r7, #6]
            status_frame.payload[1] = door_state;   // Current door state
 8001d9e:	4b22      	ldr	r3, [pc, #136]	@ (8001e28 <main+0x168>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
            status_frame.payload[2] = people_count; // Current people count
 8001da4:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <main+0x16c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	723b      	strb	r3, [r7, #8]
            status_frame.payload[3] = light_state;  // Current light state
 8001daa:	4b21      	ldr	r3, [pc, #132]	@ (8001e30 <main+0x170>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	727b      	strb	r3, [r7, #9]

            if(UARTProto_SendFrame(status_frame.type, status_frame.id, status_frame.payload, status_frame.length)){
 8001db0:	7938      	ldrb	r0, [r7, #4]
 8001db2:	7979      	ldrb	r1, [r7, #5]
 8001db4:	7abc      	ldrb	r4, [r7, #10]
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	1c9a      	adds	r2, r3, #2
 8001dba:	4623      	mov	r3, r4
 8001dbc:	f7ff fd76 	bl	80018ac <UARTProto_SendFrame>
            }

            // Cycle through door_state for testing snapshot (0-4)
            if (door_state < PAYLOAD_DOOR_ERROR) { // PAYLOAD_DOOR_ERROR is 0x04
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <main+0x168>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d806      	bhi.n	8001dd6 <main+0x116>
                door_state++;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <main+0x168>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <main+0x168>)
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e002      	b.n	8001ddc <main+0x11c>
            } else {
                door_state = PAYLOAD_DOOR_CLOSED; // Reset to 0x00
 8001dd6:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <main+0x168>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
            }

            if (people_count < 19) { // Max 19 to make it 0-19 cycle
 8001ddc:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <main+0x16c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b12      	cmp	r3, #18
 8001de2:	d806      	bhi.n	8001df2 <main+0x132>
                people_count++;
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <main+0x16c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <main+0x16c>)
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	e002      	b.n	8001df8 <main+0x138>
            } else {
                people_count = 0; 
 8001df2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <main+0x16c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
            }
            light_state = (light_state + 1) % 2;
 8001df8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <main+0x170>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	bfb8      	it	lt
 8001e06:	425b      	neglt	r3, r3
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <main+0x170>)
 8001e0c:	701a      	strb	r2, [r3, #0]
        }
        
        Delay_ms(10); // Small delay to reduce CPU load
 8001e0e:	200a      	movs	r0, #10
 8001e10:	f7ff f9b6 	bl	8001180 <Delay_ms>
        UARTProto_Process(); // Process incoming UART data and commands
 8001e14:	e7ab      	b.n	8001d6e <main+0xae>
 8001e16:	bf00      	nop
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	08001b5d 	.word	0x08001b5d
 8001e24:	2000035a 	.word	0x2000035a
 8001e28:	20000358 	.word	0x20000358
 8001e2c:	20000359 	.word	0x20000359
 8001e30:	2000035b 	.word	0x2000035b

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <NMI_Handler+0x4>

08001e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  return 1;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_kill>:

int _kill(int pid, int sig)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea0:	f000 fea2 	bl	8002be8 <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2216      	movs	r2, #22
 8001ea8:	601a      	str	r2, [r3, #0]
  return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_exit>:

void _exit (int status)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffe7 	bl	8001e96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <_exit+0x12>

08001ecc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	e00a      	b.n	8001ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ede:	f3af 8000 	nop.w
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	60ba      	str	r2, [r7, #8]
 8001eea:	b2ca      	uxtb	r2, r1
 8001eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dbf0      	blt.n	8001ede <_read+0x12>
  }

  return len;
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e009      	b.n	8001f2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	60ba      	str	r2, [r7, #8]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbf1      	blt.n	8001f18 <_write+0x12>
  }
  return len;
 8001f34:	687b      	ldr	r3, [r7, #4]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_close>:

int _close(int file)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f66:	605a      	str	r2, [r3, #4]
  return 0;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_isatty>:

int _isatty(int file)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb0:	4a14      	ldr	r2, [pc, #80]	@ (8002004 <_sbrk+0x5c>)
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <_sbrk+0x60>)
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fbc:	4b13      	ldr	r3, [pc, #76]	@ (800200c <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	@ (800200c <_sbrk+0x64>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <_sbrk+0x68>)
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fca:	4b10      	ldr	r3, [pc, #64]	@ (800200c <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d207      	bcs.n	8001fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd8:	f000 fe06 	bl	8002be8 <__errno>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	220c      	movs	r2, #12
 8001fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	e009      	b.n	8001ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	@ (800200c <_sbrk+0x64>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fee:	4b07      	ldr	r3, [pc, #28]	@ (800200c <_sbrk+0x64>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4a05      	ldr	r2, [pc, #20]	@ (800200c <_sbrk+0x64>)
 8001ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20018000 	.word	0x20018000
 8002008:	00000400 	.word	0x00000400
 800200c:	2000035c 	.word	0x2000035c
 8002010:	200004b0 	.word	0x200004b0

08002014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <SystemInit+0x20>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201e:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <SystemInit+0x20>)
 8002020:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002024:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002038:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002070 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800203c:	f7ff ffea 	bl	8002014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002040:	480c      	ldr	r0, [pc, #48]	@ (8002074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002042:	490d      	ldr	r1, [pc, #52]	@ (8002078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002044:	4a0d      	ldr	r2, [pc, #52]	@ (800207c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002058:	4c0a      	ldr	r4, [pc, #40]	@ (8002084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002066:	f000 fdc5 	bl	8002bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206a:	f7ff fe29 	bl	8001cc0 <main>
  bx  lr    
 800206e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002070:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002078:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 800207c:	08004d20 	.word	0x08004d20
  ldr r2, =_sbss
 8002080:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8002084:	200004ac 	.word	0x200004ac

08002088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002088:	e7fe      	b.n	8002088 <ADC_IRQHandler>

0800208a <__cvt>:
 800208a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800208e:	ec57 6b10 	vmov	r6, r7, d0
 8002092:	2f00      	cmp	r7, #0
 8002094:	460c      	mov	r4, r1
 8002096:	4619      	mov	r1, r3
 8002098:	463b      	mov	r3, r7
 800209a:	bfbb      	ittet	lt
 800209c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80020a0:	461f      	movlt	r7, r3
 80020a2:	2300      	movge	r3, #0
 80020a4:	232d      	movlt	r3, #45	@ 0x2d
 80020a6:	700b      	strb	r3, [r1, #0]
 80020a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80020aa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80020ae:	4691      	mov	r9, r2
 80020b0:	f023 0820 	bic.w	r8, r3, #32
 80020b4:	bfbc      	itt	lt
 80020b6:	4632      	movlt	r2, r6
 80020b8:	4616      	movlt	r6, r2
 80020ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80020be:	d005      	beq.n	80020cc <__cvt+0x42>
 80020c0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80020c4:	d100      	bne.n	80020c8 <__cvt+0x3e>
 80020c6:	3401      	adds	r4, #1
 80020c8:	2102      	movs	r1, #2
 80020ca:	e000      	b.n	80020ce <__cvt+0x44>
 80020cc:	2103      	movs	r1, #3
 80020ce:	ab03      	add	r3, sp, #12
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	ab02      	add	r3, sp, #8
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	ec47 6b10 	vmov	d0, r6, r7
 80020da:	4653      	mov	r3, sl
 80020dc:	4622      	mov	r2, r4
 80020de:	f000 fe47 	bl	8002d70 <_dtoa_r>
 80020e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80020e6:	4605      	mov	r5, r0
 80020e8:	d119      	bne.n	800211e <__cvt+0x94>
 80020ea:	f019 0f01 	tst.w	r9, #1
 80020ee:	d00e      	beq.n	800210e <__cvt+0x84>
 80020f0:	eb00 0904 	add.w	r9, r0, r4
 80020f4:	2200      	movs	r2, #0
 80020f6:	2300      	movs	r3, #0
 80020f8:	4630      	mov	r0, r6
 80020fa:	4639      	mov	r1, r7
 80020fc:	f7fe fcec 	bl	8000ad8 <__aeabi_dcmpeq>
 8002100:	b108      	cbz	r0, 8002106 <__cvt+0x7c>
 8002102:	f8cd 900c 	str.w	r9, [sp, #12]
 8002106:	2230      	movs	r2, #48	@ 0x30
 8002108:	9b03      	ldr	r3, [sp, #12]
 800210a:	454b      	cmp	r3, r9
 800210c:	d31e      	bcc.n	800214c <__cvt+0xc2>
 800210e:	9b03      	ldr	r3, [sp, #12]
 8002110:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002112:	1b5b      	subs	r3, r3, r5
 8002114:	4628      	mov	r0, r5
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	b004      	add	sp, #16
 800211a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800211e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002122:	eb00 0904 	add.w	r9, r0, r4
 8002126:	d1e5      	bne.n	80020f4 <__cvt+0x6a>
 8002128:	7803      	ldrb	r3, [r0, #0]
 800212a:	2b30      	cmp	r3, #48	@ 0x30
 800212c:	d10a      	bne.n	8002144 <__cvt+0xba>
 800212e:	2200      	movs	r2, #0
 8002130:	2300      	movs	r3, #0
 8002132:	4630      	mov	r0, r6
 8002134:	4639      	mov	r1, r7
 8002136:	f7fe fccf 	bl	8000ad8 <__aeabi_dcmpeq>
 800213a:	b918      	cbnz	r0, 8002144 <__cvt+0xba>
 800213c:	f1c4 0401 	rsb	r4, r4, #1
 8002140:	f8ca 4000 	str.w	r4, [sl]
 8002144:	f8da 3000 	ldr.w	r3, [sl]
 8002148:	4499      	add	r9, r3
 800214a:	e7d3      	b.n	80020f4 <__cvt+0x6a>
 800214c:	1c59      	adds	r1, r3, #1
 800214e:	9103      	str	r1, [sp, #12]
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e7d9      	b.n	8002108 <__cvt+0x7e>

08002154 <__exponent>:
 8002154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002156:	2900      	cmp	r1, #0
 8002158:	bfba      	itte	lt
 800215a:	4249      	neglt	r1, r1
 800215c:	232d      	movlt	r3, #45	@ 0x2d
 800215e:	232b      	movge	r3, #43	@ 0x2b
 8002160:	2909      	cmp	r1, #9
 8002162:	7002      	strb	r2, [r0, #0]
 8002164:	7043      	strb	r3, [r0, #1]
 8002166:	dd29      	ble.n	80021bc <__exponent+0x68>
 8002168:	f10d 0307 	add.w	r3, sp, #7
 800216c:	461d      	mov	r5, r3
 800216e:	270a      	movs	r7, #10
 8002170:	461a      	mov	r2, r3
 8002172:	fbb1 f6f7 	udiv	r6, r1, r7
 8002176:	fb07 1416 	mls	r4, r7, r6, r1
 800217a:	3430      	adds	r4, #48	@ 0x30
 800217c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002180:	460c      	mov	r4, r1
 8002182:	2c63      	cmp	r4, #99	@ 0x63
 8002184:	f103 33ff 	add.w	r3, r3, #4294967295
 8002188:	4631      	mov	r1, r6
 800218a:	dcf1      	bgt.n	8002170 <__exponent+0x1c>
 800218c:	3130      	adds	r1, #48	@ 0x30
 800218e:	1e94      	subs	r4, r2, #2
 8002190:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002194:	1c41      	adds	r1, r0, #1
 8002196:	4623      	mov	r3, r4
 8002198:	42ab      	cmp	r3, r5
 800219a:	d30a      	bcc.n	80021b2 <__exponent+0x5e>
 800219c:	f10d 0309 	add.w	r3, sp, #9
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	42ac      	cmp	r4, r5
 80021a4:	bf88      	it	hi
 80021a6:	2300      	movhi	r3, #0
 80021a8:	3302      	adds	r3, #2
 80021aa:	4403      	add	r3, r0
 80021ac:	1a18      	subs	r0, r3, r0
 80021ae:	b003      	add	sp, #12
 80021b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80021b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80021ba:	e7ed      	b.n	8002198 <__exponent+0x44>
 80021bc:	2330      	movs	r3, #48	@ 0x30
 80021be:	3130      	adds	r1, #48	@ 0x30
 80021c0:	7083      	strb	r3, [r0, #2]
 80021c2:	70c1      	strb	r1, [r0, #3]
 80021c4:	1d03      	adds	r3, r0, #4
 80021c6:	e7f1      	b.n	80021ac <__exponent+0x58>

080021c8 <_printf_float>:
 80021c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021cc:	b08d      	sub	sp, #52	@ 0x34
 80021ce:	460c      	mov	r4, r1
 80021d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80021d4:	4616      	mov	r6, r2
 80021d6:	461f      	mov	r7, r3
 80021d8:	4605      	mov	r5, r0
 80021da:	f000 fcbb 	bl	8002b54 <_localeconv_r>
 80021de:	6803      	ldr	r3, [r0, #0]
 80021e0:	9304      	str	r3, [sp, #16]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f84c 	bl	8000280 <strlen>
 80021e8:	2300      	movs	r3, #0
 80021ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80021ec:	f8d8 3000 	ldr.w	r3, [r8]
 80021f0:	9005      	str	r0, [sp, #20]
 80021f2:	3307      	adds	r3, #7
 80021f4:	f023 0307 	bic.w	r3, r3, #7
 80021f8:	f103 0208 	add.w	r2, r3, #8
 80021fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002200:	f8d4 b000 	ldr.w	fp, [r4]
 8002204:	f8c8 2000 	str.w	r2, [r8]
 8002208:	e9d3 8900 	ldrd	r8, r9, [r3]
 800220c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002210:	9307      	str	r3, [sp, #28]
 8002212:	f8cd 8018 	str.w	r8, [sp, #24]
 8002216:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800221a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800221e:	4b9c      	ldr	r3, [pc, #624]	@ (8002490 <_printf_float+0x2c8>)
 8002220:	f04f 32ff 	mov.w	r2, #4294967295
 8002224:	f7fe fc8a 	bl	8000b3c <__aeabi_dcmpun>
 8002228:	bb70      	cbnz	r0, 8002288 <_printf_float+0xc0>
 800222a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800222e:	4b98      	ldr	r3, [pc, #608]	@ (8002490 <_printf_float+0x2c8>)
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	f7fe fc64 	bl	8000b00 <__aeabi_dcmple>
 8002238:	bb30      	cbnz	r0, 8002288 <_printf_float+0xc0>
 800223a:	2200      	movs	r2, #0
 800223c:	2300      	movs	r3, #0
 800223e:	4640      	mov	r0, r8
 8002240:	4649      	mov	r1, r9
 8002242:	f7fe fc53 	bl	8000aec <__aeabi_dcmplt>
 8002246:	b110      	cbz	r0, 800224e <_printf_float+0x86>
 8002248:	232d      	movs	r3, #45	@ 0x2d
 800224a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800224e:	4a91      	ldr	r2, [pc, #580]	@ (8002494 <_printf_float+0x2cc>)
 8002250:	4b91      	ldr	r3, [pc, #580]	@ (8002498 <_printf_float+0x2d0>)
 8002252:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002256:	bf94      	ite	ls
 8002258:	4690      	movls	r8, r2
 800225a:	4698      	movhi	r8, r3
 800225c:	2303      	movs	r3, #3
 800225e:	6123      	str	r3, [r4, #16]
 8002260:	f02b 0304 	bic.w	r3, fp, #4
 8002264:	6023      	str	r3, [r4, #0]
 8002266:	f04f 0900 	mov.w	r9, #0
 800226a:	9700      	str	r7, [sp, #0]
 800226c:	4633      	mov	r3, r6
 800226e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002270:	4621      	mov	r1, r4
 8002272:	4628      	mov	r0, r5
 8002274:	f000 f9d2 	bl	800261c <_printf_common>
 8002278:	3001      	adds	r0, #1
 800227a:	f040 808d 	bne.w	8002398 <_printf_float+0x1d0>
 800227e:	f04f 30ff 	mov.w	r0, #4294967295
 8002282:	b00d      	add	sp, #52	@ 0x34
 8002284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002288:	4642      	mov	r2, r8
 800228a:	464b      	mov	r3, r9
 800228c:	4640      	mov	r0, r8
 800228e:	4649      	mov	r1, r9
 8002290:	f7fe fc54 	bl	8000b3c <__aeabi_dcmpun>
 8002294:	b140      	cbz	r0, 80022a8 <_printf_float+0xe0>
 8002296:	464b      	mov	r3, r9
 8002298:	2b00      	cmp	r3, #0
 800229a:	bfbc      	itt	lt
 800229c:	232d      	movlt	r3, #45	@ 0x2d
 800229e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80022a2:	4a7e      	ldr	r2, [pc, #504]	@ (800249c <_printf_float+0x2d4>)
 80022a4:	4b7e      	ldr	r3, [pc, #504]	@ (80024a0 <_printf_float+0x2d8>)
 80022a6:	e7d4      	b.n	8002252 <_printf_float+0x8a>
 80022a8:	6863      	ldr	r3, [r4, #4]
 80022aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80022ae:	9206      	str	r2, [sp, #24]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	d13b      	bne.n	800232c <_printf_float+0x164>
 80022b4:	2306      	movs	r3, #6
 80022b6:	6063      	str	r3, [r4, #4]
 80022b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80022bc:	2300      	movs	r3, #0
 80022be:	6022      	str	r2, [r4, #0]
 80022c0:	9303      	str	r3, [sp, #12]
 80022c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80022c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80022c8:	ab09      	add	r3, sp, #36	@ 0x24
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	6861      	ldr	r1, [r4, #4]
 80022ce:	ec49 8b10 	vmov	d0, r8, r9
 80022d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80022d6:	4628      	mov	r0, r5
 80022d8:	f7ff fed7 	bl	800208a <__cvt>
 80022dc:	9b06      	ldr	r3, [sp, #24]
 80022de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80022e0:	2b47      	cmp	r3, #71	@ 0x47
 80022e2:	4680      	mov	r8, r0
 80022e4:	d129      	bne.n	800233a <_printf_float+0x172>
 80022e6:	1cc8      	adds	r0, r1, #3
 80022e8:	db02      	blt.n	80022f0 <_printf_float+0x128>
 80022ea:	6863      	ldr	r3, [r4, #4]
 80022ec:	4299      	cmp	r1, r3
 80022ee:	dd41      	ble.n	8002374 <_printf_float+0x1ac>
 80022f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80022f4:	fa5f fa8a 	uxtb.w	sl, sl
 80022f8:	3901      	subs	r1, #1
 80022fa:	4652      	mov	r2, sl
 80022fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002300:	9109      	str	r1, [sp, #36]	@ 0x24
 8002302:	f7ff ff27 	bl	8002154 <__exponent>
 8002306:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002308:	1813      	adds	r3, r2, r0
 800230a:	2a01      	cmp	r2, #1
 800230c:	4681      	mov	r9, r0
 800230e:	6123      	str	r3, [r4, #16]
 8002310:	dc02      	bgt.n	8002318 <_printf_float+0x150>
 8002312:	6822      	ldr	r2, [r4, #0]
 8002314:	07d2      	lsls	r2, r2, #31
 8002316:	d501      	bpl.n	800231c <_printf_float+0x154>
 8002318:	3301      	adds	r3, #1
 800231a:	6123      	str	r3, [r4, #16]
 800231c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0a2      	beq.n	800226a <_printf_float+0xa2>
 8002324:	232d      	movs	r3, #45	@ 0x2d
 8002326:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800232a:	e79e      	b.n	800226a <_printf_float+0xa2>
 800232c:	9a06      	ldr	r2, [sp, #24]
 800232e:	2a47      	cmp	r2, #71	@ 0x47
 8002330:	d1c2      	bne.n	80022b8 <_printf_float+0xf0>
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1c0      	bne.n	80022b8 <_printf_float+0xf0>
 8002336:	2301      	movs	r3, #1
 8002338:	e7bd      	b.n	80022b6 <_printf_float+0xee>
 800233a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800233e:	d9db      	bls.n	80022f8 <_printf_float+0x130>
 8002340:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002344:	d118      	bne.n	8002378 <_printf_float+0x1b0>
 8002346:	2900      	cmp	r1, #0
 8002348:	6863      	ldr	r3, [r4, #4]
 800234a:	dd0b      	ble.n	8002364 <_printf_float+0x19c>
 800234c:	6121      	str	r1, [r4, #16]
 800234e:	b913      	cbnz	r3, 8002356 <_printf_float+0x18e>
 8002350:	6822      	ldr	r2, [r4, #0]
 8002352:	07d0      	lsls	r0, r2, #31
 8002354:	d502      	bpl.n	800235c <_printf_float+0x194>
 8002356:	3301      	adds	r3, #1
 8002358:	440b      	add	r3, r1
 800235a:	6123      	str	r3, [r4, #16]
 800235c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800235e:	f04f 0900 	mov.w	r9, #0
 8002362:	e7db      	b.n	800231c <_printf_float+0x154>
 8002364:	b913      	cbnz	r3, 800236c <_printf_float+0x1a4>
 8002366:	6822      	ldr	r2, [r4, #0]
 8002368:	07d2      	lsls	r2, r2, #31
 800236a:	d501      	bpl.n	8002370 <_printf_float+0x1a8>
 800236c:	3302      	adds	r3, #2
 800236e:	e7f4      	b.n	800235a <_printf_float+0x192>
 8002370:	2301      	movs	r3, #1
 8002372:	e7f2      	b.n	800235a <_printf_float+0x192>
 8002374:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002378:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800237a:	4299      	cmp	r1, r3
 800237c:	db05      	blt.n	800238a <_printf_float+0x1c2>
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	6121      	str	r1, [r4, #16]
 8002382:	07d8      	lsls	r0, r3, #31
 8002384:	d5ea      	bpl.n	800235c <_printf_float+0x194>
 8002386:	1c4b      	adds	r3, r1, #1
 8002388:	e7e7      	b.n	800235a <_printf_float+0x192>
 800238a:	2900      	cmp	r1, #0
 800238c:	bfd4      	ite	le
 800238e:	f1c1 0202 	rsble	r2, r1, #2
 8002392:	2201      	movgt	r2, #1
 8002394:	4413      	add	r3, r2
 8002396:	e7e0      	b.n	800235a <_printf_float+0x192>
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	055a      	lsls	r2, r3, #21
 800239c:	d407      	bmi.n	80023ae <_printf_float+0x1e6>
 800239e:	6923      	ldr	r3, [r4, #16]
 80023a0:	4642      	mov	r2, r8
 80023a2:	4631      	mov	r1, r6
 80023a4:	4628      	mov	r0, r5
 80023a6:	47b8      	blx	r7
 80023a8:	3001      	adds	r0, #1
 80023aa:	d12b      	bne.n	8002404 <_printf_float+0x23c>
 80023ac:	e767      	b.n	800227e <_printf_float+0xb6>
 80023ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80023b2:	f240 80dd 	bls.w	8002570 <_printf_float+0x3a8>
 80023b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80023ba:	2200      	movs	r2, #0
 80023bc:	2300      	movs	r3, #0
 80023be:	f7fe fb8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d033      	beq.n	800242e <_printf_float+0x266>
 80023c6:	4a37      	ldr	r2, [pc, #220]	@ (80024a4 <_printf_float+0x2dc>)
 80023c8:	2301      	movs	r3, #1
 80023ca:	4631      	mov	r1, r6
 80023cc:	4628      	mov	r0, r5
 80023ce:	47b8      	blx	r7
 80023d0:	3001      	adds	r0, #1
 80023d2:	f43f af54 	beq.w	800227e <_printf_float+0xb6>
 80023d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80023da:	4543      	cmp	r3, r8
 80023dc:	db02      	blt.n	80023e4 <_printf_float+0x21c>
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	07d8      	lsls	r0, r3, #31
 80023e2:	d50f      	bpl.n	8002404 <_printf_float+0x23c>
 80023e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80023e8:	4631      	mov	r1, r6
 80023ea:	4628      	mov	r0, r5
 80023ec:	47b8      	blx	r7
 80023ee:	3001      	adds	r0, #1
 80023f0:	f43f af45 	beq.w	800227e <_printf_float+0xb6>
 80023f4:	f04f 0900 	mov.w	r9, #0
 80023f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80023fc:	f104 0a1a 	add.w	sl, r4, #26
 8002400:	45c8      	cmp	r8, r9
 8002402:	dc09      	bgt.n	8002418 <_printf_float+0x250>
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	079b      	lsls	r3, r3, #30
 8002408:	f100 8103 	bmi.w	8002612 <_printf_float+0x44a>
 800240c:	68e0      	ldr	r0, [r4, #12]
 800240e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002410:	4298      	cmp	r0, r3
 8002412:	bfb8      	it	lt
 8002414:	4618      	movlt	r0, r3
 8002416:	e734      	b.n	8002282 <_printf_float+0xba>
 8002418:	2301      	movs	r3, #1
 800241a:	4652      	mov	r2, sl
 800241c:	4631      	mov	r1, r6
 800241e:	4628      	mov	r0, r5
 8002420:	47b8      	blx	r7
 8002422:	3001      	adds	r0, #1
 8002424:	f43f af2b 	beq.w	800227e <_printf_float+0xb6>
 8002428:	f109 0901 	add.w	r9, r9, #1
 800242c:	e7e8      	b.n	8002400 <_printf_float+0x238>
 800242e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002430:	2b00      	cmp	r3, #0
 8002432:	dc39      	bgt.n	80024a8 <_printf_float+0x2e0>
 8002434:	4a1b      	ldr	r2, [pc, #108]	@ (80024a4 <_printf_float+0x2dc>)
 8002436:	2301      	movs	r3, #1
 8002438:	4631      	mov	r1, r6
 800243a:	4628      	mov	r0, r5
 800243c:	47b8      	blx	r7
 800243e:	3001      	adds	r0, #1
 8002440:	f43f af1d 	beq.w	800227e <_printf_float+0xb6>
 8002444:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002448:	ea59 0303 	orrs.w	r3, r9, r3
 800244c:	d102      	bne.n	8002454 <_printf_float+0x28c>
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	07d9      	lsls	r1, r3, #31
 8002452:	d5d7      	bpl.n	8002404 <_printf_float+0x23c>
 8002454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002458:	4631      	mov	r1, r6
 800245a:	4628      	mov	r0, r5
 800245c:	47b8      	blx	r7
 800245e:	3001      	adds	r0, #1
 8002460:	f43f af0d 	beq.w	800227e <_printf_float+0xb6>
 8002464:	f04f 0a00 	mov.w	sl, #0
 8002468:	f104 0b1a 	add.w	fp, r4, #26
 800246c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800246e:	425b      	negs	r3, r3
 8002470:	4553      	cmp	r3, sl
 8002472:	dc01      	bgt.n	8002478 <_printf_float+0x2b0>
 8002474:	464b      	mov	r3, r9
 8002476:	e793      	b.n	80023a0 <_printf_float+0x1d8>
 8002478:	2301      	movs	r3, #1
 800247a:	465a      	mov	r2, fp
 800247c:	4631      	mov	r1, r6
 800247e:	4628      	mov	r0, r5
 8002480:	47b8      	blx	r7
 8002482:	3001      	adds	r0, #1
 8002484:	f43f aefb 	beq.w	800227e <_printf_float+0xb6>
 8002488:	f10a 0a01 	add.w	sl, sl, #1
 800248c:	e7ee      	b.n	800246c <_printf_float+0x2a4>
 800248e:	bf00      	nop
 8002490:	7fefffff 	.word	0x7fefffff
 8002494:	080049a0 	.word	0x080049a0
 8002498:	080049a4 	.word	0x080049a4
 800249c:	080049a8 	.word	0x080049a8
 80024a0:	080049ac 	.word	0x080049ac
 80024a4:	080049b0 	.word	0x080049b0
 80024a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80024aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80024ae:	4553      	cmp	r3, sl
 80024b0:	bfa8      	it	ge
 80024b2:	4653      	movge	r3, sl
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	4699      	mov	r9, r3
 80024b8:	dc36      	bgt.n	8002528 <_printf_float+0x360>
 80024ba:	f04f 0b00 	mov.w	fp, #0
 80024be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80024c2:	f104 021a 	add.w	r2, r4, #26
 80024c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80024c8:	9306      	str	r3, [sp, #24]
 80024ca:	eba3 0309 	sub.w	r3, r3, r9
 80024ce:	455b      	cmp	r3, fp
 80024d0:	dc31      	bgt.n	8002536 <_printf_float+0x36e>
 80024d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024d4:	459a      	cmp	sl, r3
 80024d6:	dc3a      	bgt.n	800254e <_printf_float+0x386>
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	07da      	lsls	r2, r3, #31
 80024dc:	d437      	bmi.n	800254e <_printf_float+0x386>
 80024de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024e0:	ebaa 0903 	sub.w	r9, sl, r3
 80024e4:	9b06      	ldr	r3, [sp, #24]
 80024e6:	ebaa 0303 	sub.w	r3, sl, r3
 80024ea:	4599      	cmp	r9, r3
 80024ec:	bfa8      	it	ge
 80024ee:	4699      	movge	r9, r3
 80024f0:	f1b9 0f00 	cmp.w	r9, #0
 80024f4:	dc33      	bgt.n	800255e <_printf_float+0x396>
 80024f6:	f04f 0800 	mov.w	r8, #0
 80024fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80024fe:	f104 0b1a 	add.w	fp, r4, #26
 8002502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002504:	ebaa 0303 	sub.w	r3, sl, r3
 8002508:	eba3 0309 	sub.w	r3, r3, r9
 800250c:	4543      	cmp	r3, r8
 800250e:	f77f af79 	ble.w	8002404 <_printf_float+0x23c>
 8002512:	2301      	movs	r3, #1
 8002514:	465a      	mov	r2, fp
 8002516:	4631      	mov	r1, r6
 8002518:	4628      	mov	r0, r5
 800251a:	47b8      	blx	r7
 800251c:	3001      	adds	r0, #1
 800251e:	f43f aeae 	beq.w	800227e <_printf_float+0xb6>
 8002522:	f108 0801 	add.w	r8, r8, #1
 8002526:	e7ec      	b.n	8002502 <_printf_float+0x33a>
 8002528:	4642      	mov	r2, r8
 800252a:	4631      	mov	r1, r6
 800252c:	4628      	mov	r0, r5
 800252e:	47b8      	blx	r7
 8002530:	3001      	adds	r0, #1
 8002532:	d1c2      	bne.n	80024ba <_printf_float+0x2f2>
 8002534:	e6a3      	b.n	800227e <_printf_float+0xb6>
 8002536:	2301      	movs	r3, #1
 8002538:	4631      	mov	r1, r6
 800253a:	4628      	mov	r0, r5
 800253c:	9206      	str	r2, [sp, #24]
 800253e:	47b8      	blx	r7
 8002540:	3001      	adds	r0, #1
 8002542:	f43f ae9c 	beq.w	800227e <_printf_float+0xb6>
 8002546:	9a06      	ldr	r2, [sp, #24]
 8002548:	f10b 0b01 	add.w	fp, fp, #1
 800254c:	e7bb      	b.n	80024c6 <_printf_float+0x2fe>
 800254e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002552:	4631      	mov	r1, r6
 8002554:	4628      	mov	r0, r5
 8002556:	47b8      	blx	r7
 8002558:	3001      	adds	r0, #1
 800255a:	d1c0      	bne.n	80024de <_printf_float+0x316>
 800255c:	e68f      	b.n	800227e <_printf_float+0xb6>
 800255e:	9a06      	ldr	r2, [sp, #24]
 8002560:	464b      	mov	r3, r9
 8002562:	4442      	add	r2, r8
 8002564:	4631      	mov	r1, r6
 8002566:	4628      	mov	r0, r5
 8002568:	47b8      	blx	r7
 800256a:	3001      	adds	r0, #1
 800256c:	d1c3      	bne.n	80024f6 <_printf_float+0x32e>
 800256e:	e686      	b.n	800227e <_printf_float+0xb6>
 8002570:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002574:	f1ba 0f01 	cmp.w	sl, #1
 8002578:	dc01      	bgt.n	800257e <_printf_float+0x3b6>
 800257a:	07db      	lsls	r3, r3, #31
 800257c:	d536      	bpl.n	80025ec <_printf_float+0x424>
 800257e:	2301      	movs	r3, #1
 8002580:	4642      	mov	r2, r8
 8002582:	4631      	mov	r1, r6
 8002584:	4628      	mov	r0, r5
 8002586:	47b8      	blx	r7
 8002588:	3001      	adds	r0, #1
 800258a:	f43f ae78 	beq.w	800227e <_printf_float+0xb6>
 800258e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002592:	4631      	mov	r1, r6
 8002594:	4628      	mov	r0, r5
 8002596:	47b8      	blx	r7
 8002598:	3001      	adds	r0, #1
 800259a:	f43f ae70 	beq.w	800227e <_printf_float+0xb6>
 800259e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80025a2:	2200      	movs	r2, #0
 80025a4:	2300      	movs	r3, #0
 80025a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80025aa:	f7fe fa95 	bl	8000ad8 <__aeabi_dcmpeq>
 80025ae:	b9c0      	cbnz	r0, 80025e2 <_printf_float+0x41a>
 80025b0:	4653      	mov	r3, sl
 80025b2:	f108 0201 	add.w	r2, r8, #1
 80025b6:	4631      	mov	r1, r6
 80025b8:	4628      	mov	r0, r5
 80025ba:	47b8      	blx	r7
 80025bc:	3001      	adds	r0, #1
 80025be:	d10c      	bne.n	80025da <_printf_float+0x412>
 80025c0:	e65d      	b.n	800227e <_printf_float+0xb6>
 80025c2:	2301      	movs	r3, #1
 80025c4:	465a      	mov	r2, fp
 80025c6:	4631      	mov	r1, r6
 80025c8:	4628      	mov	r0, r5
 80025ca:	47b8      	blx	r7
 80025cc:	3001      	adds	r0, #1
 80025ce:	f43f ae56 	beq.w	800227e <_printf_float+0xb6>
 80025d2:	f108 0801 	add.w	r8, r8, #1
 80025d6:	45d0      	cmp	r8, sl
 80025d8:	dbf3      	blt.n	80025c2 <_printf_float+0x3fa>
 80025da:	464b      	mov	r3, r9
 80025dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80025e0:	e6df      	b.n	80023a2 <_printf_float+0x1da>
 80025e2:	f04f 0800 	mov.w	r8, #0
 80025e6:	f104 0b1a 	add.w	fp, r4, #26
 80025ea:	e7f4      	b.n	80025d6 <_printf_float+0x40e>
 80025ec:	2301      	movs	r3, #1
 80025ee:	4642      	mov	r2, r8
 80025f0:	e7e1      	b.n	80025b6 <_printf_float+0x3ee>
 80025f2:	2301      	movs	r3, #1
 80025f4:	464a      	mov	r2, r9
 80025f6:	4631      	mov	r1, r6
 80025f8:	4628      	mov	r0, r5
 80025fa:	47b8      	blx	r7
 80025fc:	3001      	adds	r0, #1
 80025fe:	f43f ae3e 	beq.w	800227e <_printf_float+0xb6>
 8002602:	f108 0801 	add.w	r8, r8, #1
 8002606:	68e3      	ldr	r3, [r4, #12]
 8002608:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800260a:	1a5b      	subs	r3, r3, r1
 800260c:	4543      	cmp	r3, r8
 800260e:	dcf0      	bgt.n	80025f2 <_printf_float+0x42a>
 8002610:	e6fc      	b.n	800240c <_printf_float+0x244>
 8002612:	f04f 0800 	mov.w	r8, #0
 8002616:	f104 0919 	add.w	r9, r4, #25
 800261a:	e7f4      	b.n	8002606 <_printf_float+0x43e>

0800261c <_printf_common>:
 800261c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002620:	4616      	mov	r6, r2
 8002622:	4698      	mov	r8, r3
 8002624:	688a      	ldr	r2, [r1, #8]
 8002626:	690b      	ldr	r3, [r1, #16]
 8002628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800262c:	4293      	cmp	r3, r2
 800262e:	bfb8      	it	lt
 8002630:	4613      	movlt	r3, r2
 8002632:	6033      	str	r3, [r6, #0]
 8002634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002638:	4607      	mov	r7, r0
 800263a:	460c      	mov	r4, r1
 800263c:	b10a      	cbz	r2, 8002642 <_printf_common+0x26>
 800263e:	3301      	adds	r3, #1
 8002640:	6033      	str	r3, [r6, #0]
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	0699      	lsls	r1, r3, #26
 8002646:	bf42      	ittt	mi
 8002648:	6833      	ldrmi	r3, [r6, #0]
 800264a:	3302      	addmi	r3, #2
 800264c:	6033      	strmi	r3, [r6, #0]
 800264e:	6825      	ldr	r5, [r4, #0]
 8002650:	f015 0506 	ands.w	r5, r5, #6
 8002654:	d106      	bne.n	8002664 <_printf_common+0x48>
 8002656:	f104 0a19 	add.w	sl, r4, #25
 800265a:	68e3      	ldr	r3, [r4, #12]
 800265c:	6832      	ldr	r2, [r6, #0]
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	42ab      	cmp	r3, r5
 8002662:	dc26      	bgt.n	80026b2 <_printf_common+0x96>
 8002664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002668:	6822      	ldr	r2, [r4, #0]
 800266a:	3b00      	subs	r3, #0
 800266c:	bf18      	it	ne
 800266e:	2301      	movne	r3, #1
 8002670:	0692      	lsls	r2, r2, #26
 8002672:	d42b      	bmi.n	80026cc <_printf_common+0xb0>
 8002674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002678:	4641      	mov	r1, r8
 800267a:	4638      	mov	r0, r7
 800267c:	47c8      	blx	r9
 800267e:	3001      	adds	r0, #1
 8002680:	d01e      	beq.n	80026c0 <_printf_common+0xa4>
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	6922      	ldr	r2, [r4, #16]
 8002686:	f003 0306 	and.w	r3, r3, #6
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf02      	ittt	eq
 800268e:	68e5      	ldreq	r5, [r4, #12]
 8002690:	6833      	ldreq	r3, [r6, #0]
 8002692:	1aed      	subeq	r5, r5, r3
 8002694:	68a3      	ldr	r3, [r4, #8]
 8002696:	bf0c      	ite	eq
 8002698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800269c:	2500      	movne	r5, #0
 800269e:	4293      	cmp	r3, r2
 80026a0:	bfc4      	itt	gt
 80026a2:	1a9b      	subgt	r3, r3, r2
 80026a4:	18ed      	addgt	r5, r5, r3
 80026a6:	2600      	movs	r6, #0
 80026a8:	341a      	adds	r4, #26
 80026aa:	42b5      	cmp	r5, r6
 80026ac:	d11a      	bne.n	80026e4 <_printf_common+0xc8>
 80026ae:	2000      	movs	r0, #0
 80026b0:	e008      	b.n	80026c4 <_printf_common+0xa8>
 80026b2:	2301      	movs	r3, #1
 80026b4:	4652      	mov	r2, sl
 80026b6:	4641      	mov	r1, r8
 80026b8:	4638      	mov	r0, r7
 80026ba:	47c8      	blx	r9
 80026bc:	3001      	adds	r0, #1
 80026be:	d103      	bne.n	80026c8 <_printf_common+0xac>
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c8:	3501      	adds	r5, #1
 80026ca:	e7c6      	b.n	800265a <_printf_common+0x3e>
 80026cc:	18e1      	adds	r1, r4, r3
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	2030      	movs	r0, #48	@ 0x30
 80026d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80026d6:	4422      	add	r2, r4
 80026d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80026dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80026e0:	3302      	adds	r3, #2
 80026e2:	e7c7      	b.n	8002674 <_printf_common+0x58>
 80026e4:	2301      	movs	r3, #1
 80026e6:	4622      	mov	r2, r4
 80026e8:	4641      	mov	r1, r8
 80026ea:	4638      	mov	r0, r7
 80026ec:	47c8      	blx	r9
 80026ee:	3001      	adds	r0, #1
 80026f0:	d0e6      	beq.n	80026c0 <_printf_common+0xa4>
 80026f2:	3601      	adds	r6, #1
 80026f4:	e7d9      	b.n	80026aa <_printf_common+0x8e>
	...

080026f8 <_printf_i>:
 80026f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026fc:	7e0f      	ldrb	r7, [r1, #24]
 80026fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002700:	2f78      	cmp	r7, #120	@ 0x78
 8002702:	4691      	mov	r9, r2
 8002704:	4680      	mov	r8, r0
 8002706:	460c      	mov	r4, r1
 8002708:	469a      	mov	sl, r3
 800270a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800270e:	d807      	bhi.n	8002720 <_printf_i+0x28>
 8002710:	2f62      	cmp	r7, #98	@ 0x62
 8002712:	d80a      	bhi.n	800272a <_printf_i+0x32>
 8002714:	2f00      	cmp	r7, #0
 8002716:	f000 80d2 	beq.w	80028be <_printf_i+0x1c6>
 800271a:	2f58      	cmp	r7, #88	@ 0x58
 800271c:	f000 80b9 	beq.w	8002892 <_printf_i+0x19a>
 8002720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002724:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002728:	e03a      	b.n	80027a0 <_printf_i+0xa8>
 800272a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800272e:	2b15      	cmp	r3, #21
 8002730:	d8f6      	bhi.n	8002720 <_printf_i+0x28>
 8002732:	a101      	add	r1, pc, #4	@ (adr r1, 8002738 <_printf_i+0x40>)
 8002734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002738:	08002791 	.word	0x08002791
 800273c:	080027a5 	.word	0x080027a5
 8002740:	08002721 	.word	0x08002721
 8002744:	08002721 	.word	0x08002721
 8002748:	08002721 	.word	0x08002721
 800274c:	08002721 	.word	0x08002721
 8002750:	080027a5 	.word	0x080027a5
 8002754:	08002721 	.word	0x08002721
 8002758:	08002721 	.word	0x08002721
 800275c:	08002721 	.word	0x08002721
 8002760:	08002721 	.word	0x08002721
 8002764:	080028a5 	.word	0x080028a5
 8002768:	080027cf 	.word	0x080027cf
 800276c:	0800285f 	.word	0x0800285f
 8002770:	08002721 	.word	0x08002721
 8002774:	08002721 	.word	0x08002721
 8002778:	080028c7 	.word	0x080028c7
 800277c:	08002721 	.word	0x08002721
 8002780:	080027cf 	.word	0x080027cf
 8002784:	08002721 	.word	0x08002721
 8002788:	08002721 	.word	0x08002721
 800278c:	08002867 	.word	0x08002867
 8002790:	6833      	ldr	r3, [r6, #0]
 8002792:	1d1a      	adds	r2, r3, #4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6032      	str	r2, [r6, #0]
 8002798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800279c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80027a0:	2301      	movs	r3, #1
 80027a2:	e09d      	b.n	80028e0 <_printf_i+0x1e8>
 80027a4:	6833      	ldr	r3, [r6, #0]
 80027a6:	6820      	ldr	r0, [r4, #0]
 80027a8:	1d19      	adds	r1, r3, #4
 80027aa:	6031      	str	r1, [r6, #0]
 80027ac:	0606      	lsls	r6, r0, #24
 80027ae:	d501      	bpl.n	80027b4 <_printf_i+0xbc>
 80027b0:	681d      	ldr	r5, [r3, #0]
 80027b2:	e003      	b.n	80027bc <_printf_i+0xc4>
 80027b4:	0645      	lsls	r5, r0, #25
 80027b6:	d5fb      	bpl.n	80027b0 <_printf_i+0xb8>
 80027b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80027bc:	2d00      	cmp	r5, #0
 80027be:	da03      	bge.n	80027c8 <_printf_i+0xd0>
 80027c0:	232d      	movs	r3, #45	@ 0x2d
 80027c2:	426d      	negs	r5, r5
 80027c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80027c8:	4859      	ldr	r0, [pc, #356]	@ (8002930 <_printf_i+0x238>)
 80027ca:	230a      	movs	r3, #10
 80027cc:	e011      	b.n	80027f2 <_printf_i+0xfa>
 80027ce:	6821      	ldr	r1, [r4, #0]
 80027d0:	6833      	ldr	r3, [r6, #0]
 80027d2:	0608      	lsls	r0, r1, #24
 80027d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80027d8:	d402      	bmi.n	80027e0 <_printf_i+0xe8>
 80027da:	0649      	lsls	r1, r1, #25
 80027dc:	bf48      	it	mi
 80027de:	b2ad      	uxthmi	r5, r5
 80027e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80027e2:	4853      	ldr	r0, [pc, #332]	@ (8002930 <_printf_i+0x238>)
 80027e4:	6033      	str	r3, [r6, #0]
 80027e6:	bf14      	ite	ne
 80027e8:	230a      	movne	r3, #10
 80027ea:	2308      	moveq	r3, #8
 80027ec:	2100      	movs	r1, #0
 80027ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80027f2:	6866      	ldr	r6, [r4, #4]
 80027f4:	60a6      	str	r6, [r4, #8]
 80027f6:	2e00      	cmp	r6, #0
 80027f8:	bfa2      	ittt	ge
 80027fa:	6821      	ldrge	r1, [r4, #0]
 80027fc:	f021 0104 	bicge.w	r1, r1, #4
 8002800:	6021      	strge	r1, [r4, #0]
 8002802:	b90d      	cbnz	r5, 8002808 <_printf_i+0x110>
 8002804:	2e00      	cmp	r6, #0
 8002806:	d04b      	beq.n	80028a0 <_printf_i+0x1a8>
 8002808:	4616      	mov	r6, r2
 800280a:	fbb5 f1f3 	udiv	r1, r5, r3
 800280e:	fb03 5711 	mls	r7, r3, r1, r5
 8002812:	5dc7      	ldrb	r7, [r0, r7]
 8002814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002818:	462f      	mov	r7, r5
 800281a:	42bb      	cmp	r3, r7
 800281c:	460d      	mov	r5, r1
 800281e:	d9f4      	bls.n	800280a <_printf_i+0x112>
 8002820:	2b08      	cmp	r3, #8
 8002822:	d10b      	bne.n	800283c <_printf_i+0x144>
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	07df      	lsls	r7, r3, #31
 8002828:	d508      	bpl.n	800283c <_printf_i+0x144>
 800282a:	6923      	ldr	r3, [r4, #16]
 800282c:	6861      	ldr	r1, [r4, #4]
 800282e:	4299      	cmp	r1, r3
 8002830:	bfde      	ittt	le
 8002832:	2330      	movle	r3, #48	@ 0x30
 8002834:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002838:	f106 36ff 	addle.w	r6, r6, #4294967295
 800283c:	1b92      	subs	r2, r2, r6
 800283e:	6122      	str	r2, [r4, #16]
 8002840:	f8cd a000 	str.w	sl, [sp]
 8002844:	464b      	mov	r3, r9
 8002846:	aa03      	add	r2, sp, #12
 8002848:	4621      	mov	r1, r4
 800284a:	4640      	mov	r0, r8
 800284c:	f7ff fee6 	bl	800261c <_printf_common>
 8002850:	3001      	adds	r0, #1
 8002852:	d14a      	bne.n	80028ea <_printf_i+0x1f2>
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	b004      	add	sp, #16
 800285a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	f043 0320 	orr.w	r3, r3, #32
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	4833      	ldr	r0, [pc, #204]	@ (8002934 <_printf_i+0x23c>)
 8002868:	2778      	movs	r7, #120	@ 0x78
 800286a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	6831      	ldr	r1, [r6, #0]
 8002872:	061f      	lsls	r7, r3, #24
 8002874:	f851 5b04 	ldr.w	r5, [r1], #4
 8002878:	d402      	bmi.n	8002880 <_printf_i+0x188>
 800287a:	065f      	lsls	r7, r3, #25
 800287c:	bf48      	it	mi
 800287e:	b2ad      	uxthmi	r5, r5
 8002880:	6031      	str	r1, [r6, #0]
 8002882:	07d9      	lsls	r1, r3, #31
 8002884:	bf44      	itt	mi
 8002886:	f043 0320 	orrmi.w	r3, r3, #32
 800288a:	6023      	strmi	r3, [r4, #0]
 800288c:	b11d      	cbz	r5, 8002896 <_printf_i+0x19e>
 800288e:	2310      	movs	r3, #16
 8002890:	e7ac      	b.n	80027ec <_printf_i+0xf4>
 8002892:	4827      	ldr	r0, [pc, #156]	@ (8002930 <_printf_i+0x238>)
 8002894:	e7e9      	b.n	800286a <_printf_i+0x172>
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	f023 0320 	bic.w	r3, r3, #32
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	e7f6      	b.n	800288e <_printf_i+0x196>
 80028a0:	4616      	mov	r6, r2
 80028a2:	e7bd      	b.n	8002820 <_printf_i+0x128>
 80028a4:	6833      	ldr	r3, [r6, #0]
 80028a6:	6825      	ldr	r5, [r4, #0]
 80028a8:	6961      	ldr	r1, [r4, #20]
 80028aa:	1d18      	adds	r0, r3, #4
 80028ac:	6030      	str	r0, [r6, #0]
 80028ae:	062e      	lsls	r6, r5, #24
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	d501      	bpl.n	80028b8 <_printf_i+0x1c0>
 80028b4:	6019      	str	r1, [r3, #0]
 80028b6:	e002      	b.n	80028be <_printf_i+0x1c6>
 80028b8:	0668      	lsls	r0, r5, #25
 80028ba:	d5fb      	bpl.n	80028b4 <_printf_i+0x1bc>
 80028bc:	8019      	strh	r1, [r3, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	6123      	str	r3, [r4, #16]
 80028c2:	4616      	mov	r6, r2
 80028c4:	e7bc      	b.n	8002840 <_printf_i+0x148>
 80028c6:	6833      	ldr	r3, [r6, #0]
 80028c8:	1d1a      	adds	r2, r3, #4
 80028ca:	6032      	str	r2, [r6, #0]
 80028cc:	681e      	ldr	r6, [r3, #0]
 80028ce:	6862      	ldr	r2, [r4, #4]
 80028d0:	2100      	movs	r1, #0
 80028d2:	4630      	mov	r0, r6
 80028d4:	f7fd fc84 	bl	80001e0 <memchr>
 80028d8:	b108      	cbz	r0, 80028de <_printf_i+0x1e6>
 80028da:	1b80      	subs	r0, r0, r6
 80028dc:	6060      	str	r0, [r4, #4]
 80028de:	6863      	ldr	r3, [r4, #4]
 80028e0:	6123      	str	r3, [r4, #16]
 80028e2:	2300      	movs	r3, #0
 80028e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028e8:	e7aa      	b.n	8002840 <_printf_i+0x148>
 80028ea:	6923      	ldr	r3, [r4, #16]
 80028ec:	4632      	mov	r2, r6
 80028ee:	4649      	mov	r1, r9
 80028f0:	4640      	mov	r0, r8
 80028f2:	47d0      	blx	sl
 80028f4:	3001      	adds	r0, #1
 80028f6:	d0ad      	beq.n	8002854 <_printf_i+0x15c>
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	079b      	lsls	r3, r3, #30
 80028fc:	d413      	bmi.n	8002926 <_printf_i+0x22e>
 80028fe:	68e0      	ldr	r0, [r4, #12]
 8002900:	9b03      	ldr	r3, [sp, #12]
 8002902:	4298      	cmp	r0, r3
 8002904:	bfb8      	it	lt
 8002906:	4618      	movlt	r0, r3
 8002908:	e7a6      	b.n	8002858 <_printf_i+0x160>
 800290a:	2301      	movs	r3, #1
 800290c:	4632      	mov	r2, r6
 800290e:	4649      	mov	r1, r9
 8002910:	4640      	mov	r0, r8
 8002912:	47d0      	blx	sl
 8002914:	3001      	adds	r0, #1
 8002916:	d09d      	beq.n	8002854 <_printf_i+0x15c>
 8002918:	3501      	adds	r5, #1
 800291a:	68e3      	ldr	r3, [r4, #12]
 800291c:	9903      	ldr	r1, [sp, #12]
 800291e:	1a5b      	subs	r3, r3, r1
 8002920:	42ab      	cmp	r3, r5
 8002922:	dcf2      	bgt.n	800290a <_printf_i+0x212>
 8002924:	e7eb      	b.n	80028fe <_printf_i+0x206>
 8002926:	2500      	movs	r5, #0
 8002928:	f104 0619 	add.w	r6, r4, #25
 800292c:	e7f5      	b.n	800291a <_printf_i+0x222>
 800292e:	bf00      	nop
 8002930:	080049b2 	.word	0x080049b2
 8002934:	080049c3 	.word	0x080049c3

08002938 <std>:
 8002938:	2300      	movs	r3, #0
 800293a:	b510      	push	{r4, lr}
 800293c:	4604      	mov	r4, r0
 800293e:	e9c0 3300 	strd	r3, r3, [r0]
 8002942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002946:	6083      	str	r3, [r0, #8]
 8002948:	8181      	strh	r1, [r0, #12]
 800294a:	6643      	str	r3, [r0, #100]	@ 0x64
 800294c:	81c2      	strh	r2, [r0, #14]
 800294e:	6183      	str	r3, [r0, #24]
 8002950:	4619      	mov	r1, r3
 8002952:	2208      	movs	r2, #8
 8002954:	305c      	adds	r0, #92	@ 0x5c
 8002956:	f000 f8f4 	bl	8002b42 <memset>
 800295a:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <std+0x58>)
 800295c:	6263      	str	r3, [r4, #36]	@ 0x24
 800295e:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <std+0x5c>)
 8002960:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <std+0x60>)
 8002964:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <std+0x64>)
 8002968:	6323      	str	r3, [r4, #48]	@ 0x30
 800296a:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <std+0x68>)
 800296c:	6224      	str	r4, [r4, #32]
 800296e:	429c      	cmp	r4, r3
 8002970:	d006      	beq.n	8002980 <std+0x48>
 8002972:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002976:	4294      	cmp	r4, r2
 8002978:	d002      	beq.n	8002980 <std+0x48>
 800297a:	33d0      	adds	r3, #208	@ 0xd0
 800297c:	429c      	cmp	r4, r3
 800297e:	d105      	bne.n	800298c <std+0x54>
 8002980:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002988:	f000 b958 	b.w	8002c3c <__retarget_lock_init_recursive>
 800298c:	bd10      	pop	{r4, pc}
 800298e:	bf00      	nop
 8002990:	08002abd 	.word	0x08002abd
 8002994:	08002adf 	.word	0x08002adf
 8002998:	08002b17 	.word	0x08002b17
 800299c:	08002b3b 	.word	0x08002b3b
 80029a0:	20000360 	.word	0x20000360

080029a4 <stdio_exit_handler>:
 80029a4:	4a02      	ldr	r2, [pc, #8]	@ (80029b0 <stdio_exit_handler+0xc>)
 80029a6:	4903      	ldr	r1, [pc, #12]	@ (80029b4 <stdio_exit_handler+0x10>)
 80029a8:	4803      	ldr	r0, [pc, #12]	@ (80029b8 <stdio_exit_handler+0x14>)
 80029aa:	f000 b869 	b.w	8002a80 <_fwalk_sglue>
 80029ae:	bf00      	nop
 80029b0:	20000000 	.word	0x20000000
 80029b4:	08004305 	.word	0x08004305
 80029b8:	20000010 	.word	0x20000010

080029bc <cleanup_stdio>:
 80029bc:	6841      	ldr	r1, [r0, #4]
 80029be:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <cleanup_stdio+0x34>)
 80029c0:	4299      	cmp	r1, r3
 80029c2:	b510      	push	{r4, lr}
 80029c4:	4604      	mov	r4, r0
 80029c6:	d001      	beq.n	80029cc <cleanup_stdio+0x10>
 80029c8:	f001 fc9c 	bl	8004304 <_fflush_r>
 80029cc:	68a1      	ldr	r1, [r4, #8]
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <cleanup_stdio+0x38>)
 80029d0:	4299      	cmp	r1, r3
 80029d2:	d002      	beq.n	80029da <cleanup_stdio+0x1e>
 80029d4:	4620      	mov	r0, r4
 80029d6:	f001 fc95 	bl	8004304 <_fflush_r>
 80029da:	68e1      	ldr	r1, [r4, #12]
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <cleanup_stdio+0x3c>)
 80029de:	4299      	cmp	r1, r3
 80029e0:	d004      	beq.n	80029ec <cleanup_stdio+0x30>
 80029e2:	4620      	mov	r0, r4
 80029e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029e8:	f001 bc8c 	b.w	8004304 <_fflush_r>
 80029ec:	bd10      	pop	{r4, pc}
 80029ee:	bf00      	nop
 80029f0:	20000360 	.word	0x20000360
 80029f4:	200003c8 	.word	0x200003c8
 80029f8:	20000430 	.word	0x20000430

080029fc <global_stdio_init.part.0>:
 80029fc:	b510      	push	{r4, lr}
 80029fe:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <global_stdio_init.part.0+0x30>)
 8002a00:	4c0b      	ldr	r4, [pc, #44]	@ (8002a30 <global_stdio_init.part.0+0x34>)
 8002a02:	4a0c      	ldr	r2, [pc, #48]	@ (8002a34 <global_stdio_init.part.0+0x38>)
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	4620      	mov	r0, r4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2104      	movs	r1, #4
 8002a0c:	f7ff ff94 	bl	8002938 <std>
 8002a10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002a14:	2201      	movs	r2, #1
 8002a16:	2109      	movs	r1, #9
 8002a18:	f7ff ff8e 	bl	8002938 <std>
 8002a1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002a20:	2202      	movs	r2, #2
 8002a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a26:	2112      	movs	r1, #18
 8002a28:	f7ff bf86 	b.w	8002938 <std>
 8002a2c:	20000498 	.word	0x20000498
 8002a30:	20000360 	.word	0x20000360
 8002a34:	080029a5 	.word	0x080029a5

08002a38 <__sfp_lock_acquire>:
 8002a38:	4801      	ldr	r0, [pc, #4]	@ (8002a40 <__sfp_lock_acquire+0x8>)
 8002a3a:	f000 b900 	b.w	8002c3e <__retarget_lock_acquire_recursive>
 8002a3e:	bf00      	nop
 8002a40:	200004a1 	.word	0x200004a1

08002a44 <__sfp_lock_release>:
 8002a44:	4801      	ldr	r0, [pc, #4]	@ (8002a4c <__sfp_lock_release+0x8>)
 8002a46:	f000 b8fb 	b.w	8002c40 <__retarget_lock_release_recursive>
 8002a4a:	bf00      	nop
 8002a4c:	200004a1 	.word	0x200004a1

08002a50 <__sinit>:
 8002a50:	b510      	push	{r4, lr}
 8002a52:	4604      	mov	r4, r0
 8002a54:	f7ff fff0 	bl	8002a38 <__sfp_lock_acquire>
 8002a58:	6a23      	ldr	r3, [r4, #32]
 8002a5a:	b11b      	cbz	r3, 8002a64 <__sinit+0x14>
 8002a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a60:	f7ff bff0 	b.w	8002a44 <__sfp_lock_release>
 8002a64:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <__sinit+0x28>)
 8002a66:	6223      	str	r3, [r4, #32]
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <__sinit+0x2c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f5      	bne.n	8002a5c <__sinit+0xc>
 8002a70:	f7ff ffc4 	bl	80029fc <global_stdio_init.part.0>
 8002a74:	e7f2      	b.n	8002a5c <__sinit+0xc>
 8002a76:	bf00      	nop
 8002a78:	080029bd 	.word	0x080029bd
 8002a7c:	20000498 	.word	0x20000498

08002a80 <_fwalk_sglue>:
 8002a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a84:	4607      	mov	r7, r0
 8002a86:	4688      	mov	r8, r1
 8002a88:	4614      	mov	r4, r2
 8002a8a:	2600      	movs	r6, #0
 8002a8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a90:	f1b9 0901 	subs.w	r9, r9, #1
 8002a94:	d505      	bpl.n	8002aa2 <_fwalk_sglue+0x22>
 8002a96:	6824      	ldr	r4, [r4, #0]
 8002a98:	2c00      	cmp	r4, #0
 8002a9a:	d1f7      	bne.n	8002a8c <_fwalk_sglue+0xc>
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aa2:	89ab      	ldrh	r3, [r5, #12]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d907      	bls.n	8002ab8 <_fwalk_sglue+0x38>
 8002aa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002aac:	3301      	adds	r3, #1
 8002aae:	d003      	beq.n	8002ab8 <_fwalk_sglue+0x38>
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	47c0      	blx	r8
 8002ab6:	4306      	orrs	r6, r0
 8002ab8:	3568      	adds	r5, #104	@ 0x68
 8002aba:	e7e9      	b.n	8002a90 <_fwalk_sglue+0x10>

08002abc <__sread>:
 8002abc:	b510      	push	{r4, lr}
 8002abe:	460c      	mov	r4, r1
 8002ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ac4:	f000 f86c 	bl	8002ba0 <_read_r>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	bfab      	itete	ge
 8002acc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002ace:	89a3      	ldrhlt	r3, [r4, #12]
 8002ad0:	181b      	addge	r3, r3, r0
 8002ad2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ad6:	bfac      	ite	ge
 8002ad8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ada:	81a3      	strhlt	r3, [r4, #12]
 8002adc:	bd10      	pop	{r4, pc}

08002ade <__swrite>:
 8002ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae2:	461f      	mov	r7, r3
 8002ae4:	898b      	ldrh	r3, [r1, #12]
 8002ae6:	05db      	lsls	r3, r3, #23
 8002ae8:	4605      	mov	r5, r0
 8002aea:	460c      	mov	r4, r1
 8002aec:	4616      	mov	r6, r2
 8002aee:	d505      	bpl.n	8002afc <__swrite+0x1e>
 8002af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002af4:	2302      	movs	r3, #2
 8002af6:	2200      	movs	r2, #0
 8002af8:	f000 f840 	bl	8002b7c <_lseek_r>
 8002afc:	89a3      	ldrh	r3, [r4, #12]
 8002afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b06:	81a3      	strh	r3, [r4, #12]
 8002b08:	4632      	mov	r2, r6
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b12:	f000 b857 	b.w	8002bc4 <_write_r>

08002b16 <__sseek>:
 8002b16:	b510      	push	{r4, lr}
 8002b18:	460c      	mov	r4, r1
 8002b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b1e:	f000 f82d 	bl	8002b7c <_lseek_r>
 8002b22:	1c43      	adds	r3, r0, #1
 8002b24:	89a3      	ldrh	r3, [r4, #12]
 8002b26:	bf15      	itete	ne
 8002b28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002b2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002b32:	81a3      	strheq	r3, [r4, #12]
 8002b34:	bf18      	it	ne
 8002b36:	81a3      	strhne	r3, [r4, #12]
 8002b38:	bd10      	pop	{r4, pc}

08002b3a <__sclose>:
 8002b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b3e:	f000 b80d 	b.w	8002b5c <_close_r>

08002b42 <memset>:
 8002b42:	4402      	add	r2, r0
 8002b44:	4603      	mov	r3, r0
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d100      	bne.n	8002b4c <memset+0xa>
 8002b4a:	4770      	bx	lr
 8002b4c:	f803 1b01 	strb.w	r1, [r3], #1
 8002b50:	e7f9      	b.n	8002b46 <memset+0x4>
	...

08002b54 <_localeconv_r>:
 8002b54:	4800      	ldr	r0, [pc, #0]	@ (8002b58 <_localeconv_r+0x4>)
 8002b56:	4770      	bx	lr
 8002b58:	2000014c 	.word	0x2000014c

08002b5c <_close_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	4d06      	ldr	r5, [pc, #24]	@ (8002b78 <_close_r+0x1c>)
 8002b60:	2300      	movs	r3, #0
 8002b62:	4604      	mov	r4, r0
 8002b64:	4608      	mov	r0, r1
 8002b66:	602b      	str	r3, [r5, #0]
 8002b68:	f7ff f9e9 	bl	8001f3e <_close>
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	d102      	bne.n	8002b76 <_close_r+0x1a>
 8002b70:	682b      	ldr	r3, [r5, #0]
 8002b72:	b103      	cbz	r3, 8002b76 <_close_r+0x1a>
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
 8002b78:	2000049c 	.word	0x2000049c

08002b7c <_lseek_r>:
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	4d07      	ldr	r5, [pc, #28]	@ (8002b9c <_lseek_r+0x20>)
 8002b80:	4604      	mov	r4, r0
 8002b82:	4608      	mov	r0, r1
 8002b84:	4611      	mov	r1, r2
 8002b86:	2200      	movs	r2, #0
 8002b88:	602a      	str	r2, [r5, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f7ff f9fe 	bl	8001f8c <_lseek>
 8002b90:	1c43      	adds	r3, r0, #1
 8002b92:	d102      	bne.n	8002b9a <_lseek_r+0x1e>
 8002b94:	682b      	ldr	r3, [r5, #0]
 8002b96:	b103      	cbz	r3, 8002b9a <_lseek_r+0x1e>
 8002b98:	6023      	str	r3, [r4, #0]
 8002b9a:	bd38      	pop	{r3, r4, r5, pc}
 8002b9c:	2000049c 	.word	0x2000049c

08002ba0 <_read_r>:
 8002ba0:	b538      	push	{r3, r4, r5, lr}
 8002ba2:	4d07      	ldr	r5, [pc, #28]	@ (8002bc0 <_read_r+0x20>)
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	4608      	mov	r0, r1
 8002ba8:	4611      	mov	r1, r2
 8002baa:	2200      	movs	r2, #0
 8002bac:	602a      	str	r2, [r5, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f7ff f98c 	bl	8001ecc <_read>
 8002bb4:	1c43      	adds	r3, r0, #1
 8002bb6:	d102      	bne.n	8002bbe <_read_r+0x1e>
 8002bb8:	682b      	ldr	r3, [r5, #0]
 8002bba:	b103      	cbz	r3, 8002bbe <_read_r+0x1e>
 8002bbc:	6023      	str	r3, [r4, #0]
 8002bbe:	bd38      	pop	{r3, r4, r5, pc}
 8002bc0:	2000049c 	.word	0x2000049c

08002bc4 <_write_r>:
 8002bc4:	b538      	push	{r3, r4, r5, lr}
 8002bc6:	4d07      	ldr	r5, [pc, #28]	@ (8002be4 <_write_r+0x20>)
 8002bc8:	4604      	mov	r4, r0
 8002bca:	4608      	mov	r0, r1
 8002bcc:	4611      	mov	r1, r2
 8002bce:	2200      	movs	r2, #0
 8002bd0:	602a      	str	r2, [r5, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f7ff f997 	bl	8001f06 <_write>
 8002bd8:	1c43      	adds	r3, r0, #1
 8002bda:	d102      	bne.n	8002be2 <_write_r+0x1e>
 8002bdc:	682b      	ldr	r3, [r5, #0]
 8002bde:	b103      	cbz	r3, 8002be2 <_write_r+0x1e>
 8002be0:	6023      	str	r3, [r4, #0]
 8002be2:	bd38      	pop	{r3, r4, r5, pc}
 8002be4:	2000049c 	.word	0x2000049c

08002be8 <__errno>:
 8002be8:	4b01      	ldr	r3, [pc, #4]	@ (8002bf0 <__errno+0x8>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	2000000c 	.word	0x2000000c

08002bf4 <__libc_init_array>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8002c2c <__libc_init_array+0x38>)
 8002bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8002c30 <__libc_init_array+0x3c>)
 8002bfa:	1b64      	subs	r4, r4, r5
 8002bfc:	10a4      	asrs	r4, r4, #2
 8002bfe:	2600      	movs	r6, #0
 8002c00:	42a6      	cmp	r6, r4
 8002c02:	d109      	bne.n	8002c18 <__libc_init_array+0x24>
 8002c04:	4d0b      	ldr	r5, [pc, #44]	@ (8002c34 <__libc_init_array+0x40>)
 8002c06:	4c0c      	ldr	r4, [pc, #48]	@ (8002c38 <__libc_init_array+0x44>)
 8002c08:	f001 febc 	bl	8004984 <_init>
 8002c0c:	1b64      	subs	r4, r4, r5
 8002c0e:	10a4      	asrs	r4, r4, #2
 8002c10:	2600      	movs	r6, #0
 8002c12:	42a6      	cmp	r6, r4
 8002c14:	d105      	bne.n	8002c22 <__libc_init_array+0x2e>
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1c:	4798      	blx	r3
 8002c1e:	3601      	adds	r6, #1
 8002c20:	e7ee      	b.n	8002c00 <__libc_init_array+0xc>
 8002c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c26:	4798      	blx	r3
 8002c28:	3601      	adds	r6, #1
 8002c2a:	e7f2      	b.n	8002c12 <__libc_init_array+0x1e>
 8002c2c:	08004d18 	.word	0x08004d18
 8002c30:	08004d18 	.word	0x08004d18
 8002c34:	08004d18 	.word	0x08004d18
 8002c38:	08004d1c 	.word	0x08004d1c

08002c3c <__retarget_lock_init_recursive>:
 8002c3c:	4770      	bx	lr

08002c3e <__retarget_lock_acquire_recursive>:
 8002c3e:	4770      	bx	lr

08002c40 <__retarget_lock_release_recursive>:
 8002c40:	4770      	bx	lr

08002c42 <memcpy>:
 8002c42:	440a      	add	r2, r1
 8002c44:	4291      	cmp	r1, r2
 8002c46:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c4a:	d100      	bne.n	8002c4e <memcpy+0xc>
 8002c4c:	4770      	bx	lr
 8002c4e:	b510      	push	{r4, lr}
 8002c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c58:	4291      	cmp	r1, r2
 8002c5a:	d1f9      	bne.n	8002c50 <memcpy+0xe>
 8002c5c:	bd10      	pop	{r4, pc}

08002c5e <quorem>:
 8002c5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c62:	6903      	ldr	r3, [r0, #16]
 8002c64:	690c      	ldr	r4, [r1, #16]
 8002c66:	42a3      	cmp	r3, r4
 8002c68:	4607      	mov	r7, r0
 8002c6a:	db7e      	blt.n	8002d6a <quorem+0x10c>
 8002c6c:	3c01      	subs	r4, #1
 8002c6e:	f101 0814 	add.w	r8, r1, #20
 8002c72:	00a3      	lsls	r3, r4, #2
 8002c74:	f100 0514 	add.w	r5, r0, #20
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002c84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002c90:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c94:	d32e      	bcc.n	8002cf4 <quorem+0x96>
 8002c96:	f04f 0a00 	mov.w	sl, #0
 8002c9a:	46c4      	mov	ip, r8
 8002c9c:	46ae      	mov	lr, r5
 8002c9e:	46d3      	mov	fp, sl
 8002ca0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002ca4:	b298      	uxth	r0, r3
 8002ca6:	fb06 a000 	mla	r0, r6, r0, sl
 8002caa:	0c02      	lsrs	r2, r0, #16
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	fb06 2303 	mla	r3, r6, r3, r2
 8002cb2:	f8de 2000 	ldr.w	r2, [lr]
 8002cb6:	b280      	uxth	r0, r0
 8002cb8:	b292      	uxth	r2, r2
 8002cba:	1a12      	subs	r2, r2, r0
 8002cbc:	445a      	add	r2, fp
 8002cbe:	f8de 0000 	ldr.w	r0, [lr]
 8002cc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002ccc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002cd6:	45e1      	cmp	r9, ip
 8002cd8:	f84e 2b04 	str.w	r2, [lr], #4
 8002cdc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002ce0:	d2de      	bcs.n	8002ca0 <quorem+0x42>
 8002ce2:	9b00      	ldr	r3, [sp, #0]
 8002ce4:	58eb      	ldr	r3, [r5, r3]
 8002ce6:	b92b      	cbnz	r3, 8002cf4 <quorem+0x96>
 8002ce8:	9b01      	ldr	r3, [sp, #4]
 8002cea:	3b04      	subs	r3, #4
 8002cec:	429d      	cmp	r5, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	d32f      	bcc.n	8002d52 <quorem+0xf4>
 8002cf2:	613c      	str	r4, [r7, #16]
 8002cf4:	4638      	mov	r0, r7
 8002cf6:	f001 f979 	bl	8003fec <__mcmp>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	db25      	blt.n	8002d4a <quorem+0xec>
 8002cfe:	4629      	mov	r1, r5
 8002d00:	2000      	movs	r0, #0
 8002d02:	f858 2b04 	ldr.w	r2, [r8], #4
 8002d06:	f8d1 c000 	ldr.w	ip, [r1]
 8002d0a:	fa1f fe82 	uxth.w	lr, r2
 8002d0e:	fa1f f38c 	uxth.w	r3, ip
 8002d12:	eba3 030e 	sub.w	r3, r3, lr
 8002d16:	4403      	add	r3, r0
 8002d18:	0c12      	lsrs	r2, r2, #16
 8002d1a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002d1e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d28:	45c1      	cmp	r9, r8
 8002d2a:	f841 3b04 	str.w	r3, [r1], #4
 8002d2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002d32:	d2e6      	bcs.n	8002d02 <quorem+0xa4>
 8002d34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002d38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002d3c:	b922      	cbnz	r2, 8002d48 <quorem+0xea>
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	429d      	cmp	r5, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	d30b      	bcc.n	8002d5e <quorem+0x100>
 8002d46:	613c      	str	r4, [r7, #16]
 8002d48:	3601      	adds	r6, #1
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	b003      	add	sp, #12
 8002d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	3b04      	subs	r3, #4
 8002d56:	2a00      	cmp	r2, #0
 8002d58:	d1cb      	bne.n	8002cf2 <quorem+0x94>
 8002d5a:	3c01      	subs	r4, #1
 8002d5c:	e7c6      	b.n	8002cec <quorem+0x8e>
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	3b04      	subs	r3, #4
 8002d62:	2a00      	cmp	r2, #0
 8002d64:	d1ef      	bne.n	8002d46 <quorem+0xe8>
 8002d66:	3c01      	subs	r4, #1
 8002d68:	e7ea      	b.n	8002d40 <quorem+0xe2>
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	e7ee      	b.n	8002d4c <quorem+0xee>
	...

08002d70 <_dtoa_r>:
 8002d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d74:	69c7      	ldr	r7, [r0, #28]
 8002d76:	b099      	sub	sp, #100	@ 0x64
 8002d78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002d7c:	ec55 4b10 	vmov	r4, r5, d0
 8002d80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8002d82:	9109      	str	r1, [sp, #36]	@ 0x24
 8002d84:	4683      	mov	fp, r0
 8002d86:	920e      	str	r2, [sp, #56]	@ 0x38
 8002d88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002d8a:	b97f      	cbnz	r7, 8002dac <_dtoa_r+0x3c>
 8002d8c:	2010      	movs	r0, #16
 8002d8e:	f000 fdfd 	bl	800398c <malloc>
 8002d92:	4602      	mov	r2, r0
 8002d94:	f8cb 001c 	str.w	r0, [fp, #28]
 8002d98:	b920      	cbnz	r0, 8002da4 <_dtoa_r+0x34>
 8002d9a:	4ba7      	ldr	r3, [pc, #668]	@ (8003038 <_dtoa_r+0x2c8>)
 8002d9c:	21ef      	movs	r1, #239	@ 0xef
 8002d9e:	48a7      	ldr	r0, [pc, #668]	@ (800303c <_dtoa_r+0x2cc>)
 8002da0:	f001 fae8 	bl	8004374 <__assert_func>
 8002da4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002da8:	6007      	str	r7, [r0, #0]
 8002daa:	60c7      	str	r7, [r0, #12]
 8002dac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	b159      	cbz	r1, 8002dcc <_dtoa_r+0x5c>
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	604a      	str	r2, [r1, #4]
 8002db8:	2301      	movs	r3, #1
 8002dba:	4093      	lsls	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
 8002dbe:	4658      	mov	r0, fp
 8002dc0:	f000 feda 	bl	8003b78 <_Bfree>
 8002dc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	1e2b      	subs	r3, r5, #0
 8002dce:	bfb9      	ittee	lt
 8002dd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002dd4:	9303      	strlt	r3, [sp, #12]
 8002dd6:	2300      	movge	r3, #0
 8002dd8:	6033      	strge	r3, [r6, #0]
 8002dda:	9f03      	ldr	r7, [sp, #12]
 8002ddc:	4b98      	ldr	r3, [pc, #608]	@ (8003040 <_dtoa_r+0x2d0>)
 8002dde:	bfbc      	itt	lt
 8002de0:	2201      	movlt	r2, #1
 8002de2:	6032      	strlt	r2, [r6, #0]
 8002de4:	43bb      	bics	r3, r7
 8002de6:	d112      	bne.n	8002e0e <_dtoa_r+0x9e>
 8002de8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002dea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002df4:	4323      	orrs	r3, r4
 8002df6:	f000 854d 	beq.w	8003894 <_dtoa_r+0xb24>
 8002dfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002dfc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003054 <_dtoa_r+0x2e4>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 854f 	beq.w	80038a4 <_dtoa_r+0xb34>
 8002e06:	f10a 0303 	add.w	r3, sl, #3
 8002e0a:	f000 bd49 	b.w	80038a0 <_dtoa_r+0xb30>
 8002e0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002e12:	2200      	movs	r2, #0
 8002e14:	ec51 0b17 	vmov	r0, r1, d7
 8002e18:	2300      	movs	r3, #0
 8002e1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002e1e:	f7fd fe5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8002e22:	4680      	mov	r8, r0
 8002e24:	b158      	cbz	r0, 8002e3e <_dtoa_r+0xce>
 8002e26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002e28:	2301      	movs	r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002e2e:	b113      	cbz	r3, 8002e36 <_dtoa_r+0xc6>
 8002e30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8002e32:	4b84      	ldr	r3, [pc, #528]	@ (8003044 <_dtoa_r+0x2d4>)
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003058 <_dtoa_r+0x2e8>
 8002e3a:	f000 bd33 	b.w	80038a4 <_dtoa_r+0xb34>
 8002e3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8002e42:	aa16      	add	r2, sp, #88	@ 0x58
 8002e44:	a917      	add	r1, sp, #92	@ 0x5c
 8002e46:	4658      	mov	r0, fp
 8002e48:	f001 f980 	bl	800414c <__d2b>
 8002e4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002e50:	4681      	mov	r9, r0
 8002e52:	2e00      	cmp	r6, #0
 8002e54:	d077      	beq.n	8002f46 <_dtoa_r+0x1d6>
 8002e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8002e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002e64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002e68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002e6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002e70:	4619      	mov	r1, r3
 8002e72:	2200      	movs	r2, #0
 8002e74:	4b74      	ldr	r3, [pc, #464]	@ (8003048 <_dtoa_r+0x2d8>)
 8002e76:	f7fd fa0f 	bl	8000298 <__aeabi_dsub>
 8002e7a:	a369      	add	r3, pc, #420	@ (adr r3, 8003020 <_dtoa_r+0x2b0>)
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f7fd fbc2 	bl	8000608 <__aeabi_dmul>
 8002e84:	a368      	add	r3, pc, #416	@ (adr r3, 8003028 <_dtoa_r+0x2b8>)
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	f7fd fa07 	bl	800029c <__adddf3>
 8002e8e:	4604      	mov	r4, r0
 8002e90:	4630      	mov	r0, r6
 8002e92:	460d      	mov	r5, r1
 8002e94:	f7fd fb4e 	bl	8000534 <__aeabi_i2d>
 8002e98:	a365      	add	r3, pc, #404	@ (adr r3, 8003030 <_dtoa_r+0x2c0>)
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f7fd fbb3 	bl	8000608 <__aeabi_dmul>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	f7fd f9f7 	bl	800029c <__adddf3>
 8002eae:	4604      	mov	r4, r0
 8002eb0:	460d      	mov	r5, r1
 8002eb2:	f7fd fe59 	bl	8000b68 <__aeabi_d2iz>
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	4607      	mov	r7, r0
 8002eba:	2300      	movs	r3, #0
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	f7fd fe14 	bl	8000aec <__aeabi_dcmplt>
 8002ec4:	b140      	cbz	r0, 8002ed8 <_dtoa_r+0x168>
 8002ec6:	4638      	mov	r0, r7
 8002ec8:	f7fd fb34 	bl	8000534 <__aeabi_i2d>
 8002ecc:	4622      	mov	r2, r4
 8002ece:	462b      	mov	r3, r5
 8002ed0:	f7fd fe02 	bl	8000ad8 <__aeabi_dcmpeq>
 8002ed4:	b900      	cbnz	r0, 8002ed8 <_dtoa_r+0x168>
 8002ed6:	3f01      	subs	r7, #1
 8002ed8:	2f16      	cmp	r7, #22
 8002eda:	d851      	bhi.n	8002f80 <_dtoa_r+0x210>
 8002edc:	4b5b      	ldr	r3, [pc, #364]	@ (800304c <_dtoa_r+0x2dc>)
 8002ede:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002eea:	f7fd fdff 	bl	8000aec <__aeabi_dcmplt>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d048      	beq.n	8002f84 <_dtoa_r+0x214>
 8002ef2:	3f01      	subs	r7, #1
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9312      	str	r3, [sp, #72]	@ 0x48
 8002ef8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002efa:	1b9b      	subs	r3, r3, r6
 8002efc:	1e5a      	subs	r2, r3, #1
 8002efe:	bf44      	itt	mi
 8002f00:	f1c3 0801 	rsbmi	r8, r3, #1
 8002f04:	2300      	movmi	r3, #0
 8002f06:	9208      	str	r2, [sp, #32]
 8002f08:	bf54      	ite	pl
 8002f0a:	f04f 0800 	movpl.w	r8, #0
 8002f0e:	9308      	strmi	r3, [sp, #32]
 8002f10:	2f00      	cmp	r7, #0
 8002f12:	db39      	blt.n	8002f88 <_dtoa_r+0x218>
 8002f14:	9b08      	ldr	r3, [sp, #32]
 8002f16:	970f      	str	r7, [sp, #60]	@ 0x3c
 8002f18:	443b      	add	r3, r7
 8002f1a:	9308      	str	r3, [sp, #32]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f22:	2b09      	cmp	r3, #9
 8002f24:	d864      	bhi.n	8002ff0 <_dtoa_r+0x280>
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	bfc4      	itt	gt
 8002f2a:	3b04      	subgt	r3, #4
 8002f2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8002f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f30:	f1a3 0302 	sub.w	r3, r3, #2
 8002f34:	bfcc      	ite	gt
 8002f36:	2400      	movgt	r4, #0
 8002f38:	2401      	movle	r4, #1
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d863      	bhi.n	8003006 <_dtoa_r+0x296>
 8002f3e:	e8df f003 	tbb	[pc, r3]
 8002f42:	372a      	.short	0x372a
 8002f44:	5535      	.short	0x5535
 8002f46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8002f4a:	441e      	add	r6, r3
 8002f4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	bfc1      	itttt	gt
 8002f54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002f58:	409f      	lslgt	r7, r3
 8002f5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002f5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002f62:	bfd6      	itet	le
 8002f64:	f1c3 0320 	rsble	r3, r3, #32
 8002f68:	ea47 0003 	orrgt.w	r0, r7, r3
 8002f6c:	fa04 f003 	lslle.w	r0, r4, r3
 8002f70:	f7fd fad0 	bl	8000514 <__aeabi_ui2d>
 8002f74:	2201      	movs	r2, #1
 8002f76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002f7a:	3e01      	subs	r6, #1
 8002f7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8002f7e:	e777      	b.n	8002e70 <_dtoa_r+0x100>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e7b8      	b.n	8002ef6 <_dtoa_r+0x186>
 8002f84:	9012      	str	r0, [sp, #72]	@ 0x48
 8002f86:	e7b7      	b.n	8002ef8 <_dtoa_r+0x188>
 8002f88:	427b      	negs	r3, r7
 8002f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	eba8 0807 	sub.w	r8, r8, r7
 8002f92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002f94:	e7c4      	b.n	8002f20 <_dtoa_r+0x1b0>
 8002f96:	2300      	movs	r3, #0
 8002f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002f9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	dc35      	bgt.n	800300c <_dtoa_r+0x29c>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	9307      	str	r3, [sp, #28]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	920e      	str	r2, [sp, #56]	@ 0x38
 8002faa:	e00b      	b.n	8002fc4 <_dtoa_r+0x254>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e7f3      	b.n	8002f98 <_dtoa_r+0x228>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002fb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	9307      	str	r3, [sp, #28]
 8002fc0:	bfb8      	it	lt
 8002fc2:	2301      	movlt	r3, #1
 8002fc4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2204      	movs	r2, #4
 8002fcc:	f102 0514 	add.w	r5, r2, #20
 8002fd0:	429d      	cmp	r5, r3
 8002fd2:	d91f      	bls.n	8003014 <_dtoa_r+0x2a4>
 8002fd4:	6041      	str	r1, [r0, #4]
 8002fd6:	4658      	mov	r0, fp
 8002fd8:	f000 fd8e 	bl	8003af8 <_Balloc>
 8002fdc:	4682      	mov	sl, r0
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d13c      	bne.n	800305c <_dtoa_r+0x2ec>
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <_dtoa_r+0x2e0>)
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	f240 11af 	movw	r1, #431	@ 0x1af
 8002fea:	e6d8      	b.n	8002d9e <_dtoa_r+0x2e>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e7e0      	b.n	8002fb2 <_dtoa_r+0x242>
 8002ff0:	2401      	movs	r4, #1
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ff6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	9307      	str	r3, [sp, #28]
 8003000:	2200      	movs	r2, #0
 8003002:	2312      	movs	r3, #18
 8003004:	e7d0      	b.n	8002fa8 <_dtoa_r+0x238>
 8003006:	2301      	movs	r3, #1
 8003008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800300a:	e7f5      	b.n	8002ff8 <_dtoa_r+0x288>
 800300c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	9307      	str	r3, [sp, #28]
 8003012:	e7d7      	b.n	8002fc4 <_dtoa_r+0x254>
 8003014:	3101      	adds	r1, #1
 8003016:	0052      	lsls	r2, r2, #1
 8003018:	e7d8      	b.n	8002fcc <_dtoa_r+0x25c>
 800301a:	bf00      	nop
 800301c:	f3af 8000 	nop.w
 8003020:	636f4361 	.word	0x636f4361
 8003024:	3fd287a7 	.word	0x3fd287a7
 8003028:	8b60c8b3 	.word	0x8b60c8b3
 800302c:	3fc68a28 	.word	0x3fc68a28
 8003030:	509f79fb 	.word	0x509f79fb
 8003034:	3fd34413 	.word	0x3fd34413
 8003038:	080049e1 	.word	0x080049e1
 800303c:	080049f8 	.word	0x080049f8
 8003040:	7ff00000 	.word	0x7ff00000
 8003044:	080049b1 	.word	0x080049b1
 8003048:	3ff80000 	.word	0x3ff80000
 800304c:	08004af0 	.word	0x08004af0
 8003050:	08004a50 	.word	0x08004a50
 8003054:	080049dd 	.word	0x080049dd
 8003058:	080049b0 	.word	0x080049b0
 800305c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003060:	6018      	str	r0, [r3, #0]
 8003062:	9b07      	ldr	r3, [sp, #28]
 8003064:	2b0e      	cmp	r3, #14
 8003066:	f200 80a4 	bhi.w	80031b2 <_dtoa_r+0x442>
 800306a:	2c00      	cmp	r4, #0
 800306c:	f000 80a1 	beq.w	80031b2 <_dtoa_r+0x442>
 8003070:	2f00      	cmp	r7, #0
 8003072:	dd33      	ble.n	80030dc <_dtoa_r+0x36c>
 8003074:	4bad      	ldr	r3, [pc, #692]	@ (800332c <_dtoa_r+0x5bc>)
 8003076:	f007 020f 	and.w	r2, r7, #15
 800307a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800307e:	ed93 7b00 	vldr	d7, [r3]
 8003082:	05f8      	lsls	r0, r7, #23
 8003084:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003088:	ea4f 1427 	mov.w	r4, r7, asr #4
 800308c:	d516      	bpl.n	80030bc <_dtoa_r+0x34c>
 800308e:	4ba8      	ldr	r3, [pc, #672]	@ (8003330 <_dtoa_r+0x5c0>)
 8003090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003098:	f7fd fbe0 	bl	800085c <__aeabi_ddiv>
 800309c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030a0:	f004 040f 	and.w	r4, r4, #15
 80030a4:	2603      	movs	r6, #3
 80030a6:	4da2      	ldr	r5, [pc, #648]	@ (8003330 <_dtoa_r+0x5c0>)
 80030a8:	b954      	cbnz	r4, 80030c0 <_dtoa_r+0x350>
 80030aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80030ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030b2:	f7fd fbd3 	bl	800085c <__aeabi_ddiv>
 80030b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030ba:	e028      	b.n	800310e <_dtoa_r+0x39e>
 80030bc:	2602      	movs	r6, #2
 80030be:	e7f2      	b.n	80030a6 <_dtoa_r+0x336>
 80030c0:	07e1      	lsls	r1, r4, #31
 80030c2:	d508      	bpl.n	80030d6 <_dtoa_r+0x366>
 80030c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80030cc:	f7fd fa9c 	bl	8000608 <__aeabi_dmul>
 80030d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030d4:	3601      	adds	r6, #1
 80030d6:	1064      	asrs	r4, r4, #1
 80030d8:	3508      	adds	r5, #8
 80030da:	e7e5      	b.n	80030a8 <_dtoa_r+0x338>
 80030dc:	f000 80d2 	beq.w	8003284 <_dtoa_r+0x514>
 80030e0:	427c      	negs	r4, r7
 80030e2:	4b92      	ldr	r3, [pc, #584]	@ (800332c <_dtoa_r+0x5bc>)
 80030e4:	4d92      	ldr	r5, [pc, #584]	@ (8003330 <_dtoa_r+0x5c0>)
 80030e6:	f004 020f 	and.w	r2, r4, #15
 80030ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80030f6:	f7fd fa87 	bl	8000608 <__aeabi_dmul>
 80030fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030fe:	1124      	asrs	r4, r4, #4
 8003100:	2300      	movs	r3, #0
 8003102:	2602      	movs	r6, #2
 8003104:	2c00      	cmp	r4, #0
 8003106:	f040 80b2 	bne.w	800326e <_dtoa_r+0x4fe>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1d3      	bne.n	80030b6 <_dtoa_r+0x346>
 800310e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003110:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80b7 	beq.w	8003288 <_dtoa_r+0x518>
 800311a:	4b86      	ldr	r3, [pc, #536]	@ (8003334 <_dtoa_r+0x5c4>)
 800311c:	2200      	movs	r2, #0
 800311e:	4620      	mov	r0, r4
 8003120:	4629      	mov	r1, r5
 8003122:	f7fd fce3 	bl	8000aec <__aeabi_dcmplt>
 8003126:	2800      	cmp	r0, #0
 8003128:	f000 80ae 	beq.w	8003288 <_dtoa_r+0x518>
 800312c:	9b07      	ldr	r3, [sp, #28]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80aa 	beq.w	8003288 <_dtoa_r+0x518>
 8003134:	9b00      	ldr	r3, [sp, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	dd37      	ble.n	80031aa <_dtoa_r+0x43a>
 800313a:	1e7b      	subs	r3, r7, #1
 800313c:	9304      	str	r3, [sp, #16]
 800313e:	4620      	mov	r0, r4
 8003140:	4b7d      	ldr	r3, [pc, #500]	@ (8003338 <_dtoa_r+0x5c8>)
 8003142:	2200      	movs	r2, #0
 8003144:	4629      	mov	r1, r5
 8003146:	f7fd fa5f 	bl	8000608 <__aeabi_dmul>
 800314a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800314e:	9c00      	ldr	r4, [sp, #0]
 8003150:	3601      	adds	r6, #1
 8003152:	4630      	mov	r0, r6
 8003154:	f7fd f9ee 	bl	8000534 <__aeabi_i2d>
 8003158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800315c:	f7fd fa54 	bl	8000608 <__aeabi_dmul>
 8003160:	4b76      	ldr	r3, [pc, #472]	@ (800333c <_dtoa_r+0x5cc>)
 8003162:	2200      	movs	r2, #0
 8003164:	f7fd f89a 	bl	800029c <__adddf3>
 8003168:	4605      	mov	r5, r0
 800316a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800316e:	2c00      	cmp	r4, #0
 8003170:	f040 808d 	bne.w	800328e <_dtoa_r+0x51e>
 8003174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003178:	4b71      	ldr	r3, [pc, #452]	@ (8003340 <_dtoa_r+0x5d0>)
 800317a:	2200      	movs	r2, #0
 800317c:	f7fd f88c 	bl	8000298 <__aeabi_dsub>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003188:	462a      	mov	r2, r5
 800318a:	4633      	mov	r3, r6
 800318c:	f7fd fccc 	bl	8000b28 <__aeabi_dcmpgt>
 8003190:	2800      	cmp	r0, #0
 8003192:	f040 828b 	bne.w	80036ac <_dtoa_r+0x93c>
 8003196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800319a:	462a      	mov	r2, r5
 800319c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80031a0:	f7fd fca4 	bl	8000aec <__aeabi_dcmplt>
 80031a4:	2800      	cmp	r0, #0
 80031a6:	f040 8128 	bne.w	80033fa <_dtoa_r+0x68a>
 80031aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80031ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80031b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f2c0 815a 	blt.w	800346e <_dtoa_r+0x6fe>
 80031ba:	2f0e      	cmp	r7, #14
 80031bc:	f300 8157 	bgt.w	800346e <_dtoa_r+0x6fe>
 80031c0:	4b5a      	ldr	r3, [pc, #360]	@ (800332c <_dtoa_r+0x5bc>)
 80031c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80031c6:	ed93 7b00 	vldr	d7, [r3]
 80031ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	ed8d 7b00 	vstr	d7, [sp]
 80031d2:	da03      	bge.n	80031dc <_dtoa_r+0x46c>
 80031d4:	9b07      	ldr	r3, [sp, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f340 8101 	ble.w	80033de <_dtoa_r+0x66e>
 80031dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80031e0:	4656      	mov	r6, sl
 80031e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80031e6:	4620      	mov	r0, r4
 80031e8:	4629      	mov	r1, r5
 80031ea:	f7fd fb37 	bl	800085c <__aeabi_ddiv>
 80031ee:	f7fd fcbb 	bl	8000b68 <__aeabi_d2iz>
 80031f2:	4680      	mov	r8, r0
 80031f4:	f7fd f99e 	bl	8000534 <__aeabi_i2d>
 80031f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80031fc:	f7fd fa04 	bl	8000608 <__aeabi_dmul>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4620      	mov	r0, r4
 8003206:	4629      	mov	r1, r5
 8003208:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800320c:	f7fd f844 	bl	8000298 <__aeabi_dsub>
 8003210:	f806 4b01 	strb.w	r4, [r6], #1
 8003214:	9d07      	ldr	r5, [sp, #28]
 8003216:	eba6 040a 	sub.w	r4, r6, sl
 800321a:	42a5      	cmp	r5, r4
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	f040 8117 	bne.w	8003452 <_dtoa_r+0x6e2>
 8003224:	f7fd f83a 	bl	800029c <__adddf3>
 8003228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800322c:	4604      	mov	r4, r0
 800322e:	460d      	mov	r5, r1
 8003230:	f7fd fc7a 	bl	8000b28 <__aeabi_dcmpgt>
 8003234:	2800      	cmp	r0, #0
 8003236:	f040 80f9 	bne.w	800342c <_dtoa_r+0x6bc>
 800323a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800323e:	4620      	mov	r0, r4
 8003240:	4629      	mov	r1, r5
 8003242:	f7fd fc49 	bl	8000ad8 <__aeabi_dcmpeq>
 8003246:	b118      	cbz	r0, 8003250 <_dtoa_r+0x4e0>
 8003248:	f018 0f01 	tst.w	r8, #1
 800324c:	f040 80ee 	bne.w	800342c <_dtoa_r+0x6bc>
 8003250:	4649      	mov	r1, r9
 8003252:	4658      	mov	r0, fp
 8003254:	f000 fc90 	bl	8003b78 <_Bfree>
 8003258:	2300      	movs	r3, #0
 800325a:	7033      	strb	r3, [r6, #0]
 800325c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800325e:	3701      	adds	r7, #1
 8003260:	601f      	str	r7, [r3, #0]
 8003262:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 831d 	beq.w	80038a4 <_dtoa_r+0xb34>
 800326a:	601e      	str	r6, [r3, #0]
 800326c:	e31a      	b.n	80038a4 <_dtoa_r+0xb34>
 800326e:	07e2      	lsls	r2, r4, #31
 8003270:	d505      	bpl.n	800327e <_dtoa_r+0x50e>
 8003272:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003276:	f7fd f9c7 	bl	8000608 <__aeabi_dmul>
 800327a:	3601      	adds	r6, #1
 800327c:	2301      	movs	r3, #1
 800327e:	1064      	asrs	r4, r4, #1
 8003280:	3508      	adds	r5, #8
 8003282:	e73f      	b.n	8003104 <_dtoa_r+0x394>
 8003284:	2602      	movs	r6, #2
 8003286:	e742      	b.n	800310e <_dtoa_r+0x39e>
 8003288:	9c07      	ldr	r4, [sp, #28]
 800328a:	9704      	str	r7, [sp, #16]
 800328c:	e761      	b.n	8003152 <_dtoa_r+0x3e2>
 800328e:	4b27      	ldr	r3, [pc, #156]	@ (800332c <_dtoa_r+0x5bc>)
 8003290:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003292:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003296:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800329a:	4454      	add	r4, sl
 800329c:	2900      	cmp	r1, #0
 800329e:	d053      	beq.n	8003348 <_dtoa_r+0x5d8>
 80032a0:	4928      	ldr	r1, [pc, #160]	@ (8003344 <_dtoa_r+0x5d4>)
 80032a2:	2000      	movs	r0, #0
 80032a4:	f7fd fada 	bl	800085c <__aeabi_ddiv>
 80032a8:	4633      	mov	r3, r6
 80032aa:	462a      	mov	r2, r5
 80032ac:	f7fc fff4 	bl	8000298 <__aeabi_dsub>
 80032b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80032b4:	4656      	mov	r6, sl
 80032b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032ba:	f7fd fc55 	bl	8000b68 <__aeabi_d2iz>
 80032be:	4605      	mov	r5, r0
 80032c0:	f7fd f938 	bl	8000534 <__aeabi_i2d>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032cc:	f7fc ffe4 	bl	8000298 <__aeabi_dsub>
 80032d0:	3530      	adds	r5, #48	@ 0x30
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032da:	f806 5b01 	strb.w	r5, [r6], #1
 80032de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80032e2:	f7fd fc03 	bl	8000aec <__aeabi_dcmplt>
 80032e6:	2800      	cmp	r0, #0
 80032e8:	d171      	bne.n	80033ce <_dtoa_r+0x65e>
 80032ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032ee:	4911      	ldr	r1, [pc, #68]	@ (8003334 <_dtoa_r+0x5c4>)
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7fc ffd1 	bl	8000298 <__aeabi_dsub>
 80032f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80032fa:	f7fd fbf7 	bl	8000aec <__aeabi_dcmplt>
 80032fe:	2800      	cmp	r0, #0
 8003300:	f040 8095 	bne.w	800342e <_dtoa_r+0x6be>
 8003304:	42a6      	cmp	r6, r4
 8003306:	f43f af50 	beq.w	80031aa <_dtoa_r+0x43a>
 800330a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800330e:	4b0a      	ldr	r3, [pc, #40]	@ (8003338 <_dtoa_r+0x5c8>)
 8003310:	2200      	movs	r2, #0
 8003312:	f7fd f979 	bl	8000608 <__aeabi_dmul>
 8003316:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <_dtoa_r+0x5c8>)
 8003318:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800331c:	2200      	movs	r2, #0
 800331e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003322:	f7fd f971 	bl	8000608 <__aeabi_dmul>
 8003326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800332a:	e7c4      	b.n	80032b6 <_dtoa_r+0x546>
 800332c:	08004af0 	.word	0x08004af0
 8003330:	08004ac8 	.word	0x08004ac8
 8003334:	3ff00000 	.word	0x3ff00000
 8003338:	40240000 	.word	0x40240000
 800333c:	401c0000 	.word	0x401c0000
 8003340:	40140000 	.word	0x40140000
 8003344:	3fe00000 	.word	0x3fe00000
 8003348:	4631      	mov	r1, r6
 800334a:	4628      	mov	r0, r5
 800334c:	f7fd f95c 	bl	8000608 <__aeabi_dmul>
 8003350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003354:	9415      	str	r4, [sp, #84]	@ 0x54
 8003356:	4656      	mov	r6, sl
 8003358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800335c:	f7fd fc04 	bl	8000b68 <__aeabi_d2iz>
 8003360:	4605      	mov	r5, r0
 8003362:	f7fd f8e7 	bl	8000534 <__aeabi_i2d>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800336e:	f7fc ff93 	bl	8000298 <__aeabi_dsub>
 8003372:	3530      	adds	r5, #48	@ 0x30
 8003374:	f806 5b01 	strb.w	r5, [r6], #1
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	42a6      	cmp	r6, r4
 800337e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	d124      	bne.n	80033d2 <_dtoa_r+0x662>
 8003388:	4bac      	ldr	r3, [pc, #688]	@ (800363c <_dtoa_r+0x8cc>)
 800338a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800338e:	f7fc ff85 	bl	800029c <__adddf3>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800339a:	f7fd fbc5 	bl	8000b28 <__aeabi_dcmpgt>
 800339e:	2800      	cmp	r0, #0
 80033a0:	d145      	bne.n	800342e <_dtoa_r+0x6be>
 80033a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80033a6:	49a5      	ldr	r1, [pc, #660]	@ (800363c <_dtoa_r+0x8cc>)
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7fc ff75 	bl	8000298 <__aeabi_dsub>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033b6:	f7fd fb99 	bl	8000aec <__aeabi_dcmplt>
 80033ba:	2800      	cmp	r0, #0
 80033bc:	f43f aef5 	beq.w	80031aa <_dtoa_r+0x43a>
 80033c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80033c2:	1e73      	subs	r3, r6, #1
 80033c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80033c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80033ca:	2b30      	cmp	r3, #48	@ 0x30
 80033cc:	d0f8      	beq.n	80033c0 <_dtoa_r+0x650>
 80033ce:	9f04      	ldr	r7, [sp, #16]
 80033d0:	e73e      	b.n	8003250 <_dtoa_r+0x4e0>
 80033d2:	4b9b      	ldr	r3, [pc, #620]	@ (8003640 <_dtoa_r+0x8d0>)
 80033d4:	f7fd f918 	bl	8000608 <__aeabi_dmul>
 80033d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033dc:	e7bc      	b.n	8003358 <_dtoa_r+0x5e8>
 80033de:	d10c      	bne.n	80033fa <_dtoa_r+0x68a>
 80033e0:	4b98      	ldr	r3, [pc, #608]	@ (8003644 <_dtoa_r+0x8d4>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033e8:	f7fd f90e 	bl	8000608 <__aeabi_dmul>
 80033ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033f0:	f7fd fb90 	bl	8000b14 <__aeabi_dcmpge>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	f000 8157 	beq.w	80036a8 <_dtoa_r+0x938>
 80033fa:	2400      	movs	r4, #0
 80033fc:	4625      	mov	r5, r4
 80033fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003400:	43db      	mvns	r3, r3
 8003402:	9304      	str	r3, [sp, #16]
 8003404:	4656      	mov	r6, sl
 8003406:	2700      	movs	r7, #0
 8003408:	4621      	mov	r1, r4
 800340a:	4658      	mov	r0, fp
 800340c:	f000 fbb4 	bl	8003b78 <_Bfree>
 8003410:	2d00      	cmp	r5, #0
 8003412:	d0dc      	beq.n	80033ce <_dtoa_r+0x65e>
 8003414:	b12f      	cbz	r7, 8003422 <_dtoa_r+0x6b2>
 8003416:	42af      	cmp	r7, r5
 8003418:	d003      	beq.n	8003422 <_dtoa_r+0x6b2>
 800341a:	4639      	mov	r1, r7
 800341c:	4658      	mov	r0, fp
 800341e:	f000 fbab 	bl	8003b78 <_Bfree>
 8003422:	4629      	mov	r1, r5
 8003424:	4658      	mov	r0, fp
 8003426:	f000 fba7 	bl	8003b78 <_Bfree>
 800342a:	e7d0      	b.n	80033ce <_dtoa_r+0x65e>
 800342c:	9704      	str	r7, [sp, #16]
 800342e:	4633      	mov	r3, r6
 8003430:	461e      	mov	r6, r3
 8003432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003436:	2a39      	cmp	r2, #57	@ 0x39
 8003438:	d107      	bne.n	800344a <_dtoa_r+0x6da>
 800343a:	459a      	cmp	sl, r3
 800343c:	d1f8      	bne.n	8003430 <_dtoa_r+0x6c0>
 800343e:	9a04      	ldr	r2, [sp, #16]
 8003440:	3201      	adds	r2, #1
 8003442:	9204      	str	r2, [sp, #16]
 8003444:	2230      	movs	r2, #48	@ 0x30
 8003446:	f88a 2000 	strb.w	r2, [sl]
 800344a:	781a      	ldrb	r2, [r3, #0]
 800344c:	3201      	adds	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	e7bd      	b.n	80033ce <_dtoa_r+0x65e>
 8003452:	4b7b      	ldr	r3, [pc, #492]	@ (8003640 <_dtoa_r+0x8d0>)
 8003454:	2200      	movs	r2, #0
 8003456:	f7fd f8d7 	bl	8000608 <__aeabi_dmul>
 800345a:	2200      	movs	r2, #0
 800345c:	2300      	movs	r3, #0
 800345e:	4604      	mov	r4, r0
 8003460:	460d      	mov	r5, r1
 8003462:	f7fd fb39 	bl	8000ad8 <__aeabi_dcmpeq>
 8003466:	2800      	cmp	r0, #0
 8003468:	f43f aebb 	beq.w	80031e2 <_dtoa_r+0x472>
 800346c:	e6f0      	b.n	8003250 <_dtoa_r+0x4e0>
 800346e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003470:	2a00      	cmp	r2, #0
 8003472:	f000 80db 	beq.w	800362c <_dtoa_r+0x8bc>
 8003476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003478:	2a01      	cmp	r2, #1
 800347a:	f300 80bf 	bgt.w	80035fc <_dtoa_r+0x88c>
 800347e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003480:	2a00      	cmp	r2, #0
 8003482:	f000 80b7 	beq.w	80035f4 <_dtoa_r+0x884>
 8003486:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800348a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800348c:	4646      	mov	r6, r8
 800348e:	9a08      	ldr	r2, [sp, #32]
 8003490:	2101      	movs	r1, #1
 8003492:	441a      	add	r2, r3
 8003494:	4658      	mov	r0, fp
 8003496:	4498      	add	r8, r3
 8003498:	9208      	str	r2, [sp, #32]
 800349a:	f000 fc21 	bl	8003ce0 <__i2b>
 800349e:	4605      	mov	r5, r0
 80034a0:	b15e      	cbz	r6, 80034ba <_dtoa_r+0x74a>
 80034a2:	9b08      	ldr	r3, [sp, #32]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	dd08      	ble.n	80034ba <_dtoa_r+0x74a>
 80034a8:	42b3      	cmp	r3, r6
 80034aa:	9a08      	ldr	r2, [sp, #32]
 80034ac:	bfa8      	it	ge
 80034ae:	4633      	movge	r3, r6
 80034b0:	eba8 0803 	sub.w	r8, r8, r3
 80034b4:	1af6      	subs	r6, r6, r3
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	9308      	str	r3, [sp, #32]
 80034ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034bc:	b1f3      	cbz	r3, 80034fc <_dtoa_r+0x78c>
 80034be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80b7 	beq.w	8003634 <_dtoa_r+0x8c4>
 80034c6:	b18c      	cbz	r4, 80034ec <_dtoa_r+0x77c>
 80034c8:	4629      	mov	r1, r5
 80034ca:	4622      	mov	r2, r4
 80034cc:	4658      	mov	r0, fp
 80034ce:	f000 fcc7 	bl	8003e60 <__pow5mult>
 80034d2:	464a      	mov	r2, r9
 80034d4:	4601      	mov	r1, r0
 80034d6:	4605      	mov	r5, r0
 80034d8:	4658      	mov	r0, fp
 80034da:	f000 fc17 	bl	8003d0c <__multiply>
 80034de:	4649      	mov	r1, r9
 80034e0:	9004      	str	r0, [sp, #16]
 80034e2:	4658      	mov	r0, fp
 80034e4:	f000 fb48 	bl	8003b78 <_Bfree>
 80034e8:	9b04      	ldr	r3, [sp, #16]
 80034ea:	4699      	mov	r9, r3
 80034ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034ee:	1b1a      	subs	r2, r3, r4
 80034f0:	d004      	beq.n	80034fc <_dtoa_r+0x78c>
 80034f2:	4649      	mov	r1, r9
 80034f4:	4658      	mov	r0, fp
 80034f6:	f000 fcb3 	bl	8003e60 <__pow5mult>
 80034fa:	4681      	mov	r9, r0
 80034fc:	2101      	movs	r1, #1
 80034fe:	4658      	mov	r0, fp
 8003500:	f000 fbee 	bl	8003ce0 <__i2b>
 8003504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003506:	4604      	mov	r4, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 81cf 	beq.w	80038ac <_dtoa_r+0xb3c>
 800350e:	461a      	mov	r2, r3
 8003510:	4601      	mov	r1, r0
 8003512:	4658      	mov	r0, fp
 8003514:	f000 fca4 	bl	8003e60 <__pow5mult>
 8003518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800351a:	2b01      	cmp	r3, #1
 800351c:	4604      	mov	r4, r0
 800351e:	f300 8095 	bgt.w	800364c <_dtoa_r+0x8dc>
 8003522:	9b02      	ldr	r3, [sp, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f040 8087 	bne.w	8003638 <_dtoa_r+0x8c8>
 800352a:	9b03      	ldr	r3, [sp, #12]
 800352c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003530:	2b00      	cmp	r3, #0
 8003532:	f040 8089 	bne.w	8003648 <_dtoa_r+0x8d8>
 8003536:	9b03      	ldr	r3, [sp, #12]
 8003538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800353c:	0d1b      	lsrs	r3, r3, #20
 800353e:	051b      	lsls	r3, r3, #20
 8003540:	b12b      	cbz	r3, 800354e <_dtoa_r+0x7de>
 8003542:	9b08      	ldr	r3, [sp, #32]
 8003544:	3301      	adds	r3, #1
 8003546:	9308      	str	r3, [sp, #32]
 8003548:	f108 0801 	add.w	r8, r8, #1
 800354c:	2301      	movs	r3, #1
 800354e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 81b0 	beq.w	80038b8 <_dtoa_r+0xb48>
 8003558:	6923      	ldr	r3, [r4, #16]
 800355a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800355e:	6918      	ldr	r0, [r3, #16]
 8003560:	f000 fb72 	bl	8003c48 <__hi0bits>
 8003564:	f1c0 0020 	rsb	r0, r0, #32
 8003568:	9b08      	ldr	r3, [sp, #32]
 800356a:	4418      	add	r0, r3
 800356c:	f010 001f 	ands.w	r0, r0, #31
 8003570:	d077      	beq.n	8003662 <_dtoa_r+0x8f2>
 8003572:	f1c0 0320 	rsb	r3, r0, #32
 8003576:	2b04      	cmp	r3, #4
 8003578:	dd6b      	ble.n	8003652 <_dtoa_r+0x8e2>
 800357a:	9b08      	ldr	r3, [sp, #32]
 800357c:	f1c0 001c 	rsb	r0, r0, #28
 8003580:	4403      	add	r3, r0
 8003582:	4480      	add	r8, r0
 8003584:	4406      	add	r6, r0
 8003586:	9308      	str	r3, [sp, #32]
 8003588:	f1b8 0f00 	cmp.w	r8, #0
 800358c:	dd05      	ble.n	800359a <_dtoa_r+0x82a>
 800358e:	4649      	mov	r1, r9
 8003590:	4642      	mov	r2, r8
 8003592:	4658      	mov	r0, fp
 8003594:	f000 fcbe 	bl	8003f14 <__lshift>
 8003598:	4681      	mov	r9, r0
 800359a:	9b08      	ldr	r3, [sp, #32]
 800359c:	2b00      	cmp	r3, #0
 800359e:	dd05      	ble.n	80035ac <_dtoa_r+0x83c>
 80035a0:	4621      	mov	r1, r4
 80035a2:	461a      	mov	r2, r3
 80035a4:	4658      	mov	r0, fp
 80035a6:	f000 fcb5 	bl	8003f14 <__lshift>
 80035aa:	4604      	mov	r4, r0
 80035ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d059      	beq.n	8003666 <_dtoa_r+0x8f6>
 80035b2:	4621      	mov	r1, r4
 80035b4:	4648      	mov	r0, r9
 80035b6:	f000 fd19 	bl	8003fec <__mcmp>
 80035ba:	2800      	cmp	r0, #0
 80035bc:	da53      	bge.n	8003666 <_dtoa_r+0x8f6>
 80035be:	1e7b      	subs	r3, r7, #1
 80035c0:	9304      	str	r3, [sp, #16]
 80035c2:	4649      	mov	r1, r9
 80035c4:	2300      	movs	r3, #0
 80035c6:	220a      	movs	r2, #10
 80035c8:	4658      	mov	r0, fp
 80035ca:	f000 faf7 	bl	8003bbc <__multadd>
 80035ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80035d0:	4681      	mov	r9, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8172 	beq.w	80038bc <_dtoa_r+0xb4c>
 80035d8:	2300      	movs	r3, #0
 80035da:	4629      	mov	r1, r5
 80035dc:	220a      	movs	r2, #10
 80035de:	4658      	mov	r0, fp
 80035e0:	f000 faec 	bl	8003bbc <__multadd>
 80035e4:	9b00      	ldr	r3, [sp, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	4605      	mov	r5, r0
 80035ea:	dc67      	bgt.n	80036bc <_dtoa_r+0x94c>
 80035ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	dc41      	bgt.n	8003676 <_dtoa_r+0x906>
 80035f2:	e063      	b.n	80036bc <_dtoa_r+0x94c>
 80035f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80035f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80035fa:	e746      	b.n	800348a <_dtoa_r+0x71a>
 80035fc:	9b07      	ldr	r3, [sp, #28]
 80035fe:	1e5c      	subs	r4, r3, #1
 8003600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003602:	42a3      	cmp	r3, r4
 8003604:	bfbf      	itttt	lt
 8003606:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8003608:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800360a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800360c:	1ae3      	sublt	r3, r4, r3
 800360e:	bfb4      	ite	lt
 8003610:	18d2      	addlt	r2, r2, r3
 8003612:	1b1c      	subge	r4, r3, r4
 8003614:	9b07      	ldr	r3, [sp, #28]
 8003616:	bfbc      	itt	lt
 8003618:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800361a:	2400      	movlt	r4, #0
 800361c:	2b00      	cmp	r3, #0
 800361e:	bfb5      	itete	lt
 8003620:	eba8 0603 	sublt.w	r6, r8, r3
 8003624:	9b07      	ldrge	r3, [sp, #28]
 8003626:	2300      	movlt	r3, #0
 8003628:	4646      	movge	r6, r8
 800362a:	e730      	b.n	800348e <_dtoa_r+0x71e>
 800362c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800362e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003630:	4646      	mov	r6, r8
 8003632:	e735      	b.n	80034a0 <_dtoa_r+0x730>
 8003634:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003636:	e75c      	b.n	80034f2 <_dtoa_r+0x782>
 8003638:	2300      	movs	r3, #0
 800363a:	e788      	b.n	800354e <_dtoa_r+0x7de>
 800363c:	3fe00000 	.word	0x3fe00000
 8003640:	40240000 	.word	0x40240000
 8003644:	40140000 	.word	0x40140000
 8003648:	9b02      	ldr	r3, [sp, #8]
 800364a:	e780      	b.n	800354e <_dtoa_r+0x7de>
 800364c:	2300      	movs	r3, #0
 800364e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003650:	e782      	b.n	8003558 <_dtoa_r+0x7e8>
 8003652:	d099      	beq.n	8003588 <_dtoa_r+0x818>
 8003654:	9a08      	ldr	r2, [sp, #32]
 8003656:	331c      	adds	r3, #28
 8003658:	441a      	add	r2, r3
 800365a:	4498      	add	r8, r3
 800365c:	441e      	add	r6, r3
 800365e:	9208      	str	r2, [sp, #32]
 8003660:	e792      	b.n	8003588 <_dtoa_r+0x818>
 8003662:	4603      	mov	r3, r0
 8003664:	e7f6      	b.n	8003654 <_dtoa_r+0x8e4>
 8003666:	9b07      	ldr	r3, [sp, #28]
 8003668:	9704      	str	r7, [sp, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	dc20      	bgt.n	80036b0 <_dtoa_r+0x940>
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003672:	2b02      	cmp	r3, #2
 8003674:	dd1e      	ble.n	80036b4 <_dtoa_r+0x944>
 8003676:	9b00      	ldr	r3, [sp, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f47f aec0 	bne.w	80033fe <_dtoa_r+0x68e>
 800367e:	4621      	mov	r1, r4
 8003680:	2205      	movs	r2, #5
 8003682:	4658      	mov	r0, fp
 8003684:	f000 fa9a 	bl	8003bbc <__multadd>
 8003688:	4601      	mov	r1, r0
 800368a:	4604      	mov	r4, r0
 800368c:	4648      	mov	r0, r9
 800368e:	f000 fcad 	bl	8003fec <__mcmp>
 8003692:	2800      	cmp	r0, #0
 8003694:	f77f aeb3 	ble.w	80033fe <_dtoa_r+0x68e>
 8003698:	4656      	mov	r6, sl
 800369a:	2331      	movs	r3, #49	@ 0x31
 800369c:	f806 3b01 	strb.w	r3, [r6], #1
 80036a0:	9b04      	ldr	r3, [sp, #16]
 80036a2:	3301      	adds	r3, #1
 80036a4:	9304      	str	r3, [sp, #16]
 80036a6:	e6ae      	b.n	8003406 <_dtoa_r+0x696>
 80036a8:	9c07      	ldr	r4, [sp, #28]
 80036aa:	9704      	str	r7, [sp, #16]
 80036ac:	4625      	mov	r5, r4
 80036ae:	e7f3      	b.n	8003698 <_dtoa_r+0x928>
 80036b0:	9b07      	ldr	r3, [sp, #28]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8104 	beq.w	80038c4 <_dtoa_r+0xb54>
 80036bc:	2e00      	cmp	r6, #0
 80036be:	dd05      	ble.n	80036cc <_dtoa_r+0x95c>
 80036c0:	4629      	mov	r1, r5
 80036c2:	4632      	mov	r2, r6
 80036c4:	4658      	mov	r0, fp
 80036c6:	f000 fc25 	bl	8003f14 <__lshift>
 80036ca:	4605      	mov	r5, r0
 80036cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d05a      	beq.n	8003788 <_dtoa_r+0xa18>
 80036d2:	6869      	ldr	r1, [r5, #4]
 80036d4:	4658      	mov	r0, fp
 80036d6:	f000 fa0f 	bl	8003af8 <_Balloc>
 80036da:	4606      	mov	r6, r0
 80036dc:	b928      	cbnz	r0, 80036ea <_dtoa_r+0x97a>
 80036de:	4b84      	ldr	r3, [pc, #528]	@ (80038f0 <_dtoa_r+0xb80>)
 80036e0:	4602      	mov	r2, r0
 80036e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80036e6:	f7ff bb5a 	b.w	8002d9e <_dtoa_r+0x2e>
 80036ea:	692a      	ldr	r2, [r5, #16]
 80036ec:	3202      	adds	r2, #2
 80036ee:	0092      	lsls	r2, r2, #2
 80036f0:	f105 010c 	add.w	r1, r5, #12
 80036f4:	300c      	adds	r0, #12
 80036f6:	f7ff faa4 	bl	8002c42 <memcpy>
 80036fa:	2201      	movs	r2, #1
 80036fc:	4631      	mov	r1, r6
 80036fe:	4658      	mov	r0, fp
 8003700:	f000 fc08 	bl	8003f14 <__lshift>
 8003704:	f10a 0301 	add.w	r3, sl, #1
 8003708:	9307      	str	r3, [sp, #28]
 800370a:	9b00      	ldr	r3, [sp, #0]
 800370c:	4453      	add	r3, sl
 800370e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003710:	9b02      	ldr	r3, [sp, #8]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	462f      	mov	r7, r5
 8003718:	930a      	str	r3, [sp, #40]	@ 0x28
 800371a:	4605      	mov	r5, r0
 800371c:	9b07      	ldr	r3, [sp, #28]
 800371e:	4621      	mov	r1, r4
 8003720:	3b01      	subs	r3, #1
 8003722:	4648      	mov	r0, r9
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	f7ff fa9a 	bl	8002c5e <quorem>
 800372a:	4639      	mov	r1, r7
 800372c:	9002      	str	r0, [sp, #8]
 800372e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003732:	4648      	mov	r0, r9
 8003734:	f000 fc5a 	bl	8003fec <__mcmp>
 8003738:	462a      	mov	r2, r5
 800373a:	9008      	str	r0, [sp, #32]
 800373c:	4621      	mov	r1, r4
 800373e:	4658      	mov	r0, fp
 8003740:	f000 fc70 	bl	8004024 <__mdiff>
 8003744:	68c2      	ldr	r2, [r0, #12]
 8003746:	4606      	mov	r6, r0
 8003748:	bb02      	cbnz	r2, 800378c <_dtoa_r+0xa1c>
 800374a:	4601      	mov	r1, r0
 800374c:	4648      	mov	r0, r9
 800374e:	f000 fc4d 	bl	8003fec <__mcmp>
 8003752:	4602      	mov	r2, r0
 8003754:	4631      	mov	r1, r6
 8003756:	4658      	mov	r0, fp
 8003758:	920e      	str	r2, [sp, #56]	@ 0x38
 800375a:	f000 fa0d 	bl	8003b78 <_Bfree>
 800375e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003760:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003762:	9e07      	ldr	r6, [sp, #28]
 8003764:	ea43 0102 	orr.w	r1, r3, r2
 8003768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800376a:	4319      	orrs	r1, r3
 800376c:	d110      	bne.n	8003790 <_dtoa_r+0xa20>
 800376e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003772:	d029      	beq.n	80037c8 <_dtoa_r+0xa58>
 8003774:	9b08      	ldr	r3, [sp, #32]
 8003776:	2b00      	cmp	r3, #0
 8003778:	dd02      	ble.n	8003780 <_dtoa_r+0xa10>
 800377a:	9b02      	ldr	r3, [sp, #8]
 800377c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003780:	9b00      	ldr	r3, [sp, #0]
 8003782:	f883 8000 	strb.w	r8, [r3]
 8003786:	e63f      	b.n	8003408 <_dtoa_r+0x698>
 8003788:	4628      	mov	r0, r5
 800378a:	e7bb      	b.n	8003704 <_dtoa_r+0x994>
 800378c:	2201      	movs	r2, #1
 800378e:	e7e1      	b.n	8003754 <_dtoa_r+0x9e4>
 8003790:	9b08      	ldr	r3, [sp, #32]
 8003792:	2b00      	cmp	r3, #0
 8003794:	db04      	blt.n	80037a0 <_dtoa_r+0xa30>
 8003796:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003798:	430b      	orrs	r3, r1
 800379a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800379c:	430b      	orrs	r3, r1
 800379e:	d120      	bne.n	80037e2 <_dtoa_r+0xa72>
 80037a0:	2a00      	cmp	r2, #0
 80037a2:	dded      	ble.n	8003780 <_dtoa_r+0xa10>
 80037a4:	4649      	mov	r1, r9
 80037a6:	2201      	movs	r2, #1
 80037a8:	4658      	mov	r0, fp
 80037aa:	f000 fbb3 	bl	8003f14 <__lshift>
 80037ae:	4621      	mov	r1, r4
 80037b0:	4681      	mov	r9, r0
 80037b2:	f000 fc1b 	bl	8003fec <__mcmp>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	dc03      	bgt.n	80037c2 <_dtoa_r+0xa52>
 80037ba:	d1e1      	bne.n	8003780 <_dtoa_r+0xa10>
 80037bc:	f018 0f01 	tst.w	r8, #1
 80037c0:	d0de      	beq.n	8003780 <_dtoa_r+0xa10>
 80037c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80037c6:	d1d8      	bne.n	800377a <_dtoa_r+0xa0a>
 80037c8:	9a00      	ldr	r2, [sp, #0]
 80037ca:	2339      	movs	r3, #57	@ 0x39
 80037cc:	7013      	strb	r3, [r2, #0]
 80037ce:	4633      	mov	r3, r6
 80037d0:	461e      	mov	r6, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80037d8:	2a39      	cmp	r2, #57	@ 0x39
 80037da:	d052      	beq.n	8003882 <_dtoa_r+0xb12>
 80037dc:	3201      	adds	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e612      	b.n	8003408 <_dtoa_r+0x698>
 80037e2:	2a00      	cmp	r2, #0
 80037e4:	dd07      	ble.n	80037f6 <_dtoa_r+0xa86>
 80037e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80037ea:	d0ed      	beq.n	80037c8 <_dtoa_r+0xa58>
 80037ec:	9a00      	ldr	r2, [sp, #0]
 80037ee:	f108 0301 	add.w	r3, r8, #1
 80037f2:	7013      	strb	r3, [r2, #0]
 80037f4:	e608      	b.n	8003408 <_dtoa_r+0x698>
 80037f6:	9b07      	ldr	r3, [sp, #28]
 80037f8:	9a07      	ldr	r2, [sp, #28]
 80037fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80037fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003800:	4293      	cmp	r3, r2
 8003802:	d028      	beq.n	8003856 <_dtoa_r+0xae6>
 8003804:	4649      	mov	r1, r9
 8003806:	2300      	movs	r3, #0
 8003808:	220a      	movs	r2, #10
 800380a:	4658      	mov	r0, fp
 800380c:	f000 f9d6 	bl	8003bbc <__multadd>
 8003810:	42af      	cmp	r7, r5
 8003812:	4681      	mov	r9, r0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	f04f 020a 	mov.w	r2, #10
 800381c:	4639      	mov	r1, r7
 800381e:	4658      	mov	r0, fp
 8003820:	d107      	bne.n	8003832 <_dtoa_r+0xac2>
 8003822:	f000 f9cb 	bl	8003bbc <__multadd>
 8003826:	4607      	mov	r7, r0
 8003828:	4605      	mov	r5, r0
 800382a:	9b07      	ldr	r3, [sp, #28]
 800382c:	3301      	adds	r3, #1
 800382e:	9307      	str	r3, [sp, #28]
 8003830:	e774      	b.n	800371c <_dtoa_r+0x9ac>
 8003832:	f000 f9c3 	bl	8003bbc <__multadd>
 8003836:	4629      	mov	r1, r5
 8003838:	4607      	mov	r7, r0
 800383a:	2300      	movs	r3, #0
 800383c:	220a      	movs	r2, #10
 800383e:	4658      	mov	r0, fp
 8003840:	f000 f9bc 	bl	8003bbc <__multadd>
 8003844:	4605      	mov	r5, r0
 8003846:	e7f0      	b.n	800382a <_dtoa_r+0xaba>
 8003848:	9b00      	ldr	r3, [sp, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	bfcc      	ite	gt
 800384e:	461e      	movgt	r6, r3
 8003850:	2601      	movle	r6, #1
 8003852:	4456      	add	r6, sl
 8003854:	2700      	movs	r7, #0
 8003856:	4649      	mov	r1, r9
 8003858:	2201      	movs	r2, #1
 800385a:	4658      	mov	r0, fp
 800385c:	f000 fb5a 	bl	8003f14 <__lshift>
 8003860:	4621      	mov	r1, r4
 8003862:	4681      	mov	r9, r0
 8003864:	f000 fbc2 	bl	8003fec <__mcmp>
 8003868:	2800      	cmp	r0, #0
 800386a:	dcb0      	bgt.n	80037ce <_dtoa_r+0xa5e>
 800386c:	d102      	bne.n	8003874 <_dtoa_r+0xb04>
 800386e:	f018 0f01 	tst.w	r8, #1
 8003872:	d1ac      	bne.n	80037ce <_dtoa_r+0xa5e>
 8003874:	4633      	mov	r3, r6
 8003876:	461e      	mov	r6, r3
 8003878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800387c:	2a30      	cmp	r2, #48	@ 0x30
 800387e:	d0fa      	beq.n	8003876 <_dtoa_r+0xb06>
 8003880:	e5c2      	b.n	8003408 <_dtoa_r+0x698>
 8003882:	459a      	cmp	sl, r3
 8003884:	d1a4      	bne.n	80037d0 <_dtoa_r+0xa60>
 8003886:	9b04      	ldr	r3, [sp, #16]
 8003888:	3301      	adds	r3, #1
 800388a:	9304      	str	r3, [sp, #16]
 800388c:	2331      	movs	r3, #49	@ 0x31
 800388e:	f88a 3000 	strb.w	r3, [sl]
 8003892:	e5b9      	b.n	8003408 <_dtoa_r+0x698>
 8003894:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003896:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80038f4 <_dtoa_r+0xb84>
 800389a:	b11b      	cbz	r3, 80038a4 <_dtoa_r+0xb34>
 800389c:	f10a 0308 	add.w	r3, sl, #8
 80038a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4650      	mov	r0, sl
 80038a6:	b019      	add	sp, #100	@ 0x64
 80038a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	f77f ae37 	ble.w	8003522 <_dtoa_r+0x7b2>
 80038b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80038b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80038b8:	2001      	movs	r0, #1
 80038ba:	e655      	b.n	8003568 <_dtoa_r+0x7f8>
 80038bc:	9b00      	ldr	r3, [sp, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f77f aed6 	ble.w	8003670 <_dtoa_r+0x900>
 80038c4:	4656      	mov	r6, sl
 80038c6:	4621      	mov	r1, r4
 80038c8:	4648      	mov	r0, r9
 80038ca:	f7ff f9c8 	bl	8002c5e <quorem>
 80038ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80038d2:	f806 8b01 	strb.w	r8, [r6], #1
 80038d6:	9b00      	ldr	r3, [sp, #0]
 80038d8:	eba6 020a 	sub.w	r2, r6, sl
 80038dc:	4293      	cmp	r3, r2
 80038de:	ddb3      	ble.n	8003848 <_dtoa_r+0xad8>
 80038e0:	4649      	mov	r1, r9
 80038e2:	2300      	movs	r3, #0
 80038e4:	220a      	movs	r2, #10
 80038e6:	4658      	mov	r0, fp
 80038e8:	f000 f968 	bl	8003bbc <__multadd>
 80038ec:	4681      	mov	r9, r0
 80038ee:	e7ea      	b.n	80038c6 <_dtoa_r+0xb56>
 80038f0:	08004a50 	.word	0x08004a50
 80038f4:	080049d4 	.word	0x080049d4

080038f8 <_free_r>:
 80038f8:	b538      	push	{r3, r4, r5, lr}
 80038fa:	4605      	mov	r5, r0
 80038fc:	2900      	cmp	r1, #0
 80038fe:	d041      	beq.n	8003984 <_free_r+0x8c>
 8003900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003904:	1f0c      	subs	r4, r1, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	bfb8      	it	lt
 800390a:	18e4      	addlt	r4, r4, r3
 800390c:	f000 f8e8 	bl	8003ae0 <__malloc_lock>
 8003910:	4a1d      	ldr	r2, [pc, #116]	@ (8003988 <_free_r+0x90>)
 8003912:	6813      	ldr	r3, [r2, #0]
 8003914:	b933      	cbnz	r3, 8003924 <_free_r+0x2c>
 8003916:	6063      	str	r3, [r4, #4]
 8003918:	6014      	str	r4, [r2, #0]
 800391a:	4628      	mov	r0, r5
 800391c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003920:	f000 b8e4 	b.w	8003aec <__malloc_unlock>
 8003924:	42a3      	cmp	r3, r4
 8003926:	d908      	bls.n	800393a <_free_r+0x42>
 8003928:	6820      	ldr	r0, [r4, #0]
 800392a:	1821      	adds	r1, r4, r0
 800392c:	428b      	cmp	r3, r1
 800392e:	bf01      	itttt	eq
 8003930:	6819      	ldreq	r1, [r3, #0]
 8003932:	685b      	ldreq	r3, [r3, #4]
 8003934:	1809      	addeq	r1, r1, r0
 8003936:	6021      	streq	r1, [r4, #0]
 8003938:	e7ed      	b.n	8003916 <_free_r+0x1e>
 800393a:	461a      	mov	r2, r3
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	b10b      	cbz	r3, 8003944 <_free_r+0x4c>
 8003940:	42a3      	cmp	r3, r4
 8003942:	d9fa      	bls.n	800393a <_free_r+0x42>
 8003944:	6811      	ldr	r1, [r2, #0]
 8003946:	1850      	adds	r0, r2, r1
 8003948:	42a0      	cmp	r0, r4
 800394a:	d10b      	bne.n	8003964 <_free_r+0x6c>
 800394c:	6820      	ldr	r0, [r4, #0]
 800394e:	4401      	add	r1, r0
 8003950:	1850      	adds	r0, r2, r1
 8003952:	4283      	cmp	r3, r0
 8003954:	6011      	str	r1, [r2, #0]
 8003956:	d1e0      	bne.n	800391a <_free_r+0x22>
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	6053      	str	r3, [r2, #4]
 800395e:	4408      	add	r0, r1
 8003960:	6010      	str	r0, [r2, #0]
 8003962:	e7da      	b.n	800391a <_free_r+0x22>
 8003964:	d902      	bls.n	800396c <_free_r+0x74>
 8003966:	230c      	movs	r3, #12
 8003968:	602b      	str	r3, [r5, #0]
 800396a:	e7d6      	b.n	800391a <_free_r+0x22>
 800396c:	6820      	ldr	r0, [r4, #0]
 800396e:	1821      	adds	r1, r4, r0
 8003970:	428b      	cmp	r3, r1
 8003972:	bf04      	itt	eq
 8003974:	6819      	ldreq	r1, [r3, #0]
 8003976:	685b      	ldreq	r3, [r3, #4]
 8003978:	6063      	str	r3, [r4, #4]
 800397a:	bf04      	itt	eq
 800397c:	1809      	addeq	r1, r1, r0
 800397e:	6021      	streq	r1, [r4, #0]
 8003980:	6054      	str	r4, [r2, #4]
 8003982:	e7ca      	b.n	800391a <_free_r+0x22>
 8003984:	bd38      	pop	{r3, r4, r5, pc}
 8003986:	bf00      	nop
 8003988:	200004a8 	.word	0x200004a8

0800398c <malloc>:
 800398c:	4b02      	ldr	r3, [pc, #8]	@ (8003998 <malloc+0xc>)
 800398e:	4601      	mov	r1, r0
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	f000 b825 	b.w	80039e0 <_malloc_r>
 8003996:	bf00      	nop
 8003998:	2000000c 	.word	0x2000000c

0800399c <sbrk_aligned>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	4e0f      	ldr	r6, [pc, #60]	@ (80039dc <sbrk_aligned+0x40>)
 80039a0:	460c      	mov	r4, r1
 80039a2:	6831      	ldr	r1, [r6, #0]
 80039a4:	4605      	mov	r5, r0
 80039a6:	b911      	cbnz	r1, 80039ae <sbrk_aligned+0x12>
 80039a8:	f000 fcd4 	bl	8004354 <_sbrk_r>
 80039ac:	6030      	str	r0, [r6, #0]
 80039ae:	4621      	mov	r1, r4
 80039b0:	4628      	mov	r0, r5
 80039b2:	f000 fccf 	bl	8004354 <_sbrk_r>
 80039b6:	1c43      	adds	r3, r0, #1
 80039b8:	d103      	bne.n	80039c2 <sbrk_aligned+0x26>
 80039ba:	f04f 34ff 	mov.w	r4, #4294967295
 80039be:	4620      	mov	r0, r4
 80039c0:	bd70      	pop	{r4, r5, r6, pc}
 80039c2:	1cc4      	adds	r4, r0, #3
 80039c4:	f024 0403 	bic.w	r4, r4, #3
 80039c8:	42a0      	cmp	r0, r4
 80039ca:	d0f8      	beq.n	80039be <sbrk_aligned+0x22>
 80039cc:	1a21      	subs	r1, r4, r0
 80039ce:	4628      	mov	r0, r5
 80039d0:	f000 fcc0 	bl	8004354 <_sbrk_r>
 80039d4:	3001      	adds	r0, #1
 80039d6:	d1f2      	bne.n	80039be <sbrk_aligned+0x22>
 80039d8:	e7ef      	b.n	80039ba <sbrk_aligned+0x1e>
 80039da:	bf00      	nop
 80039dc:	200004a4 	.word	0x200004a4

080039e0 <_malloc_r>:
 80039e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039e4:	1ccd      	adds	r5, r1, #3
 80039e6:	f025 0503 	bic.w	r5, r5, #3
 80039ea:	3508      	adds	r5, #8
 80039ec:	2d0c      	cmp	r5, #12
 80039ee:	bf38      	it	cc
 80039f0:	250c      	movcc	r5, #12
 80039f2:	2d00      	cmp	r5, #0
 80039f4:	4606      	mov	r6, r0
 80039f6:	db01      	blt.n	80039fc <_malloc_r+0x1c>
 80039f8:	42a9      	cmp	r1, r5
 80039fa:	d904      	bls.n	8003a06 <_malloc_r+0x26>
 80039fc:	230c      	movs	r3, #12
 80039fe:	6033      	str	r3, [r6, #0]
 8003a00:	2000      	movs	r0, #0
 8003a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003adc <_malloc_r+0xfc>
 8003a0a:	f000 f869 	bl	8003ae0 <__malloc_lock>
 8003a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a12:	461c      	mov	r4, r3
 8003a14:	bb44      	cbnz	r4, 8003a68 <_malloc_r+0x88>
 8003a16:	4629      	mov	r1, r5
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f7ff ffbf 	bl	800399c <sbrk_aligned>
 8003a1e:	1c43      	adds	r3, r0, #1
 8003a20:	4604      	mov	r4, r0
 8003a22:	d158      	bne.n	8003ad6 <_malloc_r+0xf6>
 8003a24:	f8d8 4000 	ldr.w	r4, [r8]
 8003a28:	4627      	mov	r7, r4
 8003a2a:	2f00      	cmp	r7, #0
 8003a2c:	d143      	bne.n	8003ab6 <_malloc_r+0xd6>
 8003a2e:	2c00      	cmp	r4, #0
 8003a30:	d04b      	beq.n	8003aca <_malloc_r+0xea>
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	4639      	mov	r1, r7
 8003a36:	4630      	mov	r0, r6
 8003a38:	eb04 0903 	add.w	r9, r4, r3
 8003a3c:	f000 fc8a 	bl	8004354 <_sbrk_r>
 8003a40:	4581      	cmp	r9, r0
 8003a42:	d142      	bne.n	8003aca <_malloc_r+0xea>
 8003a44:	6821      	ldr	r1, [r4, #0]
 8003a46:	1a6d      	subs	r5, r5, r1
 8003a48:	4629      	mov	r1, r5
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	f7ff ffa6 	bl	800399c <sbrk_aligned>
 8003a50:	3001      	adds	r0, #1
 8003a52:	d03a      	beq.n	8003aca <_malloc_r+0xea>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	442b      	add	r3, r5
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	bb62      	cbnz	r2, 8003abc <_malloc_r+0xdc>
 8003a62:	f8c8 7000 	str.w	r7, [r8]
 8003a66:	e00f      	b.n	8003a88 <_malloc_r+0xa8>
 8003a68:	6822      	ldr	r2, [r4, #0]
 8003a6a:	1b52      	subs	r2, r2, r5
 8003a6c:	d420      	bmi.n	8003ab0 <_malloc_r+0xd0>
 8003a6e:	2a0b      	cmp	r2, #11
 8003a70:	d917      	bls.n	8003aa2 <_malloc_r+0xc2>
 8003a72:	1961      	adds	r1, r4, r5
 8003a74:	42a3      	cmp	r3, r4
 8003a76:	6025      	str	r5, [r4, #0]
 8003a78:	bf18      	it	ne
 8003a7a:	6059      	strne	r1, [r3, #4]
 8003a7c:	6863      	ldr	r3, [r4, #4]
 8003a7e:	bf08      	it	eq
 8003a80:	f8c8 1000 	streq.w	r1, [r8]
 8003a84:	5162      	str	r2, [r4, r5]
 8003a86:	604b      	str	r3, [r1, #4]
 8003a88:	4630      	mov	r0, r6
 8003a8a:	f000 f82f 	bl	8003aec <__malloc_unlock>
 8003a8e:	f104 000b 	add.w	r0, r4, #11
 8003a92:	1d23      	adds	r3, r4, #4
 8003a94:	f020 0007 	bic.w	r0, r0, #7
 8003a98:	1ac2      	subs	r2, r0, r3
 8003a9a:	bf1c      	itt	ne
 8003a9c:	1a1b      	subne	r3, r3, r0
 8003a9e:	50a3      	strne	r3, [r4, r2]
 8003aa0:	e7af      	b.n	8003a02 <_malloc_r+0x22>
 8003aa2:	6862      	ldr	r2, [r4, #4]
 8003aa4:	42a3      	cmp	r3, r4
 8003aa6:	bf0c      	ite	eq
 8003aa8:	f8c8 2000 	streq.w	r2, [r8]
 8003aac:	605a      	strne	r2, [r3, #4]
 8003aae:	e7eb      	b.n	8003a88 <_malloc_r+0xa8>
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	6864      	ldr	r4, [r4, #4]
 8003ab4:	e7ae      	b.n	8003a14 <_malloc_r+0x34>
 8003ab6:	463c      	mov	r4, r7
 8003ab8:	687f      	ldr	r7, [r7, #4]
 8003aba:	e7b6      	b.n	8003a2a <_malloc_r+0x4a>
 8003abc:	461a      	mov	r2, r3
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	42a3      	cmp	r3, r4
 8003ac2:	d1fb      	bne.n	8003abc <_malloc_r+0xdc>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	6053      	str	r3, [r2, #4]
 8003ac8:	e7de      	b.n	8003a88 <_malloc_r+0xa8>
 8003aca:	230c      	movs	r3, #12
 8003acc:	6033      	str	r3, [r6, #0]
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f000 f80c 	bl	8003aec <__malloc_unlock>
 8003ad4:	e794      	b.n	8003a00 <_malloc_r+0x20>
 8003ad6:	6005      	str	r5, [r0, #0]
 8003ad8:	e7d6      	b.n	8003a88 <_malloc_r+0xa8>
 8003ada:	bf00      	nop
 8003adc:	200004a8 	.word	0x200004a8

08003ae0 <__malloc_lock>:
 8003ae0:	4801      	ldr	r0, [pc, #4]	@ (8003ae8 <__malloc_lock+0x8>)
 8003ae2:	f7ff b8ac 	b.w	8002c3e <__retarget_lock_acquire_recursive>
 8003ae6:	bf00      	nop
 8003ae8:	200004a0 	.word	0x200004a0

08003aec <__malloc_unlock>:
 8003aec:	4801      	ldr	r0, [pc, #4]	@ (8003af4 <__malloc_unlock+0x8>)
 8003aee:	f7ff b8a7 	b.w	8002c40 <__retarget_lock_release_recursive>
 8003af2:	bf00      	nop
 8003af4:	200004a0 	.word	0x200004a0

08003af8 <_Balloc>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	69c6      	ldr	r6, [r0, #28]
 8003afc:	4604      	mov	r4, r0
 8003afe:	460d      	mov	r5, r1
 8003b00:	b976      	cbnz	r6, 8003b20 <_Balloc+0x28>
 8003b02:	2010      	movs	r0, #16
 8003b04:	f7ff ff42 	bl	800398c <malloc>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	61e0      	str	r0, [r4, #28]
 8003b0c:	b920      	cbnz	r0, 8003b18 <_Balloc+0x20>
 8003b0e:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <_Balloc+0x78>)
 8003b10:	4818      	ldr	r0, [pc, #96]	@ (8003b74 <_Balloc+0x7c>)
 8003b12:	216b      	movs	r1, #107	@ 0x6b
 8003b14:	f000 fc2e 	bl	8004374 <__assert_func>
 8003b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b1c:	6006      	str	r6, [r0, #0]
 8003b1e:	60c6      	str	r6, [r0, #12]
 8003b20:	69e6      	ldr	r6, [r4, #28]
 8003b22:	68f3      	ldr	r3, [r6, #12]
 8003b24:	b183      	cbz	r3, 8003b48 <_Balloc+0x50>
 8003b26:	69e3      	ldr	r3, [r4, #28]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003b2e:	b9b8      	cbnz	r0, 8003b60 <_Balloc+0x68>
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f605 	lsl.w	r6, r1, r5
 8003b36:	1d72      	adds	r2, r6, #5
 8003b38:	0092      	lsls	r2, r2, #2
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f000 fc38 	bl	80043b0 <_calloc_r>
 8003b40:	b160      	cbz	r0, 8003b5c <_Balloc+0x64>
 8003b42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003b46:	e00e      	b.n	8003b66 <_Balloc+0x6e>
 8003b48:	2221      	movs	r2, #33	@ 0x21
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f000 fc2f 	bl	80043b0 <_calloc_r>
 8003b52:	69e3      	ldr	r3, [r4, #28]
 8003b54:	60f0      	str	r0, [r6, #12]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e4      	bne.n	8003b26 <_Balloc+0x2e>
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	6802      	ldr	r2, [r0, #0]
 8003b62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003b66:	2300      	movs	r3, #0
 8003b68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003b6c:	e7f7      	b.n	8003b5e <_Balloc+0x66>
 8003b6e:	bf00      	nop
 8003b70:	080049e1 	.word	0x080049e1
 8003b74:	08004a61 	.word	0x08004a61

08003b78 <_Bfree>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	69c6      	ldr	r6, [r0, #28]
 8003b7c:	4605      	mov	r5, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	b976      	cbnz	r6, 8003ba0 <_Bfree+0x28>
 8003b82:	2010      	movs	r0, #16
 8003b84:	f7ff ff02 	bl	800398c <malloc>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	61e8      	str	r0, [r5, #28]
 8003b8c:	b920      	cbnz	r0, 8003b98 <_Bfree+0x20>
 8003b8e:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <_Bfree+0x3c>)
 8003b90:	4809      	ldr	r0, [pc, #36]	@ (8003bb8 <_Bfree+0x40>)
 8003b92:	218f      	movs	r1, #143	@ 0x8f
 8003b94:	f000 fbee 	bl	8004374 <__assert_func>
 8003b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b9c:	6006      	str	r6, [r0, #0]
 8003b9e:	60c6      	str	r6, [r0, #12]
 8003ba0:	b13c      	cbz	r4, 8003bb2 <_Bfree+0x3a>
 8003ba2:	69eb      	ldr	r3, [r5, #28]
 8003ba4:	6862      	ldr	r2, [r4, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bac:	6021      	str	r1, [r4, #0]
 8003bae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003bb2:	bd70      	pop	{r4, r5, r6, pc}
 8003bb4:	080049e1 	.word	0x080049e1
 8003bb8:	08004a61 	.word	0x08004a61

08003bbc <__multadd>:
 8003bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc0:	690d      	ldr	r5, [r1, #16]
 8003bc2:	4607      	mov	r7, r0
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	461e      	mov	r6, r3
 8003bc8:	f101 0c14 	add.w	ip, r1, #20
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f8dc 3000 	ldr.w	r3, [ip]
 8003bd2:	b299      	uxth	r1, r3
 8003bd4:	fb02 6101 	mla	r1, r2, r1, r6
 8003bd8:	0c1e      	lsrs	r6, r3, #16
 8003bda:	0c0b      	lsrs	r3, r1, #16
 8003bdc:	fb02 3306 	mla	r3, r2, r6, r3
 8003be0:	b289      	uxth	r1, r1
 8003be2:	3001      	adds	r0, #1
 8003be4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003be8:	4285      	cmp	r5, r0
 8003bea:	f84c 1b04 	str.w	r1, [ip], #4
 8003bee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003bf2:	dcec      	bgt.n	8003bce <__multadd+0x12>
 8003bf4:	b30e      	cbz	r6, 8003c3a <__multadd+0x7e>
 8003bf6:	68a3      	ldr	r3, [r4, #8]
 8003bf8:	42ab      	cmp	r3, r5
 8003bfa:	dc19      	bgt.n	8003c30 <__multadd+0x74>
 8003bfc:	6861      	ldr	r1, [r4, #4]
 8003bfe:	4638      	mov	r0, r7
 8003c00:	3101      	adds	r1, #1
 8003c02:	f7ff ff79 	bl	8003af8 <_Balloc>
 8003c06:	4680      	mov	r8, r0
 8003c08:	b928      	cbnz	r0, 8003c16 <__multadd+0x5a>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <__multadd+0x84>)
 8003c0e:	480d      	ldr	r0, [pc, #52]	@ (8003c44 <__multadd+0x88>)
 8003c10:	21ba      	movs	r1, #186	@ 0xba
 8003c12:	f000 fbaf 	bl	8004374 <__assert_func>
 8003c16:	6922      	ldr	r2, [r4, #16]
 8003c18:	3202      	adds	r2, #2
 8003c1a:	f104 010c 	add.w	r1, r4, #12
 8003c1e:	0092      	lsls	r2, r2, #2
 8003c20:	300c      	adds	r0, #12
 8003c22:	f7ff f80e 	bl	8002c42 <memcpy>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4638      	mov	r0, r7
 8003c2a:	f7ff ffa5 	bl	8003b78 <_Bfree>
 8003c2e:	4644      	mov	r4, r8
 8003c30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c34:	3501      	adds	r5, #1
 8003c36:	615e      	str	r6, [r3, #20]
 8003c38:	6125      	str	r5, [r4, #16]
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c40:	08004a50 	.word	0x08004a50
 8003c44:	08004a61 	.word	0x08004a61

08003c48 <__hi0bits>:
 8003c48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	bf36      	itet	cc
 8003c50:	0403      	lslcc	r3, r0, #16
 8003c52:	2000      	movcs	r0, #0
 8003c54:	2010      	movcc	r0, #16
 8003c56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c5a:	bf3c      	itt	cc
 8003c5c:	021b      	lslcc	r3, r3, #8
 8003c5e:	3008      	addcc	r0, #8
 8003c60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c64:	bf3c      	itt	cc
 8003c66:	011b      	lslcc	r3, r3, #4
 8003c68:	3004      	addcc	r0, #4
 8003c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6e:	bf3c      	itt	cc
 8003c70:	009b      	lslcc	r3, r3, #2
 8003c72:	3002      	addcc	r0, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	db05      	blt.n	8003c84 <__hi0bits+0x3c>
 8003c78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003c7c:	f100 0001 	add.w	r0, r0, #1
 8003c80:	bf08      	it	eq
 8003c82:	2020      	moveq	r0, #32
 8003c84:	4770      	bx	lr

08003c86 <__lo0bits>:
 8003c86:	6803      	ldr	r3, [r0, #0]
 8003c88:	4602      	mov	r2, r0
 8003c8a:	f013 0007 	ands.w	r0, r3, #7
 8003c8e:	d00b      	beq.n	8003ca8 <__lo0bits+0x22>
 8003c90:	07d9      	lsls	r1, r3, #31
 8003c92:	d421      	bmi.n	8003cd8 <__lo0bits+0x52>
 8003c94:	0798      	lsls	r0, r3, #30
 8003c96:	bf49      	itett	mi
 8003c98:	085b      	lsrmi	r3, r3, #1
 8003c9a:	089b      	lsrpl	r3, r3, #2
 8003c9c:	2001      	movmi	r0, #1
 8003c9e:	6013      	strmi	r3, [r2, #0]
 8003ca0:	bf5c      	itt	pl
 8003ca2:	6013      	strpl	r3, [r2, #0]
 8003ca4:	2002      	movpl	r0, #2
 8003ca6:	4770      	bx	lr
 8003ca8:	b299      	uxth	r1, r3
 8003caa:	b909      	cbnz	r1, 8003cb0 <__lo0bits+0x2a>
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	2010      	movs	r0, #16
 8003cb0:	b2d9      	uxtb	r1, r3
 8003cb2:	b909      	cbnz	r1, 8003cb8 <__lo0bits+0x32>
 8003cb4:	3008      	adds	r0, #8
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	0719      	lsls	r1, r3, #28
 8003cba:	bf04      	itt	eq
 8003cbc:	091b      	lsreq	r3, r3, #4
 8003cbe:	3004      	addeq	r0, #4
 8003cc0:	0799      	lsls	r1, r3, #30
 8003cc2:	bf04      	itt	eq
 8003cc4:	089b      	lsreq	r3, r3, #2
 8003cc6:	3002      	addeq	r0, #2
 8003cc8:	07d9      	lsls	r1, r3, #31
 8003cca:	d403      	bmi.n	8003cd4 <__lo0bits+0x4e>
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	f100 0001 	add.w	r0, r0, #1
 8003cd2:	d003      	beq.n	8003cdc <__lo0bits+0x56>
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4770      	bx	lr
 8003cd8:	2000      	movs	r0, #0
 8003cda:	4770      	bx	lr
 8003cdc:	2020      	movs	r0, #32
 8003cde:	4770      	bx	lr

08003ce0 <__i2b>:
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	f7ff ff07 	bl	8003af8 <_Balloc>
 8003cea:	4602      	mov	r2, r0
 8003cec:	b928      	cbnz	r0, 8003cfa <__i2b+0x1a>
 8003cee:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <__i2b+0x24>)
 8003cf0:	4805      	ldr	r0, [pc, #20]	@ (8003d08 <__i2b+0x28>)
 8003cf2:	f240 1145 	movw	r1, #325	@ 0x145
 8003cf6:	f000 fb3d 	bl	8004374 <__assert_func>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	6144      	str	r4, [r0, #20]
 8003cfe:	6103      	str	r3, [r0, #16]
 8003d00:	bd10      	pop	{r4, pc}
 8003d02:	bf00      	nop
 8003d04:	08004a50 	.word	0x08004a50
 8003d08:	08004a61 	.word	0x08004a61

08003d0c <__multiply>:
 8003d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d10:	4614      	mov	r4, r2
 8003d12:	690a      	ldr	r2, [r1, #16]
 8003d14:	6923      	ldr	r3, [r4, #16]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	bfa8      	it	ge
 8003d1a:	4623      	movge	r3, r4
 8003d1c:	460f      	mov	r7, r1
 8003d1e:	bfa4      	itt	ge
 8003d20:	460c      	movge	r4, r1
 8003d22:	461f      	movge	r7, r3
 8003d24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003d28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8003d2c:	68a3      	ldr	r3, [r4, #8]
 8003d2e:	6861      	ldr	r1, [r4, #4]
 8003d30:	eb0a 0609 	add.w	r6, sl, r9
 8003d34:	42b3      	cmp	r3, r6
 8003d36:	b085      	sub	sp, #20
 8003d38:	bfb8      	it	lt
 8003d3a:	3101      	addlt	r1, #1
 8003d3c:	f7ff fedc 	bl	8003af8 <_Balloc>
 8003d40:	b930      	cbnz	r0, 8003d50 <__multiply+0x44>
 8003d42:	4602      	mov	r2, r0
 8003d44:	4b44      	ldr	r3, [pc, #272]	@ (8003e58 <__multiply+0x14c>)
 8003d46:	4845      	ldr	r0, [pc, #276]	@ (8003e5c <__multiply+0x150>)
 8003d48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003d4c:	f000 fb12 	bl	8004374 <__assert_func>
 8003d50:	f100 0514 	add.w	r5, r0, #20
 8003d54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003d58:	462b      	mov	r3, r5
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	4543      	cmp	r3, r8
 8003d5e:	d321      	bcc.n	8003da4 <__multiply+0x98>
 8003d60:	f107 0114 	add.w	r1, r7, #20
 8003d64:	f104 0214 	add.w	r2, r4, #20
 8003d68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8003d6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8003d70:	9302      	str	r3, [sp, #8]
 8003d72:	1b13      	subs	r3, r2, r4
 8003d74:	3b15      	subs	r3, #21
 8003d76:	f023 0303 	bic.w	r3, r3, #3
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	f104 0715 	add.w	r7, r4, #21
 8003d80:	42ba      	cmp	r2, r7
 8003d82:	bf38      	it	cc
 8003d84:	2304      	movcc	r3, #4
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	9b02      	ldr	r3, [sp, #8]
 8003d8a:	9103      	str	r1, [sp, #12]
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	d80c      	bhi.n	8003daa <__multiply+0x9e>
 8003d90:	2e00      	cmp	r6, #0
 8003d92:	dd03      	ble.n	8003d9c <__multiply+0x90>
 8003d94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05b      	beq.n	8003e54 <__multiply+0x148>
 8003d9c:	6106      	str	r6, [r0, #16]
 8003d9e:	b005      	add	sp, #20
 8003da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da4:	f843 2b04 	str.w	r2, [r3], #4
 8003da8:	e7d8      	b.n	8003d5c <__multiply+0x50>
 8003daa:	f8b1 a000 	ldrh.w	sl, [r1]
 8003dae:	f1ba 0f00 	cmp.w	sl, #0
 8003db2:	d024      	beq.n	8003dfe <__multiply+0xf2>
 8003db4:	f104 0e14 	add.w	lr, r4, #20
 8003db8:	46a9      	mov	r9, r5
 8003dba:	f04f 0c00 	mov.w	ip, #0
 8003dbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003dc2:	f8d9 3000 	ldr.w	r3, [r9]
 8003dc6:	fa1f fb87 	uxth.w	fp, r7
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	fb0a 330b 	mla	r3, sl, fp, r3
 8003dd0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8003dd4:	f8d9 7000 	ldr.w	r7, [r9]
 8003dd8:	4463      	add	r3, ip
 8003dda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003dde:	fb0a c70b 	mla	r7, sl, fp, ip
 8003de2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003dec:	4572      	cmp	r2, lr
 8003dee:	f849 3b04 	str.w	r3, [r9], #4
 8003df2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003df6:	d8e2      	bhi.n	8003dbe <__multiply+0xb2>
 8003df8:	9b01      	ldr	r3, [sp, #4]
 8003dfa:	f845 c003 	str.w	ip, [r5, r3]
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003e04:	3104      	adds	r1, #4
 8003e06:	f1b9 0f00 	cmp.w	r9, #0
 8003e0a:	d021      	beq.n	8003e50 <__multiply+0x144>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	f104 0c14 	add.w	ip, r4, #20
 8003e12:	46ae      	mov	lr, r5
 8003e14:	f04f 0a00 	mov.w	sl, #0
 8003e18:	f8bc b000 	ldrh.w	fp, [ip]
 8003e1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8003e20:	fb09 770b 	mla	r7, r9, fp, r7
 8003e24:	4457      	add	r7, sl
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003e2c:	f84e 3b04 	str.w	r3, [lr], #4
 8003e30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003e34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e38:	f8be 3000 	ldrh.w	r3, [lr]
 8003e3c:	fb09 330a 	mla	r3, r9, sl, r3
 8003e40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8003e44:	4562      	cmp	r2, ip
 8003e46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e4a:	d8e5      	bhi.n	8003e18 <__multiply+0x10c>
 8003e4c:	9f01      	ldr	r7, [sp, #4]
 8003e4e:	51eb      	str	r3, [r5, r7]
 8003e50:	3504      	adds	r5, #4
 8003e52:	e799      	b.n	8003d88 <__multiply+0x7c>
 8003e54:	3e01      	subs	r6, #1
 8003e56:	e79b      	b.n	8003d90 <__multiply+0x84>
 8003e58:	08004a50 	.word	0x08004a50
 8003e5c:	08004a61 	.word	0x08004a61

08003e60 <__pow5mult>:
 8003e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e64:	4615      	mov	r5, r2
 8003e66:	f012 0203 	ands.w	r2, r2, #3
 8003e6a:	4607      	mov	r7, r0
 8003e6c:	460e      	mov	r6, r1
 8003e6e:	d007      	beq.n	8003e80 <__pow5mult+0x20>
 8003e70:	4c25      	ldr	r4, [pc, #148]	@ (8003f08 <__pow5mult+0xa8>)
 8003e72:	3a01      	subs	r2, #1
 8003e74:	2300      	movs	r3, #0
 8003e76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e7a:	f7ff fe9f 	bl	8003bbc <__multadd>
 8003e7e:	4606      	mov	r6, r0
 8003e80:	10ad      	asrs	r5, r5, #2
 8003e82:	d03d      	beq.n	8003f00 <__pow5mult+0xa0>
 8003e84:	69fc      	ldr	r4, [r7, #28]
 8003e86:	b97c      	cbnz	r4, 8003ea8 <__pow5mult+0x48>
 8003e88:	2010      	movs	r0, #16
 8003e8a:	f7ff fd7f 	bl	800398c <malloc>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	61f8      	str	r0, [r7, #28]
 8003e92:	b928      	cbnz	r0, 8003ea0 <__pow5mult+0x40>
 8003e94:	4b1d      	ldr	r3, [pc, #116]	@ (8003f0c <__pow5mult+0xac>)
 8003e96:	481e      	ldr	r0, [pc, #120]	@ (8003f10 <__pow5mult+0xb0>)
 8003e98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003e9c:	f000 fa6a 	bl	8004374 <__assert_func>
 8003ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ea4:	6004      	str	r4, [r0, #0]
 8003ea6:	60c4      	str	r4, [r0, #12]
 8003ea8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003eac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003eb0:	b94c      	cbnz	r4, 8003ec6 <__pow5mult+0x66>
 8003eb2:	f240 2171 	movw	r1, #625	@ 0x271
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	f7ff ff12 	bl	8003ce0 <__i2b>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	6003      	str	r3, [r0, #0]
 8003ec6:	f04f 0900 	mov.w	r9, #0
 8003eca:	07eb      	lsls	r3, r5, #31
 8003ecc:	d50a      	bpl.n	8003ee4 <__pow5mult+0x84>
 8003ece:	4631      	mov	r1, r6
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	f7ff ff1a 	bl	8003d0c <__multiply>
 8003ed8:	4631      	mov	r1, r6
 8003eda:	4680      	mov	r8, r0
 8003edc:	4638      	mov	r0, r7
 8003ede:	f7ff fe4b 	bl	8003b78 <_Bfree>
 8003ee2:	4646      	mov	r6, r8
 8003ee4:	106d      	asrs	r5, r5, #1
 8003ee6:	d00b      	beq.n	8003f00 <__pow5mult+0xa0>
 8003ee8:	6820      	ldr	r0, [r4, #0]
 8003eea:	b938      	cbnz	r0, 8003efc <__pow5mult+0x9c>
 8003eec:	4622      	mov	r2, r4
 8003eee:	4621      	mov	r1, r4
 8003ef0:	4638      	mov	r0, r7
 8003ef2:	f7ff ff0b 	bl	8003d0c <__multiply>
 8003ef6:	6020      	str	r0, [r4, #0]
 8003ef8:	f8c0 9000 	str.w	r9, [r0]
 8003efc:	4604      	mov	r4, r0
 8003efe:	e7e4      	b.n	8003eca <__pow5mult+0x6a>
 8003f00:	4630      	mov	r0, r6
 8003f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f06:	bf00      	nop
 8003f08:	08004abc 	.word	0x08004abc
 8003f0c:	080049e1 	.word	0x080049e1
 8003f10:	08004a61 	.word	0x08004a61

08003f14 <__lshift>:
 8003f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f18:	460c      	mov	r4, r1
 8003f1a:	6849      	ldr	r1, [r1, #4]
 8003f1c:	6923      	ldr	r3, [r4, #16]
 8003f1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003f22:	68a3      	ldr	r3, [r4, #8]
 8003f24:	4607      	mov	r7, r0
 8003f26:	4691      	mov	r9, r2
 8003f28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f2c:	f108 0601 	add.w	r6, r8, #1
 8003f30:	42b3      	cmp	r3, r6
 8003f32:	db0b      	blt.n	8003f4c <__lshift+0x38>
 8003f34:	4638      	mov	r0, r7
 8003f36:	f7ff fddf 	bl	8003af8 <_Balloc>
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	b948      	cbnz	r0, 8003f52 <__lshift+0x3e>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b28      	ldr	r3, [pc, #160]	@ (8003fe4 <__lshift+0xd0>)
 8003f42:	4829      	ldr	r0, [pc, #164]	@ (8003fe8 <__lshift+0xd4>)
 8003f44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003f48:	f000 fa14 	bl	8004374 <__assert_func>
 8003f4c:	3101      	adds	r1, #1
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	e7ee      	b.n	8003f30 <__lshift+0x1c>
 8003f52:	2300      	movs	r3, #0
 8003f54:	f100 0114 	add.w	r1, r0, #20
 8003f58:	f100 0210 	add.w	r2, r0, #16
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	4553      	cmp	r3, sl
 8003f60:	db33      	blt.n	8003fca <__lshift+0xb6>
 8003f62:	6920      	ldr	r0, [r4, #16]
 8003f64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f68:	f104 0314 	add.w	r3, r4, #20
 8003f6c:	f019 091f 	ands.w	r9, r9, #31
 8003f70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003f74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003f78:	d02b      	beq.n	8003fd2 <__lshift+0xbe>
 8003f7a:	f1c9 0e20 	rsb	lr, r9, #32
 8003f7e:	468a      	mov	sl, r1
 8003f80:	2200      	movs	r2, #0
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	fa00 f009 	lsl.w	r0, r0, r9
 8003f88:	4310      	orrs	r0, r2
 8003f8a:	f84a 0b04 	str.w	r0, [sl], #4
 8003f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f92:	459c      	cmp	ip, r3
 8003f94:	fa22 f20e 	lsr.w	r2, r2, lr
 8003f98:	d8f3      	bhi.n	8003f82 <__lshift+0x6e>
 8003f9a:	ebac 0304 	sub.w	r3, ip, r4
 8003f9e:	3b15      	subs	r3, #21
 8003fa0:	f023 0303 	bic.w	r3, r3, #3
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	f104 0015 	add.w	r0, r4, #21
 8003faa:	4584      	cmp	ip, r0
 8003fac:	bf38      	it	cc
 8003fae:	2304      	movcc	r3, #4
 8003fb0:	50ca      	str	r2, [r1, r3]
 8003fb2:	b10a      	cbz	r2, 8003fb8 <__lshift+0xa4>
 8003fb4:	f108 0602 	add.w	r6, r8, #2
 8003fb8:	3e01      	subs	r6, #1
 8003fba:	4638      	mov	r0, r7
 8003fbc:	612e      	str	r6, [r5, #16]
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	f7ff fdda 	bl	8003b78 <_Bfree>
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fca:	f842 0f04 	str.w	r0, [r2, #4]!
 8003fce:	3301      	adds	r3, #1
 8003fd0:	e7c5      	b.n	8003f5e <__lshift+0x4a>
 8003fd2:	3904      	subs	r1, #4
 8003fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8003fdc:	459c      	cmp	ip, r3
 8003fde:	d8f9      	bhi.n	8003fd4 <__lshift+0xc0>
 8003fe0:	e7ea      	b.n	8003fb8 <__lshift+0xa4>
 8003fe2:	bf00      	nop
 8003fe4:	08004a50 	.word	0x08004a50
 8003fe8:	08004a61 	.word	0x08004a61

08003fec <__mcmp>:
 8003fec:	690a      	ldr	r2, [r1, #16]
 8003fee:	4603      	mov	r3, r0
 8003ff0:	6900      	ldr	r0, [r0, #16]
 8003ff2:	1a80      	subs	r0, r0, r2
 8003ff4:	b530      	push	{r4, r5, lr}
 8003ff6:	d10e      	bne.n	8004016 <__mcmp+0x2a>
 8003ff8:	3314      	adds	r3, #20
 8003ffa:	3114      	adds	r1, #20
 8003ffc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004000:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004004:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004008:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800400c:	4295      	cmp	r5, r2
 800400e:	d003      	beq.n	8004018 <__mcmp+0x2c>
 8004010:	d205      	bcs.n	800401e <__mcmp+0x32>
 8004012:	f04f 30ff 	mov.w	r0, #4294967295
 8004016:	bd30      	pop	{r4, r5, pc}
 8004018:	42a3      	cmp	r3, r4
 800401a:	d3f3      	bcc.n	8004004 <__mcmp+0x18>
 800401c:	e7fb      	b.n	8004016 <__mcmp+0x2a>
 800401e:	2001      	movs	r0, #1
 8004020:	e7f9      	b.n	8004016 <__mcmp+0x2a>
	...

08004024 <__mdiff>:
 8004024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004028:	4689      	mov	r9, r1
 800402a:	4606      	mov	r6, r0
 800402c:	4611      	mov	r1, r2
 800402e:	4648      	mov	r0, r9
 8004030:	4614      	mov	r4, r2
 8004032:	f7ff ffdb 	bl	8003fec <__mcmp>
 8004036:	1e05      	subs	r5, r0, #0
 8004038:	d112      	bne.n	8004060 <__mdiff+0x3c>
 800403a:	4629      	mov	r1, r5
 800403c:	4630      	mov	r0, r6
 800403e:	f7ff fd5b 	bl	8003af8 <_Balloc>
 8004042:	4602      	mov	r2, r0
 8004044:	b928      	cbnz	r0, 8004052 <__mdiff+0x2e>
 8004046:	4b3f      	ldr	r3, [pc, #252]	@ (8004144 <__mdiff+0x120>)
 8004048:	f240 2137 	movw	r1, #567	@ 0x237
 800404c:	483e      	ldr	r0, [pc, #248]	@ (8004148 <__mdiff+0x124>)
 800404e:	f000 f991 	bl	8004374 <__assert_func>
 8004052:	2301      	movs	r3, #1
 8004054:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004058:	4610      	mov	r0, r2
 800405a:	b003      	add	sp, #12
 800405c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004060:	bfbc      	itt	lt
 8004062:	464b      	movlt	r3, r9
 8004064:	46a1      	movlt	r9, r4
 8004066:	4630      	mov	r0, r6
 8004068:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800406c:	bfba      	itte	lt
 800406e:	461c      	movlt	r4, r3
 8004070:	2501      	movlt	r5, #1
 8004072:	2500      	movge	r5, #0
 8004074:	f7ff fd40 	bl	8003af8 <_Balloc>
 8004078:	4602      	mov	r2, r0
 800407a:	b918      	cbnz	r0, 8004084 <__mdiff+0x60>
 800407c:	4b31      	ldr	r3, [pc, #196]	@ (8004144 <__mdiff+0x120>)
 800407e:	f240 2145 	movw	r1, #581	@ 0x245
 8004082:	e7e3      	b.n	800404c <__mdiff+0x28>
 8004084:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004088:	6926      	ldr	r6, [r4, #16]
 800408a:	60c5      	str	r5, [r0, #12]
 800408c:	f109 0310 	add.w	r3, r9, #16
 8004090:	f109 0514 	add.w	r5, r9, #20
 8004094:	f104 0e14 	add.w	lr, r4, #20
 8004098:	f100 0b14 	add.w	fp, r0, #20
 800409c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80040a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	46d9      	mov	r9, fp
 80040a8:	f04f 0c00 	mov.w	ip, #0
 80040ac:	9b01      	ldr	r3, [sp, #4]
 80040ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80040b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	fa1f f38a 	uxth.w	r3, sl
 80040bc:	4619      	mov	r1, r3
 80040be:	b283      	uxth	r3, r0
 80040c0:	1acb      	subs	r3, r1, r3
 80040c2:	0c00      	lsrs	r0, r0, #16
 80040c4:	4463      	add	r3, ip
 80040c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80040ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80040d4:	4576      	cmp	r6, lr
 80040d6:	f849 3b04 	str.w	r3, [r9], #4
 80040da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80040de:	d8e5      	bhi.n	80040ac <__mdiff+0x88>
 80040e0:	1b33      	subs	r3, r6, r4
 80040e2:	3b15      	subs	r3, #21
 80040e4:	f023 0303 	bic.w	r3, r3, #3
 80040e8:	3415      	adds	r4, #21
 80040ea:	3304      	adds	r3, #4
 80040ec:	42a6      	cmp	r6, r4
 80040ee:	bf38      	it	cc
 80040f0:	2304      	movcc	r3, #4
 80040f2:	441d      	add	r5, r3
 80040f4:	445b      	add	r3, fp
 80040f6:	461e      	mov	r6, r3
 80040f8:	462c      	mov	r4, r5
 80040fa:	4544      	cmp	r4, r8
 80040fc:	d30e      	bcc.n	800411c <__mdiff+0xf8>
 80040fe:	f108 0103 	add.w	r1, r8, #3
 8004102:	1b49      	subs	r1, r1, r5
 8004104:	f021 0103 	bic.w	r1, r1, #3
 8004108:	3d03      	subs	r5, #3
 800410a:	45a8      	cmp	r8, r5
 800410c:	bf38      	it	cc
 800410e:	2100      	movcc	r1, #0
 8004110:	440b      	add	r3, r1
 8004112:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004116:	b191      	cbz	r1, 800413e <__mdiff+0x11a>
 8004118:	6117      	str	r7, [r2, #16]
 800411a:	e79d      	b.n	8004058 <__mdiff+0x34>
 800411c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004120:	46e6      	mov	lr, ip
 8004122:	0c08      	lsrs	r0, r1, #16
 8004124:	fa1c fc81 	uxtah	ip, ip, r1
 8004128:	4471      	add	r1, lr
 800412a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800412e:	b289      	uxth	r1, r1
 8004130:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004134:	f846 1b04 	str.w	r1, [r6], #4
 8004138:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800413c:	e7dd      	b.n	80040fa <__mdiff+0xd6>
 800413e:	3f01      	subs	r7, #1
 8004140:	e7e7      	b.n	8004112 <__mdiff+0xee>
 8004142:	bf00      	nop
 8004144:	08004a50 	.word	0x08004a50
 8004148:	08004a61 	.word	0x08004a61

0800414c <__d2b>:
 800414c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004150:	460f      	mov	r7, r1
 8004152:	2101      	movs	r1, #1
 8004154:	ec59 8b10 	vmov	r8, r9, d0
 8004158:	4616      	mov	r6, r2
 800415a:	f7ff fccd 	bl	8003af8 <_Balloc>
 800415e:	4604      	mov	r4, r0
 8004160:	b930      	cbnz	r0, 8004170 <__d2b+0x24>
 8004162:	4602      	mov	r2, r0
 8004164:	4b23      	ldr	r3, [pc, #140]	@ (80041f4 <__d2b+0xa8>)
 8004166:	4824      	ldr	r0, [pc, #144]	@ (80041f8 <__d2b+0xac>)
 8004168:	f240 310f 	movw	r1, #783	@ 0x30f
 800416c:	f000 f902 	bl	8004374 <__assert_func>
 8004170:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004174:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004178:	b10d      	cbz	r5, 800417e <__d2b+0x32>
 800417a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800417e:	9301      	str	r3, [sp, #4]
 8004180:	f1b8 0300 	subs.w	r3, r8, #0
 8004184:	d023      	beq.n	80041ce <__d2b+0x82>
 8004186:	4668      	mov	r0, sp
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	f7ff fd7c 	bl	8003c86 <__lo0bits>
 800418e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004192:	b1d0      	cbz	r0, 80041ca <__d2b+0x7e>
 8004194:	f1c0 0320 	rsb	r3, r0, #32
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	430b      	orrs	r3, r1
 800419e:	40c2      	lsrs	r2, r0
 80041a0:	6163      	str	r3, [r4, #20]
 80041a2:	9201      	str	r2, [sp, #4]
 80041a4:	9b01      	ldr	r3, [sp, #4]
 80041a6:	61a3      	str	r3, [r4, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bf0c      	ite	eq
 80041ac:	2201      	moveq	r2, #1
 80041ae:	2202      	movne	r2, #2
 80041b0:	6122      	str	r2, [r4, #16]
 80041b2:	b1a5      	cbz	r5, 80041de <__d2b+0x92>
 80041b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80041b8:	4405      	add	r5, r0
 80041ba:	603d      	str	r5, [r7, #0]
 80041bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80041c0:	6030      	str	r0, [r6, #0]
 80041c2:	4620      	mov	r0, r4
 80041c4:	b003      	add	sp, #12
 80041c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041ca:	6161      	str	r1, [r4, #20]
 80041cc:	e7ea      	b.n	80041a4 <__d2b+0x58>
 80041ce:	a801      	add	r0, sp, #4
 80041d0:	f7ff fd59 	bl	8003c86 <__lo0bits>
 80041d4:	9b01      	ldr	r3, [sp, #4]
 80041d6:	6163      	str	r3, [r4, #20]
 80041d8:	3020      	adds	r0, #32
 80041da:	2201      	movs	r2, #1
 80041dc:	e7e8      	b.n	80041b0 <__d2b+0x64>
 80041de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80041e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80041e6:	6038      	str	r0, [r7, #0]
 80041e8:	6918      	ldr	r0, [r3, #16]
 80041ea:	f7ff fd2d 	bl	8003c48 <__hi0bits>
 80041ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80041f2:	e7e5      	b.n	80041c0 <__d2b+0x74>
 80041f4:	08004a50 	.word	0x08004a50
 80041f8:	08004a61 	.word	0x08004a61

080041fc <__sflush_r>:
 80041fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004204:	0716      	lsls	r6, r2, #28
 8004206:	4605      	mov	r5, r0
 8004208:	460c      	mov	r4, r1
 800420a:	d454      	bmi.n	80042b6 <__sflush_r+0xba>
 800420c:	684b      	ldr	r3, [r1, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	dc02      	bgt.n	8004218 <__sflush_r+0x1c>
 8004212:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	dd48      	ble.n	80042aa <__sflush_r+0xae>
 8004218:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800421a:	2e00      	cmp	r6, #0
 800421c:	d045      	beq.n	80042aa <__sflush_r+0xae>
 800421e:	2300      	movs	r3, #0
 8004220:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004224:	682f      	ldr	r7, [r5, #0]
 8004226:	6a21      	ldr	r1, [r4, #32]
 8004228:	602b      	str	r3, [r5, #0]
 800422a:	d030      	beq.n	800428e <__sflush_r+0x92>
 800422c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	0759      	lsls	r1, r3, #29
 8004232:	d505      	bpl.n	8004240 <__sflush_r+0x44>
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	1ad2      	subs	r2, r2, r3
 8004238:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800423a:	b10b      	cbz	r3, 8004240 <__sflush_r+0x44>
 800423c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800423e:	1ad2      	subs	r2, r2, r3
 8004240:	2300      	movs	r3, #0
 8004242:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004244:	6a21      	ldr	r1, [r4, #32]
 8004246:	4628      	mov	r0, r5
 8004248:	47b0      	blx	r6
 800424a:	1c43      	adds	r3, r0, #1
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	d106      	bne.n	800425e <__sflush_r+0x62>
 8004250:	6829      	ldr	r1, [r5, #0]
 8004252:	291d      	cmp	r1, #29
 8004254:	d82b      	bhi.n	80042ae <__sflush_r+0xb2>
 8004256:	4a2a      	ldr	r2, [pc, #168]	@ (8004300 <__sflush_r+0x104>)
 8004258:	410a      	asrs	r2, r1
 800425a:	07d6      	lsls	r6, r2, #31
 800425c:	d427      	bmi.n	80042ae <__sflush_r+0xb2>
 800425e:	2200      	movs	r2, #0
 8004260:	6062      	str	r2, [r4, #4]
 8004262:	04d9      	lsls	r1, r3, #19
 8004264:	6922      	ldr	r2, [r4, #16]
 8004266:	6022      	str	r2, [r4, #0]
 8004268:	d504      	bpl.n	8004274 <__sflush_r+0x78>
 800426a:	1c42      	adds	r2, r0, #1
 800426c:	d101      	bne.n	8004272 <__sflush_r+0x76>
 800426e:	682b      	ldr	r3, [r5, #0]
 8004270:	b903      	cbnz	r3, 8004274 <__sflush_r+0x78>
 8004272:	6560      	str	r0, [r4, #84]	@ 0x54
 8004274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004276:	602f      	str	r7, [r5, #0]
 8004278:	b1b9      	cbz	r1, 80042aa <__sflush_r+0xae>
 800427a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800427e:	4299      	cmp	r1, r3
 8004280:	d002      	beq.n	8004288 <__sflush_r+0x8c>
 8004282:	4628      	mov	r0, r5
 8004284:	f7ff fb38 	bl	80038f8 <_free_r>
 8004288:	2300      	movs	r3, #0
 800428a:	6363      	str	r3, [r4, #52]	@ 0x34
 800428c:	e00d      	b.n	80042aa <__sflush_r+0xae>
 800428e:	2301      	movs	r3, #1
 8004290:	4628      	mov	r0, r5
 8004292:	47b0      	blx	r6
 8004294:	4602      	mov	r2, r0
 8004296:	1c50      	adds	r0, r2, #1
 8004298:	d1c9      	bne.n	800422e <__sflush_r+0x32>
 800429a:	682b      	ldr	r3, [r5, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0c6      	beq.n	800422e <__sflush_r+0x32>
 80042a0:	2b1d      	cmp	r3, #29
 80042a2:	d001      	beq.n	80042a8 <__sflush_r+0xac>
 80042a4:	2b16      	cmp	r3, #22
 80042a6:	d11e      	bne.n	80042e6 <__sflush_r+0xea>
 80042a8:	602f      	str	r7, [r5, #0]
 80042aa:	2000      	movs	r0, #0
 80042ac:	e022      	b.n	80042f4 <__sflush_r+0xf8>
 80042ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042b2:	b21b      	sxth	r3, r3
 80042b4:	e01b      	b.n	80042ee <__sflush_r+0xf2>
 80042b6:	690f      	ldr	r7, [r1, #16]
 80042b8:	2f00      	cmp	r7, #0
 80042ba:	d0f6      	beq.n	80042aa <__sflush_r+0xae>
 80042bc:	0793      	lsls	r3, r2, #30
 80042be:	680e      	ldr	r6, [r1, #0]
 80042c0:	bf08      	it	eq
 80042c2:	694b      	ldreq	r3, [r1, #20]
 80042c4:	600f      	str	r7, [r1, #0]
 80042c6:	bf18      	it	ne
 80042c8:	2300      	movne	r3, #0
 80042ca:	eba6 0807 	sub.w	r8, r6, r7
 80042ce:	608b      	str	r3, [r1, #8]
 80042d0:	f1b8 0f00 	cmp.w	r8, #0
 80042d4:	dde9      	ble.n	80042aa <__sflush_r+0xae>
 80042d6:	6a21      	ldr	r1, [r4, #32]
 80042d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80042da:	4643      	mov	r3, r8
 80042dc:	463a      	mov	r2, r7
 80042de:	4628      	mov	r0, r5
 80042e0:	47b0      	blx	r6
 80042e2:	2800      	cmp	r0, #0
 80042e4:	dc08      	bgt.n	80042f8 <__sflush_r+0xfc>
 80042e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f8:	4407      	add	r7, r0
 80042fa:	eba8 0800 	sub.w	r8, r8, r0
 80042fe:	e7e7      	b.n	80042d0 <__sflush_r+0xd4>
 8004300:	dfbffffe 	.word	0xdfbffffe

08004304 <_fflush_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	690b      	ldr	r3, [r1, #16]
 8004308:	4605      	mov	r5, r0
 800430a:	460c      	mov	r4, r1
 800430c:	b913      	cbnz	r3, 8004314 <_fflush_r+0x10>
 800430e:	2500      	movs	r5, #0
 8004310:	4628      	mov	r0, r5
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	b118      	cbz	r0, 800431e <_fflush_r+0x1a>
 8004316:	6a03      	ldr	r3, [r0, #32]
 8004318:	b90b      	cbnz	r3, 800431e <_fflush_r+0x1a>
 800431a:	f7fe fb99 	bl	8002a50 <__sinit>
 800431e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f3      	beq.n	800430e <_fflush_r+0xa>
 8004326:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004328:	07d0      	lsls	r0, r2, #31
 800432a:	d404      	bmi.n	8004336 <_fflush_r+0x32>
 800432c:	0599      	lsls	r1, r3, #22
 800432e:	d402      	bmi.n	8004336 <_fflush_r+0x32>
 8004330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004332:	f7fe fc84 	bl	8002c3e <__retarget_lock_acquire_recursive>
 8004336:	4628      	mov	r0, r5
 8004338:	4621      	mov	r1, r4
 800433a:	f7ff ff5f 	bl	80041fc <__sflush_r>
 800433e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004340:	07da      	lsls	r2, r3, #31
 8004342:	4605      	mov	r5, r0
 8004344:	d4e4      	bmi.n	8004310 <_fflush_r+0xc>
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	059b      	lsls	r3, r3, #22
 800434a:	d4e1      	bmi.n	8004310 <_fflush_r+0xc>
 800434c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800434e:	f7fe fc77 	bl	8002c40 <__retarget_lock_release_recursive>
 8004352:	e7dd      	b.n	8004310 <_fflush_r+0xc>

08004354 <_sbrk_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	4d06      	ldr	r5, [pc, #24]	@ (8004370 <_sbrk_r+0x1c>)
 8004358:	2300      	movs	r3, #0
 800435a:	4604      	mov	r4, r0
 800435c:	4608      	mov	r0, r1
 800435e:	602b      	str	r3, [r5, #0]
 8004360:	f7fd fe22 	bl	8001fa8 <_sbrk>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d102      	bne.n	800436e <_sbrk_r+0x1a>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	b103      	cbz	r3, 800436e <_sbrk_r+0x1a>
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	2000049c 	.word	0x2000049c

08004374 <__assert_func>:
 8004374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004376:	4614      	mov	r4, r2
 8004378:	461a      	mov	r2, r3
 800437a:	4b09      	ldr	r3, [pc, #36]	@ (80043a0 <__assert_func+0x2c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4605      	mov	r5, r0
 8004380:	68d8      	ldr	r0, [r3, #12]
 8004382:	b954      	cbnz	r4, 800439a <__assert_func+0x26>
 8004384:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <__assert_func+0x30>)
 8004386:	461c      	mov	r4, r3
 8004388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800438c:	9100      	str	r1, [sp, #0]
 800438e:	462b      	mov	r3, r5
 8004390:	4905      	ldr	r1, [pc, #20]	@ (80043a8 <__assert_func+0x34>)
 8004392:	f000 f841 	bl	8004418 <fiprintf>
 8004396:	f000 f851 	bl	800443c <abort>
 800439a:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <__assert_func+0x38>)
 800439c:	e7f4      	b.n	8004388 <__assert_func+0x14>
 800439e:	bf00      	nop
 80043a0:	2000000c 	.word	0x2000000c
 80043a4:	08004bfd 	.word	0x08004bfd
 80043a8:	08004bcf 	.word	0x08004bcf
 80043ac:	08004bc2 	.word	0x08004bc2

080043b0 <_calloc_r>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	fba1 5402 	umull	r5, r4, r1, r2
 80043b6:	b93c      	cbnz	r4, 80043c8 <_calloc_r+0x18>
 80043b8:	4629      	mov	r1, r5
 80043ba:	f7ff fb11 	bl	80039e0 <_malloc_r>
 80043be:	4606      	mov	r6, r0
 80043c0:	b928      	cbnz	r0, 80043ce <_calloc_r+0x1e>
 80043c2:	2600      	movs	r6, #0
 80043c4:	4630      	mov	r0, r6
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	220c      	movs	r2, #12
 80043ca:	6002      	str	r2, [r0, #0]
 80043cc:	e7f9      	b.n	80043c2 <_calloc_r+0x12>
 80043ce:	462a      	mov	r2, r5
 80043d0:	4621      	mov	r1, r4
 80043d2:	f7fe fbb6 	bl	8002b42 <memset>
 80043d6:	e7f5      	b.n	80043c4 <_calloc_r+0x14>

080043d8 <__ascii_mbtowc>:
 80043d8:	b082      	sub	sp, #8
 80043da:	b901      	cbnz	r1, 80043de <__ascii_mbtowc+0x6>
 80043dc:	a901      	add	r1, sp, #4
 80043de:	b142      	cbz	r2, 80043f2 <__ascii_mbtowc+0x1a>
 80043e0:	b14b      	cbz	r3, 80043f6 <__ascii_mbtowc+0x1e>
 80043e2:	7813      	ldrb	r3, [r2, #0]
 80043e4:	600b      	str	r3, [r1, #0]
 80043e6:	7812      	ldrb	r2, [r2, #0]
 80043e8:	1e10      	subs	r0, r2, #0
 80043ea:	bf18      	it	ne
 80043ec:	2001      	movne	r0, #1
 80043ee:	b002      	add	sp, #8
 80043f0:	4770      	bx	lr
 80043f2:	4610      	mov	r0, r2
 80043f4:	e7fb      	b.n	80043ee <__ascii_mbtowc+0x16>
 80043f6:	f06f 0001 	mvn.w	r0, #1
 80043fa:	e7f8      	b.n	80043ee <__ascii_mbtowc+0x16>

080043fc <__ascii_wctomb>:
 80043fc:	4603      	mov	r3, r0
 80043fe:	4608      	mov	r0, r1
 8004400:	b141      	cbz	r1, 8004414 <__ascii_wctomb+0x18>
 8004402:	2aff      	cmp	r2, #255	@ 0xff
 8004404:	d904      	bls.n	8004410 <__ascii_wctomb+0x14>
 8004406:	228a      	movs	r2, #138	@ 0x8a
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	f04f 30ff 	mov.w	r0, #4294967295
 800440e:	4770      	bx	lr
 8004410:	700a      	strb	r2, [r1, #0]
 8004412:	2001      	movs	r0, #1
 8004414:	4770      	bx	lr
	...

08004418 <fiprintf>:
 8004418:	b40e      	push	{r1, r2, r3}
 800441a:	b503      	push	{r0, r1, lr}
 800441c:	4601      	mov	r1, r0
 800441e:	ab03      	add	r3, sp, #12
 8004420:	4805      	ldr	r0, [pc, #20]	@ (8004438 <fiprintf+0x20>)
 8004422:	f853 2b04 	ldr.w	r2, [r3], #4
 8004426:	6800      	ldr	r0, [r0, #0]
 8004428:	9301      	str	r3, [sp, #4]
 800442a:	f000 f837 	bl	800449c <_vfiprintf_r>
 800442e:	b002      	add	sp, #8
 8004430:	f85d eb04 	ldr.w	lr, [sp], #4
 8004434:	b003      	add	sp, #12
 8004436:	4770      	bx	lr
 8004438:	2000000c 	.word	0x2000000c

0800443c <abort>:
 800443c:	b508      	push	{r3, lr}
 800443e:	2006      	movs	r0, #6
 8004440:	f000 fa00 	bl	8004844 <raise>
 8004444:	2001      	movs	r0, #1
 8004446:	f7fd fd36 	bl	8001eb6 <_exit>

0800444a <__sfputc_r>:
 800444a:	6893      	ldr	r3, [r2, #8]
 800444c:	3b01      	subs	r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	b410      	push	{r4}
 8004452:	6093      	str	r3, [r2, #8]
 8004454:	da08      	bge.n	8004468 <__sfputc_r+0x1e>
 8004456:	6994      	ldr	r4, [r2, #24]
 8004458:	42a3      	cmp	r3, r4
 800445a:	db01      	blt.n	8004460 <__sfputc_r+0x16>
 800445c:	290a      	cmp	r1, #10
 800445e:	d103      	bne.n	8004468 <__sfputc_r+0x1e>
 8004460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004464:	f000 b932 	b.w	80046cc <__swbuf_r>
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	1c58      	adds	r0, r3, #1
 800446c:	6010      	str	r0, [r2, #0]
 800446e:	7019      	strb	r1, [r3, #0]
 8004470:	4608      	mov	r0, r1
 8004472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004476:	4770      	bx	lr

08004478 <__sfputs_r>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	4606      	mov	r6, r0
 800447c:	460f      	mov	r7, r1
 800447e:	4614      	mov	r4, r2
 8004480:	18d5      	adds	r5, r2, r3
 8004482:	42ac      	cmp	r4, r5
 8004484:	d101      	bne.n	800448a <__sfputs_r+0x12>
 8004486:	2000      	movs	r0, #0
 8004488:	e007      	b.n	800449a <__sfputs_r+0x22>
 800448a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800448e:	463a      	mov	r2, r7
 8004490:	4630      	mov	r0, r6
 8004492:	f7ff ffda 	bl	800444a <__sfputc_r>
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	d1f3      	bne.n	8004482 <__sfputs_r+0xa>
 800449a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800449c <_vfiprintf_r>:
 800449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a0:	460d      	mov	r5, r1
 80044a2:	b09d      	sub	sp, #116	@ 0x74
 80044a4:	4614      	mov	r4, r2
 80044a6:	4698      	mov	r8, r3
 80044a8:	4606      	mov	r6, r0
 80044aa:	b118      	cbz	r0, 80044b4 <_vfiprintf_r+0x18>
 80044ac:	6a03      	ldr	r3, [r0, #32]
 80044ae:	b90b      	cbnz	r3, 80044b4 <_vfiprintf_r+0x18>
 80044b0:	f7fe face 	bl	8002a50 <__sinit>
 80044b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044b6:	07d9      	lsls	r1, r3, #31
 80044b8:	d405      	bmi.n	80044c6 <_vfiprintf_r+0x2a>
 80044ba:	89ab      	ldrh	r3, [r5, #12]
 80044bc:	059a      	lsls	r2, r3, #22
 80044be:	d402      	bmi.n	80044c6 <_vfiprintf_r+0x2a>
 80044c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044c2:	f7fe fbbc 	bl	8002c3e <__retarget_lock_acquire_recursive>
 80044c6:	89ab      	ldrh	r3, [r5, #12]
 80044c8:	071b      	lsls	r3, r3, #28
 80044ca:	d501      	bpl.n	80044d0 <_vfiprintf_r+0x34>
 80044cc:	692b      	ldr	r3, [r5, #16]
 80044ce:	b99b      	cbnz	r3, 80044f8 <_vfiprintf_r+0x5c>
 80044d0:	4629      	mov	r1, r5
 80044d2:	4630      	mov	r0, r6
 80044d4:	f000 f938 	bl	8004748 <__swsetup_r>
 80044d8:	b170      	cbz	r0, 80044f8 <_vfiprintf_r+0x5c>
 80044da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044dc:	07dc      	lsls	r4, r3, #31
 80044de:	d504      	bpl.n	80044ea <_vfiprintf_r+0x4e>
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	b01d      	add	sp, #116	@ 0x74
 80044e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ea:	89ab      	ldrh	r3, [r5, #12]
 80044ec:	0598      	lsls	r0, r3, #22
 80044ee:	d4f7      	bmi.n	80044e0 <_vfiprintf_r+0x44>
 80044f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044f2:	f7fe fba5 	bl	8002c40 <__retarget_lock_release_recursive>
 80044f6:	e7f3      	b.n	80044e0 <_vfiprintf_r+0x44>
 80044f8:	2300      	movs	r3, #0
 80044fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80044fc:	2320      	movs	r3, #32
 80044fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004502:	f8cd 800c 	str.w	r8, [sp, #12]
 8004506:	2330      	movs	r3, #48	@ 0x30
 8004508:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80046b8 <_vfiprintf_r+0x21c>
 800450c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004510:	f04f 0901 	mov.w	r9, #1
 8004514:	4623      	mov	r3, r4
 8004516:	469a      	mov	sl, r3
 8004518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800451c:	b10a      	cbz	r2, 8004522 <_vfiprintf_r+0x86>
 800451e:	2a25      	cmp	r2, #37	@ 0x25
 8004520:	d1f9      	bne.n	8004516 <_vfiprintf_r+0x7a>
 8004522:	ebba 0b04 	subs.w	fp, sl, r4
 8004526:	d00b      	beq.n	8004540 <_vfiprintf_r+0xa4>
 8004528:	465b      	mov	r3, fp
 800452a:	4622      	mov	r2, r4
 800452c:	4629      	mov	r1, r5
 800452e:	4630      	mov	r0, r6
 8004530:	f7ff ffa2 	bl	8004478 <__sfputs_r>
 8004534:	3001      	adds	r0, #1
 8004536:	f000 80a7 	beq.w	8004688 <_vfiprintf_r+0x1ec>
 800453a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800453c:	445a      	add	r2, fp
 800453e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004540:	f89a 3000 	ldrb.w	r3, [sl]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 809f 	beq.w	8004688 <_vfiprintf_r+0x1ec>
 800454a:	2300      	movs	r3, #0
 800454c:	f04f 32ff 	mov.w	r2, #4294967295
 8004550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004554:	f10a 0a01 	add.w	sl, sl, #1
 8004558:	9304      	str	r3, [sp, #16]
 800455a:	9307      	str	r3, [sp, #28]
 800455c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004560:	931a      	str	r3, [sp, #104]	@ 0x68
 8004562:	4654      	mov	r4, sl
 8004564:	2205      	movs	r2, #5
 8004566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456a:	4853      	ldr	r0, [pc, #332]	@ (80046b8 <_vfiprintf_r+0x21c>)
 800456c:	f7fb fe38 	bl	80001e0 <memchr>
 8004570:	9a04      	ldr	r2, [sp, #16]
 8004572:	b9d8      	cbnz	r0, 80045ac <_vfiprintf_r+0x110>
 8004574:	06d1      	lsls	r1, r2, #27
 8004576:	bf44      	itt	mi
 8004578:	2320      	movmi	r3, #32
 800457a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800457e:	0713      	lsls	r3, r2, #28
 8004580:	bf44      	itt	mi
 8004582:	232b      	movmi	r3, #43	@ 0x2b
 8004584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004588:	f89a 3000 	ldrb.w	r3, [sl]
 800458c:	2b2a      	cmp	r3, #42	@ 0x2a
 800458e:	d015      	beq.n	80045bc <_vfiprintf_r+0x120>
 8004590:	9a07      	ldr	r2, [sp, #28]
 8004592:	4654      	mov	r4, sl
 8004594:	2000      	movs	r0, #0
 8004596:	f04f 0c0a 	mov.w	ip, #10
 800459a:	4621      	mov	r1, r4
 800459c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045a0:	3b30      	subs	r3, #48	@ 0x30
 80045a2:	2b09      	cmp	r3, #9
 80045a4:	d94b      	bls.n	800463e <_vfiprintf_r+0x1a2>
 80045a6:	b1b0      	cbz	r0, 80045d6 <_vfiprintf_r+0x13a>
 80045a8:	9207      	str	r2, [sp, #28]
 80045aa:	e014      	b.n	80045d6 <_vfiprintf_r+0x13a>
 80045ac:	eba0 0308 	sub.w	r3, r0, r8
 80045b0:	fa09 f303 	lsl.w	r3, r9, r3
 80045b4:	4313      	orrs	r3, r2
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	46a2      	mov	sl, r4
 80045ba:	e7d2      	b.n	8004562 <_vfiprintf_r+0xc6>
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	1d19      	adds	r1, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	9103      	str	r1, [sp, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bfbb      	ittet	lt
 80045c8:	425b      	neglt	r3, r3
 80045ca:	f042 0202 	orrlt.w	r2, r2, #2
 80045ce:	9307      	strge	r3, [sp, #28]
 80045d0:	9307      	strlt	r3, [sp, #28]
 80045d2:	bfb8      	it	lt
 80045d4:	9204      	strlt	r2, [sp, #16]
 80045d6:	7823      	ldrb	r3, [r4, #0]
 80045d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80045da:	d10a      	bne.n	80045f2 <_vfiprintf_r+0x156>
 80045dc:	7863      	ldrb	r3, [r4, #1]
 80045de:	2b2a      	cmp	r3, #42	@ 0x2a
 80045e0:	d132      	bne.n	8004648 <_vfiprintf_r+0x1ac>
 80045e2:	9b03      	ldr	r3, [sp, #12]
 80045e4:	1d1a      	adds	r2, r3, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	9203      	str	r2, [sp, #12]
 80045ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045ee:	3402      	adds	r4, #2
 80045f0:	9305      	str	r3, [sp, #20]
 80045f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046c8 <_vfiprintf_r+0x22c>
 80045f6:	7821      	ldrb	r1, [r4, #0]
 80045f8:	2203      	movs	r2, #3
 80045fa:	4650      	mov	r0, sl
 80045fc:	f7fb fdf0 	bl	80001e0 <memchr>
 8004600:	b138      	cbz	r0, 8004612 <_vfiprintf_r+0x176>
 8004602:	9b04      	ldr	r3, [sp, #16]
 8004604:	eba0 000a 	sub.w	r0, r0, sl
 8004608:	2240      	movs	r2, #64	@ 0x40
 800460a:	4082      	lsls	r2, r0
 800460c:	4313      	orrs	r3, r2
 800460e:	3401      	adds	r4, #1
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004616:	4829      	ldr	r0, [pc, #164]	@ (80046bc <_vfiprintf_r+0x220>)
 8004618:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800461c:	2206      	movs	r2, #6
 800461e:	f7fb fddf 	bl	80001e0 <memchr>
 8004622:	2800      	cmp	r0, #0
 8004624:	d03f      	beq.n	80046a6 <_vfiprintf_r+0x20a>
 8004626:	4b26      	ldr	r3, [pc, #152]	@ (80046c0 <_vfiprintf_r+0x224>)
 8004628:	bb1b      	cbnz	r3, 8004672 <_vfiprintf_r+0x1d6>
 800462a:	9b03      	ldr	r3, [sp, #12]
 800462c:	3307      	adds	r3, #7
 800462e:	f023 0307 	bic.w	r3, r3, #7
 8004632:	3308      	adds	r3, #8
 8004634:	9303      	str	r3, [sp, #12]
 8004636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004638:	443b      	add	r3, r7
 800463a:	9309      	str	r3, [sp, #36]	@ 0x24
 800463c:	e76a      	b.n	8004514 <_vfiprintf_r+0x78>
 800463e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004642:	460c      	mov	r4, r1
 8004644:	2001      	movs	r0, #1
 8004646:	e7a8      	b.n	800459a <_vfiprintf_r+0xfe>
 8004648:	2300      	movs	r3, #0
 800464a:	3401      	adds	r4, #1
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	4619      	mov	r1, r3
 8004650:	f04f 0c0a 	mov.w	ip, #10
 8004654:	4620      	mov	r0, r4
 8004656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800465a:	3a30      	subs	r2, #48	@ 0x30
 800465c:	2a09      	cmp	r2, #9
 800465e:	d903      	bls.n	8004668 <_vfiprintf_r+0x1cc>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0c6      	beq.n	80045f2 <_vfiprintf_r+0x156>
 8004664:	9105      	str	r1, [sp, #20]
 8004666:	e7c4      	b.n	80045f2 <_vfiprintf_r+0x156>
 8004668:	fb0c 2101 	mla	r1, ip, r1, r2
 800466c:	4604      	mov	r4, r0
 800466e:	2301      	movs	r3, #1
 8004670:	e7f0      	b.n	8004654 <_vfiprintf_r+0x1b8>
 8004672:	ab03      	add	r3, sp, #12
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	462a      	mov	r2, r5
 8004678:	4b12      	ldr	r3, [pc, #72]	@ (80046c4 <_vfiprintf_r+0x228>)
 800467a:	a904      	add	r1, sp, #16
 800467c:	4630      	mov	r0, r6
 800467e:	f7fd fda3 	bl	80021c8 <_printf_float>
 8004682:	4607      	mov	r7, r0
 8004684:	1c78      	adds	r0, r7, #1
 8004686:	d1d6      	bne.n	8004636 <_vfiprintf_r+0x19a>
 8004688:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800468a:	07d9      	lsls	r1, r3, #31
 800468c:	d405      	bmi.n	800469a <_vfiprintf_r+0x1fe>
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	059a      	lsls	r2, r3, #22
 8004692:	d402      	bmi.n	800469a <_vfiprintf_r+0x1fe>
 8004694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004696:	f7fe fad3 	bl	8002c40 <__retarget_lock_release_recursive>
 800469a:	89ab      	ldrh	r3, [r5, #12]
 800469c:	065b      	lsls	r3, r3, #25
 800469e:	f53f af1f 	bmi.w	80044e0 <_vfiprintf_r+0x44>
 80046a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80046a4:	e71e      	b.n	80044e4 <_vfiprintf_r+0x48>
 80046a6:	ab03      	add	r3, sp, #12
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	462a      	mov	r2, r5
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <_vfiprintf_r+0x228>)
 80046ae:	a904      	add	r1, sp, #16
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7fe f821 	bl	80026f8 <_printf_i>
 80046b6:	e7e4      	b.n	8004682 <_vfiprintf_r+0x1e6>
 80046b8:	08004cff 	.word	0x08004cff
 80046bc:	08004d09 	.word	0x08004d09
 80046c0:	080021c9 	.word	0x080021c9
 80046c4:	08004479 	.word	0x08004479
 80046c8:	08004d05 	.word	0x08004d05

080046cc <__swbuf_r>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	460e      	mov	r6, r1
 80046d0:	4614      	mov	r4, r2
 80046d2:	4605      	mov	r5, r0
 80046d4:	b118      	cbz	r0, 80046de <__swbuf_r+0x12>
 80046d6:	6a03      	ldr	r3, [r0, #32]
 80046d8:	b90b      	cbnz	r3, 80046de <__swbuf_r+0x12>
 80046da:	f7fe f9b9 	bl	8002a50 <__sinit>
 80046de:	69a3      	ldr	r3, [r4, #24]
 80046e0:	60a3      	str	r3, [r4, #8]
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	071a      	lsls	r2, r3, #28
 80046e6:	d501      	bpl.n	80046ec <__swbuf_r+0x20>
 80046e8:	6923      	ldr	r3, [r4, #16]
 80046ea:	b943      	cbnz	r3, 80046fe <__swbuf_r+0x32>
 80046ec:	4621      	mov	r1, r4
 80046ee:	4628      	mov	r0, r5
 80046f0:	f000 f82a 	bl	8004748 <__swsetup_r>
 80046f4:	b118      	cbz	r0, 80046fe <__swbuf_r+0x32>
 80046f6:	f04f 37ff 	mov.w	r7, #4294967295
 80046fa:	4638      	mov	r0, r7
 80046fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	6922      	ldr	r2, [r4, #16]
 8004702:	1a98      	subs	r0, r3, r2
 8004704:	6963      	ldr	r3, [r4, #20]
 8004706:	b2f6      	uxtb	r6, r6
 8004708:	4283      	cmp	r3, r0
 800470a:	4637      	mov	r7, r6
 800470c:	dc05      	bgt.n	800471a <__swbuf_r+0x4e>
 800470e:	4621      	mov	r1, r4
 8004710:	4628      	mov	r0, r5
 8004712:	f7ff fdf7 	bl	8004304 <_fflush_r>
 8004716:	2800      	cmp	r0, #0
 8004718:	d1ed      	bne.n	80046f6 <__swbuf_r+0x2a>
 800471a:	68a3      	ldr	r3, [r4, #8]
 800471c:	3b01      	subs	r3, #1
 800471e:	60a3      	str	r3, [r4, #8]
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	6022      	str	r2, [r4, #0]
 8004726:	701e      	strb	r6, [r3, #0]
 8004728:	6962      	ldr	r2, [r4, #20]
 800472a:	1c43      	adds	r3, r0, #1
 800472c:	429a      	cmp	r2, r3
 800472e:	d004      	beq.n	800473a <__swbuf_r+0x6e>
 8004730:	89a3      	ldrh	r3, [r4, #12]
 8004732:	07db      	lsls	r3, r3, #31
 8004734:	d5e1      	bpl.n	80046fa <__swbuf_r+0x2e>
 8004736:	2e0a      	cmp	r6, #10
 8004738:	d1df      	bne.n	80046fa <__swbuf_r+0x2e>
 800473a:	4621      	mov	r1, r4
 800473c:	4628      	mov	r0, r5
 800473e:	f7ff fde1 	bl	8004304 <_fflush_r>
 8004742:	2800      	cmp	r0, #0
 8004744:	d0d9      	beq.n	80046fa <__swbuf_r+0x2e>
 8004746:	e7d6      	b.n	80046f6 <__swbuf_r+0x2a>

08004748 <__swsetup_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4b29      	ldr	r3, [pc, #164]	@ (80047f0 <__swsetup_r+0xa8>)
 800474c:	4605      	mov	r5, r0
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	460c      	mov	r4, r1
 8004752:	b118      	cbz	r0, 800475c <__swsetup_r+0x14>
 8004754:	6a03      	ldr	r3, [r0, #32]
 8004756:	b90b      	cbnz	r3, 800475c <__swsetup_r+0x14>
 8004758:	f7fe f97a 	bl	8002a50 <__sinit>
 800475c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004760:	0719      	lsls	r1, r3, #28
 8004762:	d422      	bmi.n	80047aa <__swsetup_r+0x62>
 8004764:	06da      	lsls	r2, r3, #27
 8004766:	d407      	bmi.n	8004778 <__swsetup_r+0x30>
 8004768:	2209      	movs	r2, #9
 800476a:	602a      	str	r2, [r5, #0]
 800476c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004770:	81a3      	strh	r3, [r4, #12]
 8004772:	f04f 30ff 	mov.w	r0, #4294967295
 8004776:	e033      	b.n	80047e0 <__swsetup_r+0x98>
 8004778:	0758      	lsls	r0, r3, #29
 800477a:	d512      	bpl.n	80047a2 <__swsetup_r+0x5a>
 800477c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800477e:	b141      	cbz	r1, 8004792 <__swsetup_r+0x4a>
 8004780:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004784:	4299      	cmp	r1, r3
 8004786:	d002      	beq.n	800478e <__swsetup_r+0x46>
 8004788:	4628      	mov	r0, r5
 800478a:	f7ff f8b5 	bl	80038f8 <_free_r>
 800478e:	2300      	movs	r3, #0
 8004790:	6363      	str	r3, [r4, #52]	@ 0x34
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004798:	81a3      	strh	r3, [r4, #12]
 800479a:	2300      	movs	r3, #0
 800479c:	6063      	str	r3, [r4, #4]
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	f043 0308 	orr.w	r3, r3, #8
 80047a8:	81a3      	strh	r3, [r4, #12]
 80047aa:	6923      	ldr	r3, [r4, #16]
 80047ac:	b94b      	cbnz	r3, 80047c2 <__swsetup_r+0x7a>
 80047ae:	89a3      	ldrh	r3, [r4, #12]
 80047b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047b8:	d003      	beq.n	80047c2 <__swsetup_r+0x7a>
 80047ba:	4621      	mov	r1, r4
 80047bc:	4628      	mov	r0, r5
 80047be:	f000 f883 	bl	80048c8 <__smakebuf_r>
 80047c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c6:	f013 0201 	ands.w	r2, r3, #1
 80047ca:	d00a      	beq.n	80047e2 <__swsetup_r+0x9a>
 80047cc:	2200      	movs	r2, #0
 80047ce:	60a2      	str	r2, [r4, #8]
 80047d0:	6962      	ldr	r2, [r4, #20]
 80047d2:	4252      	negs	r2, r2
 80047d4:	61a2      	str	r2, [r4, #24]
 80047d6:	6922      	ldr	r2, [r4, #16]
 80047d8:	b942      	cbnz	r2, 80047ec <__swsetup_r+0xa4>
 80047da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80047de:	d1c5      	bne.n	800476c <__swsetup_r+0x24>
 80047e0:	bd38      	pop	{r3, r4, r5, pc}
 80047e2:	0799      	lsls	r1, r3, #30
 80047e4:	bf58      	it	pl
 80047e6:	6962      	ldrpl	r2, [r4, #20]
 80047e8:	60a2      	str	r2, [r4, #8]
 80047ea:	e7f4      	b.n	80047d6 <__swsetup_r+0x8e>
 80047ec:	2000      	movs	r0, #0
 80047ee:	e7f7      	b.n	80047e0 <__swsetup_r+0x98>
 80047f0:	2000000c 	.word	0x2000000c

080047f4 <_raise_r>:
 80047f4:	291f      	cmp	r1, #31
 80047f6:	b538      	push	{r3, r4, r5, lr}
 80047f8:	4605      	mov	r5, r0
 80047fa:	460c      	mov	r4, r1
 80047fc:	d904      	bls.n	8004808 <_raise_r+0x14>
 80047fe:	2316      	movs	r3, #22
 8004800:	6003      	str	r3, [r0, #0]
 8004802:	f04f 30ff 	mov.w	r0, #4294967295
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800480a:	b112      	cbz	r2, 8004812 <_raise_r+0x1e>
 800480c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004810:	b94b      	cbnz	r3, 8004826 <_raise_r+0x32>
 8004812:	4628      	mov	r0, r5
 8004814:	f000 f830 	bl	8004878 <_getpid_r>
 8004818:	4622      	mov	r2, r4
 800481a:	4601      	mov	r1, r0
 800481c:	4628      	mov	r0, r5
 800481e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004822:	f000 b817 	b.w	8004854 <_kill_r>
 8004826:	2b01      	cmp	r3, #1
 8004828:	d00a      	beq.n	8004840 <_raise_r+0x4c>
 800482a:	1c59      	adds	r1, r3, #1
 800482c:	d103      	bne.n	8004836 <_raise_r+0x42>
 800482e:	2316      	movs	r3, #22
 8004830:	6003      	str	r3, [r0, #0]
 8004832:	2001      	movs	r0, #1
 8004834:	e7e7      	b.n	8004806 <_raise_r+0x12>
 8004836:	2100      	movs	r1, #0
 8004838:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800483c:	4620      	mov	r0, r4
 800483e:	4798      	blx	r3
 8004840:	2000      	movs	r0, #0
 8004842:	e7e0      	b.n	8004806 <_raise_r+0x12>

08004844 <raise>:
 8004844:	4b02      	ldr	r3, [pc, #8]	@ (8004850 <raise+0xc>)
 8004846:	4601      	mov	r1, r0
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	f7ff bfd3 	b.w	80047f4 <_raise_r>
 800484e:	bf00      	nop
 8004850:	2000000c 	.word	0x2000000c

08004854 <_kill_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4d07      	ldr	r5, [pc, #28]	@ (8004874 <_kill_r+0x20>)
 8004858:	2300      	movs	r3, #0
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	f7fd fb18 	bl	8001e96 <_kill>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	d102      	bne.n	8004870 <_kill_r+0x1c>
 800486a:	682b      	ldr	r3, [r5, #0]
 800486c:	b103      	cbz	r3, 8004870 <_kill_r+0x1c>
 800486e:	6023      	str	r3, [r4, #0]
 8004870:	bd38      	pop	{r3, r4, r5, pc}
 8004872:	bf00      	nop
 8004874:	2000049c 	.word	0x2000049c

08004878 <_getpid_r>:
 8004878:	f7fd bb05 	b.w	8001e86 <_getpid>

0800487c <__swhatbuf_r>:
 800487c:	b570      	push	{r4, r5, r6, lr}
 800487e:	460c      	mov	r4, r1
 8004880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004884:	2900      	cmp	r1, #0
 8004886:	b096      	sub	sp, #88	@ 0x58
 8004888:	4615      	mov	r5, r2
 800488a:	461e      	mov	r6, r3
 800488c:	da0d      	bge.n	80048aa <__swhatbuf_r+0x2e>
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004894:	f04f 0100 	mov.w	r1, #0
 8004898:	bf14      	ite	ne
 800489a:	2340      	movne	r3, #64	@ 0x40
 800489c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80048a0:	2000      	movs	r0, #0
 80048a2:	6031      	str	r1, [r6, #0]
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	b016      	add	sp, #88	@ 0x58
 80048a8:	bd70      	pop	{r4, r5, r6, pc}
 80048aa:	466a      	mov	r2, sp
 80048ac:	f000 f848 	bl	8004940 <_fstat_r>
 80048b0:	2800      	cmp	r0, #0
 80048b2:	dbec      	blt.n	800488e <__swhatbuf_r+0x12>
 80048b4:	9901      	ldr	r1, [sp, #4]
 80048b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80048ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048be:	4259      	negs	r1, r3
 80048c0:	4159      	adcs	r1, r3
 80048c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048c6:	e7eb      	b.n	80048a0 <__swhatbuf_r+0x24>

080048c8 <__smakebuf_r>:
 80048c8:	898b      	ldrh	r3, [r1, #12]
 80048ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048cc:	079d      	lsls	r5, r3, #30
 80048ce:	4606      	mov	r6, r0
 80048d0:	460c      	mov	r4, r1
 80048d2:	d507      	bpl.n	80048e4 <__smakebuf_r+0x1c>
 80048d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	6123      	str	r3, [r4, #16]
 80048dc:	2301      	movs	r3, #1
 80048de:	6163      	str	r3, [r4, #20]
 80048e0:	b003      	add	sp, #12
 80048e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e4:	ab01      	add	r3, sp, #4
 80048e6:	466a      	mov	r2, sp
 80048e8:	f7ff ffc8 	bl	800487c <__swhatbuf_r>
 80048ec:	9f00      	ldr	r7, [sp, #0]
 80048ee:	4605      	mov	r5, r0
 80048f0:	4639      	mov	r1, r7
 80048f2:	4630      	mov	r0, r6
 80048f4:	f7ff f874 	bl	80039e0 <_malloc_r>
 80048f8:	b948      	cbnz	r0, 800490e <__smakebuf_r+0x46>
 80048fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048fe:	059a      	lsls	r2, r3, #22
 8004900:	d4ee      	bmi.n	80048e0 <__smakebuf_r+0x18>
 8004902:	f023 0303 	bic.w	r3, r3, #3
 8004906:	f043 0302 	orr.w	r3, r3, #2
 800490a:	81a3      	strh	r3, [r4, #12]
 800490c:	e7e2      	b.n	80048d4 <__smakebuf_r+0xc>
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	6020      	str	r0, [r4, #0]
 8004912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004916:	81a3      	strh	r3, [r4, #12]
 8004918:	9b01      	ldr	r3, [sp, #4]
 800491a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800491e:	b15b      	cbz	r3, 8004938 <__smakebuf_r+0x70>
 8004920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004924:	4630      	mov	r0, r6
 8004926:	f000 f81d 	bl	8004964 <_isatty_r>
 800492a:	b128      	cbz	r0, 8004938 <__smakebuf_r+0x70>
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f023 0303 	bic.w	r3, r3, #3
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	81a3      	strh	r3, [r4, #12]
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	431d      	orrs	r5, r3
 800493c:	81a5      	strh	r5, [r4, #12]
 800493e:	e7cf      	b.n	80048e0 <__smakebuf_r+0x18>

08004940 <_fstat_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4d07      	ldr	r5, [pc, #28]	@ (8004960 <_fstat_r+0x20>)
 8004944:	2300      	movs	r3, #0
 8004946:	4604      	mov	r4, r0
 8004948:	4608      	mov	r0, r1
 800494a:	4611      	mov	r1, r2
 800494c:	602b      	str	r3, [r5, #0]
 800494e:	f7fd fb02 	bl	8001f56 <_fstat>
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	d102      	bne.n	800495c <_fstat_r+0x1c>
 8004956:	682b      	ldr	r3, [r5, #0]
 8004958:	b103      	cbz	r3, 800495c <_fstat_r+0x1c>
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	bd38      	pop	{r3, r4, r5, pc}
 800495e:	bf00      	nop
 8004960:	2000049c 	.word	0x2000049c

08004964 <_isatty_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	4d06      	ldr	r5, [pc, #24]	@ (8004980 <_isatty_r+0x1c>)
 8004968:	2300      	movs	r3, #0
 800496a:	4604      	mov	r4, r0
 800496c:	4608      	mov	r0, r1
 800496e:	602b      	str	r3, [r5, #0]
 8004970:	f7fd fb01 	bl	8001f76 <_isatty>
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	d102      	bne.n	800497e <_isatty_r+0x1a>
 8004978:	682b      	ldr	r3, [r5, #0]
 800497a:	b103      	cbz	r3, 800497e <_isatty_r+0x1a>
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	bd38      	pop	{r3, r4, r5, pc}
 8004980:	2000049c 	.word	0x2000049c

08004984 <_init>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr

08004990 <_fini>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr
